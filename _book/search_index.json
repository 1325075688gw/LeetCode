{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["04","14","2019","20:15:29","copyright","gitbook该文件修订时间：","introduct","leetcode刷题（python）","reserved，pow","right","©","何去何从gw","前言"],"临时草稿.html":["!=","\"\"","\"\"\"","#","'","''","')","'.join(each[::","'.join(s[::","(l+r)","(tmp[num]","+","/","//","0","04","0:","1)","1):","1.题目","14","1]","1])","1].split()[::","2","2.分析","2019","20:15:30","3.代码",":",":rtype:",":type","=","==","=='",">","[]","[x","__init__(self,","a.append(a[i]*nums[i])","a.next","a.val","a:","a=[1]","a[head]","an","b","b)","b):","b.append(b[i]*nums[","b.next","b.val:","b:","b=[1]","bool","ch","ch:","class","copyright","cur","cur.next","cur.val","deal(0,","deal(l,","deal(middle+1,","def","definit","detectcycle(self,","dic.keys()","dic:","dic={}","dic[x]+=1","dic[x]=1","dic[x]>n/3]","each","else:","end:","end=none):","fals","findmediansortedarrays(self,","get_right(head,","gitbook该文件修订时间：","head","head):","head.next","head:","int","is_inc","isvalid(self,","l","last_val","left","left,","len(lists)","len(stack)","len(tmp)","link","list.","list[int]","list[listnode]","listnod","listnode(0)","listnode:","lists):","lists:","lists[0]","m","m.get(ch)","majorityelement(self,","merge(a,","mergeklists(self,","middl","middle)","n","n=len(nums)","none","none)","num","nums):","nums1","nums1,","nums1.extend(nums2)","nums2","nums2):","nums:","nums[left]","pair","pair[tch]","partition(nums,","r)","r):","r:","range(len(a)):","range(len(nums)","re","res.append(a[i]*b[","res=[]","reserved，pow","return","right","right):","s):","s.split('","s:","s[::","self.next","self.val","singli","solution(object):","solution:","sort(head,","stack","stack.insert(0,ch)","stack.pop(0)","str","tch","tmp","tmp)","tmp.sort()","tmp[~num])","true","x","x):","{'{':'}','[':']','(':')'}","{'{':0,'[':0,'(':0,')':1,'}':1,']':1}","{}","©","​","临时草稿","何去何从gw","检测是否有序并寻找右侧节点","经过分析知道","经过分析知道,当left==right，调整已经完整，以tmp为界限的数组左边比右边小，所以我们当left","采用分治法"],"LeetCode刷题优先顺序.html":["(atoi)","04","1","10","100","101","102","103","104","105","106","107","108","109","11","110","111","112","113","114","115","116","117","118","119","12","120","121","122","123","124","125","126","127","128","129","13","130","131","132","14","15","16","17","18","19","2","20","2019","20:15:26","21","22","23","24","25","26","27","28","29","2d","3","30","31","32","33","34","35","36","37","38","39","3sum","4","40","41","42","43","44","45","46","47","48","49","4sum","5","50","51","52","53","54","55","56","57","58","59","6","60","61","62","63","64","65","66","67","68","69","7","70","71","72","73","74","75","76","77","78","79","8","80","81","82","83","84","85","86","87","88","89","9","90","91","92","93","94","95","96","97","98","99","add","address","algorithm","anagram","array","balanc","best","bf","binari","black","buy","charact","climb","closest","code","color","combin","common","concaten","consecut","construct","contain","convers","convert","copyright","count","data","decod","depth","df","diff","distanc","distinct","divid","dp","duplic","each","edit","element","end","express","first","flatten","freq","game","gener","gitbook该文件修订时间：","graph","gray","greedi","group","hash","hashtabl","heap","histogram","id","ii","iii","imag","implement","inord","insert","integ","interleav","interv","ip","jump","justif","k","kmp","ladder","largest","last","leaf","leetcode刷题优先顺序","leetcode刷题顺序","length","letter","level","link","list","longest","match","math","matrix","maxim","maximum","median","merg","minimum","miss","morri","multipli","n","n)","next","node","nth","number","on","order","pair","palindrom","parenthes","partit","pascal'","path","permut","phone","plu","pointer","popul","posit","postord","pow(x,","prefix","preorder","queen","question","queue","rain","rang","recov","rectangl","recurs","red","region","regular","remov","repeat","reserved，pow","restor","revers","right","roll","roman","root","rotat","same","scrambl","search","sell","sequenc","set","shortest","simplifi","solver","sort","spiral","sqrt(x)","stack","stair","stock","string","strstr()","structur","subarray","subsequ","subset","substr","sudoku","sum","surround","swap","symmetr","t","text","time","tr","trap","travers","tree","triangl","two","uniqu","valid","water","way","wildcard","window","without","word","zero","zigzag","©","何去何从gw"],"数字运算/":["00:43:19","07","08","2019","copyright","gitbook该文件修订时间：","reserved，pow","right","©","何去何从gw","数字运算"],"数字运算/2的幂_LeetCode_231.html":["04","1","1.题目","14","16","1:","1操作，就会是0；","1的二进制数一定会是当前位变为0，其他位全是1，这样n与n","2","2.分析","20","2019","20:15:26","218","231)","24","2:","2的幂(leetcod","2的幂_leetcode_231","3.代码","3:","=",">","bool:","copyright","def","fals","gitbook该文件修订时间：","if(n","int)","ispoweroftwo(self,","n:","reserved，pow","right","true","©","从二进制上看，2的幂一定是这样的形式：整个二进制数上只有一位是1，其他位全是0；","何去何从gw","如果有两个1，一定不是2的幂）","此时，n","的幂次方。","示例","给定一个整数，编写一个函数来判断它是否是","解释:","输入:","输出:"],"数字运算/只出现一次的数字.html":["#","+=","0","04","1","1.题目","14","1:","2.分析","2019","20:16:41","2:","3.1异或解决","3.2常规解决","3.代码","4","=","==","==1,bag)",">","[2,2,1]","[4,1,2,1,2]","^","a.__next__()","bag","bag:","bag[i]","copyright","def","else:","filter(lambda","gitbook该文件修订时间：","int:","list[int])","num","nums):","nums:","reserved，pow","return","right","singlenumber(self,","x:bag[x]","{}","©","何去何从gw","你可以不使用额外空间来实现吗？","你的算法应该具有线性时间复杂度。","只出现一次的数字","异或解决","示例","给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。","说明：","输入:","输出:"],"数字运算/求众数 LeetCode 169.html":["#","+","+=","0","04","0:","1","1.题目","14","169)","169.md","1:","1。与当前大多数不同，得分为0，所以设置当前大多数","1。与当前大多数相同，得分","1。当前大多数是1，得分置1","1，得分为0，当前大多数","1，得分为2，当前大多数","1，得分置1","2","2.分析","2019","20:17:03","2:","2。与当前大多数不同，得分","3","3.代码","=","==",">","[2,2,1,1,1,2,2]","[3,2,3]","bag","bag.get)","bag:","bag[i]","collect","copyright","count","counter","counter(nums).most_common(1)","counter模块","def","elif","else:","gitbook该文件修订时间：","i,","i:count+=1","import","int:","list[int])","majorityelement(self,","max(bag,key","most_val","most_val[0][0]","n","n/2","none,","num","num,","nums):","nums.sort()","nums:","nums[len(nums)//2]","reserved，pow","return","right","{}","©","⌊","⌋","众数是指在数组中出现次数大于n/2","何去何从gw","你可以假设数组是非空的，并且给定的数组总是存在众数。","假设数组是：[1,2,1,1,2,1]。算法步骤如下：","假设有这样一个场景：票选村长，每人可投一票，我们将候选村长从1开始编号，村民们在票上写上候选村长的编号即可完成投票。那么最后统计的票可形成一个整型数组。那么谁是村长呢？票数过半的那个人。","利用n/2条件","可以感受得到，算法会保存一个当前大多数，和得分，当遇到一个数不是当前大多数时，得分会减一，当减到0时，大多数会发生改变，并且重置得分为1。","字典","我们一直有一个条件没有使用","摩尔投票算法","摩尔投票算法可以快速的计算出一个数组中出现次数过半的数即大多数（majority），算法核心思想是同加，异减。我们举个例子。","摩根投票法","求众数(leetcod","求众数_leetcod","的元素。","的元素。那么问题就很容易了，我们可以先将nums排序，然后返回中间元素的值即可（众数的个数大于一半，排好序的nums中间元素一定是众数）","的数组，找到其中的众数。众数是指在数组中出现次数大于","示例","给定一个大小为","输入:","输出:","这意味着1是这个数组中出现次数过半的数。","这里需要区分的是，摩尔算法不能用来得到众数（mode），例如数组：[1,1,1,2,2,3,3,4,4]，摩尔算法得出最后的结果应该是4，但4并不是众数，可是显然4也不是大多数，那是因为，大多数是指出现次数过半的数，而这个数组中没有这样的数，所以摩尔算法是是失效的，对于这种情况采取需要重新投票。","，得分为1，当前大多数"],"数字运算/求众数 II LeetCode 229.html":["\"\"\"","#","+=","0","0,","04","0:","1","1,","1.题目","14","1:","2","2.分析","2019","20:17:03","229","229)","2:","3.代码",":rtype:",":type","=","==",">","[1,1,1,3,3,2,2,2]","[1,2]","[1]","[3,2,3,2,3,2,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1]","[3,2,3]","[3]","[]","a,","a:","an","ans.append(a)","ans.append(b)","b)","b,","b:","ca","ca,","cb","cb,","copyright","def","elif","else:","gitbook该文件修订时间：","i,","ii","ii(leetcod","int","leetcod","len(nums)//3:","list[int]","majorityelement(self,","n","n/3","none,","nums):","nums:","o(1)。","o(n)，空间复杂度为","print(a,","reserved，pow","return","right","stdout","©","⌊","⌋","不检验的结果","何去何从gw","如果我们在使用摩尔算法时，同时记录两个大多数，会怎么样呢？直觉告诉我，这会得到一个大多数，和一个出现次数仅次于大多数的数，但是这两个数不一定会比数组长的1/3大","所以我们得到它们后，还需要检查它们出现的次数是否符合条件。","摩根投票法","次的元素。","求众数","的数组，找出其中所有出现超过","示例","给定一个大小为","要求算法的时间复杂度为","说明:","输入","输入:","输出","输出:","预期结果"],"数字运算/整数反转 LeetCode 7.html":["'","''.join(list(reversed(x)))","'+str_x","':","'int')","'int':","(2**31","0","04","0。","1):","1.题目","120","123","14","1:","1]。请根据这个假设，如果反转后整数溢出那么就返回","2.分析","2019","20:16:59","21","231","2:","3.代码","32","321","3:","7","7)","=","==",">","[−231,","copyright","def","else:","gitbook该文件修订时间：","int(str_x)","leetcod","reserved，pow","return","reverse(self,","right","str(x)","str_x","x","x:","x[0]","x[1:]","©","−","位的有符号整数，你需要将这个整数中每位上的数字进行反转。","位的有符号整数，则其数值范围为","何去何从gw","假设我们的环境只能存储得下","整数反转","整数反转(leetcod","注意:","示例","给出一个","输入:","输出:"],"数字运算/格雷编码_LeetCode_89.html":["#",".assets\\20180703120635594.png)",".assets\\2018070312065295.png)","0","00","01","04","1","1.题目","10","11","14","1:","1。","2","2.分析","20","2019","20:17:02","2:","2n。当","3","3.代码","89)","=",">","[0,1,3,2]","[0]","[0]。","[]","copyright","def","gitbook该文件修订时间：","graycode(self,","int)","list[int]:","n","n:","n，其格雷编码序列并不唯一。","n，打印其格雷编码序列。格雷编码序列必须以","print(res)","range(2**n):","re","res.append(i^(i>>1))","reserved，pow","return","right","©","也是一个有效的格雷编码序列。","何去何从gw","例如，[0,2,3,1]","因此，当","对于给定的","开头。","我们定义格雷编码序列必须以","时，其格雷编码序列为","时，长度为","格雷编码(leetcod","格雷编码_leetcode_89","格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。","的格雷编码序列，其长度为","示例","给定一个代表编码总位数的非负整数","给定编码总位数为","解释:","输入:","输出:"],"数字运算/两数相除_LeeetCode_29.html":["(dividend","(divisor","(每次减去一个除数，统计可以减去多少个除数)","(除数倍增法)","+","+=","0","0)","0,","07","0。","1","1.题目","10,","12:26:00","16=13，第二次循环时因为此时的13小于8的二倍(tmp_c","1:","1]。本题中，如果除法结果溢出，则返回","1。","2","2**31)","2*2....后面继续判断,不赘述了)同时扩大二倍(左移)，并将返回值加上tmp_res，除数减去tmp_res。","2.分析","2019","231","24","2:","3","3.代码","32","4","7,","=","==",">",">=","[−231,","^","abs(dividend)","abs(dividend),","abs(divisor)","b","bc","bcs,","bcs>=(tmp_c","bcs>=(tmp_cs+tmp_cs):","class","copyright","cs","cs,","cs,1","cs:","def","divide(self,","dividend","dividend,","dividend:","divisor","divisor):","divisor:","divisor。将两数相除，要求不使用乘法、除法和","gitbook该文件修订时间：","i,","int)","int,","int:","max(res,","mod","re","reserved，pow","return","right","sign","solution:","tmp_c","tmp_cs,","tmp_re","©","−","两数相除(leetcode_29)","两数相除_leeetcode_29","位有符号整数。","位有符号整数，其数值范围是","何去何从gw","假设我们的环境只能存储","和除数","当被除数大于等于除数时(否则的话就为0了),我们设置两个变量tmp_cs和tmp_res,并分别初始化为临时除数(除数后面会变化,过一会就知道了)和1(最小的情况),当被除数大于等于tmp_cs的二倍时bcs>=(tmp_cs=8*2,所以我们有两个8,所以tmp_res扩大两倍,除数也变为原来两倍16,继续循环,被除数47>=16*2,所以tmp_r","得到的商。","拿十进制举例:29除以8，8扩大二倍，16小于29，再扩大二倍，超过29，于是29减去之前的16(我们保存了的)，返回值加上2(因为现在我们除的是16,16是8的2倍)。剩余除数为29","明确一点,10进制数扩大两倍,左移一位","暴力法","示例","移位法","给定两个整数，被除数","被除数和除数均为","说明:","输入:","输出:","运算符。","返回被除数","除以除数","除数不为","除数倍增法"],"数字运算/10进制转化为其它进制.html":["#","#n为待转换的十进制数，x为想转为的进制，取值为2","07","0:","0b101","0o5","0x5","10进制转化为其它进制","12:10:32","16","1:","2,0","2019","26","=","==","[]","a=[0,1,2,3,4,5,6,7,8,9,'a','b','c','d','e','f']","b","b.append(y)","b.reverse()","b:","bin(dec))","break","copyright","dec","dec)","def","divmod","divmod(6,3)","f(26,16)","f(n,x):","gitbook该文件修订时间：","hex(dec))","int(input(\"输入数字：\"))","n","n%x","n//x","oct(dec))","print(\"十进制数为：\",","print(\"转换为二进制为：\",","print(\"转换为八进制为：\",","print(\"转换为十六进制为：\",","print(a[i],end='')","print(b)","python3","reserved，pow","right","s","test.pi","y","©","何去何从gw","余数","保存商和余数，知道商为0为止，再将余数反转。","十进制数为：5","同时算出商和余数","商","方法非常简单，就是利用辗转相除发，","用列表a=[0,1,2,3,4,5,6,7,8,9,’a’,’b’,’c’,’d’,’e’,’f’]储存转换之后的每一位，直接用余数作为指针即可找到对应的符号。","系统自带方法","结果：","转换为二进制为：","转换为八进制为：","转换为十六进制为：","输入数字：5"],"数字运算/二进制求和_LeetCode_67.html":["\"1\"","\"100\"","\"1010\",","\"10101\"","\"1011\"","\"11\",","''","+","0","08","0。","1","1.题目","15","15:25:09","1:","2)","2.分析","2019","2:","3.代码","=",">","a:","a[a_len]","a_len","a_len>0","a_len>=0","addbinary(self,","b","b:","b[b_len]","b_len","b_len>0","b_len>=0","bin(a+b)[2:]","class","copyright","def","divmod(int(i)+int(j)+tmp,","gitbook该文件修订时间：","int(a,","int(b,","j","len(a)","len(b)","re","reserved，pow","return","right","s","s,i","solution:","str(y)","str)","str,","str:","tmp","tmp:","©","二进制求和","二进制求和_leetcode_67","何去何从gw","和","法一","法一：将2进制数转为10进制计算，然后转化为二进制","法二","法二：模仿10进制，字符串相加，这儿我们同样可以将直接利用字符串，也可以将字符串先转化为列表。","示例","给定两个二进制字符串，返回他们的和（用二进制表示）。","输入:","输入为非空字符串且只包含数字","输出:"],"数字运算/输出1+2+...+n_短路原理.html":["08","1)","18","2019","21:27:17","=","b，a为false，返回a，a为true，就返回b","class","copyright","def","gitbook该文件修订时间：","n","n):","re","res+tmp","reserved，pow","return","right","self.sum_solution(n","solution:","sum_solution(self,","tmp","©","何去何从gw","求1+2+3+...+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（a?b:c）。","要注意python中逻辑运算符的用法，a","输出1+2+...+n_短路原理"],"数字运算/打印1~n,短路原理.html":["&","08","1","1)","18","1，2，3，4，5，6","2019","21:34:54","6,5,4,3,2,1","=","copyright","def","func(6)","func(n","func(n):","gitbook该文件修订时间：","n","print(n)","print(res+1)","re","reserved，pow","right","©","何去何从gw","倒序输出","打印1~n,短路原理","正序输出","输出："],"数字运算/数组中只出现一次的数_两个.html":["#","*","+=","0","00:10:51","08","1","19","1、思路","2019","8","=","==0:",">>=","[a,b]","^=","array):","array:","b","break","class","code","coding:utf","copyright","def","else:","findnumsappearonce(self,","gitbook该文件修订时间：","here","i>>index&1==1:","index","re","res&1","reserved，pow","return","right","solution:","true:","write","©","一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。","一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是o(n)，空间复杂度是o(1)。","举例：{2,4,3,6,3,2,5,5}","二、题目","何去何从gw","其中ab是出现一次的两个数字","大家首先想到的是顺序扫描法，但是这种方法的时间复杂度是o（n^2）。接着大家又会考虑用哈希表的方法，但是空间复杂度不是o（1）。","应该怎么做才能即满足时间复杂度是o（n）又满足空间复杂度是o（1）的要求呢？","我们依次对数组中的每个数字做异或运行之后，得到的结果用二进制表示是0010。异或得到结果中的倒数第二位是1，于是我们根据数字的倒数第二位是不是1分为两个子数组。第一个子数组{2,3,6,3,2}中所有数字的倒数第二位都是1，而第二个子数组{4,5,5}中所有数字的倒数第二位都是0。接下来只要分别两个子数组求异或，就能找到第一个子数组中只出现一次的数字是6，而第二个子数组中只出现一次的数字是4。","我们先不看找到俩个的情况，先看这样一个问题，如何在一个数组中找到一个只出现一次的数字呢？比如数组：{4,5,5}，唯一一个只出现一次的数字是4。","我们可以想一想“异或”运算的一个性质，我们直接举例说明。","我们知道异或的一个性质是：任何一个数字异或它自己都等于0。也就是说，如果我们从头到尾依次异或数组中的每一个数字，那么最终的结果刚好是那个只出现一次的数字。比如数组{4,5,5}，我们先用数组中的第一个元素4（二进制形式：0100）和数组中的第二个元素5（二进制形式：0101）进行异或操作，0100和0101异或得到0001，用这个得到的元素与数组中的三个元素5（二进制形式：0101）进行异或操作，0001和0101异或得到0100，正好是结果数字4。这是因为数组中相同的元素异或是为0的，因此就只剩下那个不成对的孤苦伶仃元素。","我们还是从头到尾一次异或数组中的每一个数字，那么最终得到的结果就是两个只出现一次的数组的异或结果。因为其他数字都出现了两次，在异或中全部抵消了。由于两个数字肯定不一样，那么异或的结果肯定不为0，也就是说这个结果数组的二进制表示至少有一个位为1。我们在结果数组中找到第一个为1的位的位置，记为第n位。现在我们以第n位是不是1为标准把元数组中的数字分成两个子数组，第一个子数组中每个数字的第n位都是1，而第二个子数组中每个数字的第n位都是0。","数组中只出现一次的数_两个","现在好了，我们已经知道了如何找到一个数组中找到一个只出现一次的数字，那么我们如何在一个数组中找到两个只出现一次的数字呢？如果，我们可以将原始数组分成两个子数组，使得每个子数组包含一个只出现一次的数字，而其他数字都成对出现。这样，我们就可以用上述方法找到那个孤苦伶仃的元素。","返回[a,b]","这个数组中只出现一次的两个数分别是4和6。怎么找到这个两个数字呢？","题目描述"],"栈/":["00:43:19","07","08","2019","copyright","gitbook该文件修订时间：","reserved，pow","right","©","何去何从gw","栈"],"栈/逆波兰表达式.html":["\"","\"\"\"","\"*\",","\"*\":","\"*\"]","\"+\",","\"+\":","\"+\"]","\",","\"/\",","\"/\":","\"/\"]","\"1\",","\"13\",","\"17\",","\"3\",","\"5\",","\"6\",","\"9\",","\":","#","':","((10","((2","((9","(0","(12","(13","(4","(6","(扫描到的s[i]是开括号'(')","(扫描到的s[i]是操作数data)","(扫描到的s[i]是操作符op)","(扫描到的s[i]是闭括号')')","(扫描结束而栈中还有操作符)","(栈为空","*","*,","+","+,","+ab","+ab'*ef,继续+ab'，依此类推。","+abc'ef",",","/","0","0)","07","1)","1.中缀表达式","1.从左往右扫描中缀表达式串s，对于每一个操作数或操作符，执行以下操作;","1.从左至右扫描表达式，如果一个操作符后面跟着两个操作数时，则计算，然后将结果作为操作数替换(这个操作符和两个操作数)，","1.题目","11\",","11)))","132))","17","17)","1：","2.if","2.分析","2.前缀缀表达式","2.由1.知，要多遍扫描表达式，并且需要将3个字符替换成1个，比较繁锁，我们可以用一个栈s2来实现计算，扫描从右往左进行，","2019","22","23:46:56","2：","3)","3.","3.if","3.代码1","3：","4.while","4.中缀表达式转换成后缀表达式","5","5))","5.if","5.中缀表达式转换成前缀表达式","6","6.返回第1.步","7.while","9",":rtype:",":type","=",">","[\"+\",","[\"10\",","[\"2\",","[\"4\",","[]","b","begin:","break;","c","cdef，扫描到","cd时，会计算c","char","class","copyright","d","d)","d=c',表达式变成：","def","e","ef为例：","else:","end","evalrpn(self,","f","gitbook该文件修订时间：","i=='","i=='*':","i=='+':","i=='/':","import","int","int(stack.pop())","int:","list()","list[str]","list[str])","op","op:","oper","operator.add,","operator.mul,","operator.sub,","operator.truediv}","ops:","process","reserved，pow","return","right","solution:","stack","stack.append(int(char))","stack.append(int(i))","stack.append(int(t2/t1))","stack.append(ops[char](t2,","stack.append(t2","stack.append(t2*t1)","stack.append(t2+t1)","stack.pop()","t1","t1)","t1))","t2","tokens):","tokens:","{","©","​","。每个运算对象可以是整数，也可以是另一个逆波兰表达式。","一部分算完结果，再放进去，然后继续后面的计算（链表也许可以，但是，代价也是不菲）。","中缀表达式转换成前缀表达式和中缀表达式转换成后缀表达式十分类似，只需要将扫描方向由前往后变成由后往前，","人类最熟悉的一种表达式1+2，(1+2)*3，3+4*2+4等等都是中缀表示法。对于人们来说，也是最直观的一种求值方式，先算括号里的，","从理论上讲，已知一棵二叉树的中序遍历序列，要求出它的后序遍历序列是不唯一的，即文法是有多义性的。但是，在这","代码2","何去何从gw","其中一个栈用来预处理：将字符串倒序压进栈中。","出栈至输出串中","则中缀表达式得名于它是由相应的语法树的中序遍历的结果得到的。","前缀表达式又叫做波兰式。同样的道理，表达式的前缀表达式是由相应的语法树的前序遍历的结果得到的。","后缀表达式","后缀表达式又叫做逆波兰式。它是由相应的语法树的后序遍历的结果得到的。如上图的后缀表达式为：","在介绍前缀，后缀表达式之前，我想先通过我们最熟悉的中缀表达式画出一棵语法树来直观认识前后缀表达式。以a+b(c","如上图的前缀表达式为","如果扫描到操作数，则压进s2，如果扫描到操作符，则从s2弹出两个操作数进行相应的操作，并将结果压进s2(s2的个数出2个进1个),","将'('改为')',')'改为'(',注意其中一个判断优先级的地方需要由>=变成>.","将s[i]压栈;","将s[i]添加到输出串中;","开括号'('出栈并丢弃;","当扫描结束后，s2的栈顶就是表达式结果。","我们可以用一个栈s2来实现计算，扫描从左往右进行，如果扫描到操作数，则压进s2，如果扫描到操作符，则从s2弹出两个操作数","或","扫描到的操作符优先级比栈顶操作符高)","操作符出栈并加到输出串中","整数除法只保留整数部分。","既然中缀表达式对于计算机的运算并不便利，而前缀后缀表达式的计算相对简单方便。因此，找到一种途径将中缀表达式","有效的运算符包括","栈中运算符逐个出栈并输出，直到遇到开括号'(';","栈顶为'('","根据逆波兰表示法，求表达式的值。","每次取出来的都是数字，而不是运算符","波兰式、逆波兰式与表达式求值","注意取整数","然后算乘除，最后算加减，但是，计算机处理中缀表达式却并不方便，因为没有一种简单的数据结构可以方便从一个表达式中间抽出","由前缀表达式求出结果十分方便，只需要用一个栈实现：","由前缀表达式求出结果有下面两种思路：","的情况。","示例","算法：中缀表达式转换成后缀表达式","给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为","继续扫描到bc',计算bc'=b',表达式变成:","解释:","说明：","起来就像一对逆过程，实际上并不是这样子，因为字符读取的时候都是从左往右的，所以，前缀表达式往往需要用两个栈来计算，","转换成前缀后缀表达式就十分重要。实际上，二者的转换算法看起来也很像一个逆过程。因此，我们着重讨论中缀转后缀。","输入:","输入：中缀表达式串","输出:","输出：后缀表达式串","进行相应的操作，并将结果压进s2(s2的个数出2个进1个),当扫描结束后，s2的栈顶就是表达式结果。后缀表达式和前缀表达式看","逆波兰表达式","逆波兰表达式求值","里加上了优先级这一限制条件，转换就变得唯一了。","重复此步骤，直至所有操作符处理完毕。如"],"栈/有效的括号_LeetCode_20.html":["!=","\"()\"","\"()[]{}\"","\"([)]\"","\"(]\"","\"{[]}\"","#","'(':","'('，')'，'{'，'}'，'['，']'","')':","'[':","']':","'{':","'}':","07","1.题目","1:","1]","1]+","2.分析","2019","20:01:32","23","2:","3.代码","3:","4:","5:","=","==",">","['}',']',')']:","[]","bool:","class","continu","copyright","def","elif","else:","fals","gitbook该文件修订时间：","isvalid(self,","i字符串拼接","judg","judge:","reserved，pow","return","right","s):","s:","s:return","s[0]","solution(object):","solution:","stack","stack.append(i)","stack.pop()","stack:","stack[","str)","tmp","true","{'()','[]','{}'}","©","优化","何去何从gw","左括号必须以正确的顺序闭合。","左括号必须用相同类型的右括号闭合。","有效字符串需满足：","有效的括号(leetcode_20)","有效的括号_leetcode_20","没有括号,也叫做括号匹配","注意空字符串可被认为是有效字符串。","清楚易懂","的字符串，判断字符串是否有效。","示例","给定一个只包括","输入:","输出:"],"栈/最长有效括号_LeetCode_32.html":["\"(\":","\"(()\"","\"()\"","\"()()\"","\")\":","\")()())\"","#","'('","'(':","')'","')':","+","+1","+=","0","0,","07","0:","1","1)","1.题目","10:03:02","1:","1]","1])","1]+2","1]]","2","2.分析","2019","24","2:","3.代码","4","=","==",">","[]","class","copyright","def","dp[i","dp[i]","dp[pre","elif","else:","gitbook该文件修订时间：","int:","len(s)","longestvalidparentheses(self,","max(dp)","max(max_len,","max(res,","max_len","max_len,","n","n=0:","pre>0:","range(len(s)):","re","reserved，pow","return","right","s):","s:","s[i]","s[stack[","solution(object):","solution:","stack","stack.append(i)","stack.pop(","stack.pop()","stack:","stack[","start","start+1)","str)","tmp","tmp+1)","©","何去何从gw","动态规划","只有连续))))),既不入栈,同时还要不断更新start","和","处理只有一对()情况,不加判断,结果为4，当只有一对括号时，不需要向前扩展了","处理独立的括号对的情形","最长有效括号(leetcode_32)","最长有效括号_leetcode_32","最长有效括号子串为","的字符串，找出最长的包含有效括号的子串的长度。","示例","类似()()、()(())","给定一个只包含","解释:","输入:","输出:"],"双指针/":["00:43:19","07","08","2019","copyright","gitbook该文件修订时间：","reserved，pow","right","©","何去何从gw","双指针"],"双指针/将奇数放在偶数的前面.html":["#","07","1","1.题目","17:58:36","2","2.分析","2019","23","3.1代码1（奇数放到偶数前）","3.2代码2（为了保证代码的整齐性，可以简单封装一下）","3.3代码3（将整除3的放在前面）","3.代码","=",">=","_quick_sort(nums,","copi","copyright","deepcopi","def","gitbook该文件修订时间：","import","left","left,","nums[left]","nums[right]","random","reserved，pow","resetarray(nums,","right","right):","sy","sys.setrecursionlimit(1000000)","tmp:","©","何去何从gw","可以使用快速排序的思想","将奇数放在偶数的前面","将数组的奇数放到偶数的前面","当数组的数","时才有交换的价值","至少有两个元素"],"双指针/有序数组的平方_LeetCode_977.html":["#","(right+1)","(找0时候用的是二分法查找，因为0应该在中间附近，二分法查找更快)","*","0","0,","0,len(li)","07","0:","1","1)","1,","1,0,2,3,6,7]","1,0,3,10]","1,2,3,6,7]","1.题目","17:18:27","1:","1]","1]，数组中非负部分","1：","2,","2.分析","2019","23","25,","2：","3,","3,2,3,11]","3.代码","36]。我们的策略就是从前向后遍历数组中的非负数部分，并且反向遍历数组中的负数部分。","4,","5,","6]","6]，数组中负数部分","7,","=","==",">","[","[0]","[16,","[4,","[9,","[]","[],然后一个个添加元素,因为从两边向中间遍历,添加的元素从大到小,如果我们用res.append(...)，则最后需要res.resverse().如果添加元素时候，res.insert(0,...)则每次添加元素,其实内部都有大量操作(当前元素向后移位)。所以我们先定义好res.直接修改相应位置","[a[0]**2]","a):","a:","a[0]","a[0]>=0:","a，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。","class","copyright","cur","def","elif","else:","func(li)","func(li):","func(li,","gitbook该文件修订时间：","left","left,","left,right","leftli[left]","len(a)","li","li[:]","li[left]","li[mid]","li[right]:","list[int])","list[int]:","mid","n","print(\"没有相等，最近下标为\",left)","print(\"没有相等，最近下标为\",right)","print('最近下标为',0)","print('有相等元素,最近下标为',mid)","print('没有相等，最近下标为',left","print('没有相等，最近下标为',left)","print(left,right)","re","reserved，pow","return","right","right):","right,且left=right+1","solution(object):","solution:","sortedsquares(self,","©","两种双指针方法","两边向中间遍历","举一个例子，若给定数组为","二分法：查找距离某个元素最近的位置","何去何从gw","先定义好res,后面再相应位置修改res里面的值,而不是r","因为数组","如果没有相等元素，最后left>right,且left=right+1","已经排好序了，","当前数组有序","所以可以说数组中的负数已经按照平方值降序排好了，数组中的非负数已经按照平方值升序排好了。","找到离0最近的值，向两边遍历","提示：","普通法查找","有序数组的平方(leetcode_977)","有序数组的平方_leetcode_977","的平方为","示例","给定一个按非递减顺序排序的整数数组","输入：[","输出：[0,1,9,16,100]","输出：[4,9,9,49,121]","（如果存在该元素，就输出该元素位置）（此处查找0元素）"],"双指针/验证回文字符串2_LeetCode_680.html":["\"aba\"","\"abca\"","0,len(s)","07","1","1,0)","1,1)","1.题目","17:27:36","1:","2.分析","2019","23","2:","3.代码","=","=true",">","bool:","class","copyright","def","else:","fals","flag","func(s,0,len(s)","func(s,left+1,right,0)","func(s,left,right","gitbook该文件修订时间：","left","left,","len(s)","len(s)0:","reserved，pow","return","right","s:","s:return","solution:","str)","s，最多删除一个字符。判断是否能成为回文字符串。","true","validpalindrome(self,","z","©","ⅱ(leetcode_680)","何去何从gw","你可以删除c字符。","判断回文字符串","原生","原生写法，通过率99.99%，超时，其它语言可通过","双指针","字符串只包含从","注意:","的小写字母。字符串的最大长度是50000。","示例","给定一个非空字符串","解释:","输入:","输出:","递归","验证回文字符串","验证回文字符串2_leetcode_680"],"双指针/构成三角形的个数.html":["+=","0","0,","07","1","1.题目","17:49:54","2):","2.分析","2019","23","3.代码","=",">","c,则可以构成三角形，`a","copyright","c，则","def","func([2,3,4,5,6])","func(li):","gitbook该文件修订时间：","i+1","int)","int:","j","left,","len(li)","li.sort()","li[j+1]:","n","n:","numdupdigitsatmostn(self,","print(li)","print(res)","range(n","re","reserved，pow","right","©","何去何从gw","先将数组排序，对于","双指针法","构成三角形的个数","给出一组序列,序列中的元素都大于0，则该序列中元素可以构成多少个三角形"],"双指针/反转字符串中的元音字母_LeetCode_345.html":["\"hello\"","\"holle\"","\"leetcode\"","\"leotcede\"","#","''","'a',","'e',","'i',","'o',","'u',","'u']","...","0,","07","1","1.题目","17:54:09","1:","2.分析","2019","23","2:","3.代码","=",">","['a',","class","copyright","def","gitbook该文件修订时间：","left","left,","len(s)","list(s)","print(right)","reserved，pow","reversevowels(self,","right","s","s:","s:return","solution:","str)","str:","tmp","©","何去何从gw","元音字母不包含字母\"y\"。","反转字符串中的元音字母(leetcode_345)","反转字符串中的元音字母_leetcode_345","示例","编写一个函数，以字符串作为输入，反转该字符串中的元音字母。交换左右两边的元音字母","说明:","输入:","输出:"],"双指针/平方数之和_LeetCode_633.html":["*","+","...","0,int(sqrt(c))+1","07","1","1.题目","18:07:42","2","2.分析","2019","23","3","3.代码","5","=",">","a2","b2","bool:","b，使得","c","c:","class","copyright","c。","def","elif","fals","gitbook该文件修订时间：","import","int)","judgesquaresum(self,","left","left,right","math","reserved，pow","right","solution:","tmp","true","©","何去何从gw","和","平方数之和(leetcode_633)","平方数之和_leetcode_633","示例1:","示例2:","给定一个非负整数","解释:","输入:","输出:","，你要判断是否存在两个整数"],"双指针/合并两个有序数组_LeetCode_88.html":["\"\"\"","#","'''","(m+n","+","07","1","1(因为这是下标表示，所以减一)。归并结果保存位置从","1)开始(因为这是下标表示，所以减一)。归并起点和归并结果的位置都是从右向左前进。","1,n","1.题目","18:26:31","2.分析","2019","23","3","3.代码","=",">","[1,2,2,3,5,6]","[1,2,3,0,0,0],","[1,2,3,4,5]","[1,2]","[2,5,6],","[3,4,3,4,5]","[]","anything,","class","copyright","cur","def","else:","gitbook该文件修订时间：","instead.","int)","int,","list[int],","m","m+n","m:","m>=0:","merge(self,","modifi","n","n:","n=","n=1","n>=0","n>=0:","none:","num1","nums1","nums1:","nums1[cur]","nums1[m]","nums1[m]>nums2[n]:","nums2","nums2:","nums2[n]","nums2的下标为","nums2，将","n。","n）来保存","place","reserved，pow","return","right","solution:","©","【1,2,5,0,0】","【1,2】","【3,4,5,0,0】","【3,4】","不用第二个循环","两个有序数组进行合并,就联想到归并排序。我们既可以从前往后归并，也可以从后往前归并。","中的元素。","中，使得","但是本题nums1后面留的空间足够，所以我们在nums1尾部进行添加元素，不需要重新开辟数组进行归并。因此我们只能从后向前归并，因为nums2归并到nums1上，如果从前往后归并，那么需要不断调整nums1的值，防止nums1中未归并的值被覆盖丢失，相当复杂。而我们从后往前归并，就不需要这么复杂了。","何去何从gw","你可以假设","初始化","合并两个有序数组(leetcode_88)","合并两个有序数组_leetcode_88","合并到","和","成为一个有序数组。","我们归并的起点为m","所以","有足够的空间（空间大小大于或等于","添加的新值的首下标","用while循环将nums2依次添加到nums1","的下标为","的元素数量分别为","示例:","第一个while循环跳出后,","第一轮循环合并完后，由于可能nums2指针未走完(n>=0:nums2还有元素比nums1最小元素小)，需要将nums2剩余首部覆盖至nums1首部。nums1指针未走完不需要做任何多余操作，因为覆盖前后相同。","给定两个有序整数数组","说明:","输入:","输出:"],"二分/":["00:43:19","07","08","2019","copyright","gitbook该文件修订时间：","reserved，pow","right","©","二分","何去何从gw"],"二分/二分搜索.html":["#","0,","07","09:10:11","1","1)","1.","2.1","2.2","2.3","2019","23","=","[2,3,32,2,23,2]","b","copyright","def","else:","fals","func(a,2,0,len(a)","func(li,","gitbook该文件修订时间：","item):","item,","item:","left","left,","len(li)","mid","print(b)","re","res:","reserved，pow","return","right","right)","right)#","right):","true","©","二分搜索","二分搜索有递归和循环两种方式","何去何从gw","就说明是循环，而不是靠func传没传left和right决定","循环实现二分搜索","用while","递归二分搜索查找第二版本","递归如果有返回值,所有调用的地方必须写return","递归实现二分查找"],"二分/二叉搜索树中第K小的元素.html":["\"\"\"","#","+","/","0","07","1","1.题目","1:","1]","1])","2","2.分析","2019","22","22:51:38","2:","3","3.代码1","4","5","6",":rtype:",":type","=","==",">=","[!tip]","[3,1,4,null,2],","[5,3,6,2,4,null,null,1],","[]","\\","arr","arr,","arr.append(root.val)","arr[","class","copyright","countnodes(self,","def","else:","gitbook该文件修订时间：","inder(root,","inder(root.left,","inder(root.right,","int","k","k)","k):","k:","kthsmallest","kthsmallest(self,","leftcount","len(arr)","none","none:","print(arr[","print(root.val)","reserved，pow","return","right","root","root):","root,","root:","self.countnodes(root.left)","self.countnodes(root.right)","solution(object):","treenod","©","≤","个最小的元素。","二叉搜索树中第k小的元素","二叉搜索树元素个数。","代码2","何去何从gw","你可以假设","先遍历所有的值，然后找到第k小的数字，最后利用二分搜索进行处理","必须这样，而不能直接在if语句返回","总是有效的，1","来查找其中第","示例","给定一个二叉搜索树，编写一个函数","计算树的节点数","说明：","输入:","输出:"],"二分/寻找两个有序数组的中位数.html":["'float':","'list[int]')","'list[int]',","(2","(len(nums1)+len(nums2))//2","(nums1","(nums1[num_len]","(nums[nums_len]","(res[num_len]","+","//2","0","04","1","1.题目","14","1:","1]","1]:","2.0","2.5","2.分析","2019","20:16:57","2:","2]","3)/2","3.1代码1","3.2代码2","3.3代码3（归并的最后一次）","3.4代码4（未完成）","3.代码","3]","4]","=",">",">=","[1,","[2]","[3,","[]","a:","a_flag","a_index","b","b:","b_flag","b_index","copyright","def","elif","else:","findmedian(self,","findmediansortedarrays(self,","gitbook该文件修订时间：","len(nums)//2","len(nums1)","m","n","n))。","num","num_len","nums1","nums1+nums2","nums1,","nums1.extend(nums2)","nums1.pop())","nums1.sort()","nums1:","nums1[","nums1[nums_1_mid]","nums1[~num_len])/2","nums2","nums2)","nums2))","nums2):","nums2.pop())","nums2:","nums2[","nums2[:nums_2_mid])","nums2[nums_2_mid]:","nums2。","nums[~nums_len])/2","nums_len","o(log(m","print(","print(res)","re","res.insert(0,","res[~num_len])/2","reserved，pow","return","right","self.findmedian(nums1,","self.findmedian(nums1[nums_1_mid:],","©","不会同时为空。","何去何从gw","你可以假设","则中位数是","和","寻找两个有序数组的中位数","的有序数组","示例","给定两个大小为","请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为"],"二分/找出数组中第K大的数.html":["#","0","04","1","1)","1.题目","14","1:","1]","2","2.分析","2019","20:16:57","2:","3.代码","4","5","=","==",">",">=","[!note]","[3,2,1,5,6,4]","[3,2,3,1,2,4,5,5,6]","[i","class","copyright","def","else:","findkthlargest(self,","gitbook该文件修订时间：","i):","i:","i==k","int)","int:","j","k","k)","k):","k:","left","len(nums)","len(right)","len(right):","list[int],","mid","mid]","nums,","nums:","nums[0]","nums[1:]","nums[j","nums[j+1],nums[j]","nums[j+1]:","nums[j]","nums[j],nums[j+1]","nums_len","print(i)","print(nums[j])","range(k):","range(nums_len","re","reserved，pow","return","right","self.findkthlargest(left,","self.findkthlargest(right,","solution:","©","≤","个不同的元素。","个最大的元素。请注意，你需要找的是数组排序后的第","个最大的元素，而不是第","何去何从gw","你可以假设","冒泡排序有错","可以用类似快速排序，也可以用类似冒泡排序","和","在未排序的数组中找到第","总是有效的，且","找出数组中第k大的数","数组中第k大的数","数组的长度。","示例","说明:","输入:","输出:","这是一个简单的note类型的使用，所有的属性都是默认值。","这是一个简单的note类型的使用，所有的属性都是默认值。\\"],"二分/找出数组中唯一重复的元素.html":["#","+=","0","04","1","1.题目","14","2.分析","2019","20:16:57","3.1代码1（累加求和）","3.2代码2（异或）","3.代码","=","[!tip]","^=","abs(sum_1","copyright","def","finddup(nums):","float('","float('inf')","gitbook该文件修订时间：","inf')","j","len(nums)","max_num","max_num+1):","max_num:","min_num","nums:","nums_len","print(finddup([0,1,2,3,4,5,5,6]))","print(i)","range(min_num,","reserved，pow","return","right","sum_1","sum_2","sum_2)","©","​","何去何从gw","找出数组中唯一重复的元素","数字1~1000存放在含有1001个元素组成的数组中，其中只有唯一的一个元素值重复，其他数字只出现一次，设计一个算法，将重复元素找出来，要求每个元素只能访问一次，如果不使用辅助存储空间，能否设计一个算法实现？","相同元素异或等于0，0与任何元素异或为该元素","累加求和就去另一个累加求和"],"二分/找出数组中前k大.html":["+=","04","1","1.题目","14","2.分析","2019","20:16:57","3.代码1","=","==",">","copyright","def","elif","else:","findtop([2,3,4,45,5,5])","findtop3(li):","gitbook该文件修订时间：","heapq","heapq.heapify(tmp)","import","k):","len(li)","li","li[:k]","li[i]","li[i]>r2:","li[k:]:","list(range(10))","none","print(\"前三名：\"+str(r1)+\",\"+str(r2)+\",\"+str(r3))","r1:","r1:r3=r2,r2=r1,r1=tmp","r2,li[i]","r2,r1,li[i]","r3","r3,r2","r3,r2,r1","random.shuffle(li)","reserved，pow","right","tmp","topk(li,","©","​","代码2（堆排序）","何去何从gw","如果当前值tmp","如果当前值tmp>r2且不等于r1：r3=r2,r2=tmp","如果当前值tmp大于r3且不等于r2,r3","找出数值中前k大","找出数组中前k大","然后遍历数组","通过分析，最大的前三个数比数值中其其它数都大，因此可以采用类似求最大值的方法来求前三名。初始化前三名为最小整数：r1,r2,r3。"],"二分/颜色分类.html":["#","0","03:18:01","07","0、","1","1.题目","2","2.分析","2019","21","3.代码","=","[0,0,1,1,2,2]","[2,0,2,1,1,0]","anything,","class","copyright","curr","def","gitbook该文件修订时间：","instead.","left","len(nums)","modifi","n","none","num","nums):","place","reserved，pow","return","right","rtype:","solution(object):","sortcolors(self,","©","一个直观的解决方案是使用计数排序的两趟扫描算法。","不能使用代码库中的排序函数来解决这道题。","个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。","何去何从gw","你能想出一个仅使用常数空间的一趟扫描算法吗？","元素的个数，然后按照0、1、2的排序，重写当前数组。","分别表示红色、白色和蓝色。","和","此题中，我们使用整数","注意:","示例:","给定一个包含红色、白色和蓝色，一共","输入:","输出:","进阶：","颜色分类","颜色分类(leetcode_75)","首先，迭代计算出0、1"],"二分/快速排序解决奇偶问题.html":["\"\"\"","#","0","07","1","19","2019","20:14:17","=","copyright","curr","def","gitbook该文件修订时间：","left","len(nums)","partition(list1):","reserved，pow","right","right]对list1","©","何去何从gw","初始值","在[left,","快速排序解决奇偶问题","进行奇数、偶数划分"],"二分/查找距离某个值最近的下标.html":["#","0","0,","0,len(li)","07","0:","1","1)","1,0,2,3,6,7]","1,2,3,6,7]","18:29:48","2019","23","3,","5,","=",">","[","a[0]>=0:","copyright","def","else:","func(li)","func(li):","gitbook该文件修订时间：","left","left,","left,right","leftli[left]","len(a)","li","li[:]","li[left]","li[right]:","mid","print(\"没有相等，最近下标为\",left)","print(\"没有相等，最近下标为\",right)","print('最近下标为',0)","print('有相等元素,最近下标为',mid)","print('没有相等，最近下标为',left","print('没有相等，最近下标为',left)","print(left,right)","reserved，pow","return","right","©","何去何从gw","如果没有相等元素，最后left>right,且left=right+1","数组无序","数组有序，用二分","查找距离某个值最近的下标"],"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":["#","(","(left+right)//2",")。","+","0","0,","07","09:55:01","1","1),","1,","1.题目","10,","1:","1、nums[mid]","2.分析","2019","26","2:","2]，mid","2、否则，nums[mid]","3.代码","8,","9,","=","==",">","[0,1,2,4,5,6,7]","[3,4,5,1,2]","[4,5,6,7,0,1,2]","copyright","def","elif","else:","findmin(self,","findmin_1(self,","gitbook该文件修订时间：","int:","left","left,","len(nums)","list[int])","mid","mid),","mid+1","mid+1,","min(nums[left],","min(self.findmin_1(nums,","nums):","nums,","nums:","nums[0]","nums[left]","nums[left]:","nums[mid+1]","nums[mid]","nums[mid]:","nums[right])","nums[right]:","nums[right]：例子：[7,","print(left,","reserved，pow","return","right","right)","right))","right):","right:","self.findmin_1(nums,","©","二分法：首先要判断这个有序数组是否旋转了，通过比较第一个和最后一个数的大小，如果第一个数小，则没有旋转，直接返回这个数。如果第一个数大，就要进一步搜索。我们定义left和right两个指针分别指向开头和结尾，还要找到中间那个数，然后和left指的数比较，如果中间的数大，则继续二分查找右半段数组，反之查找左半段。终止条件是当左右两个指针相邻，返回小的那个。","何去何从gw","你可以假设数组中不存在重复元素。","例如，数组","假设按照升序排序的数组在预先未知的某个点上进行了旋转。","分治法","可能变为","否则右边一定是有序的,但是mid这个位置可能会是最小值，所以下次还要继续搜索","寻找旋转排序数组中的最小值(leetcode153中等)","寻找选择排序数组中最小值leetcode_153中等","示例","等价于前面一堆0，后面一堆1，寻找第一个1的位置","肯定不是最小；","请找出其中最小的元素。","输入:","输出:","递归"],"二分/二分查找_LeetCode_704.html":["/","0,","07","0:return","1","1,0,3,5,9,12],","1.题目","10000]之间。","10:13:18","1:","1。","2","2.分析","2019","26","2:","3.代码","4","9","9999,","9999]之间","=","==",">","[","[1,","ban","bie","cha","class","cn.com/problems/binari","cn.com/problems/search","copyright","de","def","elif","er","fa","fen","gitbook该文件修订时间：","hao","https://leetcod","insert","int)","int:","jie","labuladong/","left,","left>1","len(nums)","list[int],","mid","mo","n","num","nums:","nums[mid]","position/solution/t","python","reserved，pow","return","right","search(self,","search/solution/","solution:","target","target:","target，如果目标值存在返回下标，否则返回","xiang","yong","zhao","©","不存在","个元素有序的（升序）整型数组","中因此返回","中并且下标为","中的","中的所有元素是不重复的。","二分查找(leetcode704简单)","二分查找_leetcode_704","何去何从gw","你可以假设","出现在","和一个目标值","将在","提示：","的每个元素都将在","示例","给定一个","解释:","输入:","输出:","，写一个函数搜索"],"二分/搜索插入位置_LeetCode_35.html":["#","0","0,","08","1","1.题目","18","19:05:38","1:","2","2.分析","2019","2:","3.代码","3:","4","4:","5","7","=",">","[1,3,5,6],","class","copyright","def","gitbook该文件修订时间：","int)","int:","left","left,","len(nums)","list[int],","nums:","reserved，pow","right","searchinsert(self,","solution:","target:","©","何去何从gw","你可以假设数组中无重复元素。","寻找插入点使用二分法，但与寻找某数字不同的是，需要考虑一些边界条件：","当插入数字和nums中某数字相等时，插入到左边还是右边？本题要求插到左边；","插入数字在nums第一个数字左边，或在最后一个数字右边；","搜索插入位置(leetcode_35)","搜索插入位置_leetcode_35","示例","给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。","输入:","输出:"],"二分/x的平方根_LeetCode_69_简单.html":["#","(r+x/r)/2","07","1","1*math.e**","1.题目","10:06:44","1:","1还是left=right=mid+1","2","2.82842...,","2.分析","2019","26","2:","3.代码","4","8","9:","=","==",">","a,化简","a;那么我们的目的就是求得x使得f(x)=0;","a与x轴的交点的横坐标(即a的正平方根)。","a，我们求导可以知道，函数上任意一点(x,y)的切线的斜率为2x。","b/k=（x0+a/x0）/2。","b/k。","copyright","def","elif","else:","gitbook该文件修订时间：","int","int(r)","int)","int:","kx0,k=2x0,y0=x0^2","left","left**2","mid","mid**2","mysqrt(self,","print(left,right)","r","reserved，pow","return","right","right**2","sq","sqrt(int","sqx:","sqx决定了最后非法循环出去时,left=right=mid","x","x)","x):","x:","x>1","x的平方根leetcode_69简单","©","​","也就是说（x0+a/x0）/2是过点（x0,y0）的切线与x轴的交点的横坐标。","二分法","何去何从gw","假设过点（x0,y0）的切线方程为y=kx+b，那么切线与x轴的交点横坐标为","先写elif","函数。","如果我们要求a的平方根，首先令f(x)=x^2","实现","是非负整数。","牛顿法","牛顿法**","由于返回类型是整数，小数部分将被舍去。","由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。","由函数f(x)=x^2","的平方根(leetcode69简单)","的平方根是","的平方根，其中","示例","而b=y0","计算并返回","记（x0+a/x0）/2=x',继续求过点（x',f(x')）的切线与x轴的交点的横坐标x''，很明显x''比x'更靠近函数f(x)=x^2","说明:","输入:","输出:"],"二分/数字在排序数组中出现的次数.html":["#","+","//这两个数应该插入的位置，然后相减即可。","0,","0.1)","0.5和k+0.5","00:37:43","08","1","19","2019","=",">1","`//因为data中都是整数，所以可以稍微变一下，不是搜索k的两个位置，而是搜索k","class","code","copyright","data,","def","else:","func(arr,","func(data,","getnumberofk(self,","gitbook该文件修订时间：","here","k","k):","k+0.1)","k>arr[mid]:","left","left,","len(arr)","mid","reserved，pow","return","right","solution:","write","©","何去何从gw","数字在排序数组中出现的次数"],"三数/":["00:43:19","07","08","2019","copyright","gitbook该文件修订时间：","reserved，pow","right","©","三数","何去何从gw"],"三数/最接近的三数之和.html":["#","'int')","'int':","'list[int]',","(","+","0","04","1","1.","1.题目","14","1]","1这样初始化，因为我们希望在[l:r]中进行寻找操作。计算sum=nums[i]+nums[l]+nums[r]和target的差是多少，并且我们要记录下来，最后取最小的差对应的sum作为结果。当l","1，2，1，","2","2).","2.","2.分析","2019","20:16:59","2]","2]):","3.代码","4],","=",">","[","[]","best_dist","best_sum","copyright","def","elif","enumerate(nums[:len_num","float('inf')","gitbook该文件修订时间：","key+1,len_num","key,","l","l,","len(nums)","len_num","n","num","nums.sort()","nums:","nums[l+1]","nums[l]","nums[r","nums[r]","r","re","res.append(nums[l]","reserved，pow","right","target","target:","target。找出","threesumclosest(self,","valu","value)","©","一个目标值","与","个整数的数组","中的三个整数，使得它们的和与","代码1","代码2","何去何从gw","例如，给定数组","和","固定i，调整j和k","我们要将l=i+1、r=len(nums)","最接近。返回这三个数的和。假定每组输入只存在唯一答案。","最接近的三个数的和为","最接近的三数之和","给定一个包括"],"三数/三数之和 腾讯.html":["#记录下第二、第三个数的下标位置","'list[int]')","'list[list[int]]':","+","0","0,","04","0:","1","1,","1.题目","14","1],","1]:","1]:continu","2,","2.分析","2019","20:15:29","2]","2，","2，1，1】头去重","2，1，1，1】尾去重","3.代码","4]，","=","==",">","[","]","a，b，c","b","break","c","continu","copyright","def","elif","gitbook该文件修订时间：","i+1","j","k","len(nums)","len_num","n","num","nums[i","nums[i]","nums，判断","reserved，pow","right","s","threesum(self,nums:","©","【","三数之和（腾讯）","个整数的数组","中是否存在三个元素","何去何从gw","例如,","注意去重","注意：答案中不可以包含重复的三元组。","满足要求的三元组集合为：","给定一个包含","给定数组","，使得","？找出所有满足条件且不重复的三元组。"],"三数/求最小三元组距离.html":["(abs(a[i]","*","0","0,","04","1.题目","1/2","14","2.分析","2019","20:17:23","3.代码","=","abs(a[i]","abs(b[j]","alen","b,","b[j]),","blen","c):","c[k]))","c[k])),请计算最小三元组距离。","c[k]),","clen","copyright","def","distanc","float('inf')","gitbook该文件修订时间：","i,","j,","k","len(a)","len(b)","len(c)","max(abs(a[i]","min_di","mindis(a,","reserved，pow","right","tmp_di","true:","©","​","何去何从gw","已知升序整数数组a【l】,b【m】,c【n】,请在三个数组总各找一个元素，使得组成的三元组的距离最小，三元组距离的定义为dist","数学云算法","最小距离法，数学运算法","求最小三元组距离"],"三数/三个数的最大乘积 LeetCode 628.html":["07","1.题目","1000,","1000]。","1:","1]*nums[","1],","2.分析","2019","22","22:52:26","24","2:","2]*nums[","3.代码","3])","6","628",">","[1,2,3,4]","[1,2,3]","class","copyright","def","gitbook该文件修订时间：","int:","leetcod","list[int])","max(nums[0]*nums[1]*nums[","maximumproduct(self,","nums.sort()","nums:","nums[","reserved，pow","return","right","solution:","©","三个数的最大乘积","何去何从gw","先排好序","注意:","然后取最大的3个数相乘，或者最小的两个数（负数）和最大的一个数相乘","示例","给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。","给定的整型数组长度范围是[3,104]，数组中所有的元素范围是[","输入:","输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。","输出:"],"区间搜索/":["07","2019","22:00:38","copyright","gitbook该文件修订时间：","reserved，pow","right","©","何去何从gw","区间搜索"],"区间搜索/接雨水 LeetCode 42.html":["#","(i","(min(height[stack[","(tmp","*","+","+=",",最后个元素也不需要float('inf')","0","07","1","1)","1):","1,","1,high_id,","1.题目","1:return","1]","1])","1]:","1]]","1]],height[i])","1]]:","2,","2.分析","2019","22","23:56:30","3,","3.代码","3]","42","6","=","==","==注意：==因为左边和右边对于接雨水没有用，所以第一个元素的左边我们不需要加float('inf')",">","[0,","[0,1,0,2,1,0,1,3,2,1,2,1]","[3,","[]","[float('inf')]","[height[","break","class","copyright","def","else:","gitbook该文件修订时间：","height","height:","height[","height[0]","height[:]","height[i]","height[i])","height[i]:","height[i]=height[stack[","height[i]>height[stack[","height[i]>high_num:","height[j]","height[j])","height[j]>left:","height[j]>right:","height[tmp])","high_id","high_num","int:","j","left","left.append(height[i])","left.append(left[","left[","len(height)","list[int])","min(left[i],","min(right,left)","n","pass","print(high_id)","print(high_num)","print(left)","print(res)","print(right)","range(0,high_id):","range(0,i):","range(1,n","range(1,n):","range(i+1,n):","range(n","range(n):","re","reserved，pow","return","right","right.insert(0,height[j])","right.insert(0,right[0])","right[0]:","right[i])","solution:","stack","stack.append(i)","stack.pop()","stack:","stack[","stdout:","tmp","tmp:","tmp>height[i]:","trap(self,","©","上面是由数组","不用动态规划","不用动态规划（...）","个单位的雨水（蓝色部分表示雨水）。","个非负整数表示每个宽度为","从右边往最高点遍历","从左边往最高点遍历","位置i能容下雨水量:min(3,1)","何去何从gw","动态规划","单调栈","单调递增栈","单调递增栈:","在一个位置能容下的雨水量等于它左右两边(并不要求最近的最高)柱子最大高度的最小值减去它的高度.比如下图所示,","如何找所有位置的左右两边的柱子的最大值?","左右两边不可能盛水，所以跳过，不遍历","左右两边界不能装水，所以我们不需要","当前柱子高度比左右两边都高，则该处不能盛水，跳过","所以,问题就变成了:","找到最高点","找到最高点,然后从左右两边遍历到中间","找最高点，然后从左右两边遍历到中间","接雨水(leetcode_42)","接雨水_leetcod","数组的端点，不可能盛水，所以跳过，不用遍历","测试用例","的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。","示例:","给定","表示的高度图，在这种情况下，可以接","输入:","输入：[0,1,0,2,1,0,1,3,2,1,2,1]","输出:","输出：6","这道题真正难点在于:","预期结果：6"],"单调栈/":["07","2019","22","22:54:05","copyright","gitbook该文件修订时间：","reserved，pow","right","©","何去何从gw","单调栈"],"单调栈/单调栈原理.html":["(栈不为空，或者栈顶元素大于等于入栈元素):","(栈为空，或者入栈元素a[i]大于栈顶元素stack[","...","0","07","1.最基础的应用就是给定一组数，针对每个数，寻找它和它右边第一个比它大的数之间有多少个数。（小牛向右看）","19:30:37","1]):","2.给定一序列，寻找某一子序列，使得子序列中的最小值乘以子序列的长度最大。（柱状图中的最大矩形）","2019","23","3.给定一序列，寻找某一子序列，使得子序列中的最小值乘以子序列所有元素和最大。题目","=","[]","a+[float('","copyright","else:","gitbook该文件修订时间：","inf')]","range(len(a)):","re","reserved，pow","right","stack","stack.append(i)","stack.pop()","tmp","©","​","为原始数组","从右到左依次计算各矩形高度，同时乘以该高度为矩形，宽为数组长度减去当前矩形下标（数组下标从0开始计算），最后比较谁大就行了","但是正常情况下，后一个矩形的高度不一定比前一个矩形高度小，也就是说，就是因为这个矮高度矩形的加入，限制了我们之前矩形的高度。那么之前矩形的高度对于以后的统计就没什么用了，这个时候，我们把矮矩形添加进来之前，先计算高矩形的答案，然后删除高矩形。","何去何从gw","入栈","入栈、出栈的地方叫做栈顶","入栈刚才那个元素","单调栈:","单调栈原理","单调栈应用","单调栈是一种特殊性质的栈，特殊之处在于栈内的元素都保持一个单调性","单调递减栈:从栈顶到栈底严格单调递减","单调递减栈伪代码","单调递增栈:从栈顶到栈底严格单调递增","在这进行res结果更新","对于这个题，如果从左到右，矩形的高度依次递增（可以不是严格递增），那么我们求解方法为：","性质","所以进栈出栈都是操作元素下标，然后我们可以通过元素下标获取元素","柱状图中最大的矩形(leetcode_84)","栈元素出栈","栈的最底部，叫做栈底","正常情况：","注意：我们数组的最后个元素进栈后，由于后面没有元素了，所以无法和其他元素进行比较，也就无法出栈，所以我们需要在数组最后添加一个元素，该元素为无穷大，或者无穷小。具体情况看是单调递增还是单调递减栈。如果是单调递减栈，数组最后添加一个无穷小，如果是单调递增栈，数组最后添加一个无穷大元素","特例：","解析：","这其实就是单调栈模型。在单调栈中进出栈时候，我们比较的是矩形的高度，但是栈中维护的是每个矩形的下标，这样我们就可以在弹出栈时候，统计出宽度，同时知道矩形的高度。我们就可以计算出各个矩形的高度了。由于我们所有操作都是在进栈出栈间完成，所以时间复杂度为o(n).","题目：","题解"],"单调栈/柱状图中最大的矩形_LeetCode_84.html":["#","#print(stack)","(high","(i","(mid","(right_i","*","+","+=","+=1","0","07","0:","1","1)","1)*h","1)*h,mid_area)","1)*heights[tmp])","1)，如下图所示：","1.题目","10","1:","1]","1]!=right[0]:","1]>right[0]:","1]]","1]]:","1]]>=heights[i]:","1，给定的高度为","2.分析","2019","20:52:57","22","3.代码","=","=1","==",">",">=","[0]","[0]+heights+[0]","[2,1,5,6,2,3]","[2,1,5,6,2,3]。","[]","class","copyright","def","else:","gitbook该文件修订时间：","h","h)","height","heights):","heights:","heights[0]*1","heights[:mid]","heights[i]","heights[i])","heights[i]:","heights[i]>heights[stack[","heights[left_i]","heights[low]>=h:","heights[mid:]","heights[stack[","heights[tmp])","high","high=h:","i+1","int:","largestrectanglearea(self,","left","left[","left[low]>=h:","left_area","left_i","left_i；向右找第一个小于于","left_i？","len(heights)","list[int])","low","low>=0","max((high","max(left_area,right_area,mid_area)","max(res,","max(res,width","mid","mid)*h","mid+1","mid_area","n","n//2","pass","range(len(heights)):","range(n):","re","reserved，pow","return","right","right[0]","right_area","right_i","right_i，即最大面积为","self.largestrectanglearea(left)","self.largestrectanglearea(right)","solution(object):","solution:","stack","stack.append(i)","stack.pop()","stack:","stack[","tmp","width","©","​","。","个单位。","个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为","为中心，向左找第一个小于","以上是柱状图的示例，其中每个柱子的宽度为","位置最大面积是什么？","何去何从gw","分治法","单调栈","单调递减栈","单调递减栈（简写）","单调递减栈，原始数组右边添加一个最小值，是为了让栈内元素全部出栈","单调递增栈，原始数组右边添加一个最大值，是为了让栈内元素全部出栈","和","图中阴影部分为所能勾勒出的最大矩形面积，其面积为","左右移动。","我们要求每一个矩形高度，左边和右边第一个小于该矩形高度的下标。","所以，我们的问题就变成如何找","是以i","暴力法","最大矩形区域包含选定柱子的区域。","最大矩形区域在不包含选定柱子的右半区域当中。","最大矩形区域在不包含选定柱子的左半区域当中。","最简单的思路就是，就是暴力法，直接分别在","柱状图中最大的矩形(leetcode_84)","柱状图中最大的矩形_leetcode_84","每弹出一个元素，就计算比当前弹出元素小的元素有多少个","求在该柱状图中，能够勾勒出来的矩形的最大面积。","求左边，右边两边的下标，所以要在原始数组左右各添加一个无穷小（或者原始数组中的最小值）","的位置","示例:","给定","输入:","输出:","首先明确，是小于，所以用单调递减栈。","首先，要想找到第","高度为0的矩形，即heights[0]"],"单调栈/小牛向右看_POJ_3250.html":["(i","+=","0","07","1)","1.题目","14:58:19","1]]:","2.分析","2019","22","3.代码","3250","=","[]","arr","arr+[float('inf')]","arr:return","arr[i]=arr[stack[","copyright","def","func(arr):","gitbook该文件修订时间：","poj","range(len(arr)):","re","reserved，pow","return","right","stack","stack.append(i)","stack.pop()","tmp","©","​","何去何从gw","单调栈","原始数组右边添加float('inf')","双重循环遍历，时间复杂度为o(n^2)，","小牛向右看_poj_3250","时间复杂度为o(n)。","暴力法","有一群牛站成一排，每头牛都是面朝右的，每头牛可以看到他右边身高比他小的牛。给出每头牛的身高，要求每头牛能看到的牛的总数。","求每个数和它右边第一个比它大的数之间的数的个数，分别求出后相加即可。","用单调递增栈"],"单调栈/最大矩形_LeetCode_85.html":["#","+=","0","0,","07","0]","1","1,","1.题目","1=0","1]","1]==\"1\":","1]]:","2,","2.分析","2019","22","22:15:34","2]","3,","3.代码","6","=","=[0]*(m+2)","=[]",">","[","[\"1\",\"0\",\"0\",\"1\",\"0\"]","[\"1\",\"0\",\"1\",\"0\",\"0\"],","[\"1\",\"0\",\"1\",\"1\",\"1\"],","[\"1\",\"1\",\"1\",\"1\",\"1\"],","[0]*(m+2)","[0]+copy.deepcopy(arr[i][:])+[0]","[0]+tmp_arr[:]+[0]","[1,","[2,","[3,","[4,","[]","]","arr","arr.append(tmp_arr)","arr:","arr_","arr_[j]","arr_[j]>arr_[stack[","class","copi","copyright","def","else:","gitbook该文件修订时间：","height","heights[j]","import","int:","j","k","k>=0","len(matrix),len(matrix[0])","list[list[str]])","matrix","matrix:","matrix[0]:","matrix[k][j","matrix[k][j]==\"1\":","maximalrectangle(self,","n,m","print(arr[2])","print(arr_)","print(i)","range(m):","range(m+2):","range(n):","re","reserved，pow","return","right","solution:","stack","stack.append(j)","tmp","tmp_arr","tmp_arr.append(tmp)","©","​","上面代码的17，18行的输出","何去何从gw","先计算出矩形高度矩阵","动态规划","参考接雨水","参考柱状图中最大的矩形(leetcode_84)","和","对每一行进行应用单调递减栈","最优方法","最大矩形(leetcode_85)","最大矩形_leetcode_85","未写代码","本来是","用height_j记录第i行为底,第j列高度是多少.","用left_j记录第i行为底,","用right_j记录第i行为底,","的二维二进制矩阵，找出只包含","的最大矩形，并返回其面积。","矩形高度矩阵，然后对每一行应用单调栈","示例:","第j列右边第一个小于height_j[j]的位置","第j列左边第一个小于height_j[j]的位置","给定一个仅包含","计算一行矩形的高度就用一次单调栈","计算完一行中一个元素，就应用单调栈","输入:","输出:"],"单调栈/接雨水_LeetCode_42.html":["#","(i","(min(height[stack[","(tmp","*","+","+=",",最后个元素也不需要float('inf')","0","07","1","1)","1):","1,","1,high_id,","1.题目","1:return","1]","1])","1]:","1]]","1]],height[i])","1]]:","2,","2.分析","2019","22","22:15:10","3,","3.代码","3]","6","=","==","==注意：==因为左边和右边对于接雨水没有用，所以第一个元素的左边我们不需要加float('inf')",">","[0,","[0,1,0,2,1,0,1,3,2,1,2,1]","[3,","[]","[float('inf')]","[height[","break","class","copyright","def","else:","gitbook该文件修订时间：","height","height:","height[","height[0]","height[:]","height[i]","height[i])","height[i]:","height[i]=height[stack[","height[i]>height[stack[","height[i]>high_num:","height[j]","height[j])","height[j]>left:","height[j]>right:","height[tmp])","high_id","high_num","int:","j","left","left.append(height[i])","left.append(left[","left[","len(height)","list[int])","min(left[i],","min(right,left)","n","pass","print(high_id)","print(high_num)","print(left)","print(res)","print(right)","range(0,high_id):","range(0,i):","range(1,n","range(1,n):","range(i+1,n):","range(n","range(n):","re","reserved，pow","return","right","right.insert(0,height[j])","right.insert(0,right[0])","right[0]:","right[i])","solution:","stack","stack.append(i)","stack.pop()","stack:","stack[","stdout:","tmp","tmp:","tmp>height[i]:","trap(self,","©","上面是由数组","不用动态规划","不用动态规划（...）","个单位的雨水（蓝色部分表示雨水）。","个非负整数表示每个宽度为","从右边往最高点遍历","从左边往最高点遍历","位置i能容下雨水量:min(3,1)","何去何从gw","动态规划","单调栈","单调递增栈","单调递增栈:","在一个位置能容下的雨水量等于它左右两边(并不要求最近的最高)柱子最大高度的最小值减去它的高度.比如下图所示,","如何找所有位置的左右两边的柱子的最大值?","左右两边不可能盛水，所以跳过，不遍历","左右两边界不能装水，所以我们不需要","当前柱子高度比左右两边都高，则该处不能盛水，跳过","所以,问题就变成了:","找到最高点","找到最高点,然后从左右两边遍历到中间","找最高点，然后从左右两边遍历到中间","接雨水(leetcode_42)","接雨水_leetcode_42","数组的端点，不可能盛水，所以跳过，不用遍历","测试用例","的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。","示例:","给定","表示的高度图，在这种情况下，可以接","输入:","输入：[0,1,0,2,1,0,1,3,2,1,2,1]","输出:","输出：6","这道题真正难点在于:","预期结果：6"],"字符串/":["07","2019","22:00:38","copyright","gitbook该文件修订时间：","reserved，pow","right","©","何去何从gw","字符串"],"字符串/验证回文字符串.html":["!=","\"a","\"race","\"thi","\"this\";","\"this2009\";","#","#!/usr/bin/python","&","''.join(filter(str.isalnum,","''.join(filter(str.isalnum,s)).lower()","''.join(list(filter(str.isalnum,s)))","','')","*","//","0,","07","1","1.题目","18:35:10","1:","1]","1].lower():","1]:","2","2.分析","2019","23","2:","3.代码","8","=","==",">","[i","bool:","canal:","car\"","coding:","copyright","def","digit","example....wow!!!\";","fals","gitbook该文件修订时间：","i.isalnum()]","isalnum()","isalpha()","ispalindrome(self,","l","l,","len(s)","man,","mid","n","panama\"","plan,","print","print(s)","python","r","range(mid):","range(n//2):","reserved，pow","return","right","s","s)).lower()","s):","s.lower().replace('","s:","s[i]","s[i].lower()","s[n","s_filter","s_filter[::","space","str","str)","str.isalnum();","str.isalpha();","string","true","true,否则返回","utf","©","​","何去何从gw","前三句话可以变成这样","可以利用对撞指针","如果","如果字符串至少有一个字符并且所有字符都是字母则返回","字符中没有空格","指针对撞法","方法检测字符串是否只由字母组成。","方法检测字符串是否由字母和数字组成。","示例","简洁方式","给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。","至少有一个字符并且所有字符都是字母或数字则返回","说明：本题中，我们将空字符串定义为有效的回文串。","输入:","输出","输出:","验证回文字符串"],"字符串/实现 Trie 前缀树 Leetcode 208.html":["\"\"\"","\"end\"","#","#第一次insert，最后一个'e'存在结束'end'","'end':","(前缀树)(leetcod","(前缀树)_leetcod","(前缀树)，包含","//","08","1.题目","10","2.分析","2019","208","208)","22:49:16","3.代码",":rtype:",":type","=","==","====================================================","=========================================================================",">","[none]*26","__init__(self):","app:","apple:{'a':","bool","bool:","call","char","class","copyright","data","def","fals","gitbook该文件修订时间：","given","here.","initi","insert","insert(self,","insert,","instanti","new","node","node.setdefault(char,","node:","node[\"end\"]","node['end']","node[char]","none","none:","obj","obj.insert(word)","obj.search(word)","obj.startswith(prefix)","object","ord('a')]","ord('a')]==none:","param_2","param_3","prefix):","prefix.","prefix:","reserved，pow","return","right","search(self,","search,","self.last","self.nod","self.root","start","startswith","startswith(self,","str","str)","structur","such:","tree","tree.last","tree.nodes[ord(i)","trie","trie()","trie();","trie(object):","trie.","trie.insert(\"app\");","trie.insert(\"apple\");","trie.search(\"app\");","trie.search(\"apple\");","trie.startswith(\"app\");","trie:","trienode()","trienode(object):","trie树，即字典树，又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。”","true","true}},","true}}}}#第二次insert，第二个'p'存在结束'end'","true}}}}}}","word","word):","word:","z","z中的一种可能。","{'a':","{'e':","{'end':","{'l':","{'p':","{}","{})","©","​","何去何从gw","你可以假设所有的输入都是由小写字母","保证所有输入均为非空字符串。","前缀树的功能很强大，可以做文本词频统计，例如我们在搜索框中的搜索提示，就可以利用前缀树实现。因此，前缀树基本的操作是字符串的插入，搜索，删除，查找前缀等。","和","实现","实现一个","总体来讲，前缀树的构造过程，通过不断插入新的字符串来丰富这棵26叉树。强调注意这里是26叉树，因为每一个英文字符串中下一个字母都只能是a","构成的。","没有就新建{}，有就利用char对应的{}","法2(推荐)","法一","示例:","等价","说明:","返回","这三个操作。"],"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":["!=","#","'end'","(index",".","04","0:","1.题目","14","2.分析","2019","20:17:24","211)","211)(前缀树","3.代码","=","==",">","[]","__init__(self):","addword(\"bad\")","addword(\"dad\")","addword(\"mad\")","addword(self,","addword(word)","bool","bool:","c++","class","copyright","def","dfs(self,","el","else:","enumerate(word):","fals","gitbook该文件修订时间：","i!='.':","index,valu","leetcod","len(word)","list[str]:","none:","print(word)","python代码","re","res.append(word)","reserved，pow","return","right","root","root):","root.keys():#","root:","search(\".ad\")","search(\"b..\")","search(\"bad\")","search(\"pad\")","search(self,","search(word)","self.dfs(word,self.root)","self.dfs(word[1:],root[ele]):","self.dfs(word[1:],root[i])","self.root","str)","tree","tree.addword(word)","tree.search(word):","tree.setdefault(i,{'end':false})","tree.setdefault(i,{})","tree:","tree['end']","tree['isend']","tree[i]","true","valu","void","word","word,","word:","worddictionary()","worddictionary:","words:","z","{'end':false}","{'isend':false}","{}","©","‘end’，这种情况，因为它没有对应一个字典，而是存储了false和tru","。","不要忘记写return","何去何从gw","你可以假设所有单词都是由小写字母","可以不用keys,直接tre","可以搜索文字或正则表达式字符串，字符串只包含字母","可以表示任何一个字母。","或","数据结构设计","数据结构设计(leetcod","添加与搜索单词","示例:","组成的。","设计一个支持以下两种操作的数据结构：","说明:","这儿一定要注意，排除ele","，只写self...没有return，等于空了吹"],"字符串/字符串的反转.html":["\"\"\"","#","04","1.题目","14","1：","2.分析","2019","20:16:53","2：","3.代码","=",">","anything,","ascii","char[]","copyright","def","enumerate(s):","gitbook该文件修订时间：","i,key","instead.","k","len(s)","list[str])","modifi","none:","o(1)","place","reserved，pow","return","reversestring(self,","right","s","s.reverse()","s:","©","不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用","何去何从gw","你可以假设数组中的所有字符都是","字符串的反转","的形式给出。","的额外空间解决这一问题。","码表中的可打印字符。","示例","编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组","自己写","输入：[\"h\",\"a\",\"n\",\"n\",\"a\",\"h\"]","输入：[\"h\",\"e\",\"l\",\"l\",\"o\"]","输出：[\"h\",\"a\",\"n\",\"n\",\"a\",\"h\"]","输出：[\"o\",\"l\",\"l\",\"e\",\"h\"]"],"字符串/单词的反转.html":["'abc","04","1.题目","14","2.分析","2019","20:16:28","3.代码","=",">>>>>>>'a","abc'","as'","copyright","def","end","end):","func(s,","gitbook该文件修订时间：","i,","j","len(s)","reserved，pow","right","s_len","start,","©","两次反转","何去何从gw","单词的反转"],"字符串/判断是不是换位字符串.html":["!=","'aaad'和’'daaa'是换位字符串","+=","04","0:","1","1.题目","14","2.分析","2019","20:15:39","3.代码","=","[0]*256","bag","bag:","bag[ord(i)]","bag[ord(j)]","copyright","def","func('addabas','aabdda')","func(s1,","gitbook该文件修订时间：","j","k","print('不是换位字符串')","print('是换位字符串')","reserved，pow","return","right","s1:","s2):","s2:","©","何去何从gw","判断是不是换位字符串"],"字符串/两个字符串的最长公共子串.html":["$mat[i][j]$","$s1[某,","$的最长公共子串的长度","'dgcadabcdcdde')","'dgcadde')",",","0","07","1","1.题目","16:16:11","1]","1]+1","1],s2[","1]:","1][j","2.分析","2019","21","3.代码","=","==",">","[[0]*(s2_len+1)","]","_","copyright","def","else:","findmaxsub('abccade',","findmaxsub('abcdcdabccade',","findmaxsub(s1,","gitbook该文件修订时间：","j","len(s1)","len(s2)","mat","mat[i","mat[i][j]","max_id","max_len","max_len:","max_len:max_id]","max_str","print(max_str,max_len)","range(1,s1_len+1):","range(1,s2_len+1):","range(s1_len+1)]","reserved，pow","right","s1[i","s1[max_id","s1_len","s2):","s2[j","s2_len","©","两个字符串的最长公共子串","代码1","代码2","何去何从gw","某","表示"],"字符串/字符串转换整数 atoi.html":["\"","\",1)[0]","\"4193","\"42\"","\"word","#","'","',","'0123456789+","'3'","':","'w',","(atoi)","(−231)","0","04","1","14","1:","2.分析","2019","20:16:57","2147483648","2:","3.代码","32","3:","4193","42","42\"","4:","5:","91283472332\"","987\"","=","==","_atoi","copyright","def","gitbook该文件修订时间：","index","int_min","len(s)","length","myatoi(self,","reserved，pow","return","right","s","s):","s.lstrip().split(\"","s[0]","words\"","©","’","。","之所以用s[index].isdigit(),是因为有可能这种情况，‘0012a42’","但它不是数字或正、负号。","位有符号整数范围。","何去何从gw","因此无法执行有效的转换。","因此返回","字符串转换整数","它是一个负号。","忍不住想吐槽leetcode，日你妈，题目说明不完善，操你大爷的！！！！","我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到","数字","示例","第一个非空字符是","第一个非空白字符为","草泥马，leetcod","解释:","超过","跳过第一个字符，因为第一个字符有可能是‘+","转换截止于数字","输入:","输出:","，因为它的下一个字符不为数字。"],"字符串/无重复字符的最长子串.html":["\"abc\"，所以其长度为","\"abcabcbb\"","\"b\"，所以其长度为","\"bbbbb\"","\"pwwkew\"","\"wke\"，所以其长度为","#","''","'int':","'str')","+=","0","04","1","1.题目","14","1:","1。","2.分析","2019","20:16:59","2:","3","3.代码1","3:","3。","=",">","bag","break","class","copyright","count","def","else:","enumerate(s):","gitbook该文件修订时间：","index,","j","lengthoflongestsubstring(self,","max_str","max_str:","print(s)","range(len(s)):","re","res_count","res_count:","res_str","reserved，pow","return","right","s:","s[i:]:","solution:","start","valu","{}","©","代码2(理解版)","何去何从gw","因为无重复字符的最长子串是","子串","循环这么多次","无重复字符的最长子串","是一个子序列，不是子串。","最大结果","最长子串","最长字符串","的长度。","的长度，\"pwke\"","示例","给定一个字符串，请你找出其中不含有重复字符的","解释:","请注意，你的答案必须是","输入:","输出:"],"字符串/最长公共前缀 腾讯.html":["\"\"","\"\"。","\"fl\"","#","''","'list[str]')","'str':","+=","04","0:","1.题目","14","1:","1:#","2.分析","2019","20:17:00","2:","3.代码","=","==",">","[\"dog\",\"racecar\",\"car\"]","[\"flower\",\"flow\",\"flight\"]","copyright","def","else:","gitbook该文件修订时间：","i[0]","len(set(i))","len(strs)","longestcommonprefix(self,","re","reserved，pow","return","right","strs:","strs[0]","z","zip(*strs):#zip()函数用于将可迭代对象作为参数，将对象中对应的元素打包成一个个元","©","。","何去何从gw","利用集合创建一个无序但不重复（重要）的元素集，可以判断不同字符串","同一位置是否是相同字母，如果是，加入该字母，否....","如果不存在公共前缀，返回空字符串","所有输入只包含小写字母","最长公共前缀（腾讯）","示例","组，然后返回由这些元组组成的列表","编写一个函数来查找字符串数组中的最长公共前缀。","解释:","说明:","输入:","输入不存在公共前缀。","输出:"],"字符串/判断一个串是不是另一个串的子串.html":["#","'aabcsssdfddf'","'abc'","'abcd'","'abcdfd'","'ad'","'fs'","'fsffsf'","'ssd'","+=","0","04","1","1.题目","14","2.分析","2019","20:15:39","3.代码","=","==","copyright","def","else:","fals","gitbook该文件修订时间：","index","len(s1)","print(\"false\")","print('true')","print(i)","range(len(s2)):","reserved，pow","result","return","right","s1","s1[index]:","s1_len","s1_len:","s2","s2)","s2):","s2[i]","substr(s1,","true","©","何去何从gw","判断s1是不是s2的子串","判断一个串是不是另一个串的子串","判断一个字符串是不是另一个字符串的子串，如","如果从某一个字符开始，两串对应字符不相等，得重新计数"],"字符串/判断一个序列是不是另一个字符串的子序列.html":["'abc',则s1不是s2的子序列,","'abc',则s1是s2的子序列","'abc',则s1是s2的子序列,","'abd',则s1不是s2的子序列,",",返回true","04","0;","1.题目","14","2.分析","2019","20:15:39","3.代码","=","==","==len(s1)","copyright","def","gitbook该文件修订时间：","if(index","index","reserved，pow","res加1，最后统计结果看","return","right","s","s1","s2:","s2为基准，依次取出s2的字符，判断与s1的字符相等不，相等","subseq(s1,s2):","true","©","两个串长度相等，内容相同，则s1是s2","以","何去何从gw","判断一个串s1是不是另一个串s2的子序列，","判断一个序列是不是另一个字符串的子序列","如s1='a'，s2","如s1='abc'，s2","如s1='ac'，s2","如s1='ad'，s2","如果两个串长度不相等，则s1要想成为s2的子序列，则我们可以","我们可以观察发现，如果","是否re","的子序列，","返回fals","返回true"],"字符串/旋转字符串 LeetCode 796.html":["!=","#","'abcde',","'abcde'，在移动一次之后结果就是'bcdea'","'abced'","'cdeab'","+=","0","07","1","1.题目","100。","1:","2.分析","2019","22","22:44:13","2:","3.1代码1","3.2代码2","3.3代码3","3.代码","=","==",">","a*2","a:","a[1:]+a[0]","b","b:","bool:","b。","copyright","def","else:","fals","gitbook该文件修订时间：","index","len(a)","len(b):","len(s1)","len(s2)","range(0,len(a)):","range(s2_len):","reserved，pow","return","right","rotatestring(self,","s1,","s1[index]:","s1_len","s1_len:","s2):","s2[i]","s2_len","self.substr(b,","str)","str,","str_all","str_all)","substr(self,","true","©","。如果在若干次旋转操作之后，a","何去何从gw","例如,","判断一个串是不是另一个串的子串","和","旋转字符串__leetcode796","旋转字符串（leetcode796）","最左边的字符移动到最右边。","注意：","的旋转操作就是将","示例","给定两个字符串,","能变成b，那么返回true。","若","输入:","输出:","长度不超过"],"字符串/字符串相乘 LeetCode 43.html":["!=","\"123\",","\"2\",","\"3\"","\"456\"","\"56088\"","\"6\"","#","%","''.join(map(str,res[i:]))","''.join(res[i:])","'0'","(num1_len","*","*(num1_len+num2_len)","*10**(i+j","+","+=","0","01:07:02","08","0:","1):","1,","1.题目","10","18","1:","2)","2.分析","2019","2:","3.代码","43","43)","9。","=",">","[0]","biginteger）或直接将输入转换为整数来处理。","copyright","def","gitbook该文件修订时间：","i])","int(num1[","int(num1[i])","int(num2[","int(num2[j])","int(res[i+j+1])","j","j])","len(num1)","len(num2)","len(num2)+1):","list(map(str,","multiply(self,","num1","num1,","num1:","num1_len","num2","num2):","num2:","num2_len","num2_len)","num2，返回","print(res)","range(1,","range(1,len(num1)+1):","range(num1_len","range(num1_len+num2_len):","range(num2_len","re","res))","res[i+j+1]","res[i+j]","res[i]","res[i]!='0':","reserved，pow","return","right","str(res)","str)","str,","str:","tmp","tmp%10","tmp//10","©","不能使用任何标准库的大数类型（比如","从右向左，所以res[i+j+1]我们可以获取得到","代码1","代码2（大神版）","何去何从gw","只包含数字","和","均不以零开头，除非是数字","字符串相乘(leetcod","字符串相乘__leetcod","对于这个问题，如果你注意到下面的这个规律话就非常简单。","我们是按照从左向右的顺序存储的数字。我们注意到对于index:i和index:j相乘的话，结果在index:i+j和index:i+j+1上。","本身。","的乘积，它们的乘积也表示为字符串形式。","的长度小于110。","示例","给定两个以字符串形式表示的非负整数","说明：","输入:","输出:","首先要说明的是"],"字符串/反转字符串中的单词 III.html":["\"let'","\"s'tel","#","'","''","''.join(s)","'':","'.join(i[::","':",",","0","07","1)","1):","1.题目","1:","1]","1])","2.分析","2019","22","22:43:23","3.代码","=","==",">","[]","b","b,","b:begin","contest\"","copyright","def","e):","e:end","edocteel","ekat","func(self,","gitbook该文件修订时间：","i+1","iii","leetcod","len(s)","list(s)","print(res)","print(s.split()[::","range(len(s)","re","reserved，pow","return","reversewords(self,","right","s","s)","s):","s,","s.split()","s:","s[i]","self.func(s,","start","start,","str)","str:","take","tsetnoc\"","©","代码1","代码2","何去何从gw","反转字符串中的单词","注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。","示例","给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。","输入:","输出:","需要逆置的子串的头尾序号"],"字符串/存在重复元素.html":["04","1.题目","14","1:","2.分析","2019","20:16:57","2:","3.代码","3:","=","==",">=","[1,1,1,3,3,4,3,2,4,2]","[1,2,3,1]","[1,2,3,4]","collect","containsduplicate(self,","copyright","counter","counter(nums)","def","fals","false。","gitbook该文件修订时间：","import","len(nums)","len(set(nums))","nums):","nums_count","nums_count.values():","reserved，pow","return","right","true","true。如果数组中每个元素都不相同，则返回","©","何去何从gw","如果任何值在数组中出现至少两次，函数返回","存在重复元素","示例","给定一个整数数组，判断是否存在重复元素。","输入:","输出:"],"字符串/字符串相加_LeetCode_415.html":["#","''","+","0","08","1","1.题目","10)","15","17:09:14","2.分析","2019","3.代码","5100.","9.","=",">","addstrings(self,","biginteg","copyright","def","divmod(int(i)+int(j)+tmp,","divmod(int(i)+int(j)+tmp,10)","gitbook该文件修订时间：","j","len(num1)","len(num2)","list(num1)","list(num2)","num1","num1.pop()","num1:","num1[num1_len]","num1_len","num1_len>0","num1_len>=0","num2","num2.pop()","num2:","num2[num2_len]","num2_len","num2_len>0","num2_len>=0","re","reserved，pow","return","right","s","s,i","s:商","str(y)","str)","str,","str:","tmp","tmp:","y:余数","©","也不能直接将输入的字符串转换为整数形式。","何去何从gw","你不能使用任何內建","和num2","字符串相加(leetcode_415)","字符串相加_leetcode_415","库，","法一","法一：转化为列表","法二","法二：不转化为列表","注意：","的长度都小于","给定两个字符串形式的非负整数","都不包含任何前导零。","都只包含数字","，计算它们的和。"],"字符串/第一个只出现一次的字符.html":["!=","#","'':","+=","08","1","122，而每个字母的index=int(word)","18","1:","2019","22:45:08","65=38，而数组中具体记录的内容是该字母出现的次数，最终遍历一遍字符串，找出第一个数组内容为1的字母就可以了，时间复杂度为o(n)","65]","65，比如g=103","90，a","96不是字母","=","==","[0]*58","ascii码中的90","class","code","copyright","def","dict()","else:","firstnotrepeatingchar(self,","gitbook该文件修订时间：","here","len(s)","n","range(n):","re","res:","res[ord(i)","res[ord(s[i])","res[s[i]]","reserved，pow","return","right","s","s):","s:","s[i]","solution:","write","z对应的ascii码为65","z对应的ascii码值为97","©","不然就要判断是否是小写字母","但是为了统一减65来计算","何去何从gw","在一个字符串(0","字典法","小写字母要减65再减6","所以要再加上6个长度","第一个只出现一次的字符","说一下解题思路哈，其实主要还是hash，利用每个字母的ascii码作hash来作为数组的index。首先用一个58长度的数组来存储每个字母出现的次数，为什么是58呢，主要是由于a"],"数组/":["07","2019","22:00:38","copyright","gitbook该文件修订时间：","reserved，pow","right","©","何去何从gw","数组"],"数组/搜索旋转排序数组.html":["#target在左边","#左边是有序的","'bool':","(",")。","+","0","0,","04","0:","1","1,","1,否则头指针变为mid","1,否则尾指针变为mid","1.题目","14","1:","1;（3）如果nums[mid]比头元素小，并且目标值在尾巴元素和中间元素之间，那么头指针就变为mid","1即可，总之就还是二分法的应用，仔细推敲，分析就可以弄懂！","1，不管数组如何变化，它总归还是一个有序数组，只是变成了两个升序数组的组合，所以可以使用二分法；","1；","2.分析","2019","20:16:58","2:","2，双指针，指向头尾，拿着target和数组中间元素nums[mid]比较，分三种情况判断：（1）若相等则直接mid就是答案；（2）如果nums[mid]比头元素大与等于，并且目标值在它和头元素之间，则尾指针变为mid","3","3.代码","3，如果全部没有找到目标值相匹配的元素，或者数组长度为空，就返回","4","=","==",">",">=","[0,1,2,4,5,6,7]","[4,5,6,7,0,1,2]","[4,5,6,7,0,1,2],","binary_search(self,","class","copyright","def","elif","else:","fals","gitbook该文件修订时间：","int)","int:","l","l,","left","left,","len(nums)","list[int],","mid","n)","none:return","num","nums,","nums:","nums[l]","nums[l]:","nums[left]:","nums[mid]","o(log","r","reserved，pow","return","right","right,","search(self,","self.binary_search(left,","self.sub_search(0,","self.sub_search(mid","solution:","sub_search(self,","target","target)","target):","target:","©","。","优秀的代码","何去何从gw","你可以假设数组中不存在重复的元素。","你的算法时间复杂度必须是","例如，数组","假设按照升序排序的数组在预先未知的某个点上进行了旋转。","可能变为","右边有序，去右边找","左边有序，去左边找","思路","搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回","搜索旋转排序数组","方法：双指针二分法","示例","级别。","输入:","输出:"],"数组/搜索旋转排序数组 II LeetCode 81.html":["\"\"\"","#target在左边","#左边是有序的","'bool':","(",")。","+","0","0,","04","0:","1","1,","1.题目","14","1:","2.分析","2019","20:16:58","2:","3","3.代码","33：搜索旋转排列数组（最详细的解法！！！）问题的延伸。如果使用之前的方法解决这个问题，会出现错误，例如","81","81)",":rtype:",":type","=","==",">","[0,0,1,2,2,5,6]","[2,5,6,0,0,1,2]","[2,5,6,0,0,1,2],","binary_search(self,","bool","bool:","class","copyright","def","elif","else:","fals","false。","gitbook该文件修订时间：","high","ii(leetcod","ii_leetcod","int","int)","l","l,","left","left,","len(nums)","list(set(nums))","list[int]","list[int],","low","low,","mid","none:","num","nums,","nums:","nums[left]:","nums[mid]","r","reserved，pow","return","right","right,","search(self,","self.binary_search(left,","self.sub_search(0,","self.sub_search(mid","solution:","sub_search(self,","target","target)","target):","target:","true","true，否则返回","|","©","一种最简单的思路就是将nums的重复元素去除，然后在使用之前的方法就可以啦。","不去重代码","丨","优秀的代码","何去何从gw","例如，数组","假设按照升序排序的数组在预先未知的某个点上进行了旋转。","去重代码","可能包含重复元素。","可能变为","我们会在[0:2]这个区间查找对应元素，但是这样是错误的，这个区间并不是递增区间。那要怎么做呢？","搜索旋转排序数组","的延伸题目，本题中的","示例","编写一个函数来判断给定的目标值是否存在于数组中。若存在返回","解题思路","输入:","输出:","这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？","这是","这是之前leetcod","进阶:"],"数组/合并两个有序数组.html":["\"\"\"","#","'''","(m+n","+","07","1","1(因为这是下标表示，所以减一)。归并结果保存位置从","1)开始(因为这是下标表示，所以减一)。归并起点和归并结果的位置都是从右向左前进。","1,n","1.题目","16:55:54","2.分析","2019","23","3","3.代码","=",">","[1,2,2,3,5,6]","[1,2,3,0,0,0],","[1,2,3,4,5]","[1,2]","[2,5,6],","[3,4,3,4,5]","[]","anything,","class","copyright","cur","def","else:","gitbook该文件修订时间：","instead.","int)","int,","list[int],","m","m+n","m:","m>=0:","merge(self,","modifi","n","n:","n=","n=1","n>=0","n>=0:","none:","num1","nums1","nums1:","nums1[cur]","nums1[m]","nums1[m]>nums2[n]:","nums2","nums2:","nums2[n]","nums2的下标为","nums2，将","n。","n）来保存","place","reserved，pow","return","right","solution:","©","【1,2,5,0,0】","【1,2】","【3,4,5,0,0】","【3,4】","不用第二个循环","两个有序数组进行合并,就联想到归并排序。我们既可以从前往后归并，也可以从后往前归并。","中的元素。","中，使得","但是本题nums1后面留的空间足够，所以我们在nums1尾部进行添加元素，不需要重新开辟数组进行归并。因此我们只能从后向前归并，因为nums2归并到nums1上，如果从前往后归并，那么需要不断调整nums1的值，防止nums1中未归并的值被覆盖丢失，相当复杂。而我们从后往前归并，就不需要这么复杂了。","何去何从gw","你可以假设","初始化","合并两个有序数组","合并到","和","成为一个有序数组。","我们归并的起点为m","所以","有足够的空间（空间大小大于或等于","添加的新值的首下标","用while循环将nums2依次添加到nums1","的下标为","的元素数量分别为","示例:","第一个while循环跳出后,","第一轮循环合并完后，由于可能nums2指针未走完(n>=0:nums2还有元素比nums1最小元素小)，需要将nums2剩余首部覆盖至nums1首部。nums1指针未走完不需要做任何多余操作，因为覆盖前后相同。","给定两个有序整数数组","说明:","输入:","输出:"],"数组/旋转数组.html":["\"\"\"","#","%=","0","0,","07","0:","1","1)","1,","1.题目","100,3,99]","100,3]","100]","1:","2","2.分析","2019","22","22:41:23","2:","3","3.代码","=","==",">","[","[1,2,3,4,5,6,7]","[3,99,","[5,6,7,1,2,3,4]","[6,7,1,2,3,4,5]","[7,1,2,3,4,5,6]","[99,","anything,","class","copyright","count","def","end):","func(self,","gitbook该文件修订时间：","instead.","int)","k","k%n","k):","k,","k:","k:]+nums[0:n","k]","len(nums)","list[int],","modifi","n","none:","num","nums,","nums.insert(0,x)","nums.pop()","nums:","nums[(i+k)%n]","nums[:]","nums[i]","nums[n","o(1)","o(1)，时间复杂度","o(n)。","place","python","range(k):","range(n):","reserved，pow","return","right","rotate(self,","self.func(nums,","solution:","start","start,","tmp","tmp[(i+count)%n]","tmp[i]","x","~","©","不需要旋转","个位置，其中","代码1","代码2","何去何从gw","右旋","向右旋转","和","尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。","左旋","旋转数组","是非负数。","步:","注意：这儿是nums[:],而不是num","的原地算法。","示例","空间复杂度","给定一个数组，将数组中的元素向右移动","翻转","翻转法，经过三次翻转：","要求使用空间复杂度为","解释:","说明:","输入:","输出:"],"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":["#","(",")。",",则nums[mid+1]最小",",则nums[mid]最小",",则最小值在数组左边","0","08","1","1),","1.题目","14","153","153）","17:34:24","1:","2.分析","2019","2:","3.2代码2","3.3代码3","3.代码","=","==",">","[0,1,2,4,5,6,7]","[3,4,5,1,2]","[4,5,6,7,0,1,2]","copyright","def","elif","else:","findmin(self,","gitbook该文件修订时间：","int:","leetcod","left","left,","len(nums)","list[int])","mid","mid+1","mid+1,","min(self.findmin_1(nums,","nums):","nums:","nums[0]","nums[left],则最小值在数组右边","nums[left],如【2，2，2，1，2】无法区别时，只能求左右最小值，然后返回左右最小值中最小的","nums[left]:","nums[mid+1]","nums[mid]","nums[mid]:","nums[right]","reserved，pow","return","right","right))","self.findmin_1(nums,","©","二分法：首先要判断这个有序数组是否旋转了，通过比较第一个和最后一个数的大小，如果第一个数小，则没有#","二分法：首先要判断这个有序数组是否旋转了，通过比较第一个和最后一个数的大小，如果第一个数小，则没有旋转，直接返回这个数。如果第一个数大，就要进一步搜索。我们定义left和right两个指针分别指向开头和结尾，还要找到中间那个数，然后和left指的数比较，如果中间的数大，则继续二分查找右半段数组，反之查找左半段。终止条件是当左右两个指针相邻，返回小的那个。","何去何从gw","你可以假设数组中不存在重复元素。","例如，数组","假设按照升序排序的数组在预先未知的某个点上进行了旋转。","可能变为","如果nums[mid+1]","如果nums[mid]","如果没有旋转，则第一个元素小于最后个元素，直接返回第一个元素","寻找旋转排序数组中的最小值","寻找旋转排序数组中的最小值（leetcod","尾，还要找到中间那个数，然后和left指的数比较，如果中间的数大，则继续二分查找右半段数组，反之查找左半#","数组中元素全部相等，例如【1，1，1，1】","数组中大部分元素相同，如【1，0，1，1，1】","数组本身没有旋转，是一个有序数组，例如[1,2,3,4]","旋转，直接返回这个数。如果第一个数大，就要进一步搜索。我们定义left和right两个指针分别指向开头和结","段。终止条件是当左右两个指针相邻，返回小的那个。","没有旋转","示例","请找出其中最小的元素。","输入:","输出:","通过分析知道，旋转数组可以划分为两个有序数组，前面的数组的每个元素都大于等于后面数组的每个元素，可以用二分法不断缩小查找范围。","通过选择数组的特性知道，数组元素先是递增，然后突然下降到最小值，然后再递增。"],"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":["#","(",")。","0","08","1","1.题目","17","18:03:09","1:","1：","2.分析","2019","2：","3.代码","=","==","[0,1,2,4,5,6,7]","[1,3,5]","[2,2,2,0,1]","[4,5,6,7,0,1,2]","copyright","def","else:","findmin(self,","gitbook该文件修订时间：","ii(leetcode_154)","left","len(nums)","mid+1","nums):","nums:","nums[0]","nums[i]","nums[left]","nums[right]:","range(1,len(nums)):","reserved，pow","return","right","©","何去何从gw","例如，数组","假设按照升序排序的数组在预先未知的某个点上进行了旋转。","可能变为","寻找旋转排序数组中的最小值","寻找旋转排序数组中的最小值_含重复元素_leetcode_154","数组中存在重复元素，所以每次只缩小一个查找范围","暴力法","注意数组中可能存在重复的元素。","示例","请找出其中最小的元素。","输入:","输出:"],"数组/删除排序数组中的重复项.html":[",","0","04","1):","1,","1.题目","14","1]:","2.分析","2019","20:15:37","3.代码","=","==",">","copyright","def","gitbook该文件修订时间：","int:","len(nums)","list[int])","nums.pop(i)","nums:","nums[i","nums[i]","nums_len","range(nums_len","removeduplicates(self,","reserved，pow","right","©","何去何从gw","删除排序数组中的重复项"],"数组/找出数组中出现次数为奇数次的数 异或法.html":["#","&","(i>>pos)&1","+=","0","04","0:","1","1.题目","14","1:","2.分析","2019","20:16:57","3.代码","=","==",">>","[2,2,2,2,4,5,6,6]","^","^=","copyright","def","get2num(nums)","get2num(nums):","gitbook该文件修订时间：","num","nums:","po","print(tmp_res)","print(tmp_res^res)","re","reserved，pow","right","tmp_re","©","​","何去何从gw","异或法","找出异或结果中其中一位为1的位置","找出数组中出现次数为奇数次的数","找出数组中出现次数为奇数次的数（异或法）","数组中有n+2个数，其中n个数出现了偶数次，2个数出现了奇数次（这两个数不相同），请用o（1）的空间复杂度，找出这两个数，注意，不需要找出位置。"],"数组/求数组中两个元素的最小距离.html":["+=","0","07","0:","1","1.题目","2.分析","2019","22","22:41:57","3.1哈希法","3.2代码2（用while循环）","3.代码","=","==",">=","[!note]","a.get('3')","a[0]","bag","bag.get(k1))","bag.get(k2))","bag:","bag[value]","copyright","def","elif","enumerate(nums):","float('inf')","gitbook该文件修订时间：","index","index,","k1","k1,","k1:","k1_po","k1_pos)","k2","k2):","k2:","k2_po","k2_pos)","min(min_dis,","min_di","mindis([4,5,6,4,7,4,6,4,7,8,5,6,4,3,10,8],4,8)","mindis(nums,","nums[i]","print(bag)","print(min_dis)","reserved，pow","right","valu","{'3':2,'43':43}","{}","©","​","何去何从gw","和num2,求这两个数字在数组中出现的位置的最小距离","哈希法,双指针法","字典这么取值是错的","应该这样：","求数组中两个元素的最小距离","给定一个数组，数组中含有重复元素，给定两个数字num1"],"数组/回文数 LeetCode 9.html":["#","'bool':","'int')","+","01","04","1","1.题目","10","121","14","1:","1]","2.分析","2019","20:16:50","2:","3.代码","3:","9","9)","=","=0,","==",">","copyright","def","fals","func(self,","gitbook该文件修订时间：","ispalindrome(self,","l","l,","len(x)","new_x","r","reserved，pow","return","right","right_rev","right_rev*10","right_rev:","self.func(x)","str(x)","true","x","x%10","x):","x//10","x:","x==right_rev","x==right_rev//10","x[::","©","。","。因此它不是一个回文数。","不用自己写反转","为","从右向左读,","从左向右读,","何去何从gw","你能不将整数转为字符串来解决这个问题吗？","判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。","反转一半数","回文数(leetcod","回文数_leetcod","奇偶情况都考虑","如果负数，不是回文数；如果个位数是0（除0这种特殊情况），不是回文数","整数逆置","示例","自己写反转判断","解释:","输入:","输出:","进阶:"],"数组/异或操作.html":["#","&","(a","+","0","08","0x5555","0x5555)>","0xaaaa","0和一个数异或，等于该数","1","1,结果为1就是奇数个1，结果为0就是偶数个1；","1.性质","101010101010101","1010101010101010","12:56:07","18","1:","2.1找出只出现一次的元素","2.2不使用额外空间，交换元素","2.3互换二进制的奇偶位","2.3找出出现两次的数","2.4异或来判断一个二进制数中1的数量是奇数还是偶数","2019","2:","4","6","9","=","[2,2,1]","[4,1,2,1,2]","^","^=","a;","b","b;","copyright","def","finddup(nums):","gitbook该文件修订时间：","j","len(nums)","num","nums):","nums:","nums_len","print(i)","print(tmp)","re","reserved，pow","return","right","singlenumber(self,","tmp","tmp_1","tmp_2","©","两数不同，异或，等于其他数","两数相同，异或，等于0","代码","何去何从gw","你可以不使用额外空间来实现吗？","你的算法应该具有线性时间复杂度。","取出奇数位","异或操作","异或操作满足交换律和结合律","异或解决","求10100001中1的数量是奇数还是偶数；","示例","答案：1","给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。","说明：","输入:","输出:"],"数组/除自身以外数组的乘积.html":["#","(i+1)+1]","(i+1)]","*","04","1","1):","1,","1.题目","14","1]","1，返回输出数组","2.分析","2019","20:17:25","3.代码","=",">","[1,2,3,4]","[1]*nums_len","[24,12,8,6]","[]","copyright","def","gitbook该文件修订时间：","left","left[i","left[i]","len(nums)","n","num","nums):","nums[","nums[i","nums[i]","nums_len","nums_len):","nums，其中","o(n)","output","output[i]","print(res)","productexceptself(self,","range(1,","range(1,nums_len):","range(nums_len","range(nums_len):","re","res.append(left[i]*right[i])","res[i","res[i]","res[i]*right","reserved，pow","return","right","right[","©","中除","之外其余各元素的乘积。","何去何从gw","你可以在常数空间复杂度内完成这个题目吗？（","出于对空间复杂度分析的目的，输出数组不被视为额外空间。）","前缀积","时间复杂度内完成此题。","的整数数组","示例:","等于","给定长度为","说明:","请不要使用除法，且在","输入:","输出:","进阶：","除自身以外数组的乘积","，其中"],"数组/最大子序和LeetCode 53.html":["#","(子数组)","+=","0","08","1,","1,2,1,","1,2,1]","1.题目","10:34:50","15,","15）=","15）=max（8","15，","18","1]+array[i],","1）+array[i]","2,","2,1,","2.分析","2019","2]","2）=1","2）=max（3","2，","3,","3,4,","3.代码","3）=max（6","3，","3，3）=3","5,4],","53","53)","6","6。","7","7,","7，8）=8","=",">","[","[0]*a_len","[4,","a_len","array):","array[0]","array[i])","array[i]）","class","code","copyright","def","dp","dp[i]","dp[i])","findgreatestsumofsubarray(self,","f（0）=6","f（1）=max（f（0）","f（2）=max（f（1）","f（3）=max（f（2）+7，7）=max（1+7，7）=8","f（4）=max（f（3）","f（i）=max（f（i","f（i）：以array[i]为末尾元素的子数组的和的最大值，子数组的元素的相对位置不变","gitbook该文件修订时间：","here","i=1：","i=2：","i=3：","i=4：","len(array)","max(dp[i","max(res,","max_sub_sum","max_sub_sum:","maxsubarray(self,","num","nums):","nums:","nums[0]","o(n)","range(a_len):","re","res=6","res=max（f（1），res）=max（3，6）=6","res=max（f（2），res）=max（1，6）=6","res=max（f（2），res）=max（8，6）=8","res=max（f（4），res）=max（","res=max（res，f（i））","reserved，pow","res：所有子数组的和的最大值","return","right","solution(object):","sum","write","©","以此类推","何去何从gw","使用动态规划","初始状态：","动态规划","如数组[6,","如果你已经实现复杂度为","最大子序和(leetcod","最大子序和leetcod","最终res的值为8","的和最大，为","的解法，尝试使用更为精妙的分治法求解。","示例:","给定一个整数数组","解释:","输入:","输出:","进阶:","连续子数组","，","，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。"],"数组/两数之和 II - 输入无须数组.html":["+","0,","04","1","1,","1.题目","14","2.分析","2019","20:15:29","2],","3,","3.1二分法","3.2字典法","3.3字典法","3.4切片法","3.代码","5))","=",">","[[num,i]","[]","[index,","[new_list[i][1],","[nums.index(dif),","a:","b","b)","bag","bag:","bag[dif]]","binary_search(self,","break","class","copyright","def","dif","else:","enumerate(nums):","enumerate(nums)]","gitbook该文件修订时间：","i,num","i]","ii","index,","j","j:","left","left,","len(new_list)","len(nums)","li,","li[mid][0]:","mid","new_list","new_list.sort()","new_list[i][0]","new_list[j][1]]","none","nums,","nums[:i]:","nums[i]","nums_len","print(ret.twosum([","range(len(new_list)):","range(nums_len):","reserved，pow","ret","return","right","right,","self.binary_search(new_list,","solution()","solution:","target","target):","twosum(self,","val):","valu","{}","©","两数之和","何去何从gw","输入无须数组"],"数组/两数之和 II - 输入有序数组.html":["#","+","0","0,","07","09:17:38","1","1):","1,","1.题目","11,","15],","2","2.分析","2019","23","3.代码","3>22:","3>2:","4>2:","7","7,","9","=","==","==if",">","[1,2]","[2,","[]","[i+1,","[i+1,j+1]","a:","b","b)","binary_search(self,","break","class","continu","copyright","def","elif","else:","enumerate(numbers):","gitbook该文件修订时间：","ii","index,valu","index1","index2","index2。","index2）不是从零开始的。","index2，其中","int)","j","j!=i:","j+1]","left","left,","len(numbers)","len(nums)","li,","li[mid]:","list[int],","list[int]:","m:","m={}","m[value]=index","mid","none","number","numbers,","numbers:","numbers[i]+numbers[j]","nums,","nums[i]","print(111)","print(4444)","print(6666)","range(i+1,len(numbers)):","range(len(numbers)","range(len(nums)):","reserved，pow","return","return[m[target","right","right,","self.binary_search(nums,","solution:","sum_al","target","target):","target:","twosum(self,","val):","valu","value]+1,index+1]","©","。","。因此","与","两数之和","之和等于目标数","二分法","二分法，","何去何从gw","你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。","函数应该返回这两个下标值","双指针法（指针对撞法）","只会走一个","只会走一个==","可以不加，因为if","和","字典法","必须小于","指针对撞法","暴力法","暴力法，","的有序数组，找到两个数使得它们相加之和等于目标数。","示例:","给定一个已按照升序排列","解释:","说明:","输入:","输入有序数组","输出:","输出：111","输出：444","返回的下标值（index1"],"数组/反转字符串中的单词 III.html":["\"let'","\"s'tel","#","'","''","''.join(s)","'':","'.join(i[::","':",",","0","04","1)","1):","1.题目","14","1:","1]","1])","2.分析","2019","20:16:41","3.代码","=","==",">","[]","b","b,","b:begin","contest\"","copyright","def","e):","e:end","edocteel","ekat","func(self,","gitbook该文件修订时间：","i+1","iii","leetcod","len(s)","list(s)","print(res)","print(s.split()[::","range(len(s)","re","reserved，pow","return","reversewords(self,","right","s","s)","s):","s,","s.split()","s:","s[i]","self.func(s,","start","start,","str)","str:","take","tsetnoc\"","©","代码1","代码2","何去何从gw","反转字符串中的单词","注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。","示例","给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。","输入:","输出:","需要逆置的子串的头尾序号"],"数组/长度最小的子数组.html":["0","0,","04","0。","1.题目","14","2","2.分析","2019","20:17:25","3.代码","7,","=","==","[2,3,1,2,4,3]","[4,3]","class","copyright","def","else:","gitbook该文件修订时间：","left","left)","left,","len(nums)","log","min(min_len,","min_len","minsubarraylen(self,","n","n)","num","nums):","nums_len","nums_len+1","nums_len+1:","o(n","reserved，pow","return","right","s","s,","s:","solution:","sum_al","©","≥","个正整数的数组和一个正整数","何去何从gw","如果你已经完成了o(n)","子数组","时间复杂度的解法,","时间复杂度的解法。","是该条件下的长度最小的连续子数组。","滑动窗口法","的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回","示例:","给定一个含有","解释:","请尝试","输入:","输出:","进阶:","长度最小的子数组","，找出该数组中满足其和"],"数组/合并区间_LeetCode_56.html":["#","...","07","1.题目","18:03:38","1:","1][0],arr[i][0]),max(res[","1][1]","1][1],","1][1],arr[i][1])]","2.分析","2019","23","2:","3.代码","=",">",">=","[1,3]","[1,4]","[1,6].","[2,6]","[4,5]","[[1,3],[2,6],[8,10],[15,18]]","[[1,4],[4,5]]","[[1,5]]","[[1,6],[8,10],[15,18]]","[]","[arr[0]]","[min(res[","arr","arr[i][0]:","arr[i][1])","class","copyright","def","else:","gitbook该文件修订时间：","intervals:","intervals:return","key=lambda","list[list[int]])","list[list[int]]:","max(res[","merge(self,","print(arr)","range(1,len(arr)):","re","res.append([arr[i][0],arr[i][1]])","res.append(tmp)","res.pop()","res[","reserved，pow","return","right","solution:","sorted(intervals,","tmp","x:(x[0],[x[1]]))","x:x[0])","©","何去何从gw","区间","只需对每个元素第一个位置排序即可，不需要两个位置都排序","可被视为重叠区间。","合并区间(leetcode_56)","合并区间_leetcode_56","和","将它们合并为","略显复杂","示例","简化","给出一个区间的集合，请合并所有重叠的区间。","解释:","输入:","输出:","重叠,"],"数组/最长连续递增序列_LeetCode_674.html":["+=","08","1","1.题目","12:06:47","18","1:","1]+1","1]:","2.分析","2019","2:","3","3.代码","=",">","[1,3,5,4,7]","[1,3,5,7]","[1,3,5],","[2,2,2,2,2]","[2],","class","copyright","count","count)","def","dp[i","dp[i]","else:","findlengthoflcis(self,","gitbook该文件修订时间：","int:","len(nums)","len(nums)nums[i","list[int])","max(dp)","max(res,","n","nnums[i","nums:","nums_len","re","reserved，pow","return","right","solution:","©","也是升序的子序列,","但它不是连续的，因为5和7在原数组里被4隔开。","何去何从gw","动态规划","尽管","最长连续递增序列_leetcode_674","最长连续递增序列是","注意：数组长度不会超过10000。","示例","给定一个未经排序的整数数组，找到最长且连续的的递增序列。","要求时间复杂度为o（n）","解释:","输入:","输出:","长度为1。","长度为3。"],"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":["08","17","18:18:52","2019","=","copyright","def","func(nums):","gitbook该文件修订时间：","len(nums)","nums_len","reserved，pow","right","©","何去何从gw","冒泡排序是稳定的","调整数组，奇数在前偶数在后，保持相对顺序"],"数组/找出数组中2个出现一次的数.html":["#","+=","0","08","1","17:49:08","18","1、思路","2019","3.代码","=","==0:",">>=","[a,b]","^=","array):","array:","b","break","class","code","copyright","def","else:","findnumsappearonce(self,","gitbook该文件修订时间：","here","i>>index&1==1:","index","list(res)","re","res&1","res.add(i)","res.remove(i)","res:","reserved，pow","return","right","set()","solution:","true:","write","©","一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是o(n)，空间复杂度是o(1)。","一次遍历法","举例：{2,4,3,6,3,2,5,5}","二、题目","何去何从gw","其中ab是出现一次的两个数字","剑指offer（四十）：数组中只出现一次的数字","大家首先想到的是顺序扫描法，但是这种方法的时间复杂度是o（n^2）。接着大家又会考虑用哈希表的方法，但是空间复杂度不是o（1）。","应该怎么做才能即满足时间复杂度是o（n）又满足空间复杂度是o（1）的要求呢？","异或","我们依次对数组中的每个数字做异或运行之后，得到的结果用二进制表示是0010。异或得到结果中的倒数第二位是1，于是我们根据数字的倒数第二位是不是1分为两个子数组。第一个子数组{2,3,6,3,2}中所有数字的倒数第二位都是1，而第二个子数组{4,5,5}中所有数字的倒数第二位都是0。接下来只要分别两个子数组求异或，就能找到第一个子数组中只出现一次的数字是6，而第二个子数组中只出现一次的数字是4。","我们先不看找到俩个的情况，先看这样一个问题，如何在一个数组中找到一个只出现一次的数字呢？比如数组：{4,5,5}，唯一一个只出现一次的数字是4。","我们可以想一想“异或”运算的一个性质，我们直接举例说明。","我们知道异或的一个性质是：任何一个数字异或它自己都等于0。也就是说，如果我们从头到尾依次异或数组中的每一个数字，那么最终的结果刚好是那个只出现一次的数字。比如数组{4,5,5}，我们先用数组中的第一个元素4（二进制形式：0100）和数组中的第二个元素5（二进制形式：0101）进行异或操作，0100和0101异或得到0001，用这个得到的元素与数组中的三个元素5（二进制形式：0101）进行异或操作，0001和0101异或得到0100，正好是结果数字4。这是因为数组中相同的元素异或是为0的，因此就只剩下那个不成对的孤苦伶仃元素。","我们还是从头到尾一次异或数组中的每一个数字，那么最终得到的结果就是两个只出现一次的数组的异或结果。因为其他数字都出现了两次，在异或中全部抵消了。由于两个数字肯定不一样，那么异或的结果肯定不为0，也就是说这个结果数组的二进制表示至少有一个位为1。我们在结果数组中找到第一个为1的位的位置，记为第n位。现在我们以第n位是不是1为标准把元数组中的数字分成两个子数组，第一个子数组中每个数字的第n位都是1，而第二个子数组中每个数字的第n位都是0。","找出数组中2个出现一次的数","现在好了，我们已经知道了如何找到一个数组中找到一个只出现一次的数字，那么我们如何在一个数组中找到两个只出现一次的数字呢？如果，我们可以将原始数组分成两个子数组，使得每个子数组包含一个只出现一次的数字，而其他数字都成对出现。这样，我们就可以用上述方法找到那个孤苦伶仃的元素。","返回[a,b]","这个数组中只出现一次的两个数分别是4和6。怎么找到这个两个数字呢？"],"矩阵/":["07","2019","22:00:38","copyright","gitbook该文件修订时间：","reserved，pow","right","©","何去何从gw","矩阵"],"矩阵/搜索二维矩阵 LeetCode 74.html":["#","0","07","0:","1","1,","1.题目","11","11,","13","16,","19:08:15","1:","2.分析","2019","20],","2:","3","3,","3.代码","30,","34,","5,","50]","74","74)","7],","=","==","=[]",">","[","[1,","[10,","[23,","]","binary_search(self,li,","bool:","copyright","def","fals","gitbook该文件修订时间：","i,","i>=0","int)","j","left","left,","len(matrix)","len(matrix),","len(matrix[0])","list[list[int]],","m","m*n","m,","matrix","matrix,","matrix:","matrix:return","n","re","res.extend(i)","reserved，pow","return","right","right,","searchmatrix(self,","self.binary_search(res,","target","target)","target):","target:","true","x","©","一是变为一维列表，进行二分查找","二分查找","二是就在愿矩阵上，进行查找，不过起始点，选为左下，或者右上，但是我们不能选择左上角和右下角为起点，假设左上角的数字为1，我们查找数字为7，那么第一次比较7比1大，但是我们无法缩小查询范围（即不能剔除第一行，也不能剔除第一列）","从左下角开始查找","何去何从gw","在原矩阵上进行查找","搜索二维矩阵(leetcod","搜索二维矩阵_leetcod","每行中的整数从左到右按升序排列。","每行的第一个整数大于前一行的最后一个整数。","注意：这儿是将矩阵编程以为列表","矩阵中，是否存在一个目标值。该矩阵具有如下特性：","示例","编写一个高效的算法来判断","输入:","输出:"],"矩阵/搜索二维矩阵 II LeetCode 240.html":["\"\"\"","\"\"\"每一行都用二分法计算，但是，如果匹配成功啦，不是返回的下标，而是true","&&","(i>=0","(len","(matrix.empty())","(matrix[i][j]","/","//","//也可以这么判断，","0","0)","04","0:","0;","1","1,len(matrix[0])","1.题目","11,","12,","13,","14","14,","15],","16,","17,","19],","1;","2.分析","2019","20:16:57","20，返回","21,","22],","23,","240","240)","24],","26,","3.代码","30]","4,","5,","5，返回","6,","7,","8,","9,",":rtype:",":type",";","=","==","[","[1,","[10,","[18,","[2,","[3,","]","bool","c++","class","col","continue;","copyright","def","fals","false。","gitbook该文件修订时间：","ii(leetcod","ii_leetcod","int","j","len","len(matrix)","len(matrix[0])","list[list[int]]","m","m,","matrix","matrix,","matrix.size()","matrix.size();","matrix:","matrix[0].size()","n","public:","reserved，pow","return","right","row","row;","searchmatrix(self,","searchmatrix(vector>&","solut","target","target)","target):","target){","target:","target。该矩阵具有以下特性：","true。","x","{","}","©","不加这个传入为空的判断的话会访问越界","中的一个目标值","何去何从gw","只有一句话，可以不加大括号","因为展开成一维列表后也不是有序的，因此，我们就在原矩阵上进行查找，查找的起始点是左下角和右上角","如下：","搜索二维矩阵","每列的元素从上到下升序排列。","每行的元素从左到右升序排列。","现有矩阵","矩阵","示例:","给定","编写一个高效的算法来搜索"],"矩阵/最小路径和 LeetCode 64.html":["#","(动态规划1)：时间复杂为o(nm)和空间复杂度为o(nm)。典型的动态规划问题，假设当前已经开始计算s[i][j]，那么s[i][j]只可能从s[i","(动态规划2)：时间复杂度为o(nm)，空间复杂度为o(m)，此方法需要2m额外空间。当我们求s[i][j]时，s[i","(动态规划3)：时间复杂度为o(nm)，空间复杂度为o(m)，需要m大小的额外空间，注意此方法和方法三的区别，方法三需要2m大小的额外空间，此方法只需要m大小的额外空间，在方法三中我们保存当前行s[i]中的元素，假设我们当前计算s[i][j]，我们只需要知道s[i][j","*m","+","0","07","1.题目","1]","1])","1])+grid[i][j]","1])+grid[i][j]。我们需要一个o(nm)额外空间保存已经计算的s[i][j]的值，我们只需要访问一遍数组即可。因此时间复杂度为o(nm)，空间复杂度为o(n*m)。我们需要特殊处理矩阵中第一行和第一列。因为第一行没有s[i","1]+grid[i][j]计算得到，也就是s[i][j]","1],","1][","1][0]","1][j]","1][j])","1][j]+grid[i][j]或者s[i][j","1][j],","1][j],s[i][j","1][j]元素。","1][j]元素，只有s[i][j","1]元素。第一列没有s[i][j","1]元素，只有s[i","1]的值即可，不需要保存s[i]行中的元素。每次计算s[i][j]时，我们需要更新up[j]的值。","1]行中的元素保存在up数组中，数组的大小为m。我们把s[i]保存在now数组中，当s[i]行的元素计算完毕以后，我们交换up和now数组。因为需要up数组和now数组，且数组的大小都为m，所以我们需要2*m大小的额外空间。","1]行中的元素，我们把s[i","1→3→1→1→1","2.分析","2019","22","22:39:21","2]行的元素我们就不再需要，我们只需要s[i","3.代码","64","64)","7","=","[","[0]","[1,3,1],","[1,5,1],","[4,2,1]","[[grid[0][0]]*m]*n","[grid[0][0]]*m","]","copyright","def","elif","gitbook该文件修订时间：","grid","grid):","grid[","grid[0]:return","grid[0][j","grid[0][j]","grid[i","grid[i][0]","grid[i][j","grid[i][j]","i==0","i>0","i>0:","j","j==0","j>0:","len(grid),","len(grid[0])","m","mat","mat[","mat[0][j","mat[0][j]","mat[i","mat[i][0]","mat[i][j]","min(grid[i","min(mat[i][j","min(s[i","min(up[j],now[j","min(up[j],tmp)","minpathsum(self,","n","n,","now","now.copy()","now[0]","now[j]","pre[j]:上元素","range(1,m):","range(1,n):","range(m):","range(n):","reserved，pow","return","right","tmp","tmp:左元素，求和后，tmp也为左元素","up","up[","up[0]","up[j","up[j]","x","©","​","何去何从gw","动态规划1(原地修改)：","因为路径","最小路径和(leetcod","最小路径和_leetcod","的总和最小。","示例:","给定一个包含非负整数的","网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。","解释:","说明：每次只能向下或者向右移动一步。","输入:","输出:","非原地修改，动态规划"],"矩阵/长度最小的子数组.html":["0","0,","07","0。","1.题目","2","2.分析","2019","22","22:40:10","3.代码","7,","=","==","[2,3,1,2,4,3]","[4,3]","class","copyright","def","else:","gitbook该文件修订时间：","left","left)","left,","len(nums)","log","min(min_len,","min_len","minsubarraylen(self,","n","n)","num","nums):","nums_len","nums_len+1","nums_len+1:","o(n","reserved，pow","return","right","s","s,","s:","solution:","sum_al","©","≥","个正整数的数组和一个正整数","何去何从gw","如果你已经完成了o(n)","子数组","时间复杂度的解法,","时间复杂度的解法。","是该条件下的长度最小的连续子数组。","滑动窗口法","的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回","示例:","给定一个含有","解释:","请尝试","输入:","输出:","进阶:","长度最小的子数组","，找出该数组中满足其和"],"矩阵/两数之和 II - 输入有序数组.html":["+","0","0,","07","1","1):","1,","1.题目","11,","15],","2","2.分析","2019","22","22:38:51","3.代码","7","7,","9","=","==",">","[1,2]","[2,","[]","[i+1,","[i+1,j+1]","a:","b","b)","binary_search(self,","break","copyright","def","elif","else:","gitbook该文件修订时间：","i!=j","ii","index1","index2","index2。","index2）不是从零开始的。","index2，其中","int)","j","j!=i:","j+1]","left","left,","len(numbers)","len(nums)","li,","li[mid][0]:","list[int],","list[int]:","mid","none","number","numbers,","numbers:","numbers[i]+numbers[j]","nums,","nums[i]","range(i+1,len(numbers)):","range(len(numbers)","range(len(nums)):","reserved，pow","return","right","right,","self.binary_search(nums,","sum_al","target","target):","target:","twosum(self,","val):","©","。","。因此","与","两数之和","之和等于目标数","二分法","二分法，","何去何从gw","你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。","函数应该返回这两个下标值","和","必须小于","指针对撞法","暴力法","暴力法，","暴力解决","的有序数组，找到两个数使得它们相加之和等于目标数。","示例:","给定一个已按照升序排列","解释:","说明:","输入:","输入有序数组","输出:","返回的下标值（index1"],"矩阵/两数之和 II - 输入无须数组.html":["+","0,","07","1","1,","1.题目","2.分析","2019","22","22:38:38","2],","3,","3.1二分法","3.2字典法","3.3字典法","3.4切片法","3.代码","5))","=",">","[[num,i]","[]","[index,","[new_list[i][1],","[nums.index(dif),","a:","b","b)","bag","bag:","bag[dif]]","binary_search(self,","break","class","copyright","def","dif","else:","enumerate(nums):","enumerate(nums)]","gitbook该文件修订时间：","i,num","i]","ii","index,","j","j:","left","left,","len(new_list)","len(nums)","li,","li[mid][0]:","mid","new_list","new_list.sort()","new_list[i][0]","new_list[j][1]]","none","nums,","nums[:i]:","nums[i]","nums_len","print(ret.twosum([","range(len(new_list)):","range(nums_len):","reserved，pow","ret","return","right","right,","self.binary_search(new_list,","solution()","solution:","target","target):","twosum(self,","val):","valu","{}","©","两数之和","何去何从gw","输入无须数组"],"矩阵/螺旋矩阵.html":["#","(","(++l","(int","(matrix","(true)",")","+=","//","0)","0,","06","08","1","1,","1.题目","13:01:19","1:","1;","1。然后我们进行while循环，先遍历上边，将所有元素加入结果res，然后上边下移一位，","1。然后我们进行while循环，先遍历上边，将所有元素加入结果res，然后上边下移一位，如果此时上边大于下边，说明此时已经遍历完成了，直接break。同理对于下边，左边，右边，依次进行相对应的操作，这样就会使得坐标很有规律，并且不易出错，参见代码如下：","1，","1，左边left是0，右边right是n","2,","2.分析","2019","2:","3","3,","3.代码","4,","4],","5,","6","6,","7,","8,","8],","9","=","==",">","[","[1,","[1,2,3,4,8,12,11,10,9,5,6,7]","[1,2,3,6,9,8,7,4,5]","[5,","[9,10,11,12]","[]","]","],","arraylist<>();","break;","class","copyright","d","d)","d,","d:break","d=n","def","gitbook该文件修订时间：","int","l,","l;","l=0,","len(matrix)","len(matrix[0])","list","list[int]:","list[list[int]])","m","matrix)","matrix.length","matrix.length;","matrix:","matrix[0].length;","n","new","null","print(res)","public","r","r)","r:break","r=m","range(l,r+1):res.append(matrix[u][i])","range(u,d+1):res.append(matrix[i][r])","re","res.add(matrix[d][i]);","res.add(matrix[i][l]);","res;","reserved，pow","return","right","solut","spiralorder(int[][]","spiralorder(self,","true:","u","u,","u;","u=0,","x","{","||","}","©","​","个元素的矩阵（m","何去何从gw","列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。","如果此时上边大于下边，说明此时已经遍历完成了，直接break","对于这种螺旋遍历的方法，重要的是要确定上下左右四条边的位置，那么初始化的时候，上边up就是0，下边down就是m","左边left是0，右边right是n","示例","给定一个包含","螺旋矩阵","行,","输入:","输出:"],"矩阵/螺旋矩阵 II LeetCode 53.html":["(","(bottom)right","(int","(left)bottom","(right)top","(top)left","(true)",")","*","//","0","0,","0,bottom","0,right","06","08","1","1,","1.题目","13:03:16","1;","2,","2.分析","2019","3","3.代码","4","5","53","53)","6,","7,","8,","9,",";","=",">",">=",">bottom",">left",">right",">top","[","[[0]*n","]","],","_","b","b;","bottom","break;","class","copyright","d","d)","d,","d=n","def","for(int","generatematrix(int","generatematrix(self,","gitbook该文件修订时间：","if(++l","ii(leetcod","ii_leetcod","index","int","int[][]","int[n][n];","java","l","l++;","l,","l;","l=0,","left.","mat","mat;","mat[b][i]","mat[i][l]","matrix","n","n)","n):","n*n","n2","n;","new","num","num++;","n，生成一个包含","public","r","r)","r=n","range(n)]","re","res;","res[d][i]","res[i][l]","reserved，pow","return","right","solut","t","t;","tar","top","top.","u,","u;","u=0,","while(num","{","}","©","何去何从gw","到","实现思路：给定四个边界，left","循环结束后bottom","循环结束后left+1","循环结束后right","循环结束后top+1","循环结束条件为index","所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。","然后每次进行四遍循环，","示例:","给定一个正整数","螺旋矩阵","输入:","输出:"],"矩阵/有序矩阵中第K小的元素.html":["#","04","1","1,","1.题目","11,","13,","13],","13。","14","15]","2.分析","2019","20:17:01","3.代码","5,","8,","9],","=",">","[","[10,","[12,","[]","],","class","copyright","def","edg","gitbook该文件修订时间：","heapq","heapq.heappop(tmp)","heapq.heappush(tmp,","import","int)","int:","j","k","k:","kthsmallest(self,","len(matrix)","len(tmp)","list[list[int]],","matrix","matrix:","matrix[i][j])","n","n2","print(","range(edge):","reserved，pow","return","right","solution:","tmp","tmp[0]","tmp[0])","x","©","​","≤","。","何去何从gw","你可以假设","我们使用一个最大堆，然后遍历数组每一个元素，将其加入堆，根据最大堆的性质，大的元素会排到最前面，然后我们看当前堆中的元素个数","是否大于k，大于的话就将首元素去掉，循环结束后我们返回堆中的首元素即为所求:","有序矩阵中第k小的元素","的值永远是有效的,","矩阵，其中每行和每列元素均按升序排序，找到矩阵中第k小的元素。","示例:","给定一个","说明:","请注意，它是排序后的第k小元素，而不是第k个元素。","返回"],"链表/":["00:43:19","07","08","2019","copyright","gitbook该文件修订时间：","reserved，pow","right","©","何去何从gw","链表"],"链表/链表归并排序.html":["#",",","07","1","1)","1.题目","1:","2.分析","2019","22","23:28:39","2:","3.代码","4","=","==","==none:",">",">0",">1",">2",">3",">4",">5","[!note]","[]","__init__(self,","class","copyright","def","definit","fast","fast.next","fast.next.next","fast.next.next:","gitbook该文件修订时间：","head","head.next","head1","head1,","head1.val","head2","head2)","head2):","head2:","head:","high):","j","link","list.","listnode(","listnode)","listnode:","log","low","low,","ltmp","merge(li,","merger(head1,","merger_sort(head):","merger_sort(head1)","merger_sort(head2)","mid+1","mid,","n)","new_head","none","none:","none:return","o(n","print(slow.val)","reserved，pow","return","right","self.next","self.val","singli","slow","slow.next","solution:","sortlist(self,","split_list(head)","split_list(head):","split_list函数","tail","tmp","tmp.next","x","x):","©","不要写反了","两个子链表归并完成，且已完成对其排序，返回链表头指针给上层递归。","何去何从gw","写成这样就错了","列表归并，作为参考","创建一个新的链表节点，指向排序好的链表；对分割得到的两个子链表逐一遍历对比，值小的节点插入到新链表后面；","在","左右两边都有数","归并排序","归并排序采用分治思想，首先使其子序列成为有序序列，然后再对子序列进行归并。","归并，现在左右两个列表已经是有序的了","时间复杂度和常数级空间复杂度下，对链表进行排序。","示例","第二个有序列表的第一个元素","输入:","输出:","这儿用low、mid、high，是因为后续还会调用这个函数，会写成递归","递归实现：","链表归并","链表归并排序","首先把链表分割为两个子链表（采用快慢指针找到链表中间节点），递归该分割过程，直至子链表只包含一个节点为止；"],"链表/合并两个有序链表 LeetCode 21.html":["!=","#","&&","(l1","(l1.val","(l2","00:43:01","06","08","1","1);","1.题目","2.分析","2019","21","21)","3.代码","=","==",">",">1",">2",">3",">4",">4,",">next来获得新链表的头结点。","[!note]","class","copyright","def","dummi","dummy,","dummy;","gitbook该文件修订时间：","head","head;","java","l1","l1,","l1.val","l1:","l1:return","l1;","l2","l2)","l2:","l2:return","l2;","listnod","listnode(","listnode(0)","listnode)","listnode,","listnode:","mergetwolists(listnod","mergetwolists(self,","new","node，连上原链表的头结点，这样的话就算头结点变动了，我们还可以通过dummi","null","null)","public","reserved，pow","return","right","solut","tail","tail.next","{","©","​","代码2非递归","何去何从gw","合并两个有序链表(leetcod","合并两个有序链表__leetcod","对于链表的问题，根据以往的经验一般都是要建一个dummi","将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。","改为：tail.next","新建立一个新的链表。建立两个指针cur1和cur2，分别指向两个链表。然后只需要通过比较两个链表每个元素的大小，小的元素添加到新的链表中即可。最后，我们要分别判断cur1和cur2是否是各自链表的末尾，如果不是，将剩余元素添加到新的链表末尾即可。","示例：","输入：1","输出：1","递归版","非递归"],"链表/合并K个排序链表.html":["#","(i.val,","(l+r)","(tmp.next.val,","+=","//","0","04","0:","1","1)","1.题目","14","2","2.分析","2019","20:16:41","3.代码","=","==",">",">1",">2",">3",">4",">4,",">5",">5,",">6","[","[!note]","[]","]","a.next","a.val","a:","b","b)","b):","b.next","b.val:","b:","copyright","cur","cur.next","deal(0,","deal(l,","deal(middle,","def","else:","gitbook该文件修订时间：","gw","head","head.next","heapq","heapq.heappop(gw)[2]","heapq.heappop(p)[2]","heapq.heappush(gw,","heapq.heappush(p,","i))","i.next","i:","import","k","l","len(gw)","len(lists)","list()","list[listnode])","listnode(","listnode(0)","listnode:","lists):","lists:","lists[0]","merge(a,","mergeklists(self,","middl","middle)","n","new_head","new_head.next","none","p","p:","py2","py3","python","r)","r):","r:","reserved，pow","result","result.next","return","right","tmp","tmp.next))","tmp.next:","tupl","x","x,","©","​","一种解决办法是我们重写一个listnode，给他添加val元素方法。我这里使用了另外的一种解决思路，就是在tuple中再添加一个元素。","个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。","优先队列","优先队列（一次性加入所有元素）","优先队列（每次只加入各队列最小值比较）","会从","何去何从gw","分治法（未完成）","则是抛出异常。","合并","合并k个排序链表","和","开始对两个","开始比较第二个成员，第二个成员是一个listnode，没有比较方法，在处理这个问题上","当对一个","很有趣，前两个链表的第一项比较结果都相同（","排序时，","是否为空，不为空，我们弹出队首元素（1），接着判断这个弹出的元素作为一个链表节点，其后是否还有元素，如果有元素，将元素加入队列。同时将结果加入到result中","有了差异，","比较首元素，然后依次加入优先队列（或者一个堆，我这里使用堆）","然后判断这个","的成员依次比较，如果两个成员相同就再比较下一个成员。问题中的","示例:","输入:","输出:","采用分治法","链表","随机瞎排，","首先将list中的每个","），于是"],"链表/旋转链表 LeetCode 61.html":["#","+=","0","04","1","1.题目","14","19:","1:","2","2.分析","2019","20:16:59","2:","3","3.代码","4","5","61","61)","=","==",">",">0",">1",">2",">3",">4",">5",">null",">null,","_","copyright","count","cur","cur.next","cur.next:","def","gitbook该文件修订时间：","head","head.next","head:","int)","k","k%count","k:","leetcod","listnode,","listnode:","n","new_head","none","none:","none我们直接返回head就可以了。","pre","print(cur.val)","q.next，所以是左旋","range(k):","reserved，pow","return","right","rotateright(self,","tmp","tmp.next","©","个位置，其中","个节点（最详细解决方案！！！）是一样的。其实就是一个循环链表首先，如果head","从尾巴开始左旋","何去何从gw","初始有一个点","删除链表的倒数第","前指针，这儿没有用，但是可以看看怎么写","向右旋转","因为q","旋转完毕，断开换","旋转链表(leetcod","旋转链表__leetcod","是非负数。","步:","示例","给定一个链表，旋转链表，将链表每个节点向右移动","解释:","输入:","输出:","这个问题其实和","这句话阐述了是左旋，我们可以这么理解，左边的等于右边的就是左旋；右边的等于左边的，就是右旋","首尾连接"],"链表/环形链表 LeetCode 141.html":["!=","#","0","07","1","1.题目","141)","141.md","16:41:04","1，则在该链表中没有环。","1：","2.分析","2019","23","2：","3.代码","3：","4],","=","==","[1,2],","[1],","[3,2,0,","copyright","def","fals","fast","fast.next.next","fast.next:","fast:","gitbook该文件修订时间：","hascycle(self,","head","head):","head.next","head.next:","head.next:return","head.val","head:","none","none:","o(1)（即，常量）内存解决此问题吗？","po","reserved，pow","return","right","slow","slow.next","true","©","为了表示给定链表中的环，我们使用整数","何去何从gw","你能用","否则有环","如果","如果碰到空发现已经结束，则无环","开始）。","快慢指针","是","来表示链表尾连接到链表中的位置（索引从","此方法也可以用一个更生动的例子来形容：在一个环形跑道上，两个运动员在同一地点起跑，一个运动员速度快，一个运动员速度慢。当两人跑了一段时间，速度快的运动员必然会从速度慢的运动员身后再次追上并超过，原因很简单，因为跑道是环形的。","环形链表(leetcod","环形链表_leetcod","示例","给定一个链表，判断链表中是否有环。","置空法","解法3：不使用额外空间，设置两个指针p1,p2，开始均指向头结点，然后每次p1向后移动一个节点，p2向后移动两个节点。然后比较两个指针指向的节点是否相同。如果相同，则判断出链表有环，如果不同，则继续下一次循环。有“环”自会“重逢”。","解释：链表中有一个环，其尾部连接到第一个节点。","解释：链表中有一个环，其尾部连接到第二个节点。","解释：链表中没有环。","输入：head","输出：fals","输出：true","进阶：","遍历的过程中将值置空"],"链表/链表逆序输出 不带头结点.html":["00:54:33","08","1.题目","18","2.分析","2019","3.代码","copyright","def","gitbook该文件修订时间：","head:","print(head.val)","reserved，pow","return","reverseprint(head):","reverseprint(head.next)","right","©","何去何从gw","还可以先逆序，后输出，逆序有多种方法，就低逆序，递归逆序","递归","链表逆序输出（不带头结点）"],"链表/环形链表 II LeetCode 142.html":["!=","#","+=","0","04","1","1.题目","14","142","142)","1，则在该链表中没有环。","1：","2.分析","2019","20:17:24","2：","3.代码","3：","4],","=","==","==0:return","[1,2],","[1],","[3,2,0,","bag","bag:","bag[cur]","bag[head]","class","connect","copyright","count","count+=1","cycl","def","detectcycle(self,","else:","fast","fast.next","fast.next.next","fast.next.next:","func(self,head):","gitbook该文件修订时间：","head","head):","head,head","head.next","head.next:","ii(leetcod","ii_leetcod","index","node","none","none:","null。","po","range(count):","reserved，pow","return","right","self.func(head)","slow","slow.next","slow:","solution(object):","t1","t1!=t2:","t1,t2","t1.next","t2","t2.next","{}","©","为了表示给定链表中的环，我们使用整数","何去何从gw","你是否可以不用额外空间解决此题？","使用快慢指针先确定是否有环，有的话，将fast指向head，和slow指针以相同的速度移动，当fast==slow时则找到了环的入口。","先判断有没有环","如果","如果链表无环，则返回","字典法","开始）。","快慢指针，写成一个函数","快慢指针，写成两个函数","是","来表示链表尾连接到链表中的位置（索引从","环形链表","示例","第一次相遇，肯定是在环内，因为快指针比慢指针快一倍，所以，快指针比慢指针多走一倍路程，其中满指针走过的路程就是这一倍路程，快指针走的两倍路程是这样来的，慢指针的一倍路程，加上圆圈的长度（从相遇点出发，沿着环走，再次回到相遇点）。现在两个指针都剪掉，入环点到相遇点的路程，两边剩下的路程长度相同（慢指针到入环点，和快指针从入环点逆时针回到相遇点），所以，一个从head出发，一个从相遇点出发，走到入环点的路程长度相同。","给定一个链表，返回链表开始入环的第一个节点。","解释：链表中有一个环，其尾部连接到第一个节点。","解释：链表中有一个环，其尾部连接到第二个节点。","解释：链表中没有环。","说明：不允许修改给定的链表。","输入：head","输出环形链表是第几个节点，但是有错，深拷贝也不行","输出：no","输出：tail","进阶："],"链表/相交链表 LeetCode 160.html":["!=","#","(67451234,","0,","08","0）。从各自的表头开始算起，链表","0，而","1","1.题目","12345674).","160","160)","18","19:00:46","1：","2","2,","2.分析","2019","2：","3","3,","3.代码","3：","6","8","8,","=",">2",">3",">4",">5",">5;",">7","[0,9,1,2,4],","[0,9,1,2,4]，链表","[1,5],","[1,5]。由于这两个链表不相交，所以","[2,6,4],","[2,6,4]，链表","[3,2,4],","[3,2,4]。在","[4,1,8,4,5],","[4,1,8,4,5]，链表","[5,0,1,8,4,5],","[5,0,1,8,4,5]。在","b","b:","c1","copyright","d","d.add(heada)","d:","d[heada]","def","getintersectionnode(self,","gitbook该文件修订时间：","heada","heada,","heada.next","heada:","headb","headb):","headb.next","headb:","intersectv","leetcod","len(b)|步,","lista","listb","node","none","none:","null.","null。","o(1)","o(n)","p","p.next","q","q.next","q:","reserved，pow","return","right","set()","skipa","skipb","valu","{}","©","个节点。","个节点；在","中，相交节点前有","为","何去何从gw","例如a:","内存。","判断地址，而不是val，因为那两个1实际上不是同一个节点，地址不同，直接判断地址就行了","可以是任意值。","可假定整个链表结构中没有循环。","同时对a和b进行遍历,","和","因为过一会还要用headb，heada，所以这儿先用其他变量保存","在节点","在返回结果后，两个链表仍须保持原有的结构。","备用法（未实现）:","如下面的两个链表：","如果两个链表没有交点，返回","字典法","并且让到达末尾的指针指向另一个链表的头结点.","开始相交。","必须为","时间复杂度，且仅用","求出两个链表a和b的长度,","注意：","然后同时遍历返回第一个公共节点.","相交链表","相交链表(leetcod","示例","程序尽量满足","编写一个程序，找到两个单链表相交的起始节点。","解释：这两个链表不相交，因此返回","输入解释：从各自的表头开始算起，链表","输入解释：相交节点的值为","输入：intersectv","输出：null","输出：refer","遍历时会相交于4","长链表先走|len(a)","集合法","首尾相连法","首尾相连法:","（注意，如果两个列表相交则不能为"],"链表/删除链表中的节点 LeetCode 237.html":["\"\"\"","#","07","1","10:07:11","19","1:","2019","237","2：","4","5","9.",":rtype:",":type","=",">","[4,1,9]","[4,5,1,9],","[4,5,1,9]，它可以表示为:","[4,5,9]","__init__(self,","anything,","class","copyright","def","definit","deletenode(self,","gitbook该文件修订时间：","head","instead.","leetcod","link","list.","listnod","listnode:","modifi","node","node):","node.next","node.next.next","node.next.v","node.v","node:","none","place","reserved，pow","return","right","self.next","self.val","singli","solution:","void","x","x):","©","不要从你的函数中返回任何结果。","何去何从gw","删除链表中的节点","现有一个链表","的第三个节点，那么在调用了你的函数之后，该链表应变为","的第二个节点，那么在调用了你的函数之后，该链表应变为","示例","给定你链表中值为","给定的节点为非末尾节点并且一定是链表中的一个有效节点。","解释:","说明:","请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。","输入:","输出:","链表中所有节点的值都是唯一的。","链表至少包含两个节点。"],"链表/反转链表.html":["#","$n1→...→nk−1→nk→nk+1←...←nm$","$n_{k}nk$。","$n{k+1}n","$n{k+1}nk+1","$n{m}nm","$到","$已经被反转，而我们正处于","00:53:08","08","1","1.题目","18","2","2.分析","2019","3","3.代码","3。","5","=",">",">1",">2",">2我们此时只需要head.next.next=head，也就是先建立一个双向连接",">2然后再head.next=none，返回node即可",">3",">4",">5",">null","[]","__init__(self,","class","copyright","cur","cur.next","cur:","def","element","first_nod","gitbook该文件修订时间：","head","head.next","head.next.next","head.next:","head:","k+1$","listnode(element)","listnode)","listnode:","move","move.next","move:","new_head","next","node","node.next","none","none#","none:","null","n{k}nk。$","pre","re","res.append(move.val)","res:","reserved，pow","return","reverselist(self,","right","self.next","self.reverselist(first_node)","self.reverselist(head.next)","self.val","solution:","tail","x","x):","©","ø","ø，我们想要把它改成","​","←","→","。如果你忽略了这一点，你的链表中可能会产生循环。如果使用大小为","何去何从gw","你可以迭代或递归地反转链表。你能否用两种方法解决这道题？","假设列表为：$n1→...→nk−1→nk→nk+1→...→nm→∅$","假设存在链表","反转一个单链表。","反转链表","古老办法","后继节点","在遍历列表时，将当前节点的","头插法","就地反转","当前节点","我们希望","我们知道reverselist(head)返回输入的链表反转后的head，那么如果reverselist(head.next)的话","所以，$n{k}nk.next.next","把遍历到的节点插入到头结点后面去","指针改为指向前一个元素。由于节点没有引用其上一个节点，因此必须事先存储其前一个元素。在更改引用之前，还需要另一个指针来存储下一个节点。不要忘记在最后返回新的头引用！","插入法","有毛病吧，不带头结点的链表","的下一个必须指向","的下一个节点指向$n{k}nk$。","的链表测试代码，则可能会捕获此错误。","示例:","若从节点","要小心的是$n1$","设置链表的第一个节点为尾节点","输入:","输出:","输出节点值到列表，重建链表","进阶:","迭代法","递归法","递归法(没有头结点)","递归法（有头结点）","递归版本稍微复杂一些，其关键在于反向工作。假设列表的其余部分已经被反转，现在我该如何反转它前面的部分？"],"链表/反转链表2.html":["#",".","07","09:04:55","1","1)","1):","1.2(next).next","1.next","1.题目","2,","2.分析","2019","24","3.代码","4","5,同时没有破坏1.next","=",">",">2",">3",">4",">5",">next来获得新链表的头结点。",">null",">null,","_","copyright","cur","cur.next","def","dummi","dummy.next","fpre","fpre.next","fpre.next.next","gitbook该文件修订时间：","head","head:","ii(leetcode_92)","int)","int,","listnode(","listnode,","listnode:","m","m+1):","m:","n","n:","next","node，连上原链表的头结点，这样的话就算头结点变动了，我们还可以通过dummi","none","pre","range(m","range(n","reserved，pow","return","reversebetween(self,","right","©","≤","不能交换位置","何去何从gw","则fpre.next.next找不到了","到","原链表拼接","反转从位置","反转链表","反转链表2","和","如果先执行fpre.next","对于链表的问题，根据以往的经验一般都是要建一个dummi","将翻转部分","指向","的链表。请使用一趟扫描完成反转。","示例:","说明:","输入:","输出:","链表长度。"],"链表/对链表进行插入排序_LeetCode_147.html":["#","07","1","1)","1.题目","1：","2.分析","2019","22","23:27:21","2：","3.代码","4","=","==",">",">0",">1",">2",">3",">4",">5","__init__(self,","class","copyright","def","dummyhead","dummyhead.next","gitbook该文件修订时间：","head","head.next","head.val","head:","insertionsortlist(self,","listnode(","listnode)","listnode:","next","none","none:","pre","pre.next","pre.next.val:","pre.next的先序节点","reserved，pow","return","right","self.next","self.val","solution:","x","x):","©","何去何从gw","存储下一个无序区节点","对链表进行插入排序","对链表进行插入排序_leetcode_147","对链表进行插入排序。","插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。","插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。","插入排序算法：","每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。","每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。","注意：我们必须先定义一个头结点","示例","输入:","输出:","重复直到所有输入数据插入完为止。"],"链表/两数相加-链表 LeetCode 2.html":["%","(5","(l1.val","(l2.val","+","//","0","0)","04","1.题目","10","10)","14","2","2.分析","2019","20:15:29","2）","3)","3.代码","4","4)","465","6","8","807","=",">","add","add:","addtwonumbers(self,","copyright","cur","cur.next","def","gitbook该文件修订时间：","l1","l1,","l1.next","l2","l2):","l2.next","listnode(0)","listnode(v","none","reserved，pow","ret","ret.next","return","right","val","©","一位","两数相加","之外，这两个数都不会以","何去何从gw","原因：342","如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。","开头。","您可以假设除了数字","数字。","的方式存储的，并且它们的每个节点只能存储","的链表用来表示两个非负的整数。其中，它们各自的位数是按照","示例：","给出两个","输入：(2","输出：7","逆序","链表__leetcod","链表（leetcod","非空"],"链表/删除链表的倒数第K个节点.html":["!=","\"\"\"","#","+=","0","00:14:08","08","0:","1","1.题目","18","2.","2.分析","2019","3.代码",":rtype:",":type","=","==",">",">2",">3",">4",">5,",">5.","class","copyright","count","def","dummi","dummy.next","elif","fast","fast.next","fast.next:","gitbook该文件修订时间：","head","head,","head.next","head:","int","int)","listnod","listnode(0)","listnode,","listnode:","n","n):","n+1n+1","n:","n>0:","next","nn","none","none:","pass","range(n):","removenthfromend(self,","reserved，pow","return","right","slow","slow.next","slow.next.next","slow和fast同时往前走","solution:","©","​","个结点。我们重新链接第二个指针所引用的结点的","个结点分开。我们通过同时移动两个指针向前来保持这个恒定的间隔，直到第一个指针到达最后一个结点。此时第二个指针将指向从最后一个结点数起的第","个节点，并且返回链表的头结点。","为了更好的处理删除头结点情况,我们一般都会设置虚拟节点","何去何从gw","你能尝试使用一趟扫描实现吗？","保证是有效的。","先让fast走n步","先让fast走n步,第n+1步时候,slow也开始走","删除该节点","删除链表的倒数第k个节点","删除链表的倒数第n个节点(leetcode_19)","和","大于0，就是走n步","如果题目增加难度,说如果n不满足条件,就返回none,就可以用下面两句","当fast走到头时，second即是要删除节点的前一个节点位置","当删除了倒数第二个节点后，链表变为","思路：双指针法。","指针指向该结点的下下个结点。","步，而第二个指针将从列表的开头出发。现在，这两个指针被","示例：","第一个指针从列表的开头向前移动","给定一个链表:","给定一个链表，删除链表的倒数第","给定的","若走了n步后为none，则表明删除的为head节点","说明：","这个比查找倒数第n个节点多走一步,因为我们需要找到倒数第n+1个节点,我们才能删除倒数第n个节点","进阶：","退出循环的条件为fast指向最后个节点","退出循环的条件是fast刚好指向最后个节点。此时,slow指向倒数第n+1个节点,这样就能删除倒数第n个节点","首先我们将添加一个哑结点作为辅助，该结点位于列表头部。哑结点用来简化某些极端情况，例如列表中只含有一个结点，或需要删除列表的头部。"],"链表/环形单链表约瑟夫问题.html":["07","1.题目","13:05:53","19","2.分析","2019","3.代码","==","copyright","def","func(self,","gitbook该文件修订时间：","head","head,","head.next","m","m):","none","reserved，pow","right","©","一个环形单向链表的头结点head和报数的值m","何去何从gw","最后生存下来的节点","环形单链表约瑟夫问题","输入","返回"],"链表/回文链表.html":["!=","#","07","1","1.题目","13:23:45","19","1:","1、找到链表长度的一半，用追赶法，一个指针一次走两步，一个指针一次走一步","2.分析","2019","2:","2、将后一半数组转置","3.代码","3、判断链表是否是回文链","=","==",">",">1",">2","bool:","class","copyright","def","fals","fast","fast.next","fast.next.next","fast.next.next:","gitbook该文件修订时间：","head","head.next","head.val:","head:","ispalindrome(self,","listnode)","none","none:","nxt","o(1)","o(n)","pre","pre.next","pre.val","reserved，pow","return","right","slow","slow.next","slow:","slow=","solution:","true","©","何去何从gw","你能否用","判断一个链表是否是回文的，很自然的想法就是两个指针，一个指针从前往后走，一个指针从后往前走，判断元素值是否相同，","回文链表","回文链表(leetcode_234)","时间复杂度和","示例","空间复杂度解决此题？","请判断一个链表是否为回文链表。","输入:","输出:","这里要分几个步骤来进行求解：","进阶："],"链表/删除排序链表中的重复元素 LeetCode 83.html":["04","1","1.题目","14","1:","2.分析","2019","20:15:38","2:","3.代码","83","83)",">1",">2",">3","copyright","gitbook该文件修订时间：","leetcod","reserved，pow","right","©","何去何从gw","删除排序链表中的重复元素","删除排序链表中的重复元素(leetcod","示例","给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。","输入:","输出:"],"链表/删除排序链表中的重复元素 II LeetCode 82.html":["#","#除","04","1","1.题目","14","1:","2","2.分析","2019","20:15:38","2:","3.代码","82","82)","=","==",">",">1",">2",">3",">4",">5",">【1,2,3】",">【2，3】,head一直都指着链表的第一个元素","copyright","cur","cur.next","cur.next.val:","cur.val","cur.val:","cur:","def","deleteduplicates(self,","else:","gitbook该文件修订时间：","head","head.next","head:","ii","ii(leetcod","leetcod","listnode(none)","listnode)","listnode:","newhead","newhead.next","none:","pre","pre.next","pre.val","reserved，pow","return","right","©","【1，2，3，3】","不设置虚拟头结点，删除有序列表，但是最后要保留一个，而不是全部删","何去何从gw","删除排序链表中的重复元素","如果重复元素有很多个连着的，需要走到重复元素的最后一个","延伸一","延伸二","最后不能返回head,因为【1，1，2，3】","没有重复出现","的数字。","示例","给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中","设置虚拟头结点","设置虚拟头结点，删除有序列表，但是最后要保留一个，而不是全部删","输入:","输出:"],"链表/链表的中间结点 LeetCode 876.html":["\"\"\"","#","(序列化形式：[3,4,5])","(序列化形式：[4,5,6])","(测评系统对该结点序列化表述是","+=","//=2","07","1","1.题目","100","16:37:38","1：","2.分析","2019","23","2：","3","3,","3.代码","4","4,","4，我们返回第二个结点。","5,","6,","876","876)",":rtype:",":type","=","==",">","[1,2,3,4,5,6]","[1,2,3,4,5]","[3,4,5])。","ans.next.next.next","ans.next.next.v","ans.next.v","ans.val","ans，这样：","class","copyright","cur","cur.next","cur.next:","def","else:","fals","fast","fast.next.next","fast.next:","fast.next不为空","fast第一次跳到3,第二次跳到5,由于fast.next.next为none,所以退出循环,所以fast.next.v","gitbook该文件修订时间：","head","head):","head.next","head.next:return","head:","k","k>0:","leetcod","listnod","listnode)","listnode:","middlenode(self,","none","none:","null.","reserved，pow","return","right","slow","slow.next","solution(object):","©","。","之间。","以及","何去何从gw","偶数个,","和","奇数个,又因为fast一次跳两个,所以第一次跳到3,第二次跳到5,所以当元素个数为奇数时候,fast.next为空,返回slow.next","如果有两个中间结点，则返回第二个中间结点。","当链表长度为偶数时，慢指针所指节点和所指节点的下一节点都是链表的中间节点","当链表长度为奇数时，快指针走到链表尾部时，慢指针恰好指向链表的中间","快慢指针","快慢指针，不过最后要分奇数、偶数讨论","提示：","注意，我们返回了一个","由于该列表有两个中间结点，值分别为","的非空单链表，返回链表的中间结点。","示例","类型的对象","给定一个带有头结点","给定链表的结点数介于","计算链表节点个数，然后扫描","输入：[1,2,3,4,5,6]","输入：[1,2,3,4,5]","输出：此列表中的结点","返回的结点值为","遍历法","链表的中间结点","链表的中间结点(leetcod"],"链表/K 个一组翻转链表_LeetCode_25.html":["\"\"\"","0","07","09:07:54","1.题目","2","2.分析","2019","24","3","3.代码",":",":rtype:",":type","=",">1",">2",">3",">4",">5","class","copyright","count","cur","def","gitbook该文件修订时间：","head","head,","head:","int","k","k):","k:","listnod","reserved，pow","reversekgroup(self,","right","solution(object):","©","个一组翻转链表(leetcode_25)","个一组翻转链表_leetcode_25","个节点一组进行翻转，请你返回翻转后的链表。","何去何从gw","你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。","你的算法只能使用常数的额外空间。","如果节点总数不是","当","时，应当返回:","是一个正整数，它的值小于或等于链表的长度。","的整数倍，那么请将最后剩余的节点保持原有顺序。","示例","给你一个链表，每","给定这个链表：1","说明","递归"],"链表/查找链表倒数第N个节点.html":["#","00:11:08","08","1","18","1:","2019","=","class","code","copyright","count","def","else:","fast","fast.next","fast.next:","findkthtotail(self,","gitbook该文件修订时间：","head,","head==non","here","k","k):","k1:","none","none:","reserved，pow","return","right","slow","slow.next","solution:","write","©","何去何从gw","查找链表倒数第n个节点"],"二叉树/":["07","2019","22:00:38","copyright","gitbook该文件修订时间：","reserved，pow","right","©","二叉树","何去何从gw"],"二叉树/二叉树的最大深度.html":["#","+","+=","/","0","08","1","1.题目","12:30:39","15","18","2.分析","20","2019","3","3.代码","7","9","=","==",">","[3,9,20,null,null,15,7]，","[]","[proot]","\\","code","copyright","def","depth","gitbook该文件修订时间：","here","int:","left","left+1","left>right","max(self.maxdepth(root.left),self.maxdepth(root.right))","maxdepth(self,","min(self.mindepth(root.left),self.mindepth(root.right))","mindepth(self,root):","node","node.left:","node.right:","none:","proot):","proot:","queue","queue:","reserved，pow","return","right","right+1","root","root.left","root.right","root:","self.maxdepth(root.left)","self.maxdepth(root.right)","self.mindepth(root.left)","self.mindepth(root.right)","tmp","tmp.append(node.left)","tmp.append(node.right)","treedepth(self,","treenode)","write","©","。","二叉树的最大深度","二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。","何去何从gw","叶子节点是指没有子节点的节点。","如果不为空，分别求左子树的深度和右子树的深度，取最大的再加1。","如果二叉树为空，则深度为0","如果都不为空，则返回左子树和右子树深度的最小值。","法一简单修改","示例：","第二种就是判断左子树或右子树是否为空，若左子树为空，则返回右子树的深度，反之返回左子树的深度，","给定一个二叉树，找出其最大深度。","给定二叉树","说明:","返回它的最大深度","递归","递归简单修改","递归简单修改2"],"二叉树/二叉树的层次遍历.html":["#","+=","0","0,","07","1","1.","11","2.","2019","23:41:03","3.","=","==",">","[]","[root]","collect","copyright","def","depth","depth,","dequ","deque()","gitbook该文件修订时间：","import","int:","levelorder(self,","maxdepth(self,","node","node.left:","node.right:","none:","p","p.left:","p.right:","print(node.val)","print(res)","queue","queue.append(p.left)","queue.append(p.right)","queue.append(root)","queue.pop(0)","queue.popleft()","queue:","queue_tmp","queue_tmp.append(p.left)","queue_tmp.append(p.right)","re","res.append(p.val)","res.append(res_temp)","res.append(res_tmp)","res_temp","res_temp.append(node.val)","res_tmp","res_tmp.append(node.val)","reserved，pow","return","right","root","root):","root:","tmp","tmp.append(node.left)","tmp.append(node.right)","treenode)","©","二叉树的层次遍历","二叉树的深度（通过层次遍历实现）(每层节点单独输出)","何去何从gw","层次遍历","层次遍历简写","层次遍历（每层单独输出）","每层节点"],"二叉树/二叉树的层次遍历 II.html":["/","04","1.题目","14","15","2.分析","20","2019","20:15:34","3","3.代码","7","9","=","==",">","[","[15,7],","[3,9,20,null,null,15,7],","[3]","[9,20],","[]","[root]","\\","]","class","copyright","def","gitbook该文件修订时间：","ii","levelorderbottom(self,","list[list[int]]:","node","node.left:","node.right:","none:","queue","queue:","queue_tmp","queue_tmp.append(node.left)","queue_tmp.append(node.right)","re","res.insert(0,","res_tmp","res_tmp)","res_tmp.append(node.val)","reserved，pow","return","right","root","root:","solution:","treenode)","©","二叉树的层次遍历","何去何从gw","例如：","给定一个二叉树，返回其节点值自底向上的层次遍历。","给定二叉树","返回其自底向上的层次遍历为：","（即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）"],"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":["####","+=","/","0","07","1","1.题目","103","103)","11","15","2.分析","20","2019","20:25:06","3","3.代码","7","9","=","==",">","[","[15,7]","[20,9],","[3,9,20,null,null,15,7],","[3],","[]","[root]","\\","]","```python","```sql","copyright","deepth","deepth%2==0:","def","else:","gitbook该文件修订时间：","leetcod","list[list[int]]:","lite","node","node.left:","node.right:","none:","queue","queue:","queue_tmp","queue_tmp.append(node.left)","queue_tmp.append(node.right)","re","res.append(res_tmp)","res_tmp","res_tmp.append(node.val)","res_tmp.insert(0,node.val)","reserved，pow","return","right","root","root:","treenode)","zigzaglevelorder(self,","©","二叉树的锯齿形层次遍历","二叉树的锯齿形层次遍历(leetcod","何去何从gw","例如：","和层次遍历一样，只不过加一个，判断语句","给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。","给定二叉树","返回锯齿形层次遍历如下："],"二叉树/路径总和 LeetCode 112.html":["#","/","08","1","1.题目","11","112","112)","13","16:53:32","17","2","2.分析","2019","22","22，","3.代码","4","5","7","8","=","==",">",">11",">2。",">4","\\","bool:","copyright","def","else:","fals","gitbook该文件修订时间：","haspathsum(self,","int)","leetcod","left_i","reserved，pow","return","right","right_i","root.left","root.left:","root.right","root.right:","root.val","root.val)","root:","self.haspathsum(root.left,sum","self.haspathsum(root.right,sum","sum","sum:","treenode,","true","true,","©","何去何从gw","叶子节点是指没有子节点的节点。","因为存在目标和为","如果当前节点是叶子节点,且路径之和等于sum","的根节点到叶子节点的路径","示例:","给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。","给定如下二叉树，以及目标和","说明:","路径总和","路径总和(leetcod","返回","还有个办法就是回溯，然后统计结果集是否为空"],"二叉树/路径总和 II LeetCode 113.html":["#","/","04","0:","1","1.题目","11","113","113)","13","14","2","2.分析","2019","20:17:25","22，","3.代码","4","5","7","8","=","==",">","[","[5,4,11,2],","[5,8,4,5]","[]","\\","]","copyright","def","else:","func(self,","gitbook该文件修订时间：","helper(self,","ii(leetcod","ii_leetcod","int)","list[list[int]]:","node,","node.left","node.right","node.v","node:","path","path,","path.append(root.val)","path.pop()","pathsum(self,","print(x)","reserved，pow","return","right","root,","root.left","root.left:","root.right","root.right:","root.val","root:","self.func(root,","self.func(root.left,","self.func(root.right,","self.helper(node.left,","self.helper(node.right,","self.helper(root,","self.r","self.res.append(self.track[:])","self.track","self.track.append(node.val)","self.track.pop()","sum","sum)","sum):","sum,","sum:","treenode,","x","x)","x):","x.append(path[:])","©","从root走到叶子节点了，但是路径之和不为sum，所以向上回溯","何去何从gw","全局变量可以这么设","叶子节点是指没有子节点的节点。","示例:","给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。","给定如下二叉树，以及目标和","说明:","路径总和","返回:"],"二叉树/路径总和 III LeetCode 437.html":["#","+","+=","/","0","00:35:08","08","0:","1","1+","1.","1.题目","10","1000000,1000000]","11","18","1，因为return","2","2,null,1],","2.","2.分析","2019","3","3,3,2,null,11,3,","3.","3.代码","3。和等于","437)","5","8","=","==",">","[","[10,5,","\\","class","copyright","def","else:","func(self,","gitbook该文件修订时间：","iii","iii(leetcod","int)","int:","leetcode_437","left","none:","pathsum(self,","print(res)","print(sum)","re","res+left+right","reserved，pow","return","right","root","root,","root.left","root.left.right加起来和为sum的情况","root.left:","root.right","root.right:","root.val","root:","self.func(root,","self.func(root.left,","self.func(root.right,","self.pathsum(root.left,","self.pathsum(root.right,","solution:","sum","sum)","sum),因为这样的话，只会统计以root.left为根的左右子树的和是否满足要求。而忽略了以root.left和root.left.left","sum):","sum:","treenode,","©","二叉树不超过1000个节点，且节点数值范围是","何去何从gw","后，下面的代码就不执行了","找出路径和等于给定数值的路径总数。","注意这儿的调用，不是func(root.left,","的整数。","的路径有:","示例：","给定一个二叉树，它的每个结点都存放着一个整数值。","路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。","路径总和","返回","这个判断可以不要，因为下个函数会判断","这儿不需要判断是不是叶子节点（根据题意）","这儿出问题了，不能return"],"二叉树/二叉树的最近公共祖先.html":["#","'treenode')","'treenode',","'treenode':","00:03:01","07","1","1.题目","1:","2.分析","2019","23","2:","3","3.代码","3。","4","5","5,","5。因为根据定义最近公共祖先节点可以为节点本身。","=","==",">",">left",">right","[3,5,1,6,2,0,8,null,null,7,4]","[3,5,1,6,2,0,8,null,null,7,4],","__init__(self,","binari","b），在要遍历的节点（root）的两侧，那么这个节点就是这两个节点的最近公共父节点；","class","copyright","def","definit","else:","gitbook该文件修订时间：","left","left:","lowestcommonancestor(self,","node.","none","none:","null，另一边返回a或者b。那么另一边返回的就是他们的最小公共父节点。","p","p,","p.val:","p:","p、q","p、q，最近公共祖先表示为一个结点","q","q)","q,p分布在根结点的两边，则root为最近公共祖先","q.val","q:","reserved，pow","return","right","right:","right，则说明q,p都在右边。","root","root.val","root:","self.left","self.lowestcommonancestor(root.left,","self.lowestcommonancestor(root.right,","self.right","self.val","solution:","t","tree","treenode:","x","x):","x，满足","©","为","为不同节点且均存在于给定的二叉树中。","二叉树的很多问题都可以转化为二叉树的遍历来求解","二叉树的最近公共祖先","二是两个节点在同一侧，则","何去何从gw","例如，给定如下二叉树:","则说明q,p都在左边，反之els","和节点","或者","所有节点的值都是唯一的。","找到该树中两个指定节点的最近公共祖先。","是","有两种情况，一是要找的这两个节点（a,","百度百科中最近公共祖先的定义为：“对于有根树","的两个结点","的最近公共祖先是节点","的深度尽可能大（一个节点也可以是它自己的祖先）。”","的祖先且","示例","经过上面的几个if判断后，如果能走到这一步，if","给定一个二叉树,","而且这儿的left，right都是经过递归后的伪根结点。自然就是q，p的公共祖先","节点","解释:","说明:","输入:","输出:","递归有两个出口，一是没有找到a或者b，则返回null；二是只要碰到a或者b，就立刻返回。"],"二叉树/二叉搜索树的最近公共祖先.html":["#","'treenode')","'treenode',","'treenode':","04","1.题目","14","1:","2","2,","2.分析","2019","20:15:34","2:","3.1递归版","3.2跌代版","3.代码","4","6","6。","8","=","==",">","[6,2,8,0,4,7,9,null,null,3,5]","[6,2,8,0,4,7,9,null,null,3,5],","copyright","def","elif","gitbook该文件修订时间：","lowestcommonancestor(self,","none","none:","p","p,","p.val","p.val:","p:","p、q","p、q，最近公共祖先表示为一个结点","q","q)","q.val","q.val，那我们在root.left继续搜索","q:","reserved，pow","return","right","root","root.left","root.val","root:","self.lowestcommonancestor(root.left,","t","x","x，满足","©","二叉搜索树的最近公共祖先","何去何从gw","例如，给定如下二叉搜索树:","其他的情况，返回root","和节点","因为根据定义最近公共祖先节点可以为节点本身。","循环版本","找到该树中两个指定节点的最近公共祖先。","是","百度百科中最近公共祖先的定义为：“对于有根树","的两个结点","的最近公共祖先是","的深度尽可能大（一个节点也可以是它自己的祖先）。”","的祖先且","示例","祖先在右子树","祖先在左子树","给定一个二叉搜索树,","节点","解释:","输入:","输出:","这是一个非常经典的问题，我们通过递归可以非常快的解决这个问题，我们只要理清楚这样的几种情况："],"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":["#","(left+right)","/","//","0","07","1)","1.题目","10","10,","10,null,5]，它可以表示下面这个高度平衡二叉搜索树：","108","108)","11","1。","2","2.分析","2019","23:53:56","3","3,0,5,9],","3,9,","3.代码","5","9","=",">","[","\\","__init__(self,","array","binari","class","cn.com/problems/convert","copyright","def","definit","gitbook该文件修订时间：","left,","len(nums)","list[int])","mid","mid+1,","node.","none","nums:","print(root.val)","reserved，pow","return","right","right)","right:","root","root.left","root.right","search","self.creat_bst(nums,","self.left","self.right","self.val","solution:","sort","sortedarraytobst(self,","tree","tree/)(leetcod","treenode(nums[mid])","treenode:","x","x):","©","一个可能的答案是：[0,","何去何从gw","先取数组中间节点作为根节点，将数组分成左右部分，对数组的左右两部分采用递归的方法进行建立左右子树","因为这种方法只遍历了一遍数组，因此，算法的时间复杂度，是o(n)","将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。","将有序数组转换为二叉搜索树](https://leetcod","将有序数组转换为二叉搜索树_leetcod","平衡二叉树前序遍历是递增的，列表中间点是根节点","时间复杂度（o(n)）:","本题中，一个高度平衡二叉树是指一个二叉树每个节点","的左右两个子树的高度差的绝对值不超过","示例:","给定有序数组:","高度差不超过一，说明是二叉搜索树"],"二叉树/二叉树中的最大路径和 LeetCode 124.html":["+","/","0","04","1","1.题目","10","10,9,20,null,null,15,7]","124","124)","14","15","1:","2","2.分析","20","2019","20:15:34","2:","3","3.代码","42","6","7","9","=","==","[","[1,2,3]","\\","class","copyright","def","float('","func(self,root):","gitbook该文件修订时间：","inf')","left","max(0,self.func(root.left))","max(0,self.func(root.right))","max(right,left))","max(root.val,root.v","max(self.re,root.v","maxpathsum(self,","none:","reserved，pow","return","right","right)","root","root):","self.func(root)","self.r","solution:","©","二叉树中的最大路径和(leetcod","二叉树中的最大路径和_leetcod","何去何从gw","本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。","示例","给定一个非空二叉树，返回其最大路径和。","输入:","输出:"],"二叉树/二叉树最大子树和.html":["+","0","07","09:50:29","1.","12","2.","2019","3.","=",">","class","copyright","def","else:","findmax(self,","float('","gitbook该文件修订时间：","inf')","left","maxroot)","maxroot):","maxroot.data","none:","re","reserved，pow","return","right","root","root,","root.data","self.findmax(root.left,","self.findmax(root.right,","self.r","self.res:","solution:","tmp_re","©","​","二叉树最大子树和","代码","何去何从gw","分析","给定一颗二叉树，它的每个节点都是正数或负数，如何找到一颗子树，是的该子树和最大","要求一棵二叉树的最大子树和，最容易想到的办法就是对每棵子树，求出这棵子树中所有节点的和，然后从中选出最大值。恰好二叉树的后序遍历就能做到这一点，在对二叉树进行后序遍历过程中，如果当前遍历节点的值与其左右子树和的值相加大于最大值，则更新最大值。","题目"],"二叉树/判断两棵二叉树是否相等.html":["'__main__':","07","1.","10:09:53","12","2.","2019","3.","4.复杂度分析","=","==","__init__(self,","__name__","binode(2)","binode(3)","binode(4)","binode(object):","class","constructtree()","constructtree():","copyright","data","data):","def","else:","equal","fals","gitbook该文件修订时间：","isequal(root1,","isequal(root1.left,","isequal(root1.right,","left","node1","node1.left","node1.right","node2","node2.left=","node2.right","none","none:","pritn(equal)","reserved，pow","return","right","root","root.left","root.right","root1","root1.data","root2","root2)","root2):","root2.data:","root2.data，根据这个条件，我们可以用递归进行判断","root2.left)","root2.right)","self.data","self.left","self.right","true","©","​","两棵二叉树如果相等，则两棵二叉树有着相同的结构，并且在相同的位置上有相同的值","代码","何去何从gw","分析","判断两棵二叉树是否相等","如果两棵二叉树root1,root2相等，那么root1与root2节点值相同，同时他们的左右孩子也有相同的结构，且值root1.data","对两棵树只进行了一次遍历，所以时间复杂度为o(n),空间复杂度为o(1)","题目"],"二叉树/求树的节点数量.html":["#","+","0","04","1","14","2019","20:17:23","==","copyright","countnodes(self,","def","else:","gitbook该文件修订时间：","none:","reserved，pow","return","right","root","root):","self.countnodes(root.left)","self.countnodes(root.right)","©","何去何从gw","求树的节点数量","计算树的节点数"],"二叉树/从中序和后序遍历构造二叉树.html":["/","07","1.","12","15","19:37:17","1]","1])","2.","20","2019","3","3.","7","9","=",">","[9,15,7,20,3]","[9,3,15,20,7]","\\","buildtree(self,","copyright","def","gitbook该文件修订时间：","inord","inorder.index(mid_data)","inorder:","list[int])","list[int],","mid","mid_data","none","postord","postorder:","postorder[","postorder[:mid])","postorder[mid:","reserved，pow","return","right","root","root.left","root.right","self.buildtree(inorder[:mid],","self.buildtree(inorder[mid+1:],","treenode(mid_data)","treenode:","©","中序遍历","从中序与后序遍历序列构造二叉树(leetcode_106)","从中序和后序遍历构造二叉树","代码","何去何从gw","你可以假设树中没有重复的元素。","例如，给出","分析","后序遍历","根据一棵树的中序遍历与后序遍历构造二叉树。","注意:","返回如下的二叉树：","题目"],"二叉树/二叉搜索树中第K小的元素.html":["\"\"\"","#","+","/","0","04","1","1.题目","14","1:","1]","1])","2","2.分析","2019","20:15:34","2:","3","3.代码1","4","5","6",":rtype:",":type","=","==",">=","[!tip]","[3,1,4,null,2],","[5,3,6,2,4,null,null,1],","[]","\\","arr","arr,","arr.append(root.val)","arr[","class","copyright","countnodes(self,","def","else:","gitbook该文件修订时间：","inder(root,","inder(root.left,","inder(root.right,","int","k","k)","k):","k:","kthsmallest","kthsmallest(self,","leftcount","len(arr)","none","none:","print(arr[","print(root.val)","reserved，pow","return","right","root","root):","root,","root:","self.countnodes(root.left)","self.countnodes(root.right)","solution(object):","treenod","©","≤","个最小的元素。","二叉搜索树中第k小的元素","二叉搜索树元素个数。","代码2","何去何从gw","你可以假设","先遍历所有的值，然后找到第k小的数字，最后利用二分搜索进行处理","必须这样，而不能直接在if语句返回","总是有效的，1","来查找其中第","示例","给定一个二叉搜索树，编写一个函数","计算树的节点数","说明：","输入:","输出:"],"二叉树/二叉树展开为链表.html":["\"\"\"","#","/","07","1","1.","12:20:50","13","2","2.","2019","3","3.代码","4","5","6","=",">","[]","\\","anything,","class","copyright","cur","cur.left","cur.left:","cur.right","cur:","def","flatten(self,","func(root)","func(root):","func(root.left)","func(root.right)","gitbook该文件修订时间：","instead.","ltree,","ltree.left","modifi","node","none","none:","p","p.left","p.right","p.right:","place","print(node.val)","range(1,len(res)):","re","res.append(root.val)","reserved，pow","return","right","root","root):","root.left","root.left,","root.right","root:","rtree","self.flatten(root.left)","self.flatten(root.right)","solution:","treenode(res[i])","treenode)","©","二叉树展开为链表","何去何从gw","例如，给定二叉树","分析","前序遍历展开为链表","将其展开为：","暴力法","给定一个二叉树，原地将它展开为链表。","迭代","递归","题目"],"二叉树/二叉树序列化和反序列化.html":["!='#':","\"\"\"\"\"\"","\")","#","'#'","'#',","'#'])","','","+","07","1.题目","11","19:31","2,","2.代码","2019","20:23:54","3,","4,","5,","=","['#']","[]","[root.data]","[root]","[self.root]","__init__(self,","__init__(self,li):","add(self,","bitree([1,2,3,4,5])","bitree(object):","breadth_travel(self,","class","copyright","data","data):","def","deserializer(self,","else:","end=\"","gitbook该文件修订时间：","inorder(self,","left","li):","li.pop(0)","li:","node","node(data)","node(object):","node(val)","none","none:","print(root.data,","print(ser)","print(ser1)","print(tree.breadth_travel(root))","queue","queue.append(tmp.left)","queue.append(tmp.right)","queue.pop(0)","queue:","re","res.append(tmp.data)","reserved，pow","return","right","root","root):","root.left","root.right","root:","self.add(i)","self.data","self.deserializer(li)","self.inorder(root.left)","self.inorder(root.right)","self.left","self.right","self.root","self.serialize(root.left)","self.serialize(root.right)","self.serializer(root.left)","self.serializer(root.right)","ser","ser1","serialize(self,","serializer(self,","str(root.data)","tmp","tmp.left","tmp.right","tree","tree.deserializer([1,","tree.inorder(tree.root)","tree.serialize(tree.root)","tree.serializer(tree.root)","val):","©","下午","二叉树序列化和反序列化","二叉树的序列化和反序列化","何去何从gw","作者","创建日期","序列化","文件名","：2019","：gw","：二叉树序列化.pi"],"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":["#","+=","0","08","1","1)","1.","17","18:33:33","1]","1个元素切分为左右子树。然后对切分的左右子树根据左右子树的最后一个节点进行左右切割。","2.","2019","3.","=","==","break","class","code","copyright","def","fals","gitbook该文件修订时间：","here","is_after_order(li,","j","j0:","left","left,","left:","left_i","len(sequence)","len(sequence)==0:","length","li:","li[right]","mid","mid:","none","reserved，pow","return","right","right):","root","root:","self.verifysquenceofbst(sequence[0:i])","sequenc","sequence):","sequence[","solution:","true","verifysquenceofbst(self,","write","©","​","二叉搜索树后序遍历的特点，列表的最后一个值一定是树的根节点，然后我们可以根据这个根节点将列表前n","二叉搜索树的特点：对于任意一个节点，它的左子树上所有节点的值都小于这个节点的值，它的右子树上所有节点都大于这个节点的值。","代码","何去何从gw","分析","判断一个数组是否是二叉搜索树的后序遍历","判断一个数组是否是二叉搜索树的后续遍历，如果是，返回true，如果不是,返回false，比如【1，3，2，5，7，6，4】就是一棵二叉搜索树的后序遍历序列。","判断数组是否是二叉搜索树的后序遍历","右子树节点大于根节点","后序遍历为切入点","在二叉搜索树中","在序列中找出左子树","就是一个排序二叉树的后序遍历，而[7,10，8,9]则不是","左子树节点小于根节点","按照这个思路分析一下[7,10,8,9]为什么不是，首先9为根节点，从数组左侧找到比8小的元素组，该元素组的最后一个元素是7，因此，左子树应该是7，而剩下的[10,8,9]应该是右子树，右子树应该满足的条件是每个数字都比根节点9大，然而8比9小，所以不满足","既然是后序遍历，则数组最后一个数值肯定是根节点，而从左到右，剩下数组元素的左侧值肯定小于根节点值，而其余的数组元素则大于根节点，例如[5,7,6,9,11,10,8]这个数组，8肯定是根节点，而从数组左侧到5~6三个数比8小，肯定是左子树，而剩下的9~10应该就是右子树，右子树应该满足每个数字都比根节点大，如果满足的话，我们再把[5,7,6]和[9,11,10]两个部分的数组元素重复进行之前的操作，知道结束","碰到一个题目，判断一个数组是不是排序二叉树的后序遍历，所谓排序二叉树，指的是对于二叉树中的根节点比左子节点数值大，同时比右子节点数值小，例如[5,7,6,9,11,10,8]","解题思维：","题目"],"二叉树/二叉树路径等于输入整数的所有路径.html":["#","+=",",x)","/","0","00:32:08","08","0:","1","11","13","18","1]","2","2019","22，","4","5","7","8","=","==","[","[5,4,11,2],","[5,8,4,5]","[]","[root.val]","\\","]","binarytreepaths(self,","copyright","def","gitbook该文件修订时间：","helper(self,","node,","node.left","node.left:","node.right","node.right:","node.v","node:","none:","print(x)","reserved，pow","return","right","root","root):","self.helper(node.left,","self.helper(node.right,","self.helper(root,","self.r","sum","sum,","sum,x+[node.left.val],x)","sum,x+[node.right.val],x)","sum,x,x)","x","x):","x,","x.append(node.val)","x.append(x[:])","x.pop()","x[","©","二叉树路径等于输入整数的所有路径","何去何从gw","叶子节点是指没有子节点的节点。","显式回溯","示例:","给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。","给定如下二叉树，以及目标和","说明:","返回:","隐式回溯"],"二叉树/二叉树的所有路径_LeetCode_257_简单.html":["\"1","#","'","'2'","+","/","00:29:08","08","1","1.题目","18","2","2.分析","2019","3","3.代码","5","=",">",">'",">'.join(a)",">'.join(x))",">2",">3",">3\"]",">5\",",">5,","[\"1","['2']","[47]:","[48]:","[]","[],","[str(root.val)],","\\","binarytreepaths(self,","class","copyright","def","func(self,","gitbook该文件修订时间：","left_path","left_paths:","list[str]:","node","node,","node.left","node.left:","node.right","node.right:","none","none:","out[48]:","path","path)","re","res)","res):","res.append('","res.append(str(root.val)","res.append(str(root.val))","reserved，pow","return","right","right_path","right_paths:","root","root.left","root.right","root:","self.binarytreepaths(root.left)","self.binarytreepaths(root.right)","self.func(node.left,","self.func(node.right,","self.func(root,","solution:","treenode)","x+[str(node.left.val)],","x+[str(node.right.val)],","x,","x.append(str(node.val))","x.pop()","©","二叉树的所有路径(leetcode257简单)","二叉树的所有路径leetcode_257简单","何去何从gw","前面先讨论递归到底的情况情况","叶子节点是指没有子节点的节点。","字符串列表","所有根节点到叶子节点的路径为:","显式回溯","示例:","给定一个二叉树，返回所有从根节点到叶子节点的路径。","解释:","说明:","输入:","输出:","递归","隐式回溯"],"二叉树/二叉树的镜像.html":["#","*","/","08","10","11","17","18:23:38","2019","5","6","7","8","9","=","\\","__init__(self,","class","coding:utf","copyright","def","gitbook该文件修订时间：","mirror(self,","none","reserved，pow","return","right","root","root):","root.left","root.left,","root.left:","root.right","root.right,","root.right:","root:","self.left","self.mirror(root.left)","self.mirror(root.right)","self.right","self.val","solution:","treenode:","x","x):","©","二叉树的镜像","二叉树的镜像定义：源二叉树","何去何从gw","返回镜像树的根节点","镜像二叉树"],"二叉树/判断是否是平衡二叉树_LeetCode_110.html":["#","/","0","08","1","1.题目","15","18","19:25:32","1:","2","2.分析","20","2019","2:","3","3.代码","4","7","9",">","[1,2,2,3,3,null,null,4,4]","[3,9,20,null,null,15,7]","\\","abs(func(root.left)","bool:","class","code","copyright","def","fals","func(node):","func(root.right))","gitbook该文件修订时间：","here","isbalanced(self,","max(func(node.left),func(node.right))+1","node","none:","reserved，pow","return","right","root:","solution:","treenode)","true","write","©","。","一个二叉树每个节点","何去何从gw","判断是否是平衡二叉树_leetcode_110","对于二叉树，很多题既要判断根节点，还有判断左节点，右节点，这个题也是，如果只判断根节点，就会出错","平衡二叉树(leetcode_110)","本题中，一棵高度平衡二叉树定义为：","的左右两个子树的高度差的绝对值不超过1。","示例","给定一个二叉树，判断它是否是高度平衡的二叉树。","给定二叉树","返回"],"动态规划/":["07","2019","20:39:29","copyright","gitbook该文件修订时间：","reserved，pow","right","©","何去何从gw","动态规划"],"动态规划/不同路径 LeetCode 62.html":["#","$c_{m+n","((m","(int","*","+","/","06","08","0;","1","1)","1)!","1)!(n","1))","1))!/(m","1)/math.factorial(n","1):","1,","1.","1.题目","100。","13:57:34","1:","1]","1])","1][","1][i]","1][j]","1}$","2","2)/math.factorial(m","2,","2.","2.分析","2019","28","2:","2}^{m","3","3,","3.","3.代码","62","62)","7,","=",">","[(n","[1]","[[0]*m","[[none]*m","_","an","class","cnm","copyright","def","dp","dp[","dp[0]","dp[j","dp[j]","else:","func(n):","functool","gitbook该文件修订时间：","import","int","int(math.factorial(m+n","int)","int,","int:","int[][]","int[m][n];","j","m","m!]","m)!","m,","m:","mat","mat:","mat[","mat[0][0]","mat[0][j]","mat[i","mat[i+1][j]","mat[i][","mat[i][0]","mat[i][j","mat[i][j+1]","mat[i][j]","math.factorial(n)","n","n!","n)","n):","n*","n*func(n","n:","n=2，我们只要向下","n==1:","new","now","now[","now[:]","now[j","now[j]","o(n)","print(_)","print(mat)","print(mat[","print(mat[0][0])","public","range(1,m):","range(1,n):","range(1,n+1))","range(m","range(m):","range(n","range(n):","range(n)]","reduc","reduce(lambda","reserved，pow","return","right","solut","solution:","uniquepaths(int","uniquepaths(self,","up","up[j]","x","x,y:x*y,","{","©","一个机器人位于一个","上面一行","下面一行","不同路径(leetcod","不同路径_leetcod","从左上角开始，总共有","优化空间复杂度","何去何从gw","例如，上图是一个7","动态规划","可省略，但是不省略含义更明确","向下","向右","和","因为机器到底右下角，向下几步，向右几步的总步数都是固定的，","将计算好的值，赋给上一行","所以有","排列组合","机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“finish”）。","条路径可以到达右下角。","步就一定能到达终点。","步，向右","比如，m=3,","注意：这是n行m列","的值均不超过","的网格。有多少可能的路径？","示例","空间复杂度优化为2m","网格的左上角","解释:","说明：*m","起始点颠倒","输入:","输出:","问总共有多少条不同的路径？","阶层函数","阶层计算函数","阶层递归计算函数","（当前行）","（起始点在下图中标记为“start”","）。"],"动态规划/不同路径2_LeetCode_63.html":["+","0","07","0:","1","1.","1.题目","100。","19:56:09","1:","1:return","1]","1][","1][0]","1][col","1][j","1][j]","1][j]+","2","2.","2.分析","2019","21","2]:return","2][","3.代码","3x3","=","==",">","[","[0,0,0]","[0,0,0],","[0,1,0],","[[0]*(col)","[[0]*col","]","_","class","col","copyright","def","dp","dp[","dp[0][0]","dp[0][j","dp[0][j]","dp[1][1]","dp[i","dp[i][0]","dp[i][j","dp[i][j]","else:","gitbook该文件修订时间：","i==1","ii(leetcode_63)","int:","j","j==1:","len(obstaclegrid)","len(obstaclegrid)+1","len(obstaclegrid[0])","len(obstaclegrid[0])+1","list[list[int]])","m","n","n*","obstaclegrid","obstaclegrid:","obstaclegrid[","obstaclegrid[0]:","obstaclegrid[0][0]","obstaclegrid[0][0]==1:","obstaclegrid[0][j]","obstaclegrid[i","obstaclegrid[i][0]","obstaclegrid[i][j]","obstaclegrid[row","pass","range(1,col):","range(1,row):","range(row)]","reserved，pow","return","right","row","solution:","uniquepathswithobstacles(self,","x","©","一个机器人位于一个","不同路径","不同路径2_leetcode_63","从左上角到右下角一共有","何去何从gw","向下","向右","和","在左边和上边各加一条边界","在左边和上边各加一条边界（简写）","对第一行第一列特殊处理","机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“finish”）。","条不同的路径：","来表示。","特殊处理","现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？","的值均不超过","示例","网格中的障碍物和空位置分别用","网格的左上角","网格的正中间有一个障碍物。","解释:","说明：*m","输入:","输出:","（起始点在下图中标记为“start”","）。"],"动态规划/分割回文串 LeetCode 131.html":["\"aab\"","#","04","1.题目","131","131)","14","1]:","2.分析","2019","20:15:37","3.代码","=","==","[","[\"a\",\"a\",\"b\"]","[\"aa\",\"b\"],","[]","]","copyright","def","else:","func(self,","gitbook该文件修订时间：","index","index,","leetcod","len(s):","partition(self,","range(index+1,len(s)+1):","reserved，pow","return","right","s","s):","s,","s[index:i]","s[index:i][::","self.func(s,0,[],x)","self.func(s,i,x,x)","s，将","x","x):","x,","x.append(s[index:i])","x.append(x[:])","x.pop()","©","一个字符一个字符累加，关键技巧","一个字符一个字符累加，这儿是个关键技巧","何去何从gw","分割回文串","分割回文串(leetcod","分割成一些子串，使每个子串都是回文串。","回溯法","所有可能的分割方案。","示例:","给定一个字符串","输入:","输出:","返回","还有着而需要注意回溯思想，我们只需要单条线走通，其它的就交给回溯算法本身去工作","递归、回溯"],"动态规划/分割回文串 II LeetCode 132.html":["\"aab\"","#",",",",0",".assets\\1553930053874.png)","0","04","1","1,","1,s_len)]","1.题目","132","132)","14","1]","1]:","1]时，dp[b]=dp[a]+1","1。","1，因此dp的默认写法：","2","2.分析","2019","20:15:36","3.代码","::","=","=3","==",">","[\"aa\",\"b\"]","[i","copyright","def","dp","dp[","dp[0]","dp[i]","dp[i])","dp[i]表示前i个字母的最少分割次数,默认为i","f(i)=min(f(j)+1)","gitbook该文件修订时间：","ii(leetcod","ii_leetcod","int:","j","len(s)","min(dp[j]+1,","mincut(self,","range(","range(0,i):","range(1,s_len+1):","range(i)","range(s_len+1)]","reserved，pow","return","right","s","s:","s[j:i]","s[j:i][::","s_len","str)","s，将","©","​","一般动态规划元素个数都比数组元素个数多一","何去何从gw","分割回文串","分割成","分割成一些子串，使每个子串都是回文串。","加入s_len","动态规划","动态规划题目，好比数学数列题，由前面的结果推导后面的结果","当s[a:b]==s[a:b][","数组nums[i]表示前i字符串最小的分割次数，那么在遍历过程中需要知道j至i的字符串是否为回文串。","最前面一个元素一般为","示例:","给定一个字符串","解释:","输入:","输出","输出:","返回符合要求的最少分割次数。","这样两个回文子串。","进行一次分割就可将"],"动态规划/单词拆分 LeetCode 139.html":["\"\"\"","\"and\",","\"appl","\"applepenapple\"","\"applepenapple\",","\"cat\"]","\"catsandog\",","\"code\"]","\"dog\",","\"leet","\"leetcode\"","\"leetcode\",","\"pen\"]","\"sand\",","#","+","0)","04","1","1):","1,","1.题目","139","139)","14","1]","1：","2.分析","2019","20:15:39","2：","3.代码","3：",":rtype:",":type","=","==","==''","==0:",">",">=","[\"apple\",","[\"cats\",","[\"leet\",","[0]*(len(s)+1)","[false]*(len_s+1)","[false]*(s_len+1)","\\","_wordbreak(self,","apple\"。","bool","bool:","break","class","code\"。","copyright","def","dict((i,len(i))","dp","dp[","dp[0]","dp[i","dp[i]","dp[j]==1","else:","fals","gitbook该文件修订时间：","i):","i>=len(word)","j","k","k>0:","len(s)","len(s):","len(word):i]:","len(word)]","len(worddict)","len_","list[str]","list[str])","max([len(x)","max_strid","mem","mem[","mem[0]","mem[i","mem[i]","pen","range(0,i):","range(1,","range(1,len(s)+1):","range(1,s_len+1):","range(k,i):","range(start","reserved，pow","return","right","s","s,","s:","s[i","s[j:i]","s[start:i]","s_len","self._wordbreak(s,","set(worddict),","solution:","start","start):","str","str,","sub","tmpdict","tmpdict[word]","tmpdict[word]:i]:","tmpdict[word]]","true","word","wordbreak(self,","worddict","worddict)","worddict):","worddict:","worddict])","worddict，判定","words,","x","©","何去何从gw","你可以假设字典中没有重复的单词。","动态规划","动态规划2","单词拆分(leetcod","单词拆分_leetcod","可以被拆分成","和一个包含非空单词列表的字典","回溯","因为","因为单词长度最小是1，所以起点是1","在上一个动态规划上进行优化","就像爬楼梯，一样，要爬到10楼，先看能不能爬到1楼，2楼等","拆分时可以重复使用字典中的单词。","是否可以被空格拆分为一个或多个在字典中出现的单词。","注意你可以重复使用字典中的单词。","示例","给定一个非空字符串","解释:","说明：","输入:","输出:","返回"],"动态规划/鸡蛋掉落 Leetcode 887.html":["+","0","04","1","1),self.supereggdrop(k,n","1,","1,i","1.题目","14","1]","1][m","1：","2","2,","2.分析","2019","20:17:25","2：","3,","3.代码","3：","6","887","887)","=",">","[0]*(k+1)","[]","copyright","def","dp","dp[k","dp[k]","dp[k][m","dp[k][m]","f","gitbook该文件修订时间：","i)))","int)","int,","int:","k","k,","k:","k==1:return","m","min(res)","n","n):","n:","n==0:return","o(klogn)","o(kn)","print(res)","range(1,n+1):","re","res.append(max(self.supereggdrop(k","reserved，pow","return","right","supereggdrop(self,","x","©","。","不影响后续计算","个鸡蛋，并可以使用一栋从","中间是我选定扔的楼层","任何从高于","何去何从gw","你将获得","你的目标是确切地知道","你知道存在楼层","共有","到","只需要o(k)空间复杂度","右边是没碎的那段","否则，鸡蛋从","因为已经碎了一个了","因此，在最坏的情况下我们需要移动","如果它没碎，那么我们肯定知道","如果采用k倒着从大到小计算","就可以只存一行的dp[k]","就是走logn步","层楼的建筑。","左边是碎的那段","所以递推公式是","扔下（满足","提示：","无论","是1","是多少。","暴力法","最多能够确定的楼层数为l","最差情况是1个鸡蛋走n步","根据递推公式","楼层或比它低的楼层落下的鸡蛋都不会破。","楼掉落。如果它碎了，我们肯定知道","次以确定","每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。","每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层","的值是多少。","的值的最小移动次数是多少？","的初始值如何，你确定","的含义是k个鸡蛋","的楼层落下的鸡蛋都会碎，从","直接原地更新dp[k]","示例","移动m次最多能够确定多少楼层","解释：","输入：k","输出：2","输出：3","输出：4","这个角度思考","这就是把l分成3段","那么我选定第一个扔的楼层之后，我要么碎，要么不碎","长度是dp[k","长度是dp[k][m","鸡蛋从","鸡蛋完全够用的时候","鸡蛋掉落(leetcod","鸡蛋掉落_leetcod","）。","，满足"],"动态规划/最大正方形 LeetCode 221.html":["#","'1':","(i","(i，j","(i，j)","(matrix.empty()","+","0","07","0:return","0;","1","1)","1.题目","1],dp[i","1],dp[i][j","1][j","1][j])+1","1，dpi","1，dpi)","1，j","1，j)","2.分析","2019","22","221","221)","23:03:10","3.代码","4","=","=0;i","==",">","[[0]*n","c++代码","class","copyright","def","dp","dp(m,vector(n,0));","dp[0][j]","dp[i][0]","dp[i][j]","dp[i][j]=0","dpi","else:","for(int","gitbook该文件修订时间：","int","int:","j","len(matrix),len(matrix[0])","len(matrix)==0","len(matrix[0])","list[list[str]])","m","m,n","matrix)","matrix.size(),n","matrix:","matrix[0].empty())","matrix[0].size(),r","matrix[0][j]","matrix[i][0]","matrix[i][j]=='1':","max(res,dp[i][j])","maximalsquare(self,","maximalsquare(vector>&","min(dp[i","min(dpi，min(dpi","print(dp[i][j])","public:","python","python，在里面赋dp的初值","range(1,m):","range(1,n):","range(m):","range(m)]","range(n):","re","res*r","reserved，pow","return","right","solut","solution:","vector>","{","||","©","为右下角的最大正方形的边长应该为多少呢？","从0行0列开始遍历","从1行1列开始遍历","何去何从gw","只能往上和往左延伸1单位，(i","只能往上和往左延伸2个单位：","只能往上和往左延伸3个单位，(i，j","可以参考最大矩形","和","在一个由","在上图中，我们可以看到以","最大正方形(leetcod","最大正方形_leetcod","的最大正方形，并返回其面积。","示例:","组成的二维矩阵内，找到只包含","输入:","输出:","这个点为右下角的最大正方形的边长为2（红色），以","这个点为右下角的最大正方形的边长为3（绿色），以","这个点为右下角的正方形的边长为1（蓝色），那么以","那么","都有可能转移到","，单调栈"],"动态规划/最长上升子序列 LeetCode 300.html":["#","+",",nums[i]=3","04","1","1,dp[i])","1.","1.题目","101,","14","18]","1],","1]:","1、子序列：不要求连续子序列，只要保证元素前后顺序一致即可；","2","2,","2.","2.分析","2019","20:16:59","2、上升：这里的“上升”是“严格上升”，类似于","3","3,","3.代码","300","300)","4","4。","5,","6,","7,","7]","9,","=","==",">","[1,3,6,7,9,4,10,5,6]","[10,","[10,9,2,5,3,7,101,18]","[2,","[2,3,7,101]，它的长度是","break","class","continu","copyright","def","dp","dp.append(nums[i])","dp=【1，2，4】","dp[","dp['4']+1=4,所以最后max(dp),答案为5，而不是6","dp[i]","dp[i]:","dp[j]+1","dp[low]","else:","fals","false:","flag","gitbook该文件修订时间：","high","int:","j","len(dp)","len(nums)","len(stack)","lengthoflis(self,","list[int])","log","max(dp)","max(dp[j]","mid","n","n)","num","nums):","nums:","nums[i]","nums[i]:","nums[j]:","o(n","o(n2)","range(len(stack)):","reserved，pow","return","right","size","solution:","stack.append(nums[i])","stack[","stack[j]","stack[j]:","true","©","。","不会动递增序列的个数，但是会调整递增序列的值，这儿也可以用二分查找","不用替换,设置一个标志位，跳过外循环的替换操作","为什么是","为例：","么dp['4']","以数组","何去何从gw","你算法的时间复杂度应该为","你能将算法的时间复杂度降低到","依次判断每个数num将其插入dp数组相应的位置:","动态规划","动态规划之二分替换","动态规划思路","动态规划替换","动态规划的思路：将","可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。","吗?","如下","对于4，如果不用max(dp[j]+1,dp[i]),那","将num添加入dp","将数组中的值替换","所有长度为i+1的递增子序列中,","数组中的最大者","数组定义为：以","数组尾部","替换思路","最后要全部走一遍，看最大值","最小的那个序列尾数.","最长上升子序列(leetcod","最长上升子序列_leetcod","最长的上升子序列是","由定义知dp数组必然是一个递增数组","的值：","示例:","等于3，当求10，dp['10']时候，10>4,则dp['10']","结尾的最长上升子序列的长度","给定一个无序的整数数组，找到其中最长上升子序列的长度。","而不是","解释:","说明:","输入:","输出:","返回递增序列的长度，就是最长递增子序列","这样的子序列是不符合要求的；","进阶:","那么题目要求的，就是这个","，执行插入尾部操作，表示num比所有已知递增序列的尾数都大,"],"动态规划/最小路径和 LeetCode 64.html":["#","(grid","(int","(动态规划1)：时间复杂为o(nm)和空间复杂度为o(nm)。典型的动态规划问题，假设当前已经开始计算si，那么si只可能从si","(动态规划2)：时间复杂度为o(nm)，空间复杂度为o(m)，此方法需要2m额外空间。当我们求si时，s[i","(动态规划3)：时间复杂度为o(nm)，空间复杂度为o(m)，需要m大小的额外空间，注意此方法和方法三的区别，方法三需要2m大小的额外空间，此方法只需要m大小的额外空间，在方法三中我们保存当前行s[i]中的元素，假设我们当前计算si，我们只需要知道si的值即可，不需要保存s[i]行中的元素。每次计算si时，我们需要更新up[j]的值。","*m","+","0","06","08","0;","1+gridi或者si+gridi计算得到，也就是si","1,si)+gridi。我们需要一个o(nm)额外空间保存已经计算的si的值，我们只需要访问一遍数组即可。因此时间复杂度为o(nm)，空间复杂度为o(n*m)。我们需要特殊处理矩阵中第一行和第一列。因为第一行没有si","1.题目","14:21:16","1;","1]","1])","1])+grid[i][j]","1],","1][","1][0]","1][j]","1][j])","1][j],","1]行中的元素保存在up数组中，数组的大小为m。我们把s[i]保存在now数组中，当s[i]行的元素计算完毕以后，我们交换up和now数组。因为需要up数组和now数组，且数组的大小都为m，所以我们需要2*m大小的额外空间。","1]行中的元素，我们把s[i","1→3→1→1→1","1元素。","1元素，只有si元素。第一列没有si元素，只有si","2.分析","2019","2]行的元素我们就不再需要，我们只需要s[i","3.代码","64","64)","7","=","==","==0)",">","[","[0]","[0]*m","[1,3,1],","[1,5,1],","[4,2,1]","[[grid[0][0]]*m]*n","[grid[0][0]]*m","]","class","copyright","def","dp","dp[","dp[0]","dp[i","dp[i]","dp[j]=","elif","gitbook该文件修订时间：","grid","grid)","grid):","grid.length","grid:","grid[","grid[0]","grid[0].length","grid[0]:return","grid[0][0]","grid[0][0];","grid[0][i]","grid[0][j","grid[0][j]","grid[i","grid[i][0]","grid[i][j","grid[i][j]","i==0","i>0","i>0:","int","int:","int[]","int[m];","j","j==0","j>0:","java","len(grid),","len(grid[0])","list[list[int]])","m","m=grid[0].length;","mat","mat[","mat[0][j","mat[0][j]","mat[i","mat[i][0]","mat[i][j]","min(dp[j],dp[j","min(grid[i","min(mat[i][j","min(si","min(up[j],now[j","minpathsum(int[][]","minpathsum(self,","n","n,","n=grid.length,","new","now","now.copy()","now[0]","now[j]","null","public","range(1,m):","range(1,n):","range(m):","range(n):","res=0,","reserved，pow","return","right","solut","solution:","up","up[","up[0]","up[j","up[j]","x","{","||","©","​","从1开始，不然0位置会重复计算","何去何从gw","动态规划1(原地修改)：","动态规划2（非原地修改，空间复杂度m*n）","动态规划3（非原地修改，空间复杂度2*m）","动态规划4（非原地修改，空间复杂度为m）","因为路径","在这给其他now赋值","最小路径和(leetcod","最小路径和_leetcod","的总和最小。","示例:","给定一个包含非负整数的","网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。","解释:","计算now【0】","说明：每次只能向下或者向右移动一步。","输入:","输出:"],"动态规划/斐波拉契数列第n项.html":["+","0","0,","07","07:03:40","1","1)","1.","1.题目","2),","2.分析","20","2019","3.代码","30","=",">","copyright","def","f(0)","f(1)","f(n","f(n)","f(n)。","func(n):","gitbook该文件修订时间：","n","n，计算","reserved，pow","right","©","≤","何去何从gw","其中","和","开始，后面的每一项数字都是前面两项数字的和。也就是：","提示：","斐波拉契数列第n项","斐波那契数(leetcode_509)","斐波那契数，通常用","给定","表示，形成的序列称为斐波那契数列。该数列由"],"动态规划/零钱兑换_LeetCode_322.html":["!=","#","*(amount+1)","+","0","03","08","0:return","1","1.题目","11","1:","1。","2,","2.分析","2019","23:26:44","2:","2]*(amount+1)","3","3.代码","5","5],","=","==",">","[","[1,","[2],","[amount+1]","amount","amount,","amount:","amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回","class","coin","coinchange(self,","coins,","coins:","coins[i])","coins[i],","coins[i]>amount:","continu","copyright","def","dp","dp[0]","dp[amount]","float('inf')","func(self,","gitbook该文件修订时间：","int)","int:","j","list[int],","memo","memo)","memo):","memo[amount]","min(res,","min(res,tmp+1)","range(1,amount+1):","range(len(coins)):","re","reserved，pow","return","right","self.coinchange(coins,","self.func(coins,","solution:","tmp","tmp+1)","tmp==","©","从上到下","何去何从gw","你可以认为每种硬币的数量是无限的。","和一个总金额","子问题无解","完全背包问题","示例","给定不同面额的硬币","解释:","记录本轮答案","说明:","输入:","输出:","递归","金额不可达","零钱兑换(leetcode_322)","零钱兑换_leetcode_322"],"动态规划/打家劫舍_LeetCode_198.html":["(金额",")","+","0","07","0:","1","1)","1)。","1.题目","12","1:","1]","1])","1],","2","2),","2.分析","2019","20:15:35","21","22","2:","2]","3","3)。","3+2)","3.代码","33","4","44","5","55","5，3","9","9)，接着偷窃","=","==","=[0]*len(nums)",">","[1,2,3,1]","[2,7,9,3,1]","class","copyright","def","dp","dp[","dp[0],","dp[1]","dp[1]=3，2","dp[2],","dp[2]=4，3","dp[3]","dp[i","dp[i]","dp[n","gitbook该文件修订时间：","int:","len(nums)","len(nums)):","list[int])","max(","max(4,","max(dp[i","max(nums[0],","n","num","num=2，那么","nums:","nums[0]","nums[0],","nums[1])","nums[i],","range(2,","reserved，pow","return","right","rob(self,","solution:","©","。","为数组长度","举例来说：1","何去何从gw","你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。","偷窃","偷窃到的最高金额","动态规划方程：dp[n]","即为","号房屋","号房间可盗窃最大值为","号房间自身的值为","房屋可盗窃的最大值加上当前房屋的值，二者之间取最大值","房屋可盗窃的最大值，要么就是","打家劫舍(leetcode_198)","打家劫舍_leetcode_198","时间复杂度：o(n),n","由于不可以在相邻的房屋闯入，所以在当前位置","示例","给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。","解释:","输入:","输出:","，然后偷窃"],"动态规划/打家劫舍2_LeetCode_213.html":["+","0","07","1","1.题目","1:","1]","1])","1），然后偷窃","2.分析","2019","20:15:27","21","2:","2]+nums[i],dp[i","2）,","2），然后偷窃","3","3.代码","3）。","4","=","==",">","[0]*len(nums)","[1,2,3,1]","[2,3,2]","class","copyright","def","dp","dp[","dp[0],dp[1]","dp[i]","func(self,","gitbook该文件修订时间：","ii(leetcode_213)","int:","len(nums)","list[int])","max(dp[i","max(nums[0],nums[1])","max(res_1,res_2)","nums):","nums:","nums[0]","nums[0],max(nums[0],nums[1])","range(2,len(nums)):","res_1","res_2","reserved，pow","return","right","rob(self,","self.func(nums[1:])","self.func(nums[:","solution:","©","。","何去何从gw","你不能先偷窃","你可以先偷窃","你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。","偷窃到的最高金额","分两种情况讨论，偷第一家，最后家就不能偷，不偷第一家，最后家可以选择偷，也可以选择不偷。然后取最大值","号房屋（金额","因为他们是相邻的。","打家劫舍","打家劫舍2_leetcode_213","示例","给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。","解释:","输入:","输出:"],"动态规划/最大子序和_LeetCode_53.html":["#","(子数组)","+","+=","0","08","0:","1,","1,2,1,","1,2,1]","1.分治法解决","1.题目","11,","12:02:18","13,","15,","15）=","15）=max（8","15，","18","1]","1]+array[i],","1]+nums[i])","1整个子序列出现在左半部分","1）+array[i]","2","2,","2,1,","2,4]","2.分析","2.动态规划解决","2019","2]","2整个子序列出现在右半部分","2）=1","2）=max（3","2，","3,","3,4,","3.代码","3.分治法解决非连续","3整个子序列跨越中间边界","3）=max（6","3，","3，3）=3","4,","4,13}，最大连续子序列和即为20。","4.动态规划解决非连续","5,","5,4],","5,9]","53)","6","6]","6。","7","7,","7，8）=8","=",">",">=","[","[0]*a_len","[4,","a=[1,","a=[2,3,4,1,","a_len","array):","array[0]","array[i])","array[i]）","class","code","copyright","def","dp","dp[i]","dp[i])","else:","findgreatestsumofsubarray(self,","findmaxsum(li):","float(\"","float('","f（0）=6","f（1）=max（f（0）","f（2）=max（f（1）","f（3）=max（f（2）+7，7）=max（1+7，7）=8","f（4）=max（f（3）","f（i）=max（f（i","f（i）：以array[i]为末尾元素的子数组的和的最大值，子数组的元素的相对位置不变","gitbook该文件修订时间：","here","i=1：","i=2：","i=3：","i=4：","inf\")","inf')#包含右边最后一个数的最大序列和","initmax","initmax:","int:","leftandmid","leftandmidmax","leftandmidmax:","len(array)","len(li)","li:","list[int])","max(dp[i","max(leftmaxsum,","max(nums)","max(nums[i],nums[i","max(res,","max_sub_sum","max_sub_sum:","maxsubarray(nums):","maxsubarray(self,","maxsum","maxsum:","midmaxsum","midmaxsum,","num","nums):","nums:","nums[0]","nums[1:]:","nums[i]","nums[i])（含义为保留前面累加和与以当前元素为开始，哪种更优），即判断后面subarray是否舍去前面的累计加和，并继续遍历下一元素。","nums[i],","o(n)","print(findmaxsum(a))","print(max_sub_sum)","range(1,len(nums)):","range(a_len):","re","res=6","res=max（f（1），res）=max（3，6）=6","res=max（f（2），res）=max（1，6）=6","res=max（f（2），res）=max（8，6）=8","res=max（f（4），res）=max（","res=max（res，f（i））","reserved，pow","res：所有子数组的和的最大值","return","right","right:","rightandmid","rightandmidmax","rightandmidmax:","rightmaxsum)","solution(object):","solution:","sum","write","}，其最大连续子序列为{11,","©","以此类推","何去何从gw","使用动态规划","分治法","初始状态：","前两种情况可以用递归求解，而第三种情况则可以将前半部分的最大子序列和（此处的子序列必须包含前半部分的最后一个元素）与后半部分的最大子序列和（此处的子序列必须包含后半部分的第一个元素）相加得到","动态规划","合并","和最大问题","和最大：","如数组[6,","如果你已经实现复杂度为","如果问题规模小于等于1，直接解决","子序列","最后return加和中最大值。","最大子序和(leetcod","最大子序和_leetcode_53","最大连续子序列是所有连续子序中元素和最大的一个，例如给定序列{","最终res的值为8","正常解法","法2","注1：因为第三种情况跨越了中间边界，且要求的序列为连续的，因此第三种情况得到的子序列必定包含左子序列","注1：因为第三种情况跨越了中间边界，且要求的序列为连续的，因此第三种情况得到的子序列必定包含左子序列的最后一个元素以及右子序列的第一个元素。","注2：若要求的序列可以为不连续的，则第三种情况可以直接用前半部分最大子序列和与后半部分最大子序列和相加得到","现将序列等分为左右两份，则最大子列只可能出现在三个地方：","用于包含右边第一个数的累加求和","用于累加求和开始","的和最大，为","的最后一个元素以及右子序列的第一个元素。","的最大和","的解法，尝试使用更为精妙的分治法求解。","示例:","给定一个整数数组","考虑到存在序列全为负数的情况，因为初始化为负无穷而非0","解释:","计算跨越了中间的序列","输入:","输出:","进阶:","连续","连续子数组","遍历数组，记录max(nums[i","问题解决思路：","，","，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。"],"动态规划/最长重复子数组_LeetCode_718.html":["#","0","03","08","1","1.题目","10:29:23","1:","1]","1]+","1]+1","1][j","1]。","1】和b【:j","1】的最长公共子串的长度","2","2,","2.分析","2019","3","3.代码",":","=","==",">","[1,2,3,2,1]","[3,","[3,2,1,4,7]","[[0]*(s2_len+1)","\\","_","a:","a[i","b","b:","b[j","class","copyright","def","dp[i][0]","dp[i][j]","findlength(self,","gitbook该文件修订时间：","int:","j","len(a)","len(b)","list[int])","list[int],","mat","mat[i","mat[i][j]","mat[i][j])","max(max_len,","max_id","max_len","max_len:","max_len:max_id]","max_str","range(1,s1_len+1):","range(1,s2_len+1):","range(s1_len+1)]","reserved，pow","return","right","s1[max_id","s1_len","s2_len","solution:","|","©","​","“子数组”需要连续的一段，并不是“子序列”。","为空串时，无论a多少字符，公共连续子序列长度都为0","为空串时，无论b多少字符，公共连续子序列长度都为0","何去何从gw","初始化：","动态规划","和","最长重复子数组(leetcode_718)","最长重复子数组_leetcode_718","示例","空","给两个整数数组","表示a【:i","解释:","说明:","输入:","输出:","长度最长的公共子数组是","，返回两个数组中公共的、长度最长的子数组的长度。","：dp[0][j]"],"动态规划/最长公共子序列.html":["'dgcadabcdcdde')","0","03","08","1","10:27:18","1]","1])","1]+1","1],mat[i","1]:","1][","1][j","1][j])","2","2019","=","==","[[0]*(s2_len+1)","\\","_","b","c","copyright","def","else:","findmaxsub('abcdcdabccade',","findmaxsub(s1,","gitbook该文件修订时间：","j","len(s1)","len(s2)","mat","mat[i","mat[i][j]","max(mat[i][j","max_id","max_len","print(mat[","range(1,s1_len+1):","range(1,s2_len+1):","range(s1_len+1)]","reserved，pow","right","s1[i","s1_len","s2):","s2[j","s2_len","©","何去何从gw","最长公共子序列","空"],"动态规划/最长公共字符串.html":["'dgcadabcdcdde')","0","03","08","10:27:06","1]","1]+1","1][j","2019","=","==",">","[[0]*(s2_len+1)","_","copyright","def","findmaxsub('abcdcdabccade',","findmaxsub(s1,","gitbook该文件修订时间：","j","len(s1)","len(s2)","mat","mat[i","mat[i][j]","max_id","max_len","max_len:","max_len:max_id]","max_str","print(max_str,max_len)","range(1,s1_len+1):","range(1,s2_len+1):","range(s1_len+1)]","reserved，pow","right","s1[i","s1[max_id","s1_len","s2):","s2[j","s2_len","©","何去何从gw","最长公共字符串"],"动态规划/正则表达式匹配_LeetCode_10.html":["!=","\".*\"","\"a\"","\"a*\"","\"aa\"","\"aab\"","\"aab\"。","\"ab\"","\"c*a*b\"","\"mis*is*p*.\"","\"mississippi\"","#","'''","'*'","'*':","'.'","'a'","'a'。因此，字符串","'c'","(p[inp","*","*(p_len+1)","*。","*出现的位置只能是大于等于1（从0开始计数）","*前必存在一个字符,","*，前面必然有个字符",".","0","07","1","1)","1,inp","1,inp):","1,len(p)","1.","1.题目","17:48:11","1:","1]","1]:","1]=='.'):","1][","1][j","1][j]","2)","2+1】，都要在dp位置上加1","2.","2.分析","2019","21","2:","2]","3.代码","3:","4:","5:","=","==","=='.':",">","[[false]","_","aaa","and(p[inp]==s[ins]","bool:","class","copyright","def","dp","dp[","dp[0][0]","dp[0][i","dp[0][i+1]","dp[i","dp[i][j","dp[i][j]","dp和字符串实际位置相差1，所以当前状态p[i]的上上（前2）状态位dp【i","elif","fals","gitbook该文件修订时间：","in","inp==","ins==","ins>","ismatch(self,","j","len(p)","len(s)","match(in","match(ins,inp","match(ins,inp):","match(len(s)","p","p:","p[i]","p[inp","p[inp]","p[inp]=='.'):","p[j","p_len","p，请你来实现一个支持","range(0,p_len):","range(1,p_len+1):","range(1,s_len+1):","range(s_len+1)]","reserved，pow","return","right","s","s:","s[i","s[ins]","s_len","solution:","str)","str,","s的，而不是部分字符串。","true","z","©","一旦遇到","与","两串都为空时，算匹配成功","两者相等时，a*","个,","为","也就是，匹配串需要看前两个字符的状态","二者不相等时，a*","从后往前匹配,","代表可以匹配零个或多个前面的那一个元素,","何去何从gw","其状态与前2的状态一致","则当前为*时,","初始化","动态规划,","匹配0个字符","匹配串为空串时，字符串1个以上字符时，匹配不成功，即第一列从第一个字符开始为false，由于创建dp","匹配串：p串","匹配任意单个字符","匹配多个字符（>=1个字符）","匹配零个或多个前面的那一个元素","只有作为空串，才能匹配成功","可以作为空字符，单字符a，多字符处理","可能为空，且只包含从","可被视为","和","和一个字符规律","回溯法","回溯算法:","因为","在这里前面的元素就是","字符串","字符串的当前字符","字符串：s串","对角线意味着匹配串是否匹配对应的字符串","当字符串是空串时，匹配串不为空，根据规则,","思路:","所谓匹配，是要涵盖","整个","整个字符串。","无法匹配","时候，已经设置好了，所以这儿不用再次初始化","根据匹配规则，比较匹配串*的前一个字符","正则表达式匹配(leetcode_10)","正则表达式匹配_leetcode_10","沿着匹配串和字符串构成矩阵的对角线传递状态","状态矩阵的首行与首列对应于空字符与空匹配符","的小写字母。","的小写字母，以及字符","的正则表达式匹配。","示例","给你一个字符串","表示可匹配零个或多个（'*'）任意字符（'.'）。","表示零个或多个，这里","被重复一次。因此可以匹配字符串","解释:","说明:","输入:","输出:","重复了一次。"],"动态规划/通配符匹配_LeetCode_44.html":["\"*\"","\"*a*b\"","\"?a\"","\"a\"","\"a*c?b\"","\"aa\"","\"acdcb\"","\"adceb\"","\"cb\"","\"dce\".","#","'*'","'*':","'?'","'a'","'b'。","'c',","(p)","(p[inp]==s[ins]","(s)","*","*。","...","07","1","1)","1,inp","1,inp):","1,len(p)","1.题目","17:59:57","1:","1]","1]=='?'):","1]==s[ins]","1][","1][j","1][j]","2.分析","2019","21","2:","3.代码","3:","4:","5:","=","==","=='?':",">","?","[[false]*(m+1)","_","and(p[inp","bool:","class","copyright","def","dp","dp[","dp[0][0]","dp[0][i","dp[0][i]","dp[i","dp[i][j","dp[i][j]","elif","fals","gitbook该文件修订时间：","in","inp","ins>","ismatch(self,","j","len(s),len(p)","m","match(in","match(ins,inp","match(ins,inp):","match(len(s)","n,","p","p:","p[i","p[inp","p[inp]","p[inp]=='?'):","p[j","range(1,m+1):","range(1,n+1):","range(n+1)]","range（m）:","reserved，pow","return","right","s","s:","s[i","solution:","str)","str,","true","z","©","两个字符串完全匹配才算匹配成功。","也可以for","但第二个","何去何从gw","匹配空字符，多字符","参考正则表达式匹配_leetcode_10","可以匹配","可以匹配任何单个字符。","可以匹配任意字符串。","可以匹配任意字符串（包括空字符串）。","可以匹配字符串","可以匹配空字符串,","可能为空，且只包含从","和","和一个字符模式","回溯","整个字符串。","无法匹配","的小写字母。","的小写字母，以及字符","的通配符匹配。","示例","第一个","第二个","给定一个字符串","解释:","说明:","输入:","输出:","通配符匹配(leetcode_44)","通配符匹配_leetcode_44","，实现一个支持"],"动态规划/乘积最大子序列 LeetCode 152.html":["#","(a[i","(b[i","*=","0","0,","04","0]","1)","1,","1.题目","14","152","152)","1:","1]","1，输出[","2,","2,0,","2,4]","2,i=3，这一次来的数是i=3，则这次的最大，应该就是它自己，不需要乘以前面的最大或者最小","2.分析","2019","20:15:30","2:","2]","3,","3,0,1,","3.代码","6","6。","=",">","[","[2,3,","[2,3]","a):","a[::","a[i]","b","b[i]","copyright","def","gitbook该文件修订时间：","i*maxnum_temp,","i*minnum_temp)","int:","leetcod","len(a)):","list[int])","max(i,","max(max(a),max(b))","max(res,maxnum)","maxnum","maxnum_temp","maxproduct(self,","min(i,","minnum","minnum_temp","num","nums:","nums[0]","nums[1:]:","print(a,b)","print(i)","range(1,","re","reserved，pow","return","right","©","一种方法类似于最大前缀和","不加","不是子数组。","乘积最大子序列","乘积最大子序列(leetcod","何去何从gw","保留前面计算过的最大最小值","先计算从左到右的相乘的最大值，再计算从右到左的最大值；再将两组最大值相比","另外一种方法，我们要保存前面走过的路，里面的最大最小值，因为这是乘法，乘法的话，会出现最大值，是由两个负数乘起来的。但是负数是最小的","因为","子数组","所以我们要把a【i】等于0时，置为1","最大前缀和","有最大乘积","由于有正负，所以每次相乘完毕后，应该保留最大和最小值，也就是最大正数，最小负数","示例","结果不能为","给定一个整数数组","解释:","输入:","输入[","输出:","，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。"],"动态规划/编辑距离_LeetCode_72.html":["\"execution\"","\"horse\",","\"intention\",","\"ros\"","#","'c')","'e')","'h'","'i'","'n'","'r')","'t')","'u')","'x')","(删除","(将","(插入","08","1.题目","11","15:40:32","1:","1]","1]+1)","1]+1,dp[i","1]+1步","1]+c1,dp[i","1]+c2)","1]:","1]==word2[j","1][","1][j","1][j]+1,dp[i][j","1][j]+1步(增加word1和删除word2一个效果)","1][j]+c0,dp[i][j","1、替换","2.分析","2019","2:","2、删除","3","3.代码","3、删除","5","=",">","[[0]*(len2+1)","class","copyright","def","dp","dp[","dp[0][j]","dp[i","dp[i][0]","dp[i][j","dp[i][j]","else:","enent","exect","execut","exent","gitbook该文件修订时间：","hors","inent","int:","intent","j","len(word1)","len(word2)","len1","len2","min(dp[i","mindistance(self,","print(dp)","range(1,len1+1):","range(1,len2+1):","range(len1+1)]","reserved，pow","return","right","ro","rors","rose","solution:","str)","str,","word1","word1:","word1[i","word1[i]","word2","word2:","word2[j","word2[j]","word2，计算出将","©","。","以word1[i]为结尾的字符串","以word2[j]为结尾的字符串","何去何从gw","你可以对一个单词进行如下三种操作：","删除一个字符","删除成","和","建立数组dp[][]来存储","我们需要进行插入、删除和修改操作将a串变为b串，定义c0，c1，c2分别为三种操作的代价","所使用的最少操作数","所需的最小操作数","把","插入一个字符","替换一个字符","替换为","替换成","示例","给定两个单词","编辑距离","编辑距离_leetcode_72","解释:","转换成","输入:","输出:","需要"],"动态规划/不同的子序列_LeetCode_940.html":["\"a\",","\"aa\"","\"aaa\"。","\"ab\",","\"aba\"。","\"abc\"。","\"ac\",","\"b\",","\"ba\",","\"bc\",","\"c\",","#","%","(10**9","(dp[","(s_len+1)","*","+",",前0个构成的子序列个数，‘’","08","1","1)","1):","1.","1.题目","10^9","11","15:57:57","1]","1]*2","1]*2+1","1],none)","1]]","1个字符出现的最近位置。即0","1：","2)","2*dp[i","2.分析","2019","2：","3.代码","3：","7)","7.","97]","=","=1","==","===>dp[0]",">","[0]","[0]*26","[1]","class","copyright","def","distinctsubseqii(self,","dp","dp.append(dp[","dp[","dp[0]","dp[history[k]]","dp[i","dp[i+1]","dp[i]","dp[i]*2","dp[last[x]]","dp[tmp","else:","enumerate(s):","enumerate(s,","gitbook该文件修订时间：","histori","history.get(s[i","history:","history[k]","history[s[i","i,","i,k","ii(leetcode940困难)","int:","k","last","last:","last[x]","len(s)","none:","print(dp)","print(i,k)","re","res[ord(i)","reserved，pow","return","right","s","s):","s:","s_len","solution(object):","start","str)","sum(res)","s，计算","tmp","x","{}","©","不同的子序列","不同的子序列_leetcode_940","个不同的子序列分别是","以及","何去何从gw","初始值dp[0]","只包含小写字母。","因为结果可能很大，所以返回答案模","如果数列第i项在之前出现过，那么我们需要找到第i项对应的字符在前i","如果数列第i项没有在之前出现过，那么dp[i]","实现上，我们需要建立一个26大小的数组以容纳不同字母结尾的字符串个数。每当我们遍历到一个新的字母时，","我们假设子序列可以为空，最后的结果减一就可以得到正确答案，dp[i]表示数组前i项构成的不同子序列个数，","提示：","此时我们只要将数组中所有结果加起来然后再加1即为以新的字母为结尾的字符串总数。最后我们只要将数组中的结果加起来即可。","用动态规划先求出包括空序列的所有子序列，再返回答案之前再减去空序列。","的不同非空子序列的个数。","示例","给定一个字符串","解释：3","解释：6","解释：7","输入：\"aaa\"","输入：\"aba\"","输入：\"abc\"","输出：3","输出：6","输出：7"],"动态规划/解码方法_LeetCode_91.html":["!=","\"12\"","\"226\"","\"ab\"（1","\"bbf\"","\"bz\"","\"l\"（12）。","\"vf\"","''","'0'","'0':","'1'","'a'","'b'","'z'","(2","(22","(s[i","*(s_len+1)","+=",",","...","0","08","1","1.题目","15:58:03","17","1:","1]","1】","1】!=","1】+dp【n","2","2.分析","2019","26","26),","2:","2]","2】","2】,s【n","2）或者","3","3.代码","6)","6),","=","==","=='2'and",">","[0]","copyright","def","dp","dp[0]","dp[1]","dp[i","dp[i]","dp【n","dp【n】表示n个字符可编码数，","gitbook该文件修订时间：","int:","len(s)","numdecodings(self,","range(2,","reserved，pow","return","right","s","s:","s[0]","s[i","s_len","s_len+1):","str)","z","©","。","【n】=","一条包含字母","何去何从gw","则dp","动态规划：","如果s【n","它可以解码为","或者","的消息通过以下方式进行了编码：","示例","组合成的数字是10~26，则dp【n】","给定一个只包含数字的非空字符串，请计算解码方法的总数。","解码方法(leetcode_91)","解码方法_leetcode_91","解释:","输入:","输出:"],"动态规划/最长递增子序列的个数_LeetCode_673.html":["#","+=","0","08","1.题目","11:15:42","18","1:","2","2.分析","2019","2:","3,","3.代码","4,","5","5,","7]","7]。","=","==",">","[1,","[1,3,5,4,7]","[2,2,2,2,2]","an","class","copyright","def","dp[i]","dp[i]dp[j]+1:不需要做任何调整","dp[j]+1)","dp_nums[i]","findnumberoflis(self,","gitbook该文件修订时间：","int:","len(nums)","list[int])","max(dp)","max(dp[i],","n","nnums[j]:","nums:","range(n):","reserved，pow","return","right","solution:","tmp","tmp:","©","何去何从gw","做这道题目之前，建议先去看看300号问题，本题在300号问题的基础上做了一些改变，需要多使用一个数组来记录lis的组合数","和[1,","如果j位的数值比i位小，则可加入i位的lis比较队列","最长递增子序列的个数(leetcode_673)","最长递增子序列的个数_leetcode_673","最长递增子序列的长度是1，并且存在5个子序列的长度为1，因此输出5。","有两个最长递增子序列，分别是","示例","给定一个未排序的整数数组，找到最长递增子序列的个数。","解释:","输入:","输出:"],"动态规划/最长连续递增序列_LeetCode_674.html":["+=","08","1","1.题目","12:07:40","18","1:","1]+1","1]:","2.分析","2019","2:","3","3.代码","=",">","[1,3,5,4,7]","[1,3,5,7]","[1,3,5],","[2,2,2,2,2]","[2],","class","copyright","count","count)","def","dp[i","dp[i]","else:","findlengthoflcis(self,","gitbook该文件修订时间：","int:","len(nums)","len(nums)nums[i","list[int])","max(dp)","max(res,","n","nnums[i","nums:","nums_len","re","reserved，pow","return","right","solution:","©","也是升序的子序列,","但它不是连续的，因为5和7在原数组里被4隔开。","何去何从gw","动态规划","尽管","最长连续递增序列","最长连续递增序列_leetcode_674","最长连续递增序列是","注意：数组长度不会超过10000。","示例","给定一个未经排序的整数数组，找到最长且连续的的递增序列。","要求时间复杂度为o（n）","解释:","输入:","输出:","长度为1。","长度为3。"],"逻辑思维/":["00:43:19","07","08","2019","copyright","gitbook该文件修订时间：","reserved，pow","right","©","何去何从gw","逻辑思维"],"逻辑思维/Nim Game.html":["0","00:03:12","07","1.题目","2.分析","2019","23","3.代码","7条","==","copyright","game","gitbook该文件修订时间：","n%4","nim","reserved，pow","return","right","©","一张纸上，画若干条线，双方一人划一次，每次划掉1~3条线。可以选择画1条，也可以划2条，也可以3条。具体划去几条线完全看自己的策略。谁划掉最后一条线，就是赢家。","何去何从gw","先手都可以划掉2条线和3条线来让后手落入“4”的陷阱。","可不可以用一个函数来判断在线条总是为x时你的输赢情况呢？这样你以后跟别人玩这个游戏的时候就不会输啦。","当线的总数为5条的时候，先手先划掉一条线，后手就等于是在4条线的情况下先手，自然后手输。","所以你会发现8条也是必输，8条线可以分成两个部分，每个部分四条线。自然先手还是必输。4这个数字还真是不太吉利。","所以我们可以看出，我们只要远离”4“就行了。当线的总数不是4的倍数的时候，先手必赢。","每人每步最多划三条线，所以线的总是至少为4条。当线的总数为4条的时候，不管先手划几条线，后手都有应对的方法，先手必输。","现在你作为先手，在线条总数为多少的时候，你必赢呢，又在多少的时候必输呢？","看到这里，恭喜你掌握了必胜法则，下次各位盆宇就可以用这个游戏跟别人打赌了。","而6条"],"逻辑思维/爬楼梯.html":["#","+","0,","07","1","1)","1,","1.","1.题目","1：","2","2)","2.","2.分析","2019","22","22:37:13","2:","2：","3","3.","3.代码","=","==",">","a+b","a,","b","b,","climbstairs(self,","copyright","def","gitbook该文件修订时间：","int)","int:","n","n:","n==1:","range(2,n):","range(n):","reserved，pow","return","right","self.climbstairs(n","©","个台阶。你有多少种不同的方法可以爬到楼顶呢？","何去何从gw","假设你正在爬楼梯。需要","或","是一个正整数。","有三种方法可以爬到楼顶。","有两种方法可以爬到楼顶。","每次你可以爬","法一：超时","法二","注意：给定","爬楼梯","示例","自底向上的动态规划","解释：","超时算法","输入：","输出：","阶","阶你才能到达楼顶。"],"逻辑思维/乘积最大子序列 LeetCode 152.html":["#","(a[i","(b[i","*=","0","0,","07","0]","1)","1,","1.题目","152","152)","1:","1]","1，输出[","2,","2,0,","2,4]","2,i=3，这一次来的数是i=3，则这次的最大，应该就是它自己，不需要乘以前面的最大或者最小","2.分析","2019","22","22:36:00","2:","2]","3,","3,0,1,","3.代码","6","6。","=",">","[","[2,3,","[2,3]","a):","a[::","a[i]","b","b[i]","copyright","def","gitbook该文件修订时间：","i*maxnum_temp,","i*minnum_temp)","int:","len(a)):","list[int])","max(i,","max(max(a),max(b))","max(res,maxnum)","maxnum","maxnum_temp","maxproduct(self,","min(i,","minnum","minnum_temp","num","nums:","nums[0]","nums[1:]:","print(a,b)","print(i)","range(1,","re","reserved，pow","return","right","©","一种方法类似于最大前缀和","不加","不是子数组。","乘积最大子序列(leetcod","乘积最大子序列_leetcod","何去何从gw","保留前面计算过的最大最小值","先计算从左到右的相乘的最大值，再计算从右到左的最大值；再将两组最大值相比","另外一种方法，我们要保存前面走过的路，里面的最大最小值，因为这是乘法，乘法的话，会出现最大值，是由两个负数乘起来的。但是负数是最小的","因为","子数组","所以我们要把a【i】等于0时，置为1","最大前缀和","有最大乘积","由于有正负，所以每次相乘完毕后，应该保留最大和最小值，也就是最大正数，最小负数","示例","结果不能为","给定一个整数数组","解释:","输入:","输入[","输出:","，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。"],"逻辑思维/三个数的最大乘积 LeetCode 628.html":["04","1.题目","1000,","1000]。","14","1:","1]*nums[","1],","2.分析","2019","20:15:29","24","2:","2]*nums[","3.代码","3])","6","628",">","[1,2,3,4]","[1,2,3]","class","copyright","def","gitbook该文件修订时间：","int:","leetcod","list[int])","max(nums[0]*nums[1]*nums[","maximumproduct(self,","nums.sort()","nums:","nums[","reserved，pow","return","right","solution:","©","三个数的最大乘积","三个数的最大乘积_leetcod","何去何从gw","先排好序","注意:","然后取最大的3个数相乘，或者最小的两个数（负数）和最大的一个数相乘","示例","给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。","给定的整型数组长度范围是[3,104]，数组中所有的元素范围是[","输入:","输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。","输出:"],"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":["#","0","04","0:","0。","1","1.题目","121","121)","14","1:","1）的时候买入，在第","2","2.分析","2019","20:15:30","2:","3.代码","5","6","6,","6）的时候卖出，最大利润","7","=","==",">","[7,1,5,3,6,4]","[7,6,4,3,1]","copyright","def","gitbook该文件修订时间：","int:","len(prices)","list[int])","max(res,","max(result,pric","maxprofit(self,","min(min_price,price)","min_pric","min_price)","price","prices):","prices:","prices[0]","prices[1:]:","print(result)","re","reserved，pow","result","return","right","©","。","个元素是一支给定股票第","买卖股票的最佳时机(leetcod","买卖股票的最佳时机_leetcod","何去何从gw","动态规划，一般都要设这两个变量","因为卖出价格需要大于买入价格。","在第","在这种情况下,","天的价格。","天（股票价格","如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。","所以最大利润为","没有交易完成,","注意你不能在买入股票前卖出股票。","注意利润不能是","示例","给定一个数组，它的第","自写","解释:","输入:","输出:"],"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":["#","(i","+=","0","04","0:","0。","1","1):","1.题目","122","122)","14","1:","1）的时候买入，在第","2","2.分析","2019","20:15:30","2:","3","3.代码","3:","3）的时候买入，在第","4","5","5）的时候卖出,","6","6）的时候卖出,","7","=","==",">","[1,2,3,4,5]","[7,1,5,3,6,4]","[7,6,4,3,1]","copyright","def","gitbook该文件修订时间：","ii(leetcod","ii_leetcod","int:","len(prices)","len(prices)==0:","list[int])","maxprofit(self,","min_pric","min_price)","min_price>0:","prices):","prices:","prices[0]","prices[1:]:","prices[i]","print(res)","range(len(prices)","re","reserved，pow","result","return","right","©","。","个元素是一支给定股票第","买卖股票的最佳时机","何去何从gw","动态规划","因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。","在第","在这种情况下,","天","天和第","天接连购买股票，之后再将它们卖出。","天的价格。","天（股票价格","当明天的价格比今天的价格贵的时候我们今天买，明天卖，这样能够获取最大利润。","所以最大利润为","没有交易完成,","注意你不能在第","注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。","示例","给定一个数组，它的第","自己写","自己手写代码","解释:","设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。","输入:","输出:","这一步是关键，卖出之后我们必须调整，初始进价","这一步是基本操作","这笔交易所能获得利润","随后，在第","（股票价格"],"逻辑思维/两数相加.html":["%","(5","(l1.val","(l2.val","+","//","0","0)","04","1.题目","10","10)","14","2.分析","2019","20:15:29","3)","3.代码","4","4)","465","6","8","807","=",">","add","add:","addtwonumbers(self,","copyright","cur","cur.next","def","gitbook该文件修订时间：","l1","l1,","l1.next","l2","l2):","l2.next","listnode(0)","listnode(v","none","reserved，pow","ret","ret.next","return","right","val","©","一位","两数相加","之外，这两个数都不会以","何去何从gw","原因：342","如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。","开头。","您可以假设除了数字","数字。","的方式存储的，并且它们的每个节点只能存储","的链表用来表示两个非负的整数。其中，它们各自的位数是按照","示例：","给出两个","输入：(2","输出：7","逆序","非空"],"逻辑思维/两数相加-链表 LeetCode 2.html":["%","(5","(l1.val","(l2.val","+","//","0","0)","07","1.题目","10","10)","2","2.分析","2019","22","22:35:37","2）","3)","3.代码","4","4)","465","6","8","807","=",">","add","add:","addtwonumbers(self,","copyright","cur","cur.next","def","gitbook该文件修订时间：","l1","l1,","l1.next","l2","l2):","l2.next","leetcod","listnode(0)","listnode(v","none","reserved，pow","ret","ret.next","return","right","val","©","一位","两数相加","之外，这两个数都不会以","何去何从gw","原因：342","如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。","开头。","您可以假设除了数字","数字。","的方式存储的，并且它们的每个节点只能存储","的链表用来表示两个非负的整数。其中，它们各自的位数是按照","示例：","给出两个","输入：(2","输出：7","逆序","链表","链表（leetcod","非空"],"逻辑思维/盛最多水的容器.html":["#","'int':","'list[int]')","(i,","0","0)。找出其中的两条线，使得它们与","07","1","1.题目","125:","167:","2.分析","2019","22","23:37:56","2。","3.代码","344:","345:","49","49。","=","==",">","[1,8,6,2,5,4,8,3,7]","[1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为","a1，a2，...，an，每个数代表坐标中的一个点","ai)","copyright","def","gitbook该文件修订时间：","height:","ii","leetcod","left","len(height)","max_area","maxarea(self,","n","num[r]，l++或者r","num[r]，我们就需要将r","reserved，pow","right","x","©","。在坐标内画","。而num[l]","不知道比较次数的，不能用for循环，用while循环","两数之和","个非负整数","串中的元音字母几篇文章中的解题思路。我们通过设置两个指针，分别指向数组的头l和尾r，计算容器可以容纳多少水contain。","何去何从gw","参照这","反转字符","和","图中垂直线代表输入数组","我们知道想要容乃的水最多，最好的情况是l和r都是最大，然后二者离的最远，但是这是理想情况，我们最一般的情况是二者离的足够远，但是二者都不是很大,二者都很大，但是二者离的近","所以我们一开始从两边考虑就是考虑的第一种可能。如果这个时候num[l]","条垂直线，垂直线","的两个端点分别为","的值至少为","盛最多水的容器","示例:","给定","说明：你不能倾斜容器，且","轴共同构成的容器可以容纳最多的水。","输入:","输入有序数组、","输出:","都可以。","验证回文串、"],"逻辑思维/摩尔投票算法.html":["+","+=","//","0","0,","08","09:03:16","0:","0;","1","1,","18","1。与当前大多数不同，得分为0，所以设置当前大多数","1。与当前大多数相同，得分","1。当前大多数是1，得分置1","1，得分为0，当前大多数","1，得分为2，当前大多数","1，得分置1","2019","2。与当前大多数不同，得分","90个数31个1，31个2，其余数字随便，也就是接近边界时，最多才两个满足条件：1，2",":","=","==",">","?","[1,1,1,2,2,2,3,3]，数组1/3长=2（向下取整），所以1和2都是符合条件的。","[]","a,","a:","an","ans.append(a)","ans.append(b)","b)","b,","b:","ca","ca,","cb","cb,","class","copyright","count=0;","def","element","elif","else:","for(int","gitbook该文件修订时间：","i,","i=0;inumbers.size()/2)","if(numbers.empty())","ii","int","leetcode原题：169.","leetcode原题：229.","len(nums)//3:","major","majorityelement(self,","middl","morethanhalfnum_solution(vector","n","n,","none,","numbers)","numbers[numbers.size()/2];","nums):","nums:","print(a,","public:","reserved，pow","return","right","solut","solution(object):","sort(numbers.begin(),numbers.end());","{","}","};","©","但最多只能是2个，证明如下：","何去何从gw","假设数组是：[1,2,1,1,2,1]。算法步骤如下：","假设有这样一个场景：票选村长，每人可投一票，我们将候选村长从1开始编号，村民们在票上写上候选村长的编号即可完成投票。那么最后统计的票可形成一个整型数组。那么谁是村长呢？票数过半的那个人。","出现次数","出现次数超过一半的数","出现次数超过数组1/3长","可以感受得到，算法会保存一个当前大多数，和得分，当遇到一个数不是当前大多数时，得分会减一，当减到0时，大多数会发生改变，并且重置得分为1。","回到题目","因为用到了sort，时间复杂度o(nlogn)，并非最优","如果我们在使用摩尔算法时，同时记录两个大多数，会怎么样呢？直觉告诉我，这会得到一个大多数，和一个出现次数仅次于大多数的数，但是这两个数不一定会比数组长的1/3大","思路一：数组排序后，如果符合条件的数存在，则一定是数组中间那个数。（比如：1，2，2，2，3；或2，2，2，3，4；或2，3，4，4，4等等）","所以我们得到它们后，还需要检查它们出现的次数是否符合条件。","排序，取数组中间那个数","摩尔投票算法","摩尔投票算法可以快速的计算出一个数组中出现次数过半的数即大多数（majority），算法核心思想是同加，异减。我们举个例子。","综上，一个数组中不可能存在2个以上的数它们出现的次数大于n/3。","证明","还能用摩尔投票法吗？答案当然是要，但是需要变通一下。","这意味着1是这个数组中出现次数过半的数。","这种方法虽然容易理解，但由于涉及到快排sort，其时间复杂度为o(nlogn)并非最优；","这里要求出现次数大于一半，所以直接套用摩尔投票算法即可得到答案。","这里需要区分的是，摩尔算法不能用来得到众数（mode），例如数组：[1,1,1,2,2,3,3,4,4]，摩尔算法得出最后的结果应该是4，但4并不是众数，可是显然4也不是大多数，那是因为，大多数是指出现次数过半的数，而这个数组中没有这样的数，所以摩尔算法是是失效的，对于这种情况采取需要重新投票。","需要注意的是出现次数超过1/3数组长的数，也许会有多个，例子如下：","，得分为1，当前大多数"],"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":["#","#如果某一趟不冒泡了没有发生交换过程），就代表排好序了，","''.join(nums)","''.join(res)","'0'","(字符串拼接比较哦)","(数字拼接后最大)","0","08","0:","1","1):","1.","1..if","1.题目","11:53:59","179","179)","18","1:","2.分析","2019","210","21>12","2:","3.代码","9534330","=","==",">","[10,2]","[3,30,34,5,9]","arr","break","class","cmp_to_key","copyright","def","else:","exchang","exchange:","fals","func(x,y):","functool","gitbook该文件修订时间：","import","j","key=cmp_to_key(func))","largestnumber(self,","leetcod","list(map(str,nums))","list[int])","map(str,","num","nums)","nums:","nums[j+1]+nums[j]>nums[j]+nums[j+1]:","nums[j+1],nums[j]","nums[j],nums[j+1]","print(res)","python：自定义排序方法——》冒泡排序","range(len(nums)","re","reserved，pow","return","right","solution:","sorted(arr,","str:","sum(nums)","true","x+y>y+x:","x+ypython：(内置排序方法)","x+yy+x:","y+x谁大","©","何去何从gw","则不交换","判断x+i","原始数据：1，2，4，3","和","如2","将排序好的数据，拼接成字符串","数字拼接后最大","最大数","最大数(leetcod","比如2，1","没有发生交换，排序结束","示例","第一趟冒泡：2，4，3，1","第三趟冒泡：4，3，2，1","第二趟冒泡：4，3，2，1","给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。","自定义排序算法","说明:","转化为char后再排序：","输入:","输出:","输出结果可能非常大，所以你需要返回一个字符串而不是整数。","首先现将数字转化为字符","："],"逻辑思维/最小编辑距离.html":["\"execution\"","\"horse\",","\"intention\",","\"ros\"","#","'c')","'e')","'h'","'i'","'n'","'r')","'t')","'u')","'x')","(删除","(将","(插入","0","04","0:","1.题目","14","1:","1]","1]!=word2[j","1]),","1]+(word1[i","1]+1,","1],而不是word1[i],是因为这是对于字符串而言的，而不是矩阵","1][","1][j","1][j]+1)","2.分析","2019","20:16:59","2:","3","3.代码","5","=","==",">","[[0]*(word2_len+1)","_","copyright","def","enent","exect","execut","exent","gitbook该文件修订时间：","hors","inent","intent","j","len(word1),","len(word2)","mem","mem:","mem[","mem[0][j]","mem[i","mem[i][0]","mem[i][j","mem[i][j]","min(mem[i","mindistance(self,","none:","print(_)","range(1,","range(word1_len+1)]","reserved，pow","return","right","ro","rors","rose","word1","word1,","word1_len","word1_len+1):","word1_len,","word2","word2):","word2_len","word2_len+1):","word2，计算出将","©","。","何去何从gw","你可以对一个单词进行如下三种操作：","删除一个字符","和","所使用的最少操作数","插入一个字符","替换一个字符","替换为","最小编辑距离","注意：这儿为什么是word1[i","示例","给定两个单词","解释:","转换成","输入:","输出:"],"逻辑思维/分发糖果_LeetCode_135.html":["\"\"\"","#","*","+=","...","07","1","1):","1,","1.题目","10:09:32","1:","1]","1]+1","1]:","1、2、1","2,","2.分析","2019","24","2:","2、1、2","3.代码","4","5","99就是上面的特殊情况","99的糖果数应该为8的糖果数+1",":rtype:",":type","=","[0]","[1,0,2]","[1,2,2]","[1,2,3,99,8,7,6,5,4,3,2,1]","arr","arr[","arr[i","arr[i]","arr[j]","candy(self,","class","copyright","def","gitbook该文件修订时间：","int","j","len(ratings)","list[int]","n","range(1,n):","range(n","ratings):","ratings:","ratings[i]>ratings[i","ratings[j]>ratings[j+1]","re","reserved，pow","right","solution(object):","©","个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。","个糖果。","优化","何去何从gw","你可以分别给这三个孩子分发","你需要按照以下要求，帮助老师给这些孩子分发糖果：","倒序过程中,统计数量","先正序遍历，如果后一位比前一位高分，就给比前一位多1的糖果","先正序遍历，如果后一位比前一位高分，就给比前一位多1的糖果，否则给1","分发糖果(leetcode_135)","分发糖果_leetcode_135","在倒叙遍历，如果前一位比后一位高分并且得到的糖果小于或等于后一位，就给前一位孩子比后一位孩子多一个糖果","每个孩子至少分配到","相邻的孩子中，评分高的孩子必须获得更多的糖果。","示例","第三个孩子只得到","老师想给孩子们分发糖果，有","解释:","输入:","输出:","那么这样下来，老师至少需要准备多少颗糖果呢？","颗糖果。","颗糖果，这已满足上述两个条件。"],"逻辑思维/岛屿周长_LeetCode_463.html":["#","*","+","+=","0","08","0:","1","1.题目","100","16","16:05:32","17","1:","1]","1][j]","2","2.分析","2019","3.代码","4",":","=","==",">","[0,1,0,0],","[1,1,0,0]]","[1,1,1,0],","[[0,1,0,0],","col","copyright","def","gitbook该文件修订时间：","grid:","grid[i","grid[i][j","grid[i][j]","i==0","i>0","int:","islandperimeter(self,","j","j==0","j>0","len(grid),","len(grid[0])","list[list[int]])","range(col):","range(row):","re","reserved，pow","return","right","row,","©","。计算这个岛屿的周长。","个黄色的边：","何去何从gw","北面(或南面)","和","它的周长是下面图片中的","岛屿中没有“湖”（“湖”","岛屿周长_leetcode_463","岛屿的周长","指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为","由于岛屿内没有湖,所以只需要求出","的二维网格地图，其中","的正方形。网格为长方形，且宽度和高度均不超过","示例","给定一个包含","网格中的格子水平和垂直方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。","表示水域。","表示陆地","西面(或东面)的长度再乘2即可","解释:","输入:","输出:"],"逻辑思维/三维形体的表面积_LeetCode_892.html":["#","(i,","*","+","+=","0","08","1","1.题目","17","17:45:39","1])","1]:","1][j])","1][j]:","1：","2","2.分析","2019","2：","3.代码","3：","4*(个数)","=",">","class","col","copyright","def","gitbook该文件修订时间：","grid:","grid[i","grid[i][j","grid[i][j]","grid[i][j]*4","grid[i][j]:","i>0","int:","j","j)","j>0","len(grid),","len(grid[0])","list[list[int]])","min(grid[i][j],","n","range(col):","range(row):","re","reserved，pow","return","right","row,","solution:","surfacearea(self,","v","©","三维形体的表面积","三维形体的表面积_leetcode_892","上。","个正方体叠放在对应单元格","何去何从gw","假设每个v=grid[i][j]都是独立的,每一个坐标都可以提供","减去面贴在一起的情况","和463岛屿周长一模一样","在","每个值","的立方体。","的网格上，我们放置一些","示例","表示","请你返回最终形体的表面积。","输入：[[1,0],[0,2]]","输入：[[1,2],[3,4]]","输入：[[2]]","输出：10","输出：16","输出：34","面积."],"逻辑思维/逆序对个数.html":["0","08","1,2,3,4,5,6,7,0","1.题目描述","18","2.分析","2019","22:49:59","3.代码","7","=","class","copyright","count","data):","def","gitbook该文件修订时间：","global","inversepairs(self,","len(lists)","mergesort(lists):","reserved，pow","right","solution:","©","何去何从gw","即输出p%1000000007","在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数p。并将p对1000000007取模的结果输出。","对于%50的数据,size示例1","输入","输入描述:","输出","逆序对个数","题目保证输入的数组中没有的相同的数字数据范围："],"回溯/":["07","2019","22:00:38","copyright","gitbook该文件修订时间：","reserved，pow","right","©","何去何从gw","回溯"],"回溯/子集 LeetCode 78.html":["#","#self._subsets(nums,",")","+","0,","07","0:return","1,","1.题目","16:49:42","2.分析","2019","3.代码","78","78)","=","==","[","[1,2,3]","[1,2,3],","[1,2],","[1,3],","[1],","[2,3],","[2],","[3],","[[]]","[]","[])","[],","[nums[i]],","]","copyright","def","func(self,","gitbook该文件修订时间：","i+1,","k,","len(nums)","len(nums)):","num","nums):","nums,","nums，返回该数组所有可能的子集（幂集）。","path","path,","path.append(nums[i])","path.pop()","range(k,","re","res+[[nums[0]]","res]","reserved，pow","result)","return","right","self._subsets(nums,","self.func(nums,","self.subsets(nums[1:])","self.x","self.x.append(x)","subsets(self,","x","x)","x):","x+[nums[i]])","x+[nums[i]],","x,","x.append(x)","©","何去何从gw","全局变量可以这么设置","可以将它分开写成","回溯","子集(leetcod","子集_leetcod","很多人很难理解为什么上面这种写法是回溯法，其实我们将push和pop的过程合到了一块，我在之前的一些问题中也没说明，所以在此解释一下。","我们也可以通过回溯法来解决。","示例:","给定一组不含重复元素的整数数组","说明：解集不能包含重复的子集。","输入:","输出:","这个问题通过递归可以很快的解决，我们只要知道了subsets(nums[1:])，那么我们只要将nums[0]添加到每个子集的前面形成新的子集，然后将新的子集添加到result中即可。","递归"],"回溯/子集 II LeetCode 90.html":["#","*nums*，返回该数组所有可能的子集（幂集）。","+","0,","04","1,4,1","1.题目","14","2.分析","2019","20:16:52","3.代码","4,1,1","78","90","90)","=",">","[","[1,2,2]","[1,2,2],","[1,2],","[1],","[2,2],","[2],","[[]]","[[nums[0]]","[]","[],","[nums[0]]","]","continu","copyright","def","func(self,","gitbook该文件修订时间：","ii(leetcod","ii_leetcod","k","k,","leetcod","list[int])","list[list[int]]:","nums):","nums,","nums.sort()","nums:","nums[i]","nums[k:i]:","range(k,len(nums)):","reserved，pow","result","result]","result，并且我们要对nums排序，为什么？为了避免出现这","return","right","s","self.func(nums,","self.subsetswithdup(nums[1:])","subsetswithdup(self,","tmp","x","x)","x):","x,","x.append(x)","©","何去何从gw","子集","示例:","种情况","给定一个可能包含重复元素的整数数组","说明：解集不能包含重复的子集。","输入:","输出:","这两种在这个问题中是一种情况，但是在判断[1,4,1]==[4,1,1]，两者是不相同的。","这个问题是之前问题","递归","，因为我们有两个2。最简单的思路就是添加一个判断if","：子集（最详细的解法！！！）的扩展。我们用之前的解法会出现这样的问题，[1,2]会出现两次"],"回溯/组合 LeetCode 77.html":["#","...","04","1","1.题目","14","2","2.分析","2019","20:17:25","3.代码","4,","77","77)","=","=[]",">","[","[1,2],","[1,3],","[1,4],","[2,3],","[2,4],","[3,4],","[i","]","class","combine(self,","copyright","def","func(self,","gitbook该文件修订时间：","index","index,","int)","int,","k","k:","k，返回","len(x)+len(nums)","length,","list[list[int]]:","n","n:","num","range(1,n+1)]","reserved，pow","return","right","self.func(0,k,[],nums)","self.x","solution:","x,nums):","©","个数的组合。","中所有可能的","何去何从gw","和","如果现在re的长度加上后面能加上的所有的长度已经小于k了）,那么也剪枝","示例:","组合(leetcod","组合_leetcod","给定两个整数","输入:","输出:"],"回溯/组合总和 LeetCode 39.html":["#","0","04","0:","1.题目","14","1:","2.分析","2019","20:17:25","2:","3","3.代码","39","39)","7,","8,","=","==",">=","[","[2,2,2,2],","[2,2,3]","[2,3,3],","[2,3,5],","[2,3,6,7],","[3,5]","[7],","[]","[i","]","candid","candidates,","candidates,[])","candidates.sort()","combinationsum(self,","copyright","def","func(self,index,","gitbook该文件修订时间：","k","n","nums[i]","nums[i],nums,x+[nums[i]])","python先排序，后回溯，可以使用重复元素","range(1,target+1)]","range(index,len(nums)):","range(n+1)】","reserved，pow","return","right","self.func(0,target,","self.func(i+1,target","self.func(i,target","self.r","self.res.append(x[:])","target","target):","target,nums,x):","target:","target）都是正整数。","©","【1,1,1】【1，2】【3】","不使用重复元素","中所有可以使数字和为","中的数字可以无限制重复被选取。","何去何从gw","可以不排序，答案也正确","和一个目标数","如","我们只需修改candidates为【i","所有数字（包括","所求解集为:","注意这儿func（i）而不是func(i+1)","的组合。","示例","组合总和(leetcod","组合总和_leetcod","给定一个无重复元素的数组","解集不能包含重复的组合。","说明：","输入:","输出","，找出"],"回溯/组合总和 II LeetCode 40.html":["#","07","1,","1.题目","1:","1]:","2,","2.分析","2019","22","22:47:36","2:","3.代码","40","40)","5,","5],","6]","6],","7],","8,","=",">",">【1，7】，但是先保证数组有序，所以在这之前先sort","[","[1,","[1,2,2],","[10,1,2,7,6,1,5],","[2,","[2,5,2,1,2],","[5]","[]","]","candid","candidates,","candidates.sort()","combinationsum2(self,","continu","copyright","def","func(self,index,target,x,nums,len_nums):","gitbook该文件修订时间：","ii(leetcod","ii_leetcod","index","len(candidates)","len_num","len_nums):","nums[i],x+[nums[i]],nums,len_nums)","nums[i]==nums[i","nums[i]>=0:","range(index,","reserved，pow","return","right","self.func(0,target,[],candidates,len_nums)","self.func(i+1,target","self.x","self.x.append(x[:])","target","target):","target==0:","©","中所有可以使数字和为","中的每个数字在每个组合中只能使用一次。","何去何从gw","先排序，后去重","去重,如【1，1，7】","和一个目标数","所有数字（包括目标数）都是正整数。","所求解集为:","的组合。","示例","组合总和","给定一个数组","解集不能包含重复的组合。","说明：","输入:","，找出"],"回溯/和为n的正整数组合.html":["#","0","04","0:","1.题目","14","2.分析","2019","20:16:41","3","3.代码","=","==",">=","[]","[i","candid","candidates,[])","combinationsum(self,","copyright","def","func(i+1)","func(self,index,","gitbook该文件修订时间：","k","n","nums[i]","nums[i],nums,x+[nums[i]])","range(1,target+1)]","range(index,len(nums)):","range(n+1)】","reserved，pow","return","right","self.func(0,target,","self.func(i+1,target","self.func(i,target","self.r","self.res.append(x[:])","target","target):","target,nums,x):","target:","©","【1,1,1】【1，2】【3】","不可使用重复元素","何去何从gw","可以使用重复元素","和为n的正整数组合","回溯","如","我们只需修改candidates为【i","输出"],"回溯/全排列 LeetCode 46.html":["04","1.题目","14","2.分析","2019","20:15:36","3.代码","46","46)","=","==",">","[","[1,2,3]","[1,2,3],","[1,3,2],","[2,1,3],","[2,3,1],","[3,1,2],","[3,2,1]","[]","]","class","copyright","def","func(self,","gitbook该文件修订时间：","index","index+1,","index,","len(nums),","length,","length,x):","length:","list[int])","list[list[int]]:","nums)","nums:","permute(self,","range(index,length):","reserved，pow","return","right","self.func(","self.func(0,","self.x","self.x.append(x[:])","solution:","x)","x[i],x[index]","x[index],x[i]","x[k],x[i]，部分排列组合是append，pop","©","何去何从gw","全排列(leetcod","全排列_leetcod","全排列是交换x[i],x[k]","示例:","给定一个没有重复数字的序列，返回其所有可能的全排列。","输入:","输出:"],"回溯/全排列 II LeetCode 47.html":["#","0,","04","1.题目","14","2.分析","2019","20:15:36","3.代码","47","47）","=","==",">","[","[1,1,2]","[1,1,2],","[1,2,1],","[2,1,1]","[]","]","class","conflict(self,","continu","copyright","def","else:","end,","end]:","fals","func(self,","gitbook该文件修订时间：","i,","ii","ii（leetcod","k+1,","k,","k==length:","leetcod","len(nums))","length)","length):","li,","li[i]","li[i],","li[k:i]:","li[k]","li[k],","list[int])","list[list[int]]:","mark","mark.add(li[i])","mark:","nums):","nums:","nums[end]:","nums[i]","nums[k:i]:","nums[start:","permuteunique(self,","print(x)","range(k,length):","reserved，pow","return","right","self.conflict(k,","self.func(li,","self.func(nums,0,len(nums))","self.x","self.x.append(li[:])","set()","solution:","start,","tree(li,","tree(nums,","true","x","x.append(li[:])","©","何去何从gw","全排列","去重代码1","去重代码2","去重代码3","如baa，b只与第一个a交换，与第二个a不交换。去重复。","左包右不包","最正确的代码","示例:","给定一个可包含重复数字的序列，返回所有不重复的全排列。","输入:","输出:"],"回溯/分割回文串 LeetCode 131.html":["\"aab\"","#","07","1.题目","131","131)","1]:","2.分析","2019","22","22:50:18","3.代码","=","==","[","[\"a\",\"a\",\"b\"]","[\"aa\",\"b\"],","[]","]","copyright","def","else:","func(self,","gitbook该文件修订时间：","index","index,","len(s):","partition(self,","range(index+1,len(s)+1):","reserved，pow","return","right","s","s):","s,","s[index:i]","s[index:i][::","self.func(s,0,[],x)","self.func(s,i,x,x)","s，将","x","x):","x,","x.append(s[index:i])","x.append(x[:])","x.pop()","©","一个字符一个字符累加，关键技巧","一个字符一个字符累加，这儿是个关键技巧","何去何从gw","分割回文串(leetcod","分割回文串_leetcod","分割成一些子串，使每个子串都是回文串。","回溯法","所有可能的分割方案。","示例:","给定一个字符串","输入:","输出:","返回","还有着而需要注意回溯思想，我们只需要单条线走通，其它的就交给回溯算法本身去工作","递归、回溯"],"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":["!=","\"\"\"","\"abcb\",","\"abcced\",","\"see\",","#","&board,","(dfsfind(board,","(i,j)","(这儿也可以再使用一个矩阵，存放访问标志)，但是空间消耗太大。","*","*/","/**","//","0","0,a","07","1)","1,","1,j)","1,j,word)","1,word)","1,时，如果能进来那么上面的if语句已经判断了b字符","1.题目","1:","2.分析","2019","22","22:48:59","255;","3.代码","79)(经典回溯，深度优先)",":rtype:",":type","=","==",">",">=len(board[0])","@param","@return:","[","['a','b','c','e'],","['a','d','e','e']","['s','f','c','s'],","[]","]","^=","board","board,","board.size(),","board:","board[0].size()","board[i][j]","board[i][j]!=word[wordstart])","board[i][j]:","bool","boolean","c++","charact","class","code","copyright","def","df","dfsfind(board,","enumerate(board):","enumerate(i):","exist(self,","exist(self,board,word):","exist(vector","fals","false.","false;","find(self,board,word,i,j):","for(i=0;","func(self,board,index,i,j,word):","gitbook该文件修订时间：","here","i+1,","i,","i=len(board)","idx,i","if(i=board.size()","if(sizerow","if(wordstart","index","int","j","j+1,","j,","j=","jdx,j","len(board),len(board[0])","len(word)","list","list[list[str]]","path;","public:","python2","python代码","range(col):","range(row):","reserved，pow","result","result;","return","right","row,col","self.find(board,word,i","self.find(board,word,i+1,j)","self.find(board,word,i,j","self.find(board,word,i,j):","self.find(board,word,i,j+1):","self.find(board,word,idx,jdx):","self.func(board,index+1,i","self.func(board,index+1,i+1,j,word)","self.func(board,index+1,i,j","self.func(board,index+1,i,j+1,word):","self.func(board,index,i,j,word):","self.path","self.path.append((i,j))","self.path.pop()","sizerow","sizestr","solut","solution:","str","string","true","true.","true;","word","word)","word):","word,","word.size())","word.size();","word:","word[0]","word[1:]","word[index]","wordstart)","wordstart+1)","wordstart+1));","write","{","||","}","};","©","​","一致，则在网格中存在此单词。","中搜索","中第一个字符，再以此字符为起点进行","为了避免循环搜索，我们还要将本轮深度优先搜索中搜索过的数字变一下，等递归回来之后再变回来。实现这个特性最简单的方法就是异或上一个特定数，然后再异或回来","何去何从gw","使用dfs，先在","减为空串，说明都匹配了","单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。","单词搜索(leetcod","单词搜索_leetcode_79","就是检验是否走重复的路，我们也可以额外定义一个标志数组","搜索，若搜索出的路径与","注意这儿，字符串长度减一,因为上面的if判断，等于校验了最后个字符，比如word='ab',","示例:","经典","经典回溯，深度优先","给定","给定一个二维网格和一个单词，找出该单词是否存在于网格中。","走不通，那么我们就要把这条路删除掉。回到原来的模样","返回","这儿等于也是错的，也要退出"],"回溯/摩尔投票算法.html":["+","+=","0","0,","07","0:","1","1,","1。与当前大多数不同，得分为0，所以设置当前大多数","1。与当前大多数相同，得分","1。当前大多数是1，得分置1","1，得分为0，当前大多数","1，得分为2，当前大多数","1，得分置1","2019","22","22:48:34","2。与当前大多数不同，得分","90个数31个1，31个2，其余数字随便，也就是接近边界时，最多才两个满足条件：1，2",":","=","==",">","[1,1,1,2,2,2,3,3]，数组1/3长=2（向下取整），所以1和2都是符合条件的。","[]","a,","a:","an","ans.append(a)","ans.append(b)","b)","b,","b:","ca","ca,","cb","cb,","class","copyright","def","element","elif","else:","gitbook该文件修订时间：","i,","ii","leetcode原题：169.","leetcode原题：229.","len(nums)//3:","major","majorityelement(self,","n","n,","none,","nums):","nums:","print(a,","reserved，pow","return","right","solution(object):","©","但最多只能是2个，证明如下：","何去何从gw","假设数组是：[1,2,1,1,2,1]。算法步骤如下：","假设有这样一个场景：票选村长，每人可投一票，我们将候选村长从1开始编号，村民们在票上写上候选村长的编号即可完成投票。那么最后统计的票可形成一个整型数组。那么谁是村长呢？票数过半的那个人。","出现次数超过一半的数","出现次数超过数组1/3长","可以感受得到，算法会保存一个当前大多数，和得分，当遇到一个数不是当前大多数时，得分会减一，当减到0时，大多数会发生改变，并且重置得分为1。","回到题目","如果我们在使用摩尔算法时，同时记录两个大多数，会怎么样呢？直觉告诉我，这会得到一个大多数，和一个出现次数仅次于大多数的数，但是这两个数不一定会比数组长的1/3大","所以我们得到它们后，还需要检查它们出现的次数是否符合条件。","摩尔投票算法","摩尔投票算法可以快速的计算出一个数组中出现次数过半的数即大多数（majority），算法核心思想是同加，异减。我们举个例子。","综上，一个数组中不可能存在2个以上的数它们出现的次数大于n/3。","证明","还能用摩尔投票法吗？答案当然是要，但是需要变通一下。","这意味着1是这个数组中出现次数过半的数。","这里要求出现次数大于一半，所以直接套用摩尔投票算法即可得到答案。","这里需要区分的是，摩尔算法不能用来得到众数（mode），例如数组：[1,1,1,2,2,3,3,4,4]，摩尔算法得出最后的结果应该是4，但4并不是众数，可是显然4也不是大多数，那是因为，大多数是指出现次数过半的数，而这个数组中没有这样的数，所以摩尔算法是是失效的，对于这种情况采取需要重新投票。","需要注意的是出现次数超过1/3数组长的数，也许会有多个，例子如下：","，得分为1，当前大多数"],"回溯/最小编辑距离.html":["\"execution\"","\"horse\",","\"intention\",","\"ros\"","#","'c')","'e')","'h'","'i'","'n'","'r')","'t')","'u')","'x')","(删除","(将","(插入","0","07","0:","1.题目","1:","1]","1]!=word2[j","1]),","1]+(word1[i","1]+1,","1],而不是word1[i],是因为这是对于字符串而言的，而不是矩阵","1][","1][j","1][j]+1)","2.分析","2019","22","22:48:02","2:","3","3.代码","5","=","==",">","[[0]*(word2_len+1)","_","copyright","def","enent","exect","execut","exent","gitbook该文件修订时间：","hors","inent","intent","j","len(word1),","len(word2)","mem","mem:","mem[","mem[0][j]","mem[i","mem[i][0]","mem[i][j","mem[i][j]","min(mem[i","mindistance(self,","none:","print(_)","range(1,","range(word1_len+1)]","reserved，pow","return","right","ro","rors","rose","word1","word1,","word1_len","word1_len+1):","word1_len,","word2","word2):","word2_len","word2_len+1):","word2，计算出将","©","。","何去何从gw","你可以对一个单词进行如下三种操作：","删除一个字符","和","所使用的最少操作数","插入一个字符","替换一个字符","替换为","最小编辑距离","注意：这儿为什么是word1[i","示例","给定两个单词","解释:","转换成","输入:","输出:"],"回溯/字符串全排列.html":["08","17","17:39:12","2019","class","copyright","def","gitbook该文件修订时间：","len(ss)","permutation(self,","reserved，pow","right","solution:","ss):","©","何去何从gw","字符串全排列","输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。","输入一个字符串,长度不超过9(可能有字符重复),字符只包括大小写字母。","输入描述:","题目描述"],"回溯/复原IP地址_LeetCode_93.html":["\"255.255.111.35\"]","\"25525511135\"","#dfs遍历，s为待处理字段，tmp存储所有ip小段","#s没有剩余，说明找到一个合法ip，否则返回","#截断s，并将本次截取内容写入tmp","#数字超出范围","#递归出口，凑够4段","#遍历取s的头，长度从1到3","#除去0开头，且长度大于1情况","'0':","+","00:19:11","08","0:","1","1.题目","19","2.分析","2019","255:","3.代码","4):","4:","=","==",">","[\"255.255.11.135\",","[]","[s[:i]])","class","copyright","def","dfs(self,","elif","func(s,","func(s[i:],","gitbook该文件修订时间：","i>1","ip","len(s)","len(tmplist)","len(x)","list[str]:","range(1,","range(1,4):","reserved，pow","restoreipaddresses(self,","return","right","s,","s:","s[0]","self.dfs(s,","self.dfs(s[i:],","self.r","self.res.append('.'.join(tmplist))","solution:","str)","tmplist","tmplist)","tmplist):","x","x)","x):","x+[s[:i]])","x,","x.append('.'.join(x))","©","何去何从gw","地址格式。","复原ip地址","复原ip地址_leetcode_93","示例:","给定一个只包含数字的字符串，复原它并返回所有可能的","输入:","输出:"],"深度搜索/":["07","2019","22:00:38","copyright","gitbook该文件修订时间：","reserved，pow","right","©","何去何从gw","深度搜索"],"深度搜索/被围绕的区域 LeetCode 130.html":["\"\"\"","'","':","'o'","'o'（字母","'x'","'x'。","'x'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。","'。然后遍历矩阵，将矩阵中所有'o'改为'x',将矩阵中所有'","'变为'o'",",board):","04","1","1,board)","1,j,board)","1.题目","130)","14","2.分析","2019","20:17:25","3.代码","=",">",">len(board[0])","anything,","board","board:","board[0]:return","board[i][j]!='o':","board[i][j]='","board[i][j]='o'","board[i][j]='x'","board[i][j]=='","board[i][j]=='o':","copyright","def","func(self,","gitbook该文件修订时间：","i,","ilen(board)","instead.","j","len(board),len(board[0])","list[list[str]])","m,n","modifi","none:","o","o）。","place","range(m):","range(n):","reserved，pow","return","right","self.func(0,j,board)","self.func(i","self.func(i+1,j,board)","self.func(i,0,board)","self.func(i,j","self.func(i,j+1,board)","self.func(i,n","self.func(m","solve(self,","x","©","任何不在边界上，或不与边界上的","何去何从gw","和","围绕的区域，并将这些区域里所有的","填充。","找到所有被","最终都会被填充为","用","相连的","示例:","给定一个二维的矩阵，包含","被围绕的区域(leetcod","被围绕的区域_leetcode_130","被围绕的区间不会存在于边界上，换句话说，任何边界上的","解释:","运行你的函数后，矩阵变为：","都不会被填充为","首先对边界上每一个'o'做深度优先搜索，将与其相连的所有'o'改为'"],"深度搜索/岛屿的个数 LeetCode_200.html":["#","'0'","'0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。==你可以假设网格的四个边均被水包围。==","'1':","'1'（陆地）和","+=","0","00000","00011","00100","00:35:58","07","1","1),(grid,grid,grid,grid))","1,","1,grid)","1,j,grid)","1.题目","11000","11010","11110","1:","2.分析","2019","24","2:","3","3.代码","=","==","=len(grid[0])",">","class","copyright","def","enumerate(grid):","enumerate(grid[0]):","func(self,i,j,grid):","gitbook该文件修订时间：","grid","grid:","grid[0]:","grid[i][j]","grid[i][j]=='0':","grid[idx][jdx]","i),(j,","i,","i=len(grid)","idx,i","int:","j","j+1,","j,","jdx,j","leetcode_200","list[list[str]])","map(self.func,(i+1,","numislands(self,","re","reserved，pow","return","right","self.func(i","self.func(i+1,j,grid)","self.func(i,j","self.func(i,j+1,grid)","self.func(idx,jdx,grid)","solution:","©","何去何从gw","到达边界外或访问到为0的位置则返回0,否则先把该位置的1置为0(作为访问过的标记,相当于visited数组),随后递归的访问四个方向.","原文：你可以假设网格的四个边均被水包围。","岛屿的个数","深度优先遍历,","深度搜索","示例","给定一个由","说明边界的1也算岛屿","输入:","输出:"],"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":["!=","\"\"\"","\"abcb\",","\"abcced\",","\"see\",","#","&board,","(dfsfind(board,","(i,j)","(这儿也可以再使用一个矩阵，存放访问标志)，但是空间消耗太大。","*","*/","/**","//","0","0,a","04","1)","1,","1,j)","1,j,word)","1,word)","1,时，如果能进来那么上面的if语句已经判断了b字符","1.题目","14","1:","2.分析","2019","20:15:51","255;","3.代码","79","79)(经典回溯，深度优先)",":rtype:",":type","=","==",">",">=len(board[0])","@param","@return:","[","['a','b','c','e'],","['a','d','e','e']","['s','f','c','s'],","[]","]","^=","board","board,","board.size(),","board:","board[0].size()","board[i][j]","board[i][j]!=word[wordstart])","board[i][j]:","bool","boolean","c++","charact","class","code","copyright","def","df","dfsfind(board,","enumerate(board):","enumerate(i):","exist(self,","exist(self,board,word):","exist(vector","fals","false.","false;","find(self,board,word,i,j):","for(i=0;","func(self,board,index,i,j,word):","gitbook该文件修订时间：","here","i+1,","i,","i=len(board)","idx,i","if(i=board.size()","if(sizerow","if(wordstart","index","int","j","j+1,","j,","j=","jdx,j","leetcod","len(board),len(board[0])","len(word)","list","list[list[str]]","path;","public:","python2","python代码","range(col):","range(row):","reserved，pow","result","result;","return","right","row,col","self.find(board,word,i","self.find(board,word,i+1,j)","self.find(board,word,i,j","self.find(board,word,i,j):","self.find(board,word,i,j+1):","self.find(board,word,idx,jdx):","self.func(board,index+1,i","self.func(board,index+1,i+1,j,word)","self.func(board,index+1,i,j","self.func(board,index+1,i,j+1,word):","self.func(board,index,i,j,word):","self.path","self.path.append((i,j))","self.path.pop()","sizerow","sizestr","solut","solution:","str","string","true","true.","true;","word","word)","word):","word,","word.size())","word.size();","word:","word[0]","word[1:]","word[index]","wordstart)","wordstart+1)","wordstart+1));","write","{","||","}","};","©","​","一致，则在网格中存在此单词。","中搜索","中第一个字符，再以此字符为起点进行","为了避免循环搜索，我们还要将本轮深度优先搜索中搜索过的数字变一下，等递归回来之后再变回来。实现这个特性最简单的方法就是异或上一个特定数，然后再异或回来","何去何从gw","使用dfs，先在","减为空串，说明都匹配了","单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。","单词搜索","单词搜索(leetcod","就是检验是否走重复的路，我们也可以额外定义一个标志数组","搜索，若搜索出的路径与","注意这儿，字符串长度减一,因为上面的if判断，等于校验了最后个字符，比如word='ab',","示例:","经典","经典回溯,深度优先","给定","给定一个二维网格和一个单词，找出该单词是否存在于网格中。","走不通，那么我们就要把这条路删除掉。回到原来的模样","返回","这儿等于也是错的，也要退出"],"深度搜索/岛屿的最大面积_LeetCode_695.html":["\"\"\"","#","(代表土地)","(水平或垂直)","+=",",","0","07","0。","1","1,","1,i+1,i,i),(j,j,j","1,j+1),(grid,grid,grid,grid))","1.题目","10:18:02","1:","1的非空二维数组","2","2.分析","2019","24","2:","3.代码","50。","6。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的‘1’。",":rtype:",":type","=","==","[0,0,0,0,0,0,0,0,0,0,1,0,0],","[0,0,0,0,0,0,0,1,1,0,0,0,0]]","[0,0,0,0,0,0,0,1,1,1,0,0,0],","[0,1,0,0,1,1,0,0,1,0,1,0,0],","[0,1,0,0,1,1,0,0,1,1,1,0,0],","[0,1,1,0,1,0,0,0,0,0,0,0,0],","[[0,0,0,0,0,0,0,0]]","[[0,0,1,0,0,0,0,1,0,0,0,0,0],","copyright","def","func(self,","gitbook该文件修订时间：","grid","grid)","grid):","grid:","grid[i][j]","grid[i][j]!=1:","i+1,","i,","i=n","int","j","j+1,","j,","j=m","lass","len(grid),","len(grid[0])","list[list[int]]","m","m,","map(self.func,(n,n,n,n),(m,m,m,m),(i","max(res,","maxareaofisland(self,","n,","range(m):","range(n):","re","reserved，pow","return","right","self.func(m,","self.func(n,","self.k","self.k)","solution(object):","©","一个","何去何从gw","到达边界外或访问到为0的位置则返回0,否则先把该位置的1置为0(作为访问过的标记,相当于visited数组),随后递归访问四个方向,","和","对于上面这个给定的矩阵,","对于上面这个给定矩阵应返回","岛屿","岛屿的最大面积(leetcode_695)","岛屿的最大面积_leetcode_695","找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)","是由四个方向","构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。","注意:","深度优先遍历,","深度搜索","的","的长度和宽度都不超过","示例","给定一个包含了一些","给定的矩阵grid","返回"],"广度搜索/01矩阵_LeetCode_542.html":["#","(i","(i,","0","00:22:07","01","01矩阵_leetcode_542","07","0:","0。","1","1)]","1,","1.题目","10000。","1:","2","2.分析","2019","25","2:","3.代码","=","==",">","[(i+1,","[]","bf","class","collect","copyright","def","dequ","deque()","dir","dirs:","gitbook该文件修订时间：","i,","import","j","j))","j),","j+1),","len(matrix),","len(matrix[0])","list[list[int]])","list[list[int]]:","m","matrix:","matrix[i][j]","n,","queue","queue.append((i,","queue.popleft()","queue:","range(m):","range(n):","reserved，pow","right","set()","solution:","updatematrix(self,","visit","visited.add((i,","x,i","©","。","上、下、左、右。","两个相邻元素间的距离为","何去何从gw","初始化队列，将所有起始点加入","和","在找到一个合法节点后需要去探知其附近的合法节点，直到这一个区域内符合合法节点的节点都被找到。","寻找出队元素的（符合条件的）最近节点","将所有相邻节点加入队列","广度搜索，入队可以将所有0都先入队，作为队头节点","注意:","添加访问标志","满足目标状态,进行操作","的距离。","矩阵(leetcode_542)","矩阵中的元素只在四个方向上相邻:","示例","组成的矩阵，找出每个元素到最近的","给定一个由","给定矩阵中至少有一个元素是","给定矩阵的元素个数不超过","输入:","输出:"],"广度搜索/给二叉树插入节点.html":["\"\"\"为树添加节点\"\"\"","\"\"\"树类\"\"\"","\"\"\"节点类\"\"\"","#","#如果左右子树都不为空，加入队列继续判断","#如果树是空的，则对根节点赋值","#对已有的节点进行层次遍历","#弹出队列的第一个元素","07","1,","11:14:36","2019","26","=","==","[]","__init__(self,","add(self,","class","copyright","cur","cur.lchild","cur.rchild","def","elem","elem):","elem=","elif","else:","gitbook该文件修订时间：","lchild","lchild=none,","node","node(elem)","node(object):","none:","queue","queue.append(cur.lchild)","queue.append(cur.rchild)","queue.append(self.root)","queue.pop(0)","queue:","rchild","rchild=none):","reserved，pow","return","right","root","root=none):","self.elem","self.lchild","self.rchild","self.root","tree(object):","©","二叉树的节点表示以及树的创建","何去何从gw","我们寻找最近的空节点进行插入，所以是广度遍历","树的创建,创建一个树的类，并给一个root根节点，一开始为空，随后添加节点","给二叉树插入节点","通过使用node类中定义三个属性，分别为elem本身的值，还有lchild左孩子和rchild右孩子"],"堆排序/":["07","2019","22:00:38","copyright","gitbook该文件修订时间：","reserved，pow","right","©","何去何从gw","堆排序"],"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":["#","#（因为最大堆是最小堆，一泡屎一趴尿，拉扯大的。）","(","(2","(如何从5亿个数中找出中位数)","*","+","/","0","07","1","1.5","1.大顶堆中最大的数值小于等于小顶堆中的最小数，也就是小于小顶堆的堆顶","1.题目","100","10:27:00","1，取出来的时候乘以","2","2.5","2.两个堆中元素相差为0，或者为1,不能>1","2.分析","2019","25","295)","3","3)","3.代码","99%","=","==","=len(self.min_h):",">",">=","[2,3,4]","[2,3]","[]","__init__(self):","addnum(1)","addnum(2)","addnum(3)","addnum(int","addnum(self,","class","copyright","def","doubl","elif","else:","findmedian()","findmedian(self)","float:","gitbook该文件修订时间：","heapify(self.max_h)","heapify(self.min_h)","heappop(self.max_h)","heappop(self.min_h)","heappop(self.min_h))","heappush(self.max_h,","heappush(self.min_h,num)","heappush(self.min_h,tmp)","heapq","import","int)","len(self.max_h)","len(self.min_h)","max_len","max_len:","medianfinder:","min_len","min_len:","none:","num","num)","num):","num:","print(self.max_h,\"====\",self.min_h)","python没有大顶堆，所以我们要想实现大顶堆，可以每次放入的数*","reserved，pow","return","right","self.max_h","self.max_h:","self.max_h[0]*1.","self.max_h[0]+self.min_h[0])/2.","self.min_h","self.min_h:","self.min_h[0]*1.","tmp","tmp)","tmp:","void","©","【1，2，3】，大顶堆【1】，小顶堆【2，3】，所以中位数在小顶堆【2，3】，且是堆顶","一边占一半元素，而且，还是有序的，很像二分法，这时，中位数为两堆顶平均值","下面的调整，使得最小最大堆元素相差最多为1，而且永远是","中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。","从数据流中添加一个整数到数据结构中。","何去何从gw","例如，","到","取出来，放到最大堆中去，这样就能保证最小堆的最小元素，都比最大堆的（最大元素）堆顶大","如何从5亿个数中找出中位数","如果数据个数为奇数，则，中位数出现在元素个数多的堆的堆顶中","如果数据流中","如果数据流中所有整数都在","数据流的中位数(leetcod","数据流的中位数_leetcode_295","最小堆元素个数大于","每次都插入到最小堆，然后，将最小堆里面的栈顶元素，","满足两个特性：","然后，我们观察可以发现，如果，数据总数是偶数，那么大顶堆，和小顶堆，","的中位数是","的整数都在","示例：","等于最大堆元素个数","范围内，你将如何优化你的算法？","设计一个支持以下两种操作的数据结构：","返回目前所有元素的中位数。","进阶:"],"前K个高频元素.html":["#","(obj.most_common(k))","+=",",","07","1","1.题目","1:","2","2.分析","2019","22","22:34:13","2:","3.代码1","=",">","[1,1,1,2,2,3],","[1,2]","[1]","[1],","[]","an","bag","bag:","bag[i]","class","collect","collections.counter(nums)","copyright","def","else:","gitbook该文件修订时间：","import","int)","k","k:","key=lambda","list(ans)","list[int],","list[int]:","log","map(lambda","n","n)","num","nums:","o(n","obj","output","print(obj)","range(k):","re","res)","res.append(output[i][0])","reserved，pow","return","reverse=true)","right","solution:","sorted(bag.items(),","topkfrequent(self,","x:x[0],","x:x[1],","{}","©","≤","代码2","代码2，用字典来计算","何去何从gw","你可以假设给定的","你的算法的时间复杂度必须优于","前k个高频元素","总是合理的，且","数组中不相同的元素的个数。","是数组的大小。","示例","给定一个非空的整数数组，返回其中出现频率前","说明：","输入:","输出:","高的元素。"],"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":["#","08","1,","1.题目","11,","13,","13],","13。","15]","18","2.分析","2019","23:41:34","3.代码","5,","8,","9],","=",">","[","[10,","[12,","[]","],","class","copyright","def","edg","gitbook该文件修订时间：","heapq","heapq.heappop(tmp)","heapq.heappush(tmp,","import","int)","int:","j","k","k:","kthsmallest(self,","len(matrix)","len(tmp)","list[list[int]],","matrix","matrix:","matrix[i][j])","n","print(","range(edge):","reserved，pow","return","right","solution:","tmp","tmp[0]","tmp[0])","x","©","何去何从gw","大根堆","有序矩阵中第k小的元素","有序矩阵中第k小的元素_leetcode_378","矩阵，其中每行和每列元素均按升序排序，找到矩阵中第k小的元素。","示例:","给定一个","请注意，它是排序后的第k小元素，而不是第k个元素。","返回"],"堆排序/最小的K个数.html":["#","+=","0,","08","1","1)","18","2019","23:34:40","=","==","=nums[i]:","[]","[]:","class","code","copyright","def","func(nums,","getleastnumbers_solution(self,","gitbook该文件修订时间：","heapq","heapq.heappop(tmp)","heapq.heappush(tmp,","here","i)","i+1,right)","i,","import","j","k):","k>len(tinput)","left,","left>=right:","len(nums)","len(tmp)>k:","num","nums[:k]","nums[i]","nums[j]","nums[left]","print(res)","re","res.append(","res.sort()","reserved，pow","return","right","right):","solution:","tinput","tinput,","tinput:","tmp","tmp:","write","©","何去何从gw","堆排序（大根堆）","快速排序","最小的k个数","每次插入一个元素后，就把堆里面的大元素丢出去，因此堆里面剩下的都是小的元素，同时我们需要维护堆的大小为k","输入n个整数，找出其中最小的k个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。","题目描述"],"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":["#","#（因为最大堆是最小堆，一泡屎一趴尿，拉扯大的。）","(","(2","(如何从5亿个数中找出中位数)","*","+","/","0","07","1.5","1.大顶堆中最大的数值小于等于小顶堆中的最小数，也就是小于小顶堆的堆顶","1.题目","100","2","2.5","2.两个堆中元素相差为0，或者为1,不能>1","2.分析","2019","22","22:47:03","295)","3","3)","3.代码","99%","=","==","=len(self.min_h):",">",">=","[2,3,4]","[2,3]","[]","__init__(self):","addnum(1)","addnum(2)","addnum(3)","addnum(int","addnum(self,","class","copyright","def","doubl","elif","else:","findmedian()","findmedian(self)","float:","gitbook该文件修订时间：","heapify(self.max_h)","heapify(self.min_h)","heappop(self.max_h)","heappop(self.min_h)","heappop(self.min_h))","heappush(self.max_h,","heappush(self.min_h,num)","heappush(self.min_h,tmp)","heapq","import","int)","len(self.max_h)","len(self.min_h)","max_len","max_len:","medianfinder:","min_len","min_len:","none:","num","num)","num):","num:","print(self.max_h,\"====\",self.min_h)","reserved，pow","return","right","self.max_h","self.max_h:","self.max_h[0]*1.","self.max_h[0]+self.min_h[0])/2.","self.min_h","self.min_h:","self.min_h[0]*1.","tmp","tmp)","tmp:","void","©","一边占一半元素，而且，还是有序的，很像二分法，这时，中位数为两堆顶平均值","下面的调整，使得最小最大堆元素相差最多为1，而且永远是","中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。","从数据流中添加一个整数到数据结构中。","何去何从gw","例如，","到","取出来，放到最大堆中去，这样就能保证最小堆的堆，都比最大堆的堆顶大","如何从5亿个数中找出中位数","如果数据个数为奇数，则，中位数出现在元素个数多的堆的堆顶中","如果数据流中","如果数据流中所有整数都在","数据流的中位数(leetcod","数据流的中位数_leetcode_295","最小堆元素个数大于","每次都插入到最小堆，然后，将最小堆里面的栈顶元素，","满足两个特性：","然后，我们观察可以发现，如果，数据总数是偶数，那么大顶堆，和小顶堆，","的中位数是","的整数都在","示例：","等于最大堆元素个数","范围内，你将如何优化你的算法？","设计一个支持以下两种操作的数据结构：","返回目前所有元素的中位数。","进阶:"]},"length":224},"tokenStore":{"root":{"0":{"0":{"0":{"0":{"0":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}},"docs":{}},"1":{"1":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}},"docs":{}},"docs":{}},"1":{"0":{"0":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}},"docs":{}},"docs":{}},"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.021739130434782608}},":":{"0":{"3":{"docs":{},":":{"0":{"1":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}},"docs":{}},"1":{"2":{"docs":{"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903}}},"docs":{}},"docs":{}}},"docs":{}},"1":{"0":{"docs":{},":":{"5":{"1":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988}}},"docs":{}},"docs":{}}},"1":{"docs":{},":":{"0":{"8":{"docs":{"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082}}},"docs":{}},"docs":{}}},"4":{"docs":{},":":{"0":{"8":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}},"docs":{}},"docs":{}}},"9":{"docs":{},":":{"1":{"1":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}},"docs":{}},"docs":{}}},"docs":{}},"2":{"2":{"docs":{},":":{"0":{"7":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}},"docs":{}},"docs":{}}},"9":{"docs":{},":":{"0":{"8":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}},"docs":{}},"docs":{}}},"docs":{}},"3":{"2":{"docs":{},":":{"0":{"8":{"docs":{"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993}}},"docs":{}},"docs":{}}},"5":{"docs":{},":":{"0":{"8":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}},"docs":{}},"5":{"8":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}},"docs":{}},"docs":{}}},"7":{"docs":{},":":{"4":{"3":{"docs":{"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818}}},"docs":{}},"docs":{}}},"docs":{}},"4":{"3":{"docs":{},":":{"0":{"1":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}},"docs":{}},"1":{"9":{"docs":{"数字运算/":{"ref":"数字运算/","tf":0.08333333333333333},"栈/":{"ref":"栈/","tf":0.08333333333333333},"双指针/":{"ref":"双指针/","tf":0.08333333333333333},"二分/":{"ref":"二分/","tf":0.08333333333333333},"三数/":{"ref":"三数/","tf":0.08333333333333333},"链表/":{"ref":"链表/","tf":0.08333333333333333},"逻辑思维/":{"ref":"逻辑思维/","tf":0.08333333333333333}}},"docs":{}},"docs":{}}},"docs":{}},"5":{"3":{"docs":{},":":{"0":{"8":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}},"docs":{}},"docs":{}}},"4":{"docs":{},":":{"3":{"3":{"docs":{"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"1":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.021739130434782608},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}},":":{"0":{"7":{"docs":{},":":{"0":{"2":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"矩":{"docs":{},"阵":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"5":{"4":{"2":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}},"3":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}},":":{"1":{"8":{"docs":{},":":{"0":{"1":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"4":{"docs":{"./":{"ref":"./","tf":0.07692307692307693},"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}},"6":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}},"7":{"docs":{"数字运算/":{"ref":"数字运算/","tf":0.08333333333333333},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"栈/":{"ref":"栈/","tf":0.08333333333333333},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/":{"ref":"双指针/","tf":0.08333333333333333},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/":{"ref":"二分/","tf":0.08333333333333333},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"三数/":{"ref":"三数/","tf":0.08333333333333333},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/":{"ref":"区间搜索/","tf":0.16666666666666666},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/":{"ref":"单调栈/","tf":0.08333333333333333},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/":{"ref":"字符串/","tf":0.16666666666666666},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/":{"ref":"数组/","tf":0.16666666666666666},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541},"矩阵/":{"ref":"矩阵/","tf":0.16666666666666666},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"链表/":{"ref":"链表/","tf":0.08333333333333333},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"二叉树/":{"ref":"二叉树/","tf":0.16666666666666666},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622},"动态规划/":{"ref":"动态规划/","tf":0.16666666666666666},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"逻辑思维/":{"ref":"逻辑思维/","tf":0.08333333333333333},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"回溯/":{"ref":"回溯/","tf":0.16666666666666666},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.01639344262295082},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"深度搜索/":{"ref":"深度搜索/","tf":0.16666666666666666},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218},"堆排序/":{"ref":"堆排序/","tf":0.16666666666666666},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},":":{"0":{"3":{"docs":{},":":{"4":{"0":{"docs":{"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"8":{"docs":{"数字运算/":{"ref":"数字运算/","tf":0.08333333333333333},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"栈/":{"ref":"栈/","tf":0.08333333333333333},"双指针/":{"ref":"双指针/","tf":0.08333333333333333},"二分/":{"ref":"二分/","tf":0.08333333333333333},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"三数/":{"ref":"三数/","tf":0.08333333333333333},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.05555555555555555},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/":{"ref":"链表/","tf":0.08333333333333333},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/":{"ref":"逻辑思维/","tf":0.08333333333333333},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}},"9":{"docs":{},":":{"0":{"3":{"docs":{},":":{"1":{"6":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762}}},"docs":{}},"docs":{}}},"4":{"docs":{},":":{"5":{"5":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}},"docs":{}},"docs":{}}},"7":{"docs":{},":":{"5":{"4":{"docs":{"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125}}},"docs":{}},"docs":{}}},"docs":{}},"1":{"0":{"docs":{},":":{"1":{"1":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616}}},"docs":{}},"docs":{}}},"7":{"docs":{},":":{"3":{"8":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}},"docs":{}},"docs":{}}},"docs":{}},"5":{"0":{"docs":{},":":{"2":{"9":{"docs":{"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516}}},"docs":{}},"docs":{}}},"5":{"docs":{},":":{"0":{"1":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.023529411764705882},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.07608695652173914},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.02242152466367713},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.02608695652173913},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.05194805194805195},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.022598870056497175},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.02},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.015957446808510637},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.043478260869565216},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.02631578947368421},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.029411764705882353},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.03125},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.025906735751295335},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.01728395061728395},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.037037037037037035},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.050724637681159424},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.025906735751295335},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.046875},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.028037383177570093},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.031496062992125984},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.02702702702702703},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.012578616352201259},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.014925373134328358},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.01818181818181818},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.05303030303030303},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.01327433628318584},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.034482758620689655},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.061224489795918366},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.01818181818181818},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.03614457831325301},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.041666666666666664},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.02112676056338028},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.0125},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.017985611510791366},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.03614457831325301},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.012145748987854251},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0106951871657754},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.017543859649122806},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.03225806451612903},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.038834951456310676},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0364963503649635},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.032407407407407406},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.03787878787878788},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.027777777777777776},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.02247191011235955},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.055299539170506916},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.01892744479495268},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0392156862745098},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.013636363636363636},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.014018691588785047},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.08620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.1125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.05},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.04504504504504504},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.033112582781456956},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.039603960396039604},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.038834951456310676},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.023255813953488372},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.03076923076923077},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.021052631578947368},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.027777777777777776},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.19863013698630136},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.008982035928143712},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.015},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.02631578947368421},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.020833333333333332},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.01327433628318584},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.014388489208633094},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.013888888888888888},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.015151515151515152},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.014285714285714285},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.017045454545454544},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}}}}},",":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.020689655172413793},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.015},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.020833333333333332},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.02857142857142857},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.018115942028985508},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0182648401826484},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.021897810218978103},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.021897810218978103},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.014285714285714285},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.01639344262295082},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.013953488372093023},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.017045454545454544},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},")":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}}}},"s":{"docs":{},")":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},")":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358}}},"docs":{}}}}}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}},"a":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}},"。":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}},")":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.017937219730941704},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.019417475728155338},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.019801980198019802},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.019417475728155338}},"。":{"docs":{},"找":{"docs":{},"出":{"docs":{},"其":{"docs":{},"中":{"docs":{},"的":{"docs":{},"两":{"docs":{},"条":{"docs":{},"线":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"它":{"docs":{},"们":{"docs":{},"与":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}},"b":{"1":{"0":{"1":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}},"docs":{}},"docs":{}},"docs":{}},"o":{"5":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}},"docs":{}},"x":{"5":{"5":{"5":{"5":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}},")":{"docs":{},">":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}},"docs":{}},"docs":{}},"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}},"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}}}},"、":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}},".":{"1":{"docs":{},")":{"docs":{"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818}}}},"5":{"docs":{},"和":{"docs":{},"k":{"docs":{},"+":{"0":{"docs":{},".":{"5":{"docs":{"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818}}},"docs":{}}},"docs":{}}}}},"docs":{}},"]":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401}}},";":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.01875},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525}}},"和":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"异":{"docs":{},"或":{"docs":{},"，":{"docs":{},"等":{"docs":{},"于":{"docs":{},"该":{"docs":{},"数":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}}}}}}}}}},"）":{"docs":{},"。":{"docs":{},"从":{"docs":{},"各":{"docs":{},"自":{"docs":{},"的":{"docs":{},"表":{"docs":{},"头":{"docs":{},"开":{"docs":{},"始":{"docs":{},"算":{"docs":{},"起":{"docs":{},"，":{"docs":{},"链":{"docs":{},"表":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834}}}}}}}}}}}}}}}}},"，":{"docs":{},"而":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}},"1":{"0":{"0":{"0":{"0":{"0":{"0":{"docs":{},",":{"1":{"0":{"0":{"0":{"0":{"0":{"0":{"docs":{},"]":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{},"]":{"docs":{},"之":{"docs":{},"间":{"docs":{},"。":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}},"。":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}},"docs":{},",":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}}},"]":{"docs":{},"。":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}},"。":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}},",":{"3":{"docs":{},",":{"9":{"9":{"docs":{},"]":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}},"docs":{}},"docs":{}},"]":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}},"docs":{}},"]":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894}}}},"1":{"0":{"1":{"0":{"1":{"0":{"1":{"0":{"1":{"0":{"1":{"0":{"1":{"0":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}},"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},",":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}},"2":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"3":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":3.333333333333333}},")":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}},"4":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"5":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"6":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"7":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"8":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":5}},")":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}},"9":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.021739130434782608},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.023809523809523808},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}},",":{"9":{"docs":{},",":{"2":{"0":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"1":{"5":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678}}}},"docs":{}}},"docs":{}},"docs":{}}}}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},"，":{"docs":{},"它":{"docs":{},"可":{"docs":{},"以":{"docs":{},"表":{"docs":{},"示":{"docs":{},"下":{"docs":{},"面":{"docs":{},"这":{"docs":{},"个":{"docs":{},"高":{"docs":{},"度":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"：":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}},"进":{"docs":{},"制":{"docs":{},"转":{"docs":{},"化":{"docs":{},"为":{"docs":{},"其":{"docs":{},"它":{"docs":{},"进":{"docs":{},"制":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":10}}}}}}}}}}},":":{"0":{"3":{"docs":{},":":{"0":{"2":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}},"docs":{}},"docs":{}}},"6":{"docs":{},":":{"4":{"4":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"docs":{}},"docs":{}}},"7":{"docs":{},":":{"1":{"1":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}},"docs":{}},"docs":{}}},"9":{"docs":{},":":{"3":{"2":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}},"docs":{}},"5":{"3":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}},"docs":{}},"docs":{}}},"docs":{}},"1":{"3":{"docs":{},":":{"1":{"8":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}},"docs":{}},"docs":{}}},"8":{"docs":{},":":{"0":{"2":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}},"docs":{}},"docs":{}}},"docs":{}},"2":{"7":{"docs":{},":":{"0":{"0":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291}}},"6":{"docs":{"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}},"docs":{}},"1":{"8":{"docs":{"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125}}},"docs":{}},"docs":{}}},"9":{"docs":{},":":{"2":{"3":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}},"docs":{}},"docs":{}}},"docs":{}},"3":{"4":{"docs":{},":":{"5":{"0":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},")":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}},"^":{"9":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}},"docs":{}}},"1":{"0":{"0":{"0":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.031578947368421054}}},"docs":{}},"1":{"0":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}},"docs":{}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"1":{"1":{"0":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}},"docs":{}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"2":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":3.333333333333333}},")":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644}}}},"3":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":3.333333333333333}},")":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547}}}},"4":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"5":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"6":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"7":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"8":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"9":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.021739130434782608},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.023809523809523808},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}},"\"":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}},")":{"docs":{},")":{"docs":{},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349}}}}},",":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}},":":{"1":{"4":{"docs":{},":":{"3":{"6":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}},"docs":{}},"docs":{}}},"5":{"docs":{},":":{"4":{"2":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}}},"docs":{}},"docs":{}}},"docs":{}},"5":{"3":{"docs":{},":":{"5":{"9":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"2":{"0":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941}}},"1":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.03125},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":5}},")":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009}}}},"2":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":3.333333333333333}},"，":{"docs":{},"而":{"docs":{},"每":{"docs":{},"个":{"docs":{},"字":{"docs":{},"母":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}},"3":{"4":{"5":{"6":{"7":{"4":{"docs":{},")":{"docs":{},".":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.023529411764705882}}},"4":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":5}},")":{"docs":{"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678}}}},"5":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},":":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}},"6":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"7":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"8":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"9":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338}},":":{"0":{"2":{"docs":{},":":{"1":{"8":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"docs":{}},"docs":{}}},"6":{"docs":{},":":{"4":{"7":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218}}},"docs":{}},"docs":{}}},"7":{"docs":{},":":{"4":{"0":{"docs":{"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}},"docs":{}},"docs":{}}},"docs":{}},"1":{"0":{"docs":{},":":{"3":{"2":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}},"docs":{}},"docs":{}}},"docs":{}},"2":{"0":{"docs":{},":":{"5":{"0":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}},"docs":{}},"docs":{}}},"6":{"docs":{},":":{"0":{"0":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}},"docs":{}},"docs":{}}},"docs":{}},"3":{"0":{"docs":{},":":{"3":{"9":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}},"docs":{}},"docs":{}}},"docs":{}},"5":{"6":{"docs":{},":":{"0":{"7":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},",":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}},"3":{"0":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},")":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}},"1":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":3.333333333333333},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":5}},")":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}},"2":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":3.333333333333333}},")":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"9":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":5}},")":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993}},",":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}},":":{"0":{"1":{"docs":{},":":{"1":{"9":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}},"docs":{}},"docs":{}}},"3":{"docs":{},":":{"1":{"6":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}},"docs":{}},"docs":{}}},"5":{"docs":{},":":{"5":{"3":{"docs":{"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655}}},"docs":{}},"docs":{}}},"docs":{}},"2":{"3":{"docs":{},":":{"4":{"5":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428}}},"docs":{}},"docs":{}}},"docs":{}},"5":{"7":{"docs":{},":":{"3":{"4":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"]":{"docs":{},",":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}}},"。":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}}},"4":{"1":{"docs":{},")":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403}}},".":{"docs":{},"m":{"docs":{},"d":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":5}}}}}},"2":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":3.333333333333333}},")":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}},"docs":{"./":{"ref":"./","tf":0.07692307692307693},"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.011235955056179775},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},":":{"2":{"1":{"docs":{},":":{"1":{"6":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}},"docs":{}},"docs":{}}},"docs":{}},"5":{"8":{"docs":{},":":{"1":{"9":{"docs":{"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},",":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}},"5":{"2":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":3.333333333333333},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":5}},")":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}},"3":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":3.333333333333333}},"）":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}},":":{"2":{"5":{"docs":{},":":{"0":{"9":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}},"docs":{}},"docs":{}}},"docs":{}},"4":{"0":{"docs":{},":":{"3":{"2":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}},"docs":{}},"docs":{}}},"docs":{}},"5":{"7":{"docs":{},":":{"5":{"7":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}},"docs":{}},"docs":{}}},"8":{"docs":{},":":{"0":{"3":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},",":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"）":{"docs":{},"=":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"（":{"8":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"docs":{}}}}}}},"，":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.014388489208633094},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}},"]":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}},",":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}},"6":{"0":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":3.333333333333333}},")":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}},"7":{"docs":{},":":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}},"9":{"docs":{},")":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}},".":{"docs":{},"m":{"docs":{},"d":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":5}}}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.03508771929824561},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385}},"=":{"1":{"3":{"docs":{},"，":{"docs":{},"第":{"docs":{},"二":{"docs":{},"次":{"docs":{},"循":{"docs":{},"环":{"docs":{},"时":{"docs":{},"因":{"docs":{},"为":{"docs":{},"此":{"docs":{},"时":{"docs":{},"的":{"1":{"3":{"docs":{},"小":{"docs":{},"于":{"8":{"docs":{},"的":{"docs":{},"二":{"docs":{},"倍":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"c":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}}}}}}}}},"docs":{}}}},"docs":{}},"docs":{}}}}}}}}}}}}}},"docs":{}},"docs":{}},":":{"0":{"5":{"docs":{},":":{"3":{"2":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}},"docs":{}},"docs":{}}},"docs":{}},"1":{"6":{"docs":{},":":{"1":{"1":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125}}},"docs":{}},"docs":{}}},"docs":{}},"3":{"7":{"docs":{},":":{"3":{"8":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}},"docs":{}},"docs":{}}},"docs":{}},"4":{"1":{"docs":{},":":{"0":{"4":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403}}},"docs":{}},"docs":{}}},"9":{"docs":{},":":{"4":{"2":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}},"docs":{}},"docs":{}}},"docs":{}},"5":{"3":{"docs":{},":":{"3":{"2":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644}}},"docs":{}},"docs":{}}},"5":{"docs":{},":":{"5":{"4":{"docs":{"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},",":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}},"7":{"9":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":2.5}},")":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.05555555555555555},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616}},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.015873015873015872}}},":":{"0":{"9":{"docs":{},":":{"1":{"4":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}},"docs":{}},"docs":{}}},"docs":{}},"1":{"8":{"docs":{},":":{"2":{"7":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}},"docs":{}},"docs":{}}},"docs":{}},"2":{"7":{"docs":{},":":{"3":{"6":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}},"docs":{}},"docs":{}}},"docs":{}},"3":{"4":{"docs":{},":":{"2":{"4":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}},"docs":{}},"docs":{}}},"9":{"docs":{},":":{"1":{"2":{"docs":{"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616}}},"docs":{}},"docs":{}}},"docs":{}},"4":{"5":{"docs":{},":":{"3":{"9":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}},"docs":{}},"docs":{}}},"8":{"docs":{},":":{"1":{"1":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}},"docs":{}},"docs":{}}},"9":{"docs":{},":":{"0":{"8":{"docs":{"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}},"docs":{}},"5":{"4":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856}}},"docs":{}},"docs":{}}},"docs":{}},"5":{"4":{"docs":{},":":{"0":{"9":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385}}},"docs":{}},"docs":{}}},"8":{"docs":{},":":{"3":{"6":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358}}},"docs":{}},"docs":{}}},"9":{"docs":{},":":{"5":{"7":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},",":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}},"8":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}},":":{"0":{"3":{"docs":{},":":{"0":{"9":{"docs":{"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358}}},"docs":{}},"3":{"8":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}},"docs":{}},"docs":{}}},"7":{"docs":{},":":{"4":{"2":{"docs":{"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358}}},"docs":{}},"docs":{}}},"docs":{}},"1":{"8":{"docs":{},":":{"5":{"2":{"docs":{"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.05555555555555555}}},"docs":{}},"docs":{}}},"docs":{}},"2":{"3":{"docs":{},":":{"3":{"8":{"docs":{"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}},"docs":{}},"docs":{}}},"6":{"docs":{},":":{"3":{"1":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609}}},"docs":{}},"docs":{}}},"9":{"docs":{},":":{"4":{"8":{"docs":{"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}},"docs":{}},"docs":{}}},"docs":{}},"3":{"3":{"docs":{},":":{"3":{"3":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}},"docs":{}},"docs":{}}},"5":{"docs":{},":":{"1":{"0":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"]":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}},"9":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}},":":{"0":{"0":{"docs":{},":":{"4":{"6":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}},"docs":{}},"docs":{}}},"5":{"docs":{},":":{"3":{"8":{"docs":{"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176}}},"docs":{}},"docs":{}}},"8":{"docs":{},":":{"1":{"5":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}},"docs":{}},"docs":{}}},"docs":{}},"2":{"5":{"docs":{},":":{"3":{"2":{"docs":{"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}}},"docs":{}},"docs":{}}},"docs":{}},"3":{"0":{"docs":{},":":{"3":{"7":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}},"docs":{}},"docs":{}}},"1":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}},"7":{"docs":{},":":{"1":{"7":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}},"docs":{}},"docs":{}}},"docs":{}},"5":{"6":{"docs":{},":":{"0":{"9":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}},"]":{"docs":{},",":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.03070175438596491},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.03508771929824561},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.038461538461538464},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.06993006993006994},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.05517241379310345},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.021739130434782608},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.02242152466367713},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.02608695652173913},"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.05263157894736842},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.025974025974025976},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.035},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.05357142857142857},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.04477611940298507},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.05325443786982249},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.038461538461538464},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.03314917127071823},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.03225806451612903},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.039473684210526314},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.030864197530864196},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.04316546762589928},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.029411764705882353},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.024193548387096774},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.05454545454545454},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.031746031746031744},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.020833333333333332},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.007772020725388601},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.037037037037037035},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.028985507246376812},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.007772020725388601},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.05},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.02702702702702703},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.012578616352201259},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.015151515151515152},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.0425531914893617},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.032467532467532464},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.03932584269662921},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.05325443786982249},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.022123893805309734},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.031496062992125984},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.04477611940298507},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.05172413793103448},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.02631578947368421},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.034013605442176874},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.01951219512195122},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.034482758620689655},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.025},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.016666666666666666},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0182648401826484},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.015},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.02834008097165992},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.03208556149732621},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.017543859649122806},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.018433179723502304},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.016194331983805668},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.027777777777777776},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.018796992481203006},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.028985507246376812},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.02727272727272727},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.018867924528301886},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.10526315789473684},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.017341040462427744},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.02631578947368421},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.021897810218978103},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.018518518518518517},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.03314917127071823},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.015625},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.02},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.016129032258064516},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.018404907975460124},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.022727272727272728},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.018518518518518517},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.014814814814814815},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.03932584269662921},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.09216589861751152},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.018957345971563982},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0392156862745098},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.01818181818181818},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.030120481927710843},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.027777777777777776},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.034482758620689655},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.075},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.017857142857142856},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.016260162601626018},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.03409090909090909},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.07586206896551724},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.026490066225165563},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.0761904761904762},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.038461538461538464},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.02912621359223301},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.09090909090909091},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.015151515151515152},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.021052631578947368},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.013888888888888888},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.07534246575342465},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.03305785123966942},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.05263157894736842},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.02727272727272727},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.01327433628318584},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.02727272727272727},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.02304147465437788},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.012295081967213115},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.0196078431372549}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.023529411764705882},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.010362694300518135},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.010362694300518135},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.01990049751243781},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}}},"开":{"docs":{},"始":{"docs":{},"(":{"docs":{},"因":{"docs":{},"为":{"docs":{},"这":{"docs":{},"是":{"docs":{},"下":{"docs":{},"标":{"docs":{},"表":{"docs":{},"示":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"减":{"docs":{},"一":{"docs":{},")":{"docs":{},"。":{"docs":{},"归":{"docs":{},"并":{"docs":{},"起":{"docs":{},"点":{"docs":{},"和":{"docs":{},"归":{"docs":{},"并":{"docs":{},"结":{"docs":{},"果":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"都":{"docs":{},"是":{"docs":{},"从":{"docs":{},"右":{"docs":{},"向":{"docs":{},"左":{"docs":{},"前":{"docs":{},"进":{"docs":{},"。":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{},"g":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},"k":{"docs":{},",":{"docs":{},"n":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}}}},"*":{"docs":{},"h":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715}},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},")":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715}}}}}}}}}}}},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"]":{"docs":{},")":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}},"，":{"docs":{},"如":{"docs":{},"下":{"docs":{},"图":{"docs":{},"所":{"docs":{},"示":{"docs":{},"：":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}},";":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}},"!":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}},"(":{"docs":{},"n":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}},")":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}},"!":{"docs":{},"/":{"docs":{},"(":{"docs":{},"m":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},".":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"n":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}},"。":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}},"]":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}},".":{"2":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}}}}}}}}}},"5":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}},"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.02},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}},"题":{"docs":{},"目":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},"描":{"docs":{},"述":{"docs":{"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421}}}}}},"中":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}},"从":{"docs":{},"左":{"docs":{},"往":{"docs":{},"右":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"中":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"串":{"docs":{},"s":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},"或":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},"，":{"docs":{},"执":{"docs":{},"行":{"docs":{},"以":{"docs":{},"下":{"docs":{},"操":{"docs":{},"作":{"docs":{},";":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"至":{"docs":{},"右":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"一":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},"后":{"docs":{},"面":{"docs":{},"跟":{"docs":{},"着":{"docs":{},"两":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},"时":{"docs":{},"，":{"docs":{},"则":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"将":{"docs":{},"结":{"docs":{},"果":{"docs":{},"作":{"docs":{},"为":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},"替":{"docs":{},"换":{"docs":{},"(":{"docs":{},"这":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},"和":{"docs":{},"两":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},")":{"docs":{},"，":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"最":{"docs":{},"基":{"docs":{},"础":{"docs":{},"的":{"docs":{},"应":{"docs":{},"用":{"docs":{},"就":{"docs":{},"是":{"docs":{},"给":{"docs":{},"定":{"docs":{},"一":{"docs":{},"组":{"docs":{},"数":{"docs":{},"，":{"docs":{},"针":{"docs":{},"对":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"它":{"docs":{},"和":{"docs":{},"它":{"docs":{},"右":{"docs":{},"边":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"比":{"docs":{},"它":{"docs":{},"大":{"docs":{},"的":{"docs":{},"数":{"docs":{},"之":{"docs":{},"间":{"docs":{},"有":{"docs":{},"多":{"docs":{},"少":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{},"（":{"docs":{},"小":{"docs":{},"牛":{"docs":{},"向":{"docs":{},"右":{"docs":{},"看":{"docs":{},"）":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"性":{"docs":{},"质":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}},"分":{"docs":{},"治":{"docs":{},"法":{"docs":{},"解":{"docs":{},"决":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}},".":{"docs":{},"i":{"docs":{},"f":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}},"大":{"docs":{},"顶":{"docs":{},"堆":{"docs":{},"中":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"数":{"docs":{},"值":{"docs":{},"小":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{},"小":{"docs":{},"顶":{"docs":{},"堆":{"docs":{},"中":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"数":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"小":{"docs":{},"于":{"docs":{},"小":{"docs":{},"顶":{"docs":{},"堆":{"docs":{},"的":{"docs":{},"堆":{"docs":{},"顶":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"]":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.010362694300518135},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.012345679012345678},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.010362694300518135},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0234375},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.034782608695652174},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.03597122302158273},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.02147239263803681},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.045454545454545456},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.011111111111111112},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.02247191011235955},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.031545741324921134},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.017241379310344827},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.03333333333333333},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.02531645569620253},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.036885245901639344},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0364963503649635},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.027649769585253458},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.03125},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.024390243902439025},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0364963503649635},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.008982035928143712},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.018518518518518517},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}},":":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}},"+":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227}},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"个":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"m":{"docs":{},")":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"保":{"docs":{},"存":{"docs":{},"已":{"docs":{},"经":{"docs":{},"计":{"docs":{},"算":{"docs":{},"的":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"访":{"docs":{},"问":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"数":{"docs":{},"组":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"因":{"docs":{},"此":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"m":{"docs":{},")":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"*":{"docs":{},"m":{"docs":{},")":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"处":{"docs":{},"理":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"中":{"docs":{},"第":{"docs":{},"一":{"docs":{},"行":{"docs":{},"和":{"docs":{},"第":{"docs":{},"一":{"docs":{},"列":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"第":{"docs":{},"一":{"docs":{},"行":{"docs":{},"没":{"docs":{},"有":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}},".":{"docs":{},"s":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},"[":{"docs":{},":":{"docs":{},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}}}},"。":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}},"请":{"docs":{},"根":{"docs":{},"据":{"docs":{},"这":{"docs":{},"个":{"docs":{},"假":{"docs":{},"设":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"反":{"docs":{},"转":{"docs":{},"后":{"docs":{},"整":{"docs":{},"数":{"docs":{},"溢":{"docs":{},"出":{"docs":{},"那":{"docs":{},"么":{"docs":{},"就":{"docs":{},"返":{"docs":{},"回":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941}}}}}}}}}}}}}}}}}}}}}}}},"本":{"docs":{},"题":{"docs":{},"中":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"除":{"docs":{},"法":{"docs":{},"结":{"docs":{},"果":{"docs":{},"溢":{"docs":{},"出":{"docs":{},"，":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}}}}}}}}}}}}}}}},"+":{"1":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}},")":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}},",":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}}}}},"步":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152}}}},"2":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}},"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.014084507042253521},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"计":{"docs":{},"算":{"docs":{},"得":{"docs":{},"到":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}},"c":{"1":{"docs":{},",":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}}}}}},"2":{"docs":{},")":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}},"docs":{}},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"1":{"docs":{},"[":{"docs":{},"i":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}},"docs":{}}}}}}},"]":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}},",":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676}}}}}}}}}}}}},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676}}},">":{"docs":{},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},":":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}},"，":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"非":{"docs":{},"负":{"docs":{},"部":{"docs":{},"分":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}}}}},":":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.009478672985781991},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.00949367088607595},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}}}}}}}},",":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}},"s":{"2":{"docs":{},"[":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125}}}},"docs":{}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152}},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125}}}}}}},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},")":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"1":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{},"是":{"docs":{},"因":{"docs":{},"为":{"docs":{},"这":{"docs":{},"是":{"docs":{},"对":{"docs":{},"于":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"而":{"docs":{},"言":{"docs":{},"的":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"矩":{"docs":{},"阵":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}},"*":{"2":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}},"+":{"1":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}},"docs":{}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}}}}}}}},"!":{"docs":{},"=":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}},"docs":{}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"2":{"docs":{},"[":{"docs":{},"j":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}},"docs":{}}}}}}},">":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}},"docs":{}}}}}}}},"=":{"docs":{},"=":{"docs":{},"\"":{"1":{"docs":{},"\"":{"docs":{},":":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}},"docs":{}},"'":{"docs":{},".":{"docs":{},"'":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}},"?":{"docs":{},"'":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"]":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"2":{"docs":{},"[":{"docs":{},"j":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152}}}}},"docs":{}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227}},",":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{},",":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"1":{"docs":{},"]":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.02459016393442623}},",":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{},"]":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}}},"docs":{}}}}}}}}}}},"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.01079136690647482},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.00946372239747634},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}},"j":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.02304147465437788},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}},"]":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385}},")":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}},"+":{"1":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152}}},"docs":{}}},"+":{"1":{"docs":{},",":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}}}}}}}},"步":{"docs":{},"(":{"docs":{},"增":{"docs":{},"加":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"1":{"docs":{},"和":{"docs":{},"删":{"docs":{},"除":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"2":{"docs":{},"一":{"docs":{},"个":{"docs":{},"效":{"docs":{},"果":{"docs":{},")":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}},")":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}},"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"或":{"docs":{},"者":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}}}}},"c":{"0":{"docs":{},",":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}}}}}}}}},"docs":{}}},",":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}}}}}}}},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}},"，":{"docs":{},"只":{"docs":{},"有":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}}}}}}}}}}}},":":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}}}},"i":{"docs":{},"]":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576}}}}},"m":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.011235955056179775}}}},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{},"第":{"docs":{},"一":{"docs":{},"列":{"docs":{},"没":{"docs":{},"有":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}}}}}}}}}}}}},"，":{"docs":{},"只":{"docs":{},"有":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}}}}}}}}},"的":{"docs":{},"值":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"保":{"docs":{},"存":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"行":{"docs":{},"中":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"计":{"docs":{},"算":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"时":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"更":{"docs":{},"新":{"docs":{},"u":{"docs":{},"p":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"行":{"docs":{},"中":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"保":{"docs":{},"存":{"docs":{},"在":{"docs":{},"u":{"docs":{},"p":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"，":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"为":{"docs":{},"m":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"把":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"保":{"docs":{},"存":{"docs":{},"在":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"，":{"docs":{},"当":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"行":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"计":{"docs":{},"算":{"docs":{},"完":{"docs":{},"毕":{"docs":{},"以":{"docs":{},"后":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"交":{"docs":{},"换":{"docs":{},"u":{"docs":{},"p":{"docs":{},"和":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"需":{"docs":{},"要":{"docs":{},"u":{"docs":{},"p":{"docs":{},"数":{"docs":{},"组":{"docs":{},"和":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"且":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"都":{"docs":{},"为":{"docs":{},"m":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"2":{"docs":{},"*":{"docs":{},"m":{"docs":{},"大":{"docs":{},"小":{"docs":{},"的":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"。":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"把":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}}}},"时":{"docs":{},"，":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"b":{"docs":{},"]":{"docs":{},"=":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"a":{"docs":{},"]":{"docs":{},"+":{"1":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}},"docs":{}}}}}}}}}}}}}}}},":":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.02564102564102564},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.02127659574468085},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.018518518518518517},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.027777777777777776},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.031496062992125984},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.013636363636363636},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.018518518518518517},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.00949367088607595},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.012295081967213115},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.03076923076923077},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.013888888888888888},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}}}},"#":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"就":{"docs":{},"会":{"docs":{},"是":{"0":{"docs":{},"；":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806}}}},"docs":{}}}}}}},"的":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"数":{"docs":{},"一":{"docs":{},"定":{"docs":{},"会":{"docs":{},"是":{"docs":{},"当":{"docs":{},"前":{"docs":{},"位":{"docs":{},"变":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"其":{"docs":{},"他":{"docs":{},"位":{"docs":{},"全":{"docs":{},"是":{"1":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"n":{"docs":{},"与":{"docs":{},"n":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}}}}},"非":{"docs":{},"空":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}}}},"。":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}},"与":{"docs":{},"当":{"docs":{},"前":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{},"不":{"docs":{},"同":{"docs":{},"，":{"docs":{},"得":{"docs":{},"分":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"设":{"docs":{},"置":{"docs":{},"当":{"docs":{},"前":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}}}}}}}}},"docs":{}}}}}}},"相":{"docs":{},"同":{"docs":{},"，":{"docs":{},"得":{"docs":{},"分":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.013986013986013986},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364}}}}}}}}}}}}},"当":{"docs":{},"前":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{},"是":{"1":{"docs":{},"，":{"docs":{},"得":{"docs":{},"分":{"docs":{},"置":{"1":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}},"docs":{}}}}}},"docs":{}}}}}}},"然":{"docs":{},"后":{"docs":{},"我":{"docs":{},"们":{"docs":{},"进":{"docs":{},"行":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"先":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"上":{"docs":{},"边":{"docs":{},"，":{"docs":{},"将":{"docs":{},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"加":{"docs":{},"入":{"docs":{},"结":{"docs":{},"果":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"上":{"docs":{},"边":{"docs":{},"下":{"docs":{},"移":{"docs":{},"一":{"docs":{},"位":{"docs":{},"，":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}},"如":{"docs":{},"果":{"docs":{},"此":{"docs":{},"时":{"docs":{},"上":{"docs":{},"边":{"docs":{},"大":{"docs":{},"于":{"docs":{},"下":{"docs":{},"边":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"此":{"docs":{},"时":{"docs":{},"已":{"docs":{},"经":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"完":{"docs":{},"成":{"docs":{},"了":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"。":{"docs":{},"同":{"docs":{},"理":{"docs":{},"对":{"docs":{},"于":{"docs":{},"下":{"docs":{},"边":{"docs":{},"，":{"docs":{},"左":{"docs":{},"边":{"docs":{},"，":{"docs":{},"右":{"docs":{},"边":{"docs":{},"，":{"docs":{},"依":{"docs":{},"次":{"docs":{},"进":{"docs":{},"行":{"docs":{},"相":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"会":{"docs":{},"使":{"docs":{},"得":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"很":{"docs":{},"有":{"docs":{},"规":{"docs":{},"律":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"不":{"docs":{},"易":{"docs":{},"出":{"docs":{},"错":{"docs":{},"，":{"docs":{},"参":{"docs":{},"见":{"docs":{},"代":{"docs":{},"码":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"2":{"docs":{},"，":{"1":{"docs":{},"，":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}}},"3":{"docs":{},"，":{"4":{"docs":{},"，":{"5":{"docs":{},"，":{"6":{"docs":{"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}},"得":{"docs":{},"分":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"当":{"docs":{},"前":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}}}}},"2":{"docs":{},"，":{"docs":{},"当":{"docs":{},"前":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.013986013986013986},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364}}}}}}}}},"docs":{}},"置":{"1":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}},"docs":{}}}},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"为":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}},"不":{"docs":{},"管":{"docs":{},"数":{"docs":{},"组":{"docs":{},"如":{"docs":{},"何":{"docs":{},"变":{"docs":{},"化":{"docs":{},"，":{"docs":{},"它":{"docs":{},"总":{"docs":{},"归":{"docs":{},"还":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"只":{"docs":{},"是":{"docs":{},"变":{"docs":{},"成":{"docs":{},"了":{"docs":{},"两":{"docs":{},"个":{"docs":{},"升":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"组":{"docs":{},"合":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"可":{"docs":{},"以":{"docs":{},"使":{"docs":{},"用":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"；":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"返":{"docs":{},"回":{"docs":{},"输":{"docs":{},"出":{"docs":{},"数":{"docs":{},"组":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}}}}}},"左":{"docs":{},"边":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"是":{"0":{"docs":{},"，":{"docs":{},"右":{"docs":{},"边":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"是":{"docs":{},"n":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}}}}}}},"docs":{}}}}}}}},"则":{"docs":{},"在":{"docs":{},"该":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"没":{"docs":{},"有":{"docs":{},"环":{"docs":{},"。":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}}}}}},"因":{"docs":{},"为":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}}}}},"此":{"docs":{},"d":{"docs":{},"p":{"docs":{},"的":{"docs":{},"默":{"docs":{},"认":{"docs":{},"写":{"docs":{},"法":{"docs":{},"：":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},"i":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152}},")":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}},"j":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152}},")":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152}}}},"输":{"docs":{},"出":{"docs":{},"[":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}},"取":{"docs":{},"出":{"docs":{},"来":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"乘":{"docs":{},"以":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291}}}}}}}}}}},",":{"0":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}}},"docs":{}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}},"docs":{}},"5":{"docs":{},",":{"9":{"docs":{},",":{"1":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094}}}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},")":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}}},"1":{"docs":{},")":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}}},"2":{"docs":{},",":{"1":{"docs":{},",":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}},"]":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}},"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},",":{"0":{"docs":{"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}}},"docs":{}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"1":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}},"docs":{}}},"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.0625},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.010362694300518135},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.010869565217391304},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.010362694300518135},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.03980099502487562},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.01948051948051948},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.016853932584269662},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.017699115044247787},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.017391304347826087},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.02564102564102564},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.01951219512195122},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.025},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.02564102564102564},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.016666666666666666},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0319634703196347},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.027777777777777776},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.007009345794392523},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.01639344262295082},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.013888888888888888},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}},"n":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}},"h":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}},"否":{"docs":{},"则":{"docs":{},"头":{"docs":{},"指":{"docs":{},"针":{"docs":{},"变":{"docs":{},"为":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}}}}}}}}},"尾":{"docs":{},"指":{"docs":{},"针":{"docs":{},"变":{"docs":{},"为":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}}}}}}}}}}},"结":{"docs":{},"果":{"docs":{},"为":{"1":{"docs":{},"就":{"docs":{},"是":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"个":{"1":{"docs":{},"，":{"docs":{},"结":{"docs":{},"果":{"docs":{},"为":{"0":{"docs":{},"就":{"docs":{},"是":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"个":{"1":{"docs":{},"；":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}},"docs":{}}}}}}},"docs":{}}}}}},"docs":{}}}}}}},"docs":{}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}},"docs":{}}}}}}}},"p":{"docs":{},")":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}},"s":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},"]":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.018518518518518517}}}}}}}},"i":{"docs":{},")":{"docs":{},"+":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"个":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"m":{"docs":{},")":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"保":{"docs":{},"存":{"docs":{},"已":{"docs":{},"经":{"docs":{},"计":{"docs":{},"算":{"docs":{},"的":{"docs":{},"s":{"docs":{},"i":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"访":{"docs":{},"问":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"数":{"docs":{},"组":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"因":{"docs":{},"此":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"m":{"docs":{},")":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"*":{"docs":{},"m":{"docs":{},")":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"处":{"docs":{},"理":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"中":{"docs":{},"第":{"docs":{},"一":{"docs":{},"行":{"docs":{},"和":{"docs":{},"第":{"docs":{},"一":{"docs":{},"列":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"第":{"docs":{},"一":{"docs":{},"行":{"docs":{},"没":{"docs":{},"有":{"docs":{},"s":{"docs":{},"i":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}},"n":{"docs":{},"p":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}},")":{"docs":{},":":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}},"+":{"1":{"docs":{},",":{"docs":{},"i":{"docs":{},",":{"docs":{},"i":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"j":{"docs":{},",":{"docs":{},"j":{"docs":{},",":{"docs":{},"j":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}}}}}}}}}},"docs":{}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.009478672985781991}}}}}}}},"j":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.015151515151515152}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}}},"+":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}},"时":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"能":{"docs":{},"进":{"docs":{},"来":{"docs":{},"那":{"docs":{},"么":{"docs":{},"上":{"docs":{},"面":{"docs":{},"的":{"docs":{},"i":{"docs":{},"f":{"docs":{},"语":{"docs":{},"句":{"docs":{},"已":{"docs":{},"经":{"docs":{},"判":{"docs":{},"断":{"docs":{},"了":{"docs":{},"b":{"docs":{},"字":{"docs":{},"符":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.015151515151515152}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}}},"、":{"2":{"docs":{},"、":{"1":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}},"docs":{}}},"docs":{},"思":{"docs":{},"路":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839}}}}}}}}}}},"找":{"docs":{},"到":{"docs":{},"链":{"docs":{},"表":{"docs":{},"长":{"docs":{},"度":{"docs":{},"的":{"docs":{},"一":{"docs":{},"半":{"docs":{},"，":{"docs":{},"用":{"docs":{},"追":{"docs":{},"赶":{"docs":{},"法":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"一":{"docs":{},"次":{"docs":{},"走":{"docs":{},"两":{"docs":{},"步":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"一":{"docs":{},"次":{"docs":{},"走":{"docs":{},"一":{"docs":{},"步":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"：":{"docs":{},"不":{"docs":{},"要":{"docs":{},"求":{"docs":{},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"只":{"docs":{},"要":{"docs":{},"保":{"docs":{},"证":{"docs":{},"元":{"docs":{},"素":{"docs":{},"前":{"docs":{},"后":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"一":{"docs":{},"致":{"docs":{},"即":{"docs":{},"可":{"docs":{},"；":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"替":{"docs":{},"换":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}}},"：":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}},"(":{"docs":{},"因":{"docs":{},"为":{"docs":{},"这":{"docs":{},"是":{"docs":{},"下":{"docs":{},"标":{"docs":{},"表":{"docs":{},"示":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"减":{"docs":{},"一":{"docs":{},")":{"docs":{},"。":{"docs":{},"归":{"docs":{},"并":{"docs":{},"结":{"docs":{},"果":{"docs":{},"保":{"docs":{},"存":{"docs":{},"位":{"docs":{},"置":{"docs":{},"从":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}}}}}}}}}}}},"*":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},".":{"docs":{},"e":{"docs":{},"*":{"docs":{},"*":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}}}}}}}},"还":{"docs":{},"是":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"=":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"=":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"+":{"1":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"docs":{}}}}}}}}}}}}}}}}}},"这":{"docs":{},"样":{"docs":{},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"我":{"docs":{},"们":{"docs":{},"希":{"docs":{},"望":{"docs":{},"在":{"docs":{},"[":{"docs":{},"l":{"docs":{},":":{"docs":{},"r":{"docs":{},"]":{"docs":{},"中":{"docs":{},"进":{"docs":{},"行":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{},"计":{"docs":{},"算":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"+":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{},"+":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"r":{"docs":{},"]":{"docs":{},"和":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"的":{"docs":{},"差":{"docs":{},"是":{"docs":{},"多":{"docs":{},"少":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"记":{"docs":{},"录":{"docs":{},"下":{"docs":{},"来":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"取":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"差":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"作":{"docs":{},"为":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"当":{"docs":{},"l":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"/":{"2":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285}}},"docs":{}},"=":{"0":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}},"docs":{}},";":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.0125},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0136986301369863},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}},"（":{"3":{"docs":{},"）":{"docs":{},"如":{"docs":{},"果":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},"比":{"docs":{},"头":{"docs":{},"元":{"docs":{},"素":{"docs":{},"小":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"在":{"docs":{},"尾":{"docs":{},"巴":{"docs":{},"元":{"docs":{},"素":{"docs":{},"和":{"docs":{},"中":{"docs":{},"间":{"docs":{},"元":{"docs":{},"素":{"docs":{},"之":{"docs":{},"间":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"头":{"docs":{},"指":{"docs":{},"针":{"docs":{},"就":{"docs":{},"变":{"docs":{},"为":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"总":{"docs":{},"之":{"docs":{},"就":{"docs":{},"还":{"docs":{},"是":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"的":{"docs":{},"应":{"docs":{},"用":{"docs":{},"，":{"docs":{},"仔":{"docs":{},"细":{"docs":{},"推":{"docs":{},"敲":{"docs":{},"，":{"docs":{},"分":{"docs":{},"析":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"弄":{"docs":{},"懂":{"docs":{},"！":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"；":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}},"）":{"docs":{},"+":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"偷":{"docs":{},"窃":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}}}},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"买":{"docs":{},"入":{"docs":{},"，":{"docs":{},"在":{"docs":{},"第":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.013245033112582781}}}}}}}}}}},"→":{"3":{"docs":{},"→":{"1":{"docs":{},"→":{"1":{"docs":{},"→":{"1":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"+":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"或":{"docs":{},"者":{"docs":{},"s":{"docs":{},"i":{"docs":{},"+":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"计":{"docs":{},"算":{"docs":{},"得":{"docs":{},"到":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"s":{"docs":{},"i":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}}}}}}}}}}}}}}}}}},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"切":{"docs":{},"分":{"docs":{},"为":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"对":{"docs":{},"切":{"docs":{},"分":{"docs":{},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"根":{"docs":{},"据":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"进":{"docs":{},"行":{"docs":{},"左":{"docs":{},"右":{"docs":{},"切":{"docs":{},"割":{"docs":{},"。":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"最":{"docs":{},"近":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{},"即":{"0":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}},"docs":{}}}}}}}}}}}}},"}":{"docs":{},"$":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}},"，":{"docs":{},"只":{"docs":{},"有":{"docs":{},"s":{"docs":{},"i":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{},"第":{"docs":{},"一":{"docs":{},"列":{"docs":{},"没":{"docs":{},"有":{"docs":{},"s":{"docs":{},"i":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"只":{"docs":{},"有":{"docs":{},"s":{"docs":{},"i":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}}}}}}}}}}}}}}}},"整":{"docs":{},"个":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"出":{"docs":{},"现":{"docs":{},"在":{"docs":{},"左":{"docs":{},"半":{"docs":{},"部":{"docs":{},"分":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}},"】":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.016260162601626018}},"和":{"docs":{},"b":{"docs":{},"【":{"docs":{},":":{"docs":{},"j":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}}}}}},"的":{"docs":{},"最":{"docs":{},"长":{"docs":{},"公":{"docs":{},"共":{"docs":{},"子":{"docs":{},"串":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}}}}}}}}}}},"!":{"docs":{},"=":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}},"+":{"docs":{},"d":{"docs":{},"p":{"docs":{},"【":{"docs":{},"n":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}}}}}},"2":{"0":{"1":{"9":{"docs":{"./":{"ref":"./","tf":0.15384615384615385},"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807},"数字运算/":{"ref":"数字运算/","tf":0.16666666666666666},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.03508771929824561},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.02564102564102564},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.013986013986013986},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.023529411764705882},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.021739130434782608},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.02666666666666667},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.06896551724137931},"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.05263157894736842},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.025974025974025976},"栈/":{"ref":"栈/","tf":0.16666666666666666},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.014084507042253521},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"双指针/":{"ref":"双指针/","tf":0.16666666666666666},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.029850746268656716},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.01},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.02197802197802198},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.03571428571428571},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.03076923076923077},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.029850746268656716},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.011834319526627219},"二分/":{"ref":"二分/","tf":0.16666666666666666},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.019230769230769232},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.028985507246376812},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.031746031746031744},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.03225806451612903},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.06666666666666667},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.02631578947368421},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.012345679012345678},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.029411764705882353},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.016129032258064516},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.03636363636363636},"三数/":{"ref":"三数/","tf":0.16666666666666666},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.020833333333333332},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.02857142857142857},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.03773584905660377},"区间搜索/":{"ref":"区间搜索/","tf":0.16666666666666666},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/":{"ref":"单调栈/","tf":0.16666666666666666},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.03125},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.037037037037037035},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676},"字符串/":{"ref":"字符串/","tf":0.16666666666666666},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.034482758620689655},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.0625},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.05},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.018691588785046728},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.027777777777777776},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.02702702702702703},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.034482758620689655},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.012578616352201259},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.01818181818181818},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.034482758620689655},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.015151515151515152},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085},"数组/":{"ref":"数组/","tf":0.16666666666666666},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.012987012987012988},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.011834319526627219},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.015748031496062992},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.029850746268656716},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.058823529411764705},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.034482758620689655},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.015625},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.013605442176870748},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.017391304347826087},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.014388489208633094},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.01818181818181818},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.024096385542168676},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.1111111111111111},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332},"矩阵/":{"ref":"矩阵/","tf":0.16666666666666666},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.0125},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.024096385542168676},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.02247191011235955},"链表/":{"ref":"链表/","tf":0.16666666666666666},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.01},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.013888888888888888},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0106951871657754},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.017543859649122806},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.08695652173913043},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.009216589861751152},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.018518518518518517},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.007518796992481203},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.014492753623188406},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.019417475728155338},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.009433962264150943},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.06896551724137931},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.05263157894736842},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.011560693641618497},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.013157894736842105},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.025},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.03278688524590164},"二叉树/":{"ref":"二叉树/","tf":0.16666666666666666},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.014598540145985401},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.02631578947368421},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.022988505747126436},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.014388489208633094},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.017391304347826087},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.024691358024691357},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.03225806451612903},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.01680672268907563},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.06896551724137931},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.027777777777777776},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.010416666666666666},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.02},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.023809523809523808},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.024390243902439025},"动态规划/":{"ref":"动态规划/","tf":0.16666666666666666},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.030303030303030304},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.018518518518518517},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.011235955056179775},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.009478672985781991},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0392156862745098},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.018518518518518517},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.025},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.03333333333333333},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.016260162601626018},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.02631578947368421},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/":{"ref":"逻辑思维/","tf":0.16666666666666666},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.06451612903225806},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.03773584905660377},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.013245033112582781},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.019801980198019802},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.019417475728155338},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.023255813953488372},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.019417475728155338},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.05263157894736842},"回溯/":{"ref":"回溯/","tf":0.16666666666666666},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.01639344262295082},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.020833333333333332},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.028169014084507043},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.012048192771084338},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.0196078431372549},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.029411764705882353},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.009302325581395349},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.030303030303030304},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219},"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.09523809523809523},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666},"深度搜索/":{"ref":"深度搜索/","tf":0.16666666666666666},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.015151515151515152},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.021052631578947368},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.013888888888888888},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.0136986301369863},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.022988505747126436},"堆排序/":{"ref":"堆排序/","tf":0.16666666666666666},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.02702702702702703},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.0196078431372549},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}}},"docs":{}},"8":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":2.5}},")":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549}},":":{"0":{"1":{"docs":{},":":{"3":{"2":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}},"docs":{}},"docs":{}}},"docs":{}},"1":{"4":{"docs":{},":":{"1":{"7":{"docs":{"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333}}},"docs":{}},"docs":{}}},"5":{"docs":{},":":{"2":{"6":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806}}},"7":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}},"9":{"docs":{"./":{"ref":"./","tf":0.07692307692307693},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901}}},"docs":{}},"3":{"0":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}},"4":{"docs":{"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}},"5":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}},"6":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}},"7":{"docs":{"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}},"8":{"docs":{"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}}},"9":{"docs":{"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}},"docs":{}},"5":{"1":{"docs":{"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}},"docs":{}},"docs":{}}},"6":{"docs":{},":":{"2":{"8":{"docs":{"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125}}},"docs":{}},"4":{"1":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684}}},"docs":{}},"5":{"0":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}},"2":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}},"3":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}}},"7":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}},"8":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}},"9":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609}}},"docs":{}},"docs":{}}},"7":{"docs":{},":":{"0":{"0":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}},"1":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775}}},"2":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}},"3":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}},"docs":{}},"2":{"3":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655}}},"4":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}},"5":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}},"docs":{}},"docs":{}}},"docs":{}},"2":{"3":{"docs":{},":":{"5":{"4":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}},"docs":{}},"docs":{}}},"5":{"docs":{},":":{"0":{"6":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}},"docs":{}},"docs":{}}},"docs":{}},"3":{"9":{"docs":{},":":{"2":{"9":{"docs":{"动态规划/":{"ref":"动态规划/","tf":0.08333333333333333}}},"docs":{}},"docs":{}}},"docs":{}},"5":{"2":{"docs":{},":":{"5":{"7":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"]":{"docs":{},",":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521}}}},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}},"1":{"0":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}},"1":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}},"(":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"树":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":2.5}}}}}}}},"4":{"7":{"4":{"8":{"3":{"6":{"4":{"8":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"8":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":5},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}},":":{"2":{"7":{"docs":{},":":{"1":{"7":{"docs":{"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655}}},"docs":{}},"docs":{}}},"docs":{}},"3":{"4":{"docs":{},":":{"5":{"4":{"docs":{"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},",":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}},")":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}},">":{"1":{"2":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}},"docs":{}},"docs":{}}},"2":{"1":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":5}},")":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}},"9":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":2.5}},")":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.009523809523809525},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/":{"ref":"单调栈/","tf":0.08333333333333333},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},":":{"0":{"0":{"docs":{},":":{"3":{"8":{"docs":{"区间搜索/":{"ref":"区间搜索/","tf":0.08333333333333333},"字符串/":{"ref":"字符串/","tf":0.08333333333333333},"数组/":{"ref":"数组/","tf":0.08333333333333333},"矩阵/":{"ref":"矩阵/","tf":0.08333333333333333},"二叉树/":{"ref":"二叉树/","tf":0.08333333333333333},"回溯/":{"ref":"回溯/","tf":0.08333333333333333},"深度搜索/":{"ref":"深度搜索/","tf":0.08333333333333333},"堆排序/":{"ref":"堆排序/","tf":0.08333333333333333}}},"docs":{}},"docs":{}}},"docs":{}},"1":{"5":{"docs":{},":":{"1":{"0":{"docs":{"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}},"docs":{}},"3":{"4":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}},"docs":{}},"docs":{}}},"docs":{}},"3":{"4":{"docs":{},":":{"1":{"3":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}},"docs":{}},"docs":{}}},"5":{"docs":{},":":{"3":{"7":{"docs":{"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}},"docs":{}},"docs":{}}},"6":{"docs":{},":":{"0":{"0":{"docs":{"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}},"docs":{}},"docs":{}}},"7":{"docs":{},":":{"1":{"3":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}}},"docs":{}},"docs":{}}},"8":{"docs":{},":":{"3":{"8":{"docs":{"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}},"docs":{}},"5":{"1":{"docs":{"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}},"docs":{}},"docs":{}}},"9":{"docs":{},":":{"2":{"1":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}},"docs":{}},"docs":{}}},"docs":{}},"4":{"0":{"docs":{},":":{"1":{"0":{"docs":{"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}},"docs":{}},"docs":{}}},"1":{"docs":{},":":{"2":{"3":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}},"docs":{}},"5":{"7":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}}},"docs":{}},"docs":{}}},"3":{"docs":{},":":{"2":{"3":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909}}},"docs":{}},"docs":{}}},"4":{"docs":{},":":{"1":{"3":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}},"docs":{}},"docs":{}}},"5":{"docs":{},":":{"0":{"8":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}},"docs":{}},"docs":{}}},"7":{"docs":{},":":{"0":{"3":{"docs":{"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}},"docs":{}},"3":{"6":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}},"docs":{}},"docs":{}}},"8":{"docs":{},":":{"0":{"2":{"docs":{"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}},"docs":{}},"3":{"4":{"docs":{"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}},"docs":{}},"5":{"9":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}},"docs":{}},"docs":{}}},"9":{"docs":{},":":{"1":{"6":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}},"docs":{}},"5":{"9":{"docs":{"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421}}},"docs":{}},"docs":{}}},"docs":{}},"5":{"0":{"docs":{},":":{"1":{"8":{"docs":{"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}},"docs":{}},"docs":{}}},"1":{"docs":{},":":{"3":{"8":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}},"docs":{}},"docs":{}}},"2":{"docs":{},":":{"2":{"6":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}}},"docs":{}},"docs":{}}},"4":{"docs":{},":":{"0":{"5":{"docs":{"单调栈/":{"ref":"单调栈/","tf":0.08333333333333333}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"]":{"docs":{},",":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}},"，":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993}}}},"3":{"1":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852}},")":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806}}}},"7":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":3.342592592592592}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903}},":":{"0":{"3":{"docs":{},":":{"1":{"0":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}},"docs":{}},"docs":{}}},"docs":{}},"2":{"6":{"docs":{},":":{"4":{"4":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}},"docs":{}},"docs":{}}},"7":{"docs":{},":":{"2":{"1":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}}},"docs":{}},"docs":{}}},"8":{"docs":{},":":{"3":{"9":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}},"docs":{}},"docs":{}}},"docs":{}},"3":{"4":{"docs":{},":":{"4":{"0":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}},"docs":{}},"docs":{}}},"7":{"docs":{},":":{"5":{"6":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}},"docs":{}},"docs":{}}},"docs":{}},"4":{"1":{"docs":{},":":{"0":{"3":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}},"docs":{}},"3":{"4":{"docs":{"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}},"docs":{}},"docs":{}}},"6":{"docs":{},":":{"5":{"6":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}},"docs":{}},"docs":{}}},"docs":{}},"5":{"3":{"docs":{},":":{"5":{"6":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}},"docs":{}},"docs":{}}},"6":{"docs":{},":":{"3":{"0":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},",":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}},"4":{"0":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":3.333333333333333}},")":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}},"]":{"docs":{},",":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}},"5":{"5":{"docs":{},";":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}}},":":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291}},",":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}},"6":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}},",":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}},")":{"docs":{},",":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}},"7":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"8":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}},"9":{"5":{"docs":{},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.008982035928143712},"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.05789473684210526},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.03260869565217391},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.029850746268656716},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.02127659574468085},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.03225806451612903},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.029411764705882353},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.016129032258064516},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.01327433628318584},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.03208556149732621},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.016194331983805668},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.011278195488721804},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":3.333333333333333},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.025},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.013888888888888888},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.02040816326530612},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.010416666666666666},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.024390243902439025},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.02247191011235955},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.009478672985781991},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.017241379310344827},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0375},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.024390243902439025},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.06206896551724138},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.013245033112582781},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":2.5},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.023076923076923078},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.038834951456310676},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}},".":{"0":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}},"1":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616}},"找":{"docs":{},"出":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}}}}}}}}}},"2":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616}},"不":{"docs":{},"使":{"docs":{},"用":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"交":{"docs":{},"换":{"docs":{},"元":{"docs":{},"素":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}}}}}}}}}}}},"3":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616}},"互":{"docs":{},"换":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"的":{"docs":{},"奇":{"docs":{},"偶":{"docs":{},"位":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}}}}}}}},"找":{"docs":{},"出":{"docs":{},"出":{"docs":{},"现":{"docs":{},"两":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}}}}}}}},"4":{"docs":{},"异":{"docs":{},"或":{"docs":{},"来":{"docs":{},"判":{"docs":{},"断":{"docs":{},"一":{"docs":{},"个":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"数":{"docs":{},"中":{"1":{"docs":{},"的":{"docs":{},"数":{"docs":{},"量":{"docs":{},"是":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"还":{"docs":{},"是":{"docs":{},"偶":{"docs":{},"数":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"5":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}},"8":{"2":{"8":{"4":{"2":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},",":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862}},"分":{"docs":{},"析":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}},"i":{"docs":{},"f":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}},"前":{"docs":{},"缀":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}},"由":{"1":{"docs":{},".":{"docs":{},"知":{"docs":{},"，":{"docs":{},"要":{"docs":{},"多":{"docs":{},"遍":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"需":{"docs":{},"要":{"docs":{},"将":{"3":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"替":{"docs":{},"换":{"docs":{},"成":{"1":{"docs":{},"个":{"docs":{},"，":{"docs":{},"比":{"docs":{},"较":{"docs":{},"繁":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"s":{"2":{"docs":{},"来":{"docs":{},"实":{"docs":{},"现":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"从":{"docs":{},"右":{"docs":{},"往":{"docs":{},"左":{"docs":{},"进":{"docs":{},"行":{"docs":{},"，":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"docs":{}},"给":{"docs":{},"定":{"docs":{},"一":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"某":{"docs":{},"一":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"中":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"乘":{"docs":{},"以":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"最":{"docs":{},"大":{"docs":{},"。":{"docs":{},"（":{"docs":{},"柱":{"docs":{},"状":{"docs":{},"图":{"docs":{},"中":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"）":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"代":{"docs":{},"码":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"解":{"docs":{},"决":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}},"两":{"docs":{},"个":{"docs":{},"堆":{"docs":{},"中":{"docs":{},"元":{"docs":{},"素":{"docs":{},"相":{"docs":{},"差":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"为":{"1":{"docs":{},",":{"docs":{},"不":{"docs":{},"能":{"docs":{},">":{"1":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}},"docs":{}}}}}},"docs":{}}}}}},"docs":{}}}}}}}}}}},"d":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},":":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.034482758620689655},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.018518518518518517},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}},"的":{"docs":{},"幂":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"2":{"3":{"1":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}},"。":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}},"与":{"docs":{},"当":{"docs":{},"前":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{},"不":{"docs":{},"同":{"docs":{},"，":{"docs":{},"得":{"docs":{},"分":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.013986013986013986},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364}}}}}}}}}}}}}},"n":{"docs":{},"。":{"docs":{},"当":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}},"*":{"2":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"后":{"docs":{},"面":{"docs":{},"继":{"docs":{},"续":{"docs":{},"判":{"docs":{},"断":{"docs":{},",":{"docs":{},"不":{"docs":{},"赘":{"docs":{},"述":{"docs":{},"了":{"docs":{},")":{"docs":{},"同":{"docs":{},"时":{"docs":{},"扩":{"docs":{},"大":{"docs":{},"二":{"docs":{},"倍":{"docs":{},"(":{"docs":{},"左":{"docs":{},"移":{"docs":{},")":{"docs":{},"，":{"docs":{},"并":{"docs":{},"将":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"加":{"docs":{},"上":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"，":{"docs":{},"除":{"docs":{},"数":{"docs":{},"减":{"docs":{},"去":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"。":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{},"*":{"3":{"1":{"docs":{},")":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852}}}},"docs":{}},"docs":{}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}},",":{"0":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}},",":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}},"1":{"docs":{},",":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}},"4":{"docs":{},"]":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}},"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.01},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.018134715025906734},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.018134715025906734},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.014388489208633094},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.02040816326530612},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.014018691588785047},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.029197080291970802},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.029197080291970802},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}},"docs":{}}}}}},"i":{"docs":{},"=":{"3":{"docs":{},"，":{"docs":{},"这":{"docs":{},"一":{"docs":{},"次":{"docs":{},"来":{"docs":{},"的":{"docs":{},"数":{"docs":{},"是":{"docs":{},"i":{"docs":{},"=":{"3":{"docs":{},"，":{"docs":{},"则":{"docs":{},"这":{"docs":{},"次":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"，":{"docs":{},"应":{"docs":{},"该":{"docs":{},"就":{"docs":{},"是":{"docs":{},"它":{"docs":{},"自":{"docs":{},"己":{"docs":{},"，":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"乘":{"docs":{},"以":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"或":{"docs":{},"者":{"docs":{},"最":{"docs":{},"小":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"docs":{}}}},")":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.02608695652173913},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}},":":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856}}},".":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},".":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"m":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}},",":{"docs":{"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}},"：":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}},"]":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.015822784810126583},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.016260162601626018},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}},"，":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839}}}}}},")":{"docs":{},":":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872}}}},"*":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}}}}}}},"(":{"docs":{},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}},"docs":{}}}}}}}}}},",":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}},"行":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"不":{"docs":{},"再":{"docs":{},"需":{"docs":{},"要":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576}}}}}}}}},"[":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576}}},"+":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}}}}}}}}}}}}},"、":{"1":{"docs":{},"、":{"2":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}},"docs":{}}},"docs":{},"否":{"docs":{},"则":{"docs":{},"，":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839}}}}}}}}}}}}}},"将":{"docs":{},"后":{"docs":{},"一":{"docs":{},"半":{"docs":{},"数":{"docs":{},"组":{"docs":{},"转":{"docs":{},"置":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856}}}}}}}}}},"上":{"docs":{},"升":{"docs":{},"：":{"docs":{},"这":{"docs":{},"里":{"docs":{},"的":{"docs":{},"“":{"docs":{},"上":{"docs":{},"升":{"docs":{},"”":{"docs":{},"是":{"docs":{},"“":{"docs":{},"严":{"docs":{},"格":{"docs":{},"上":{"docs":{},"升":{"docs":{},"”":{"docs":{},"，":{"docs":{},"类":{"docs":{},"似":{"docs":{},"于":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}}}}}}},"删":{"docs":{},"除":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}}},"，":{"1":{"docs":{},"，":{"1":{"docs":{},"】":{"docs":{},"头":{"docs":{},"去":{"docs":{},"重":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}}}},"，":{"1":{"docs":{},"】":{"docs":{},"尾":{"docs":{},"去":{"docs":{},"重":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}}}}},"docs":{}}},"docs":{}}},"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.014388489208633094},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"指":{"docs":{},"向":{"docs":{},"头":{"docs":{},"尾":{"docs":{},"，":{"docs":{},"拿":{"docs":{},"着":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"和":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"间":{"docs":{},"元":{"docs":{},"素":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"分":{"docs":{},"三":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"判":{"docs":{},"断":{"docs":{},"：":{"docs":{},"（":{"1":{"docs":{},"）":{"docs":{},"若":{"docs":{},"相":{"docs":{},"等":{"docs":{},"则":{"docs":{},"直":{"docs":{},"接":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"就":{"docs":{},"是":{"docs":{},"答":{"docs":{},"案":{"docs":{},"；":{"docs":{},"（":{"2":{"docs":{},"）":{"docs":{},"如":{"docs":{},"果":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},"比":{"docs":{},"头":{"docs":{},"元":{"docs":{},"素":{"docs":{},"大":{"docs":{},"与":{"docs":{},"等":{"docs":{},"于":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"在":{"docs":{},"它":{"docs":{},"和":{"docs":{},"头":{"docs":{},"元":{"docs":{},"素":{"docs":{},"之":{"docs":{},"间":{"docs":{},"，":{"docs":{},"则":{"docs":{},"尾":{"docs":{},"指":{"docs":{},"针":{"docs":{},"变":{"docs":{},"为":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"）":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}},"=":{"1":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"（":{"3":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"docs":{}}}}}},",":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"偷":{"docs":{},"窃":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}}}},"或":{"docs":{},"者":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}},"}":{"docs":{},"^":{"docs":{},"{":{"docs":{},"m":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}},"整":{"docs":{},"个":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"出":{"docs":{},"现":{"docs":{},"在":{"docs":{},"右":{"docs":{},"半":{"docs":{},"部":{"docs":{},"分":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}},"+":{"1":{"docs":{},"】":{"docs":{},"，":{"docs":{},"都":{"docs":{},"要":{"docs":{},"在":{"docs":{},"d":{"docs":{},"p":{"docs":{},"位":{"docs":{},"置":{"docs":{},"上":{"docs":{},"加":{"1":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}},"docs":{}}}}}}}}}}}}},"docs":{}},"】":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}},",":{"docs":{},"s":{"docs":{},"【":{"docs":{},"n":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}}}}},"3":{"0":{"0":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":5}},")":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549}},",":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521}}},"]":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}},"1":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"2":{"1":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.023529411764705882}}},"5":{"0":{"docs":{"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517}}},"docs":{}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.023529411764705882},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}},"3":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}},"：":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"旋":{"docs":{},"转":{"docs":{},"排":{"docs":{},"列":{"docs":{},"数":{"docs":{},"组":{"docs":{},"（":{"docs":{},"最":{"docs":{},"详":{"docs":{},"细":{"docs":{},"的":{"docs":{},"解":{"docs":{},"法":{"docs":{},"！":{"docs":{},"！":{"docs":{},"！":{"docs":{},"）":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"延":{"docs":{},"伸":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"使":{"docs":{},"用":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"会":{"docs":{},"出":{"docs":{},"现":{"docs":{},"错":{"docs":{},"误":{"docs":{},"，":{"docs":{},"例":{"docs":{},"如":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"4":{"4":{"docs":{},":":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}},"5":{"docs":{},":":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},",":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521}}}},"5":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"6":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"]":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"的":{"docs":{},"策":{"docs":{},"略":{"docs":{},"就":{"docs":{},"是":{"docs":{},"从":{"docs":{},"前":{"docs":{},"向":{"docs":{},"后":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"非":{"docs":{},"负":{"docs":{},"数":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"反":{"docs":{},"向":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"负":{"docs":{},"数":{"docs":{},"部":{"docs":{},"分":{"docs":{},"。":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"7":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"8":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"9":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":5}},")":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.07280701754385965},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.021739130434782608},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.013452914798206279},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.011834319526627219},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.022099447513812154},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.011834319526627219},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.012145748987854251},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.019736842105263157},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.025},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.014598540145985401},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.023148148148148147},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.022099447513812154},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.010416666666666666},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.036585365853658534},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.012269938650306749},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.018072289156626505},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.037037037037037035},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.019867549668874173},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},".":{"1":{"docs":{},"异":{"docs":{},"或":{"docs":{},"解":{"docs":{},"决":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282}}}}}},"代":{"docs":{},"码":{"1":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}},"（":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"放":{"docs":{},"到":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"前":{"docs":{},"）":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358}}}}}}}}}},"累":{"docs":{},"加":{"docs":{},"求":{"docs":{},"和":{"docs":{},"）":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406}}}}}}}}},"docs":{}}},"哈":{"docs":{},"希":{"docs":{},"法":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}}}}},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}},"递":{"docs":{},"归":{"docs":{},"版":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}}},"2":{"docs":{},"常":{"docs":{},"规":{"docs":{},"解":{"docs":{},"决":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282}}}}}},"代":{"docs":{},"码":{"2":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}},"（":{"docs":{},"为":{"docs":{},"了":{"docs":{},"保":{"docs":{},"证":{"docs":{},"代":{"docs":{},"码":{"docs":{},"的":{"docs":{},"整":{"docs":{},"齐":{"docs":{},"性":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"简":{"docs":{},"单":{"docs":{},"封":{"docs":{},"装":{"docs":{},"一":{"docs":{},"下":{"docs":{},"）":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358}}}}}}}}}}}}}}}}}}}}}},"异":{"docs":{},"或":{"docs":{},"）":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406}}}}},"用":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"循":{"docs":{},"环":{"docs":{},"）":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}}}}}}}}}}}}},"docs":{}}},"字":{"docs":{},"典":{"docs":{},"法":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}},"跌":{"docs":{},"代":{"docs":{},"版":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}}},"3":{"docs":{},"代":{"docs":{},"码":{"3":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}},"（":{"docs":{},"将":{"docs":{},"整":{"docs":{},"除":{"3":{"docs":{},"的":{"docs":{},"放":{"docs":{},"在":{"docs":{},"前":{"docs":{},"面":{"docs":{},"）":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358}}}}}}}}},"docs":{}}}},"归":{"docs":{},"并":{"docs":{},"的":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"次":{"docs":{},"）":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}}}}}}},"docs":{}}},"字":{"docs":{},"典":{"docs":{},"法":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}}},"4":{"docs":{},"代":{"docs":{},"码":{"4":{"docs":{},"（":{"docs":{},"未":{"docs":{},"完":{"docs":{},"成":{"docs":{},"）":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}}},"docs":{}}},"切":{"docs":{},"片":{"docs":{},"法":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}}},"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}},"代":{"docs":{},"码":{"1":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}},"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}},"i":{"docs":{},"f":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}},"给":{"docs":{},"定":{"docs":{},"一":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"某":{"docs":{},"一":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"中":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"乘":{"docs":{},"以":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"和":{"docs":{},"最":{"docs":{},"大":{"docs":{},"。":{"docs":{},"题":{"docs":{},"目":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"分":{"docs":{},"治":{"docs":{},"法":{"docs":{},"解":{"docs":{},"决":{"docs":{},"非":{"docs":{},"连":{"docs":{},"续":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}}}}},":":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},"/":{"2":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}},"docs":{}},"。":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}},"：":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}},"5":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},",":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"3":{"docs":{},",":{"1":{"1":{"docs":{},"]":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}},"docs":{}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"2":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"1":{"1":{"docs":{},",":{"3":{"docs":{},",":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}},"docs":{}}},"docs":{}},"docs":{}}}}}}}},"docs":{}}},"4":{"docs":{},",":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}},"9":{"docs":{},",":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}},"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.02},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.02631578947368421},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.02849740932642487},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.02849740932642487},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.014218009478672985},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.007009345794392523},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.02631578947368421},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}},"]":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}},")":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}}}},"。":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}},"和":{"docs":{},"等":{"docs":{},"于":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}},"，":{"3":{"docs":{},"）":{"docs":{},"=":{"3":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"docs":{}}}},"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}},"如":{"docs":{},"果":{"docs":{},"全":{"docs":{},"部":{"docs":{},"没":{"docs":{},"有":{"docs":{},"找":{"docs":{},"到":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"相":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"数":{"docs":{},"组":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"就":{"docs":{},"返":{"docs":{},"回":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"）":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"（":{"6":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"docs":{}}}}}},"。":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"买":{"docs":{},"入":{"docs":{},"，":{"docs":{},"在":{"docs":{},"第":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}}}}}},">":{"2":{"2":{"docs":{},":":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}}},"docs":{},":":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}}},"docs":{}},"、":{"docs":{},"判":{"docs":{},"断":{"docs":{},"链":{"docs":{},"表":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"回":{"docs":{},"文":{"docs":{},"链":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856}}}}}}}}}}}},"删":{"docs":{},"除":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}}},"x":{"3":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}},"docs":{}},"+":{"2":{"docs":{},")":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}},"docs":{}},"整":{"docs":{},"个":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"跨":{"docs":{},"越":{"docs":{},"中":{"docs":{},"间":{"docs":{},"边":{"docs":{},"界":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}},"4":{"0":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":3.333333333333333}},")":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}},"1":{"9":{"3":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}},"docs":{}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"2":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":5},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.028037383177570093},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678}},"\"":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}},"3":{"7":{"docs":{},")":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":5}},")":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}},"4":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}},"5":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"6":{"5":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":5}},")":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}},"7":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":2.5}},"）":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}},"8":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"9":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}},"。":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.05},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0213903743315508},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.018518518518518517},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.028985507246376812},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.014388489208633094},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.010416666666666666},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.024390243902439025},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.014218009478672985},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.018518518518518517},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.026490066225165563},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}},".":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}},"中":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"转":{"docs":{},"换":{"docs":{},"成":{"docs":{},"后":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"分":{"docs":{},"析":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"解":{"docs":{},"决":{"docs":{},"非":{"docs":{},"连":{"docs":{},"续":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}},":":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666}}},",":{"1":{"3":{"docs":{},"}":{"docs":{},"，":{"docs":{},"最":{"docs":{},"大":{"docs":{},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"和":{"docs":{},"即":{"docs":{},"为":{"2":{"0":{"docs":{},"。":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},"docs":{}},"docs":{}}}}}}}}}}}}}},"docs":{},",":{"1":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}},"docs":{}}},"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.015},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}},"]":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}},",":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}},"，":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}},">":{"2":{"docs":{},":":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561}}}},"docs":{}},")":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}},":":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"返":{"docs":{},"回":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{},"。":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}}}}}},"。":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}},"*":{"docs":{},"(":{"docs":{},"个":{"docs":{},"数":{"docs":{},")":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}}}}}}},"5":{"0":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"]":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521}}},"。":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}},"1":{"0":{"0":{"docs":{},".":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}},"docs":{}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"2":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"3":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":5},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":3.333333333333333}},")":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}},"4":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"5":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}},"6":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"7":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"8":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"9":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.02456140350877193},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.01904761904761905},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.029850746268656716},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.027777777777777776},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.014388489208633094},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.013888888888888888},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.014492753623188406},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.010416666666666666},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.023809523809523808},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.02702702702702703},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.026490066225165563},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}},")":{"docs":{},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}},".":{"docs":{},"i":{"docs":{},"f":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}},"中":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"转":{"docs":{},"换":{"docs":{},"成":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}},":":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}}},"9":{"docs":{},"]":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.02},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.02631578947368421},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}},"同":{"docs":{},"时":{"docs":{},"没":{"docs":{},"有":{"docs":{},"破":{"docs":{},"坏":{"1":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}}}},"docs":{}}}}}}}},"，":{"3":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}},"docs":{},"返":{"docs":{},"回":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"根":{"docs":{},"据":{"docs":{},"定":{"docs":{},"义":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"节":{"docs":{},"点":{"docs":{},"可":{"docs":{},"以":{"docs":{},"为":{"docs":{},"节":{"docs":{},"点":{"docs":{},"本":{"docs":{},"身":{"docs":{},"。":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}}}}}}}}}}}}}}}}}}}}}},"]":{"docs":{},",":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}},"）":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"卖":{"docs":{},"出":{"docs":{},",":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.013245033112582781}}}}}}}}}},"6":{"0":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"1":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":5}},")":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}},"2":{"8":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":3.352201257861635},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":5.018867924528302}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":5}},")":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}},"3":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"4":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":5},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":5}},")":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}},"5":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"=":{"3":{"8":{"docs":{},"，":{"docs":{},"而":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"具":{"docs":{},"体":{"docs":{},"记":{"docs":{},"录":{"docs":{},"的":{"docs":{},"内":{"docs":{},"容":{"docs":{},"是":{"docs":{},"该":{"docs":{},"字":{"docs":{},"母":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"，":{"docs":{},"最":{"docs":{},"终":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"找":{"docs":{},"出":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"内":{"docs":{},"容":{"docs":{},"为":{"1":{"docs":{},"的":{"docs":{},"字":{"docs":{},"母":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"了":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"]":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085}}},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"g":{"docs":{},"=":{"1":{"0":{"3":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}},"docs":{}},"docs":{}},"docs":{}}}}}}},"6":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"7":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"8":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"9":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.010416666666666666},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.023809523809523808},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}},",":{"5":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009}}},".":{"docs":{},"返":{"docs":{},"回":{"docs":{},"第":{"1":{"docs":{},".":{"docs":{},"步":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"docs":{}}}}},"]":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}},"，":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"负":{"docs":{},"数":{"docs":{},"部":{"docs":{},"分":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}}}}},",":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}},"。":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}},"注":{"docs":{},"意":{"docs":{},"答":{"docs":{},"案":{"docs":{},"不":{"docs":{},"应":{"docs":{},"该":{"docs":{},"是":{"1":{"1":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"岛":{"docs":{},"屿":{"docs":{},"只":{"docs":{},"能":{"docs":{},"包":{"docs":{},"含":{"docs":{},"水":{"docs":{},"平":{"docs":{},"或":{"docs":{},"垂":{"docs":{},"直":{"docs":{},"的":{"docs":{},"四":{"docs":{},"个":{"docs":{},"方":{"docs":{},"向":{"docs":{},"的":{"docs":{},"‘":{"1":{"docs":{},"’":{"docs":{},"。":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}},")":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}},",":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}},"）":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"卖":{"docs":{},"出":{"docs":{},"，":{"docs":{},"最":{"docs":{},"大":{"docs":{},"利":{"docs":{},"润":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009}}}}}}},",":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}}}}},"7":{"0":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"1":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"2":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"3":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"4":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":5}},")":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}},"5":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"6":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"7":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":5}},")":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}},"8":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":5},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}},")":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}},"9":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":2.5}},")":{"docs":{},"(":{"docs":{},"经":{"docs":{},"典":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"，":{"docs":{},"深":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":3.333333333333333},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.023809523809523808},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421}},")":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.013392857142857142}}},",":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.007009345794392523},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}},".":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}},"，":{"8":{"docs":{},"）":{"docs":{},"=":{"8":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"docs":{}}}},"docs":{}},"]":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}},",":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}},"。":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}}}},"条":{"docs":{"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903}}}},"8":{"0":{"7":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"1":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":3.333333333333333}},")":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}},"2":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":2.5}},")":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}}}},"3":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":3.333333333333333}},")":{"docs":{"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421}}}},"4":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"5":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"6":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"7":{"6":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":3.333333333333333}},")":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"8":{"7":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":5}},")":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"9":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},")":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.016129032258064516},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.02097902097902098},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.03571428571428571},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}},",":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}},"]":{"docs":{},",":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}},"9":{"0":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":3.333333333333333}},"，":{"docs":{},"a":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}}},"个":{"docs":{},"数":{"3":{"1":{"docs":{},"个":{"1":{"docs":{},"，":{"3":{"1":{"docs":{},"个":{"2":{"docs":{},"，":{"docs":{},"其":{"docs":{},"余":{"docs":{},"数":{"docs":{},"字":{"docs":{},"随":{"docs":{},"便":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"接":{"docs":{},"近":{"docs":{},"边":{"docs":{},"界":{"docs":{},"时":{"docs":{},"，":{"docs":{},"最":{"docs":{},"多":{"docs":{},"才":{"docs":{},"两":{"docs":{},"个":{"docs":{},"满":{"docs":{},"足":{"docs":{},"条":{"docs":{},"件":{"docs":{},"：":{"1":{"docs":{},"，":{"2":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},")":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}},"1":{"2":{"8":{"3":{"4":{"7":{"2":{"3":{"3":{"2":{"docs":{},"\"":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.018691588785046728}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"2":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"3":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"4":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"5":{"3":{"4":{"3":{"3":{"0":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"6":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"不":{"docs":{},"是":{"docs":{},"字":{"docs":{},"母":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}}}}}},"7":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"]":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}},"8":{"7":{"docs":{},"\"":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"9":{"9":{"9":{"docs":{},",":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}},"]":{"docs":{},"之":{"docs":{},"间":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}},"docs":{}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"就":{"docs":{},"是":{"docs":{},"上":{"docs":{},"面":{"docs":{},"的":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"情":{"docs":{},"况":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}}}}}}}}}},"的":{"docs":{},"糖":{"docs":{},"果":{"docs":{},"数":{"docs":{},"应":{"docs":{},"该":{"docs":{},"为":{"8":{"docs":{},"的":{"docs":{},"糖":{"docs":{},"果":{"docs":{},"数":{"docs":{},"+":{"1":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}},"docs":{}}}}}}},"docs":{}}}}}}}},"%":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":5},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.023809523809523808},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}},",":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}},":":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"。":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}},".":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.018518518518518517}}},")":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}},"，":{"docs":{},"接":{"docs":{},"着":{"docs":{},"偷":{"docs":{},"窃":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}}}}}},"]":{"docs":{},",":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}}}},"docs":{},"c":{"1":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}},"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.025}},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.07692307692307693},"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/":{"ref":"数字运算/","tf":0.08333333333333333},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"栈/":{"ref":"栈/","tf":0.08333333333333333},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/":{"ref":"双指针/","tf":0.08333333333333333},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/":{"ref":"二分/","tf":0.08333333333333333},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"三数/":{"ref":"三数/","tf":0.08333333333333333},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/":{"ref":"区间搜索/","tf":0.08333333333333333},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/":{"ref":"单调栈/","tf":0.08333333333333333},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/":{"ref":"字符串/","tf":0.08333333333333333},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"数组/":{"ref":"数组/","tf":0.08333333333333333},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.05555555555555555},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666},"矩阵/":{"ref":"矩阵/","tf":0.08333333333333333},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/":{"ref":"链表/","tf":0.08333333333333333},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082},"二叉树/":{"ref":"二叉树/","tf":0.08333333333333333},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/":{"ref":"动态规划/","tf":0.08333333333333333},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/":{"ref":"逻辑思维/","tf":0.08333333333333333},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"回溯/":{"ref":"回溯/","tf":0.08333333333333333},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333},"深度搜索/":{"ref":"深度搜索/","tf":0.08333333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218},"堆排序/":{"ref":"堆排序/","tf":0.08333333333333333},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}},"i":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.029850746268656716},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}},"d":{"docs":{},"e":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.03278688524590164},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.029411764705882353}},"\"":{"docs":{},"。":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}},"u":{"docs":{},"t":{"docs":{},"f":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}}}}}}}}},"l":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}},"o":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.008771929824561403}},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"2":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}}}}}},"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.01680672268907563}},":":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"s":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.009478672985781991},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.01818181818181818},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.018604651162790697}},"e":{"docs":{},";":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"\"":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.009216589861751152}}}}}},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.027972027972027972},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.031496062992125984},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.016042780748663103},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.018433179723502304},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.018867924528301886},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.025},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.07894736842105263}},"e":{"docs":{},"r":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.034482758620689655}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827}},".":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"模":{"docs":{},"块":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077}}}}}}}}}}}}},")":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}},"+":{"docs":{},"=":{"1":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}},"docs":{}}},"=":{"0":{"docs":{},";":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762}}}},"docs":{}}}}},"i":{"docs":{},"n":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.013636363636363636}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.013636363636363636}}}}}}}}}}}}}},"s":{"docs":{},",":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}},":":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.01818181818181818}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}},",":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}},">":{"docs":{},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},":":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}},"h":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}},"a":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094}},"r":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.0219435736677116}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}},"[":{"docs":{},"]":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.008982035928143712},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.013452914798206279},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.014084507042253521},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.01694915254237288},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.01},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.03296703296703297},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.015544041450777202},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.012345679012345678},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.014492753623188406},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.015544041450777202},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.009404388714733543},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.02564102564102564},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.02564102564102564},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.01},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.009216589861751152},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.018518518518518517},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.007518796992481203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.03278688524590164},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.014492753623188406},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.017391304347826087},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.023809523809523808},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.009202453987730062},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.014218009478672985},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.013636363636363636},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.007009345794392523},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182},"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.022988505747126436},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.0196078431372549},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}}}}},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862}}}}}}}}}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}},"e":{"docs":{},"n":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285}}}}},"u":{"docs":{},"r":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.011976047904191617},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.01775147928994083},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.01775147928994083},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.024291497975708502},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0213903743315508},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.03007518796992481},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.036231884057971016},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.019417475728155338},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.06936416184971098},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.013157894736842105},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.025},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.010416666666666666},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.019801980198019802},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.019417475728155338},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.020958083832335328},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.03643724696356275},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0106951871657754},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.015037593984962405},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.014492753623188406},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.019417475728155338},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.07514450867052024},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.019801980198019802},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.019417475728155338}},":":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.017341040462427744}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.017341040462427744}},":":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.015625}},":":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.022988505747126436}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.015625}}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.022988505747126436}}}}}}}}},"r":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.03225806451612903},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.06666666666666667}}},":":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.017341040462427744},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}}}},"a":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.041379310344827586},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.05238095238095238},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.0625}},",":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.020689655172413793},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.014285714285714285},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.017045454545454544}}},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}},"d":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}}}}}}}}},"i":{"docs":{},"d":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.03614457831325301},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.049019607843137254},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.012048192771084338},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}},"[":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368}}}}}},".":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.012048192771084338},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}},"r":{"docs":{},"\"":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}},"l":{"docs":{},"l":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}},"b":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.05517241379310345},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.0380952380952381},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.045454545454545456}},",":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}},"s":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852}},",":{"1":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}},"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}},":":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852}}}},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"，":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"到":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}},"时":{"docs":{},"，":{"docs":{},"会":{"docs":{},"计":{"docs":{},"算":{"docs":{},"c":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}},",":{"docs":{},"则":{"docs":{},"可":{"docs":{},"以":{"docs":{},"构":{"docs":{},"成":{"docs":{},"三":{"docs":{},"角":{"docs":{},"形":{"docs":{},"，":{"docs":{},"`":{"docs":{},"a":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856}}}}}}}}}}}}}},"，":{"docs":{},"则":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856}}}},":":{"docs":{"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.029850746268656716}}},"。":{"docs":{"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358}}},"n":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}}}},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}},")":{"docs":{},":":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285}}}},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.02857142857142857}},",":{"docs":{},"请":{"docs":{},"计":{"docs":{},"算":{"docs":{},"最":{"docs":{},"小":{"docs":{},"三":{"docs":{},"元":{"docs":{},"组":{"docs":{},"距":{"docs":{},"离":{"docs":{},"。":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285}}}}}}}}}}}}}}},",":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.04285714285714286}}}}}}},"+":{"docs":{},"+":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},"代":{"docs":{},"码":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"t":{"docs":{},"o":{"docs":{},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{},"该":{"docs":{},"文":{"docs":{},"件":{"docs":{},"修":{"docs":{},"订":{"docs":{},"时":{"docs":{},"间":{"docs":{},"：":{"docs":{"./":{"ref":"./","tf":0.07692307692307693},"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/":{"ref":"数字运算/","tf":0.08333333333333333},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"栈/":{"ref":"栈/","tf":0.08333333333333333},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/":{"ref":"双指针/","tf":0.08333333333333333},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/":{"ref":"二分/","tf":0.08333333333333333},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"三数/":{"ref":"三数/","tf":0.08333333333333333},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/":{"ref":"区间搜索/","tf":0.08333333333333333},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/":{"ref":"单调栈/","tf":0.08333333333333333},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/":{"ref":"字符串/","tf":0.08333333333333333},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"数组/":{"ref":"数组/","tf":0.08333333333333333},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.05555555555555555},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666},"矩阵/":{"ref":"矩阵/","tf":0.08333333333333333},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/":{"ref":"链表/","tf":0.08333333333333333},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082},"二叉树/":{"ref":"二叉树/","tf":0.08333333333333333},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/":{"ref":"动态规划/","tf":0.08333333333333333},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/":{"ref":"逻辑思维/","tf":0.08333333333333333},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"回溯/":{"ref":"回溯/","tf":0.08333333333333333},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333},"深度搜索/":{"ref":"深度搜索/","tf":0.08333333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218},"堆排序/":{"ref":"堆排序/","tf":0.08333333333333333},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028}}}}}},"e":{"docs":{},"t":{"2":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827}},":":{"docs":{"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827}}}}}}}}}}}}},"docs":{},"_":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},",":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.012145748987854251}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.0196078431372549}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":5.032258064516129}}}}},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},"y":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}}}}}}}}}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}}}}}},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}},"i":{"docs":{},"d":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.017985611510791366},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.015772870662460567},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}},")":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.034722222222222224}},":":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.017985611510791366},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.012618296529968454},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.013888888888888888}}}},"[":{"0":{"docs":{},"]":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}},":":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.017985611510791366},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.015772870662460567}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}},";":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}},"docs":{},"j":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}},"]":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.017985611510791366},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.012618296529968454}}}},"i":{"docs":{},"]":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}},"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227}},"i":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.019417475728155338}},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.017985611510791366},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.015772870662460567}}}},"docs":{},"j":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.01079136690647482},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.00946372239747634},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.019417475728155338}},"]":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.03237410071942446},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.028391167192429023},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.013888888888888888}},"*":{"4":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}},"docs":{}},":":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}},"=":{"docs":{},"=":{"docs":{},"'":{"0":{"docs":{},"'":{"docs":{},":":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}},"docs":{}}}},"!":{"docs":{},"=":{"1":{"docs":{},":":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}},"docs":{}}}}}}},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}}}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}},":":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}},"w":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}},"l":{"docs":{},"o":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.05263157894736842}}}}}}}},"i":{"docs":{},"n":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541}},"t":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.022099447513812154},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.04375},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.016666666666666666},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0182648401826484},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.022099447513812154},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.014285714285714285},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.012861736334405145},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.012861736334405145},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.07692307692307693}}}}}}}},"e":{"docs":{},"g":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0043859649122807015}}},"r":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}},"v":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},":":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"v":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}},"n":{"docs":{},"t":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}},")":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.014150943396226415},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.012269938650306749},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.013636363636363636},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}},":":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.012345679012345678},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.015544041450777202},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.009876543209876543},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.014492753623188406},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.015544041450777202},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.021897810218978103},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.012269938650306749},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.013636363636363636},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"_":{"docs":{},"x":{"docs":{},")":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.023529411764705882}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"输":{"docs":{},"入":{"docs":{},"数":{"docs":{},"字":{"docs":{},"：":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}}}}}}}}}}},"a":{"docs":{},",":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}}},"b":{"docs":{},",":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}}},"r":{"docs":{},")":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"+":{"docs":{},"j":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}},"docs":{}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"1":{"docs":{},"[":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905}}}}}}},"2":{"docs":{},"[":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}},"j":{"docs":{},"]":{"docs":{},")":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905}}}}}}},"docs":{}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},".":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"m":{"docs":{},"+":{"docs":{},"n":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.012269938650306749},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}}},"[":{"docs":{},"]":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}},"[":{"docs":{},"]":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0182648401826484},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}},"n":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242}}}}}}}},"m":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}},";":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"_":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},")":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}},":":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.027777777777777776}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028}}}}}}}},",":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}},"=":{"docs":{},"=":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}},">":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}},"d":{"docs":{},"e":{"docs":{},"x":{"1":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.014634146341463415},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.01875}}},"2":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}},"。":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}},"）":{"docs":{},"不":{"docs":{},"是":{"docs":{},"从":{"docs":{},"零":{"docs":{},"开":{"docs":{},"始":{"docs":{},"的":{"docs":{},"。":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}}}}}}}},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}}},"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.025974025974025976},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.018691588785046728},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.06756756756756757},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.031446540880503145},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.03508771929824561},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.02304147465437788},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.012861736334405145},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.012861736334405145}},",":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}}}}}},"+":{"1":{"docs":{},",":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}},"docs":{}}},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}}}}}}}}}}}}}}}},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516}},"]":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}},"#":{"docs":{},"包":{"docs":{},"含":{"docs":{},"右":{"docs":{},"边":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"序":{"docs":{},"列":{"docs":{},"和":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}}}}}}}},"\"":{"docs":{},")":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.014018691588785047}},":":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}},"p":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}},"=":{"docs":{},"=":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}},"a":{"docs":{},"f":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},",":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.02}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.014084507042253521}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.021164021164021163},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.03125},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},")":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}},"p":{"docs":{},"h":{"docs":{},"a":{"docs":{},"(":{"docs":{},")":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"1":{"docs":{},",":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.01680672268907563}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}}}}},"docs":{}}}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"x":{"docs":{},",":{"docs":{},"i":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}},"i":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.016666666666666666},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":2.5},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":3.3397435897435894},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":3.338211382113821},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":3.339583333333333},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":3.3397435897435894},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":2.5},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":5.0131578947368425},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":2.5},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}},"i":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":5.009090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":5.009090909090909},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":3.333333333333333}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}}}}}}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}},"e":{"9":{"4":{"0":{"docs":{},"困":{"docs":{},"难":{"docs":{},")":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}},"docs":{}},"docs":{}},"docs":{},"_":{"1":{"5":{"4":{"docs":{},")":{"docs":{"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358}}}},"docs":{}},"docs":{}},"2":{"1":{"3":{"docs":{},")":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}},"docs":{}},"docs":{}},"6":{"3":{"docs":{},")":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}},"docs":{}},"9":{"2":{"docs":{},")":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":3.333333333333333},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":3.333333333333333},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":3.333333333333333},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":3.333333333333333},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":3.333333333333333},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":3.333333333333333},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":3.333333333333333},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":3.333333333333333},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":3.333333333333333}}}}}}}}}},"（":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"g":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.08955223880597014},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}}}}}}},"p":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}},"f":{"docs":{},"(":{"docs":{},"n":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}}}}},"=":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}},"+":{"docs":{},"+":{"docs":{},"l":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}},",":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.027777777777777776},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}},"k":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428}},"e":{"docs":{},"y":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}}},":":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"+":{"docs":{},"=":{"1":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}},"docs":{}}}}}}}}},">":{"0":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}},":":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}},"1":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}},"docs":{},">":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"&":{"1":{"docs":{},"=":{"docs":{},"=":{"1":{"docs":{},":":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}},"docs":{}}}},"docs":{}}}}}}}},"=":{"0":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}},"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}}}}},"=":{"0":{"docs":{},";":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"/":{"2":{"docs":{},")":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762}}}},"docs":{}}}}}}}}}}}}}}}}}}},"1":{"docs":{},"：":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},"2":{"docs":{},"：":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},"3":{"docs":{},"：":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},"4":{"docs":{},"：":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},"docs":{},"=":{"0":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}},"1":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576}}},"docs":{},"'":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}},"*":{"docs":{},"'":{"docs":{},":":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"+":{"docs":{},"'":{"docs":{},":":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"/":{"docs":{},"'":{"docs":{},":":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}},"k":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}}}}}},"n":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"拼":{"docs":{},"接":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}}}},"+":{"1":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}},",":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.01639344262295082},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}}}}}}}}},"docs":{}},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},")":{"docs":{},":":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616}}}},",":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.038461538461538464}}},":":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.028846153846153848}}}}}},")":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.0196078431372549}},":":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}},")":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834}},")":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}},",":{"docs":{},"(":{"docs":{},"j":{"docs":{},",":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}},"!":{"docs":{},"=":{"docs":{},"'":{"docs":{},".":{"docs":{},"'":{"docs":{},":":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}},"j":{"docs":{"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}},"[":{"0":{"docs":{},"]":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}},"docs":{}},"]":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282}},")":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}},"*":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},",":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}}}}},"l":{"1":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.041666666666666664},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.038834951456310676},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.039603960396039604},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.038834951456310676}},",":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.020833333333333332}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}}}}},":":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.034722222222222224}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}}}}}}}},";":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}}},"2":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.034722222222222224},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.038834951456310676},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.039603960396039604},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.038834951456310676}},")":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}},":":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}},":":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.04861111111111111}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}}}}}}}},";":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}}}}}},"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":2.5},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":3.333333333333333},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":3.352201257861635},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":2.5},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":3.333333333333333},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":3.333333333333333},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":3.342592592592592},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":3.333333333333333},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":2.5},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":3.333333333333333},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":3.333333333333333},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":3.333333333333333},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":3.333333333333333},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":3.333333333333333},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":2.5},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.046511627906976744},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":2.5},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":2.5},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":2.5}},"e":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"（":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"）":{"docs":{"./":{"ref":"./","tf":0.07692307692307693}}}}}}}}}},"优":{"docs":{},"先":{"docs":{},"顺":{"docs":{},"序":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}},"顺":{"docs":{},"序":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":10}}}}}},"_":{"2":{"0":{"0":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":5.010526315789473}}},"docs":{}},"docs":{}},"4":{"3":{"7":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":3.333333333333333}}},"docs":{}},"docs":{}},"docs":{}},"原":{"docs":{},"题":{"docs":{},"：":{"1":{"6":{"9":{"docs":{},".":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}},"docs":{}},"docs":{}},"2":{"2":{"9":{"docs":{},".":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"f":{"docs":{},"t":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.05970149253731343},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.02},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.028846153846153848},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.024691358024691357},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.016129032258064516},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.05454545454545454},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.012987012987012988},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.014634146341463415},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.01875},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.033816425120772944},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.024691358024691357},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.03225806451612903},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.01680672268907563},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.02},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.023255813953488372}},",":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.04477611940298507},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.02},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.04807692307692308},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.030864197530864196},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.012987012987012988},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.02},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.029411764705882353}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}}}}}}},"l":{"docs":{},"i":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}}}}}},">":{"1":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}},"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}},"=":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},":":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}}}}}}}}},"*":{"docs":{},"*":{"2":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"docs":{}}},".":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"[":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}}},"[":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.012345679012345678},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"]":{"docs":{},">":{"docs":{},"=":{"docs":{},"h":{"docs":{},":":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.009876543209876543}}}}}}}}}},"i":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}},"]":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}}},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}},"i":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.012345679012345678},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.025423728813559324},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}},"；":{"docs":{},"向":{"docs":{},"右":{"docs":{},"找":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"小":{"docs":{},"于":{"docs":{},"于":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}},"？":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}},"s":{"docs":{},":":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}}}}}},")":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}},"+":{"1":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}},"docs":{}},":":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}},":":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}},"n":{"1":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}},"2":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}},"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421}}}}}},")":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}}},"s":{"1":{"docs":{},")":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}}},"2":{"docs":{},")":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}}},"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}},"r":{"docs":{},"s":{"docs":{},")":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.027777777777777776}}}}}},")":{"0":{"docs":{},":":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}}},"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.026455026455026454},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.01818181818181818},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.01818181818181818},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.011111111111111112},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666}},":":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},")":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},")":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}},"=":{"docs":{},"=":{"0":{"docs":{},":":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}},"docs":{}}}}}}}}}},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"h":{"docs":{},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"h":{"docs":{},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}},">":{"docs":{},"k":{"docs":{},":":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"1":{"docs":{},")":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}},"2":{"docs":{},")":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}},"docs":{}}}},"docs":{},"s":{"1":{"docs":{},")":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425}}}},"docs":{},")":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.018518518518518517},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.01948051948051948},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.02247191011235955},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.017699115044247787},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.023622047244094488},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.017391304347826087},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.05555555555555555},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.017391304347826087},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.014218009478672985},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.018518518518518517},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}},"/":{"docs":{},"/":{"2":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}},"3":{"docs":{},":":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364}}}},"docs":{}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}}}}}}},")":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.013953488372093023}},":":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.01639344262295082}}}},",":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}}}}}},"e":{"docs":{},"w":{"docs":{},"_":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}}}}}}}},"a":{"docs":{},")":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.015},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.018867924528301886},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414}},")":{"docs":{},":":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}},"r":{"docs":{},"r":{"docs":{},")":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}},"a":{"docs":{},"y":{"docs":{},")":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}}}}}},"b":{"docs":{},")":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414}},":":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.018867924528301886}}},"|":{"docs":{},"步":{"docs":{},",":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}}}}},"docs":{}}}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}},":":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},")":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}}}}}}}}}},"c":{"docs":{},")":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.018134715025906734},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.018134715025906734},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}},"s":{"docs":{},")":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.009876543209876543}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},")":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.0125},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}},",":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.014492753623188406},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152}}}}},"docs":{}}}}}}}}}}}}},"=":{"docs":{},"=":{"0":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152}}},"docs":{}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.02112676056338028},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}},"docs":{}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"1":{"docs":{},")":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}},",":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}},"2":{"docs":{},")":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}},"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},":":{"docs":{},"i":{"docs":{},"]":{"docs":{},":":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}},"]":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}}},"x":{"docs":{},")":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}},"+":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.017985611510791366},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.015772870662460567},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.017985611510791366},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.015772870662460567},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}},"docs":{}}}}},"w":{"docs":{},")":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}},"o":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}},"+":{"1":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576}}},"docs":{}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}},"+":{"1":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576}}},"docs":{}}}}},"docs":{}}}}}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},")":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}},"p":{"docs":{},")":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}},"=":{"docs":{},"=":{"0":{"docs":{},":":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}},"docs":{}}}}}}}}}}},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.018691588785046728},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.014218009478672985}}}}}}}}}}}}},",":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}},"x":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}}}},":":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}},")":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.018604651162790697}},":":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.018604651162790697}}}}}}},"_":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}},"s":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}}}}}}},"a":{"docs":{},"f":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405}}}}}}}},"b":{"docs":{},"o":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}},":":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}},"s":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"d":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}}}}}}}},"i":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.01},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.031746031746031744},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.02631578947368421}},"n":{"docs":{},"k":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.014035087719298246},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}},"s":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.021052631578947368},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}},".":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}},")":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.012345679012345678},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.015544041450777202},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.009876543209876543},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.015544041450777202},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.017391304347826087},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.018604651162790697}}},":":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471}}},",":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.011834319526627219},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.011834319526627219},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.013636363636363636},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}},")":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834}}}}}}}},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{},"]":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},")":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.014492753623188406},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},"]":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}},")":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}},":":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.018604651162790697},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}},",":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408}},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}},":":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.016129032258064516},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.020833333333333332},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.009433962264150943},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.019736842105263157},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.025}},"e":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.013888888888888888},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.009433962264150943},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}},"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}},"v":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},")":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.011560693641618497}}}}}}}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.01},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.020833333333333332},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.018796992481203006},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.014150943396226415},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}},")":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.020833333333333332},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.018796992481203006},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}},",":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.020833333333333332},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.014150943396226415}}}}}}},"s":{"docs":{},")":{"docs":{},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.016194331983805668}}},"[":{"0":{"docs":{},"]":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}},"docs":{}}},"(":{"docs":{},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}},"s":{"docs":{},")":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"1":{"0":{"docs":{},")":{"docs":{},")":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}}},"docs":{}},"docs":{}}}}}},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},",":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"1":{"docs":{},")":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}},"2":{"docs":{},")":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}},"docs":{}}}},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}},"a":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.012145748987854251}}},"b":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.012145748987854251}}}}},"[":{"docs":{},":":{"docs":{},"]":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}},"k":{"docs":{},"]":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.01},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}},"docs":{}},":":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}},":":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.01},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}}}}}}}},"j":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},":":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856}}}}},"docs":{}}},"i":{"docs":{},"]":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.04186046511627907}},">":{"docs":{},"r":{"2":{"docs":{},":":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}},"docs":{}}},",":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.037209302325581395}}}}},"k":{"docs":{},":":{"docs":{},"]":{"docs":{},":":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}},"i":{"docs":{},"]":{"docs":{},":":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}}},"]":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.037209302325581395}},",":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.037209302325581395}}}}}},".":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}},"docs":{}}}}}},",":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}},"t":{"docs":{},"e":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}},")":{"docs":{},":":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}},":":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.014354066985645933},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0043859649122807015}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.01694915254237288}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.037037037037037035},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}},">":{"docs":{},"=":{"0":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.012345679012345678}}},"docs":{}}},",":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748}}}}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}},",":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}},";":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0136986301369863}}},"=":{"0":{"docs":{},",":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}},"docs":{}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},",":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}}}}}},"r":{"1":{"docs":{},":":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}},"r":{"3":{"docs":{},"=":{"docs":{},"r":{"2":{"docs":{},",":{"docs":{},"r":{"2":{"docs":{},"=":{"docs":{},"r":{"1":{"docs":{},",":{"docs":{},"r":{"1":{"docs":{},"=":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}}}}},"docs":{}}}},"docs":{}}}},"docs":{}}}},"docs":{}}}},"docs":{}}}},"2":{"docs":{},",":{"docs":{},"l":{"docs":{},"i":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}}}}},"r":{"1":{"docs":{},",":{"docs":{},"l":{"docs":{},"i":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}}}}}}},"docs":{}}}},"3":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}},",":{"docs":{},"r":{"2":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}},",":{"docs":{},"r":{"1":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}},"docs":{}}}},"docs":{}}}},"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.016666666666666666},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242}},"e":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.021739130434782608},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.053811659192825115},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.034782608695652174},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.06896551724137931},"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.05263157894736842},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.03896103896103896},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.02824858757062147},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.01},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.03571428571428571},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.031914893617021274},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.04404145077720207},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.03125},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.02962962962962963},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.05555555555555555},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.018115942028985508},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.04404145077720207},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.01485148514851485},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.06944444444444445},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.024875621890547265},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.045454545454545456},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.06060606060606061},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.08620689655172414},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.02040816326530612},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.034782608695652174},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.02158273381294964},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.045454545454545456},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.03278688524590164},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.041666666666666664},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.016666666666666666},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.022556390977443608},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.039473684210526314},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.022988505747126436},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.046296296296296294},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.043010752688172046},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.027649769585253458},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.03636363636363636},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.014018691588785047},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.021897810218978103},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.021897810218978103},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.013245033112582781},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.02112676056338028},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.06923076923076923},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.04854368932038835},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.031578947368421054},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.020833333333333332},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.024793388429752067},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"e":{"docs":{},"d":{"docs":{},"，":{"docs":{},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{"./":{"ref":"./","tf":0.07692307692307693},"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/":{"ref":"数字运算/","tf":0.08333333333333333},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"栈/":{"ref":"栈/","tf":0.08333333333333333},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/":{"ref":"双指针/","tf":0.08333333333333333},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/":{"ref":"二分/","tf":0.08333333333333333},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"三数/":{"ref":"三数/","tf":0.08333333333333333},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/":{"ref":"区间搜索/","tf":0.08333333333333333},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/":{"ref":"单调栈/","tf":0.08333333333333333},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/":{"ref":"字符串/","tf":0.08333333333333333},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"数组/":{"ref":"数组/","tf":0.08333333333333333},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.05555555555555555},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666},"矩阵/":{"ref":"矩阵/","tf":0.08333333333333333},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/":{"ref":"链表/","tf":0.08333333333333333},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082},"二叉树/":{"ref":"二叉树/","tf":0.08333333333333333},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/":{"ref":"动态规划/","tf":0.08333333333333333},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/":{"ref":"逻辑思维/","tf":0.08333333333333333},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"回溯/":{"ref":"回溯/","tf":0.08333333333333333},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333},"深度搜索/":{"ref":"深度搜索/","tf":0.08333333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218},"堆排序/":{"ref":"堆排序/","tf":0.08333333333333333},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.029850746268656716}}}}}}}}}}}}}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}},"a":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"*":{"docs":{},"b":{"docs":{},"[":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}}},"i":{"docs":{},"^":{"docs":{},"(":{"docs":{},"i":{"docs":{},">":{"docs":{},">":{"1":{"docs":{},")":{"docs":{},")":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}},"docs":{}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"*":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}},".":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{},"g":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},"k":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"_":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}}}},"m":{"docs":{},"p":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}}}}}}}}}},"'":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}},")":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}},"docs":{}}}}}}}}}}}}}}}}},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"docs":{},"d":{"docs":{},"]":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}}},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105}}}},"docs":{}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}}}}}}}},"=":{"0":{"docs":{},",":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}},"6":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"docs":{},"[":{"docs":{},"]":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"（":{"docs":{},"f":{"docs":{},"（":{"1":{"docs":{},"）":{"docs":{},"，":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"）":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"（":{"3":{"docs":{},"，":{"6":{"docs":{},"）":{"docs":{},"=":{"6":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"docs":{}}}},"docs":{}}},"docs":{}}}}}}}}}}}}},"2":{"docs":{},"）":{"docs":{},"，":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"）":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"（":{"1":{"docs":{},"，":{"6":{"docs":{},"）":{"docs":{},"=":{"6":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"docs":{}}}},"docs":{}}},"8":{"docs":{},"，":{"6":{"docs":{},"）":{"docs":{},"=":{"8":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"docs":{}}}},"docs":{}}},"docs":{}}}}}}}}}}}}},"4":{"docs":{},"）":{"docs":{},"，":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"）":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"（":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}},"docs":{}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"，":{"docs":{},"f":{"docs":{},"（":{"docs":{},"i":{"docs":{},"）":{"docs":{},"）":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"e":{"docs":{},"i":{"docs":{},"p":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666}}}}}}}}}}}}}}}}}}}}}}},"+":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"+":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}}}}}}}},"[":{"docs":{},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}},"docs":{}}}}}}}}},"&":{"1":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}},"docs":{}},":":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}},"[":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.02459016393442623}},"~":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"]":{"docs":{},")":{"docs":{},"/":{"2":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}},"docs":{}}}}}}}}}}}},"i":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}},"+":{"docs":{},"j":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.014925373134328358}}}},"docs":{}},"]":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.014925373134328358}}}}},"]":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.017391304347826087}},"!":{"docs":{},"=":{"docs":{},"'":{"0":{"docs":{},"'":{"docs":{},":":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}},"docs":{}}}},"*":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}}}}}},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}}}}}}}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.0425531914893617}}}}}}},"d":{"docs":{},"]":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}},"_":{"1":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}},"2":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}},"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.023622047244094488}},":":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992}}}}},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}}}}}}}}}}},"docs":{}}}}}}}}},")":{"docs":{"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105}}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.02702702702702703},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.03125},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}},")":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.01639344262295082}}},"]":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"对":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"为":{"docs":{},"什":{"docs":{},"么":{"docs":{},"？":{"docs":{},"为":{"docs":{},"了":{"docs":{},"避":{"docs":{},"免":{"docs":{},"出":{"docs":{},"现":{"docs":{},"这":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}},"加":{"1":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"统":{"docs":{},"计":{"docs":{},"结":{"docs":{},"果":{"docs":{},"看":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}}}}}}}}}},"docs":{}},")":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.03225806451612903},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}},")":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}},":":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}}}},"：":{"docs":{},"所":{"docs":{},"有":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"和":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}},";":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}},"*":{"docs":{},"r":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152}}}},"]":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}},"t":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.05688622754491018},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.038461538461538464},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.027972027972027972},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.03529411764705882},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.028169014084507043},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.022598870056497175},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.045},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.04395604395604396},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.08653846153846154},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.04419889502762431},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.02127659574468085},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.03546099290780142},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.07894736842105263},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.06790123456790123},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.04838709677419355},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.03636363636363636},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.015544041450777202},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.01728395061728395},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.014492753623188406},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.015544041450777202},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.031746031746031744},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.03761755485893417},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.04455445544554455},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.05555555555555555},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.07547169811320754},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.024875621890547265},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.02727272727272727},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.05172413793103448},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.015151515151515152},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.05319148936170213},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.032467532467532464},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.03932584269662921},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.022123893805309734},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.06299212598425197},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.04477611940298507},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.03125},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.017391304347826087},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.05128205128205128},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.01951219512195122},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.02727272727272727},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.024096385542168676},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.01875},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.017985611510791366},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.024096385542168676},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.025},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.05128205128205128},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.022222222222222223},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.02},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.027777777777777776},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.032388663967611336},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0106951871657754},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.043859649122807015},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.05069124423963134},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.024291497975708502},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.03383458646616541},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.014150943396226415},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.026785714285714284},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.03468208092485549},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.02631578947368421},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.03278688524590164},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.072992700729927},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.03007518796992481},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.02631578947368421},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.022988505747126436},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.059322033898305086},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.02877697841726619},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.046296296296296294},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.043478260869565216},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.02040816326530612},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.017391304347826087},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.037037037037037035},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.03225806451612903},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.05042016806722689},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.06896551724137931},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.027777777777777776},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.04419889502762431},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.036458333333333336},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.05263157894736842},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.02},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.055944055944055944},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.043010752688172046},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.023809523809523808},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.04878048780487805},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.024539877300613498},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.03409090909090909},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.018518518518518517},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.02962962962962963},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.013824884792626729},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.014218009478672985},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.01892744479495268},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.01818181818181818},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.018072289156626505},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.046296296296296294},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.011682242990654205},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.02531645569620253},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.03278688524590164},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.017857142857142856},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.04827586206896552},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.02702702702702703},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.013245033112582781},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.014285714285714285},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.047619047619047616},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.023668639053254437},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.02459016393442623},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.03125},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.03614457831325301},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.042105263157894736},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.029411764705882353},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.027906976744186046},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.05466237942122187},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.023668639053254437},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.075},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.015151515151515152},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.031578947368421054},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.05466237942122187},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.013888888888888888},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.022988505747126436},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.031746031746031744},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.029411764705882353},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.032432432432432434}},"[":{"docs":{},"m":{"docs":{},"[":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}}}}}}}}}}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}}}}}},"c":{"docs":{},"o":{"docs":{},"v":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}}}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.010526315789473684}}}}}},"d":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}},"u":{"docs":{},"c":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}}}}}},"g":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.005263157894736842}},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353}}}}}}}}}}}}}}}}}},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.018867924528301886}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421}},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941}}}}}}}},"v":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.01818181818181818},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.01818181818181818}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.018796992481203006}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}}}}}}}}}}},"k":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125}}}}}}}}}}}}}},"=":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.07692307692307693},"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421},"数字运算/":{"ref":"数字运算/","tf":0.08333333333333333},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"栈/":{"ref":"栈/","tf":0.08333333333333333},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/":{"ref":"双指针/","tf":0.08333333333333333},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.029850746268656716},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.04},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.02197802197802198},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.03571428571428571},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.03076923076923077},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.029850746268656716},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/":{"ref":"二分/","tf":0.08333333333333333},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.04807692307692308},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.03225806451612903},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.06666666666666667},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.039473684210526314},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.018518518518518517},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.02158273381294964},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.029411764705882353},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.03225806451612903},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.05454545454545454},"三数/":{"ref":"三数/","tf":0.08333333333333333},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/":{"ref":"区间搜索/","tf":0.08333333333333333},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.010362694300518135},"单调栈/":{"ref":"单调栈/","tf":0.08333333333333333},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.010362694300518135},"字符串/":{"ref":"字符串/","tf":0.08333333333333333},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"数组/":{"ref":"数组/","tf":0.08333333333333333},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.012987012987012988},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.029850746268656716},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.043478260869565216},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.01951219512195122},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.03614457831325301},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.05555555555555555},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666},"矩阵/":{"ref":"矩阵/","tf":0.08333333333333333},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.03614457831325301},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.025},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/":{"ref":"链表/","tf":0.08333333333333333},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082},"二叉树/":{"ref":"二叉树/","tf":0.08333333333333333},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.014598540145985401},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.024154589371980676},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.024691358024691357},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.04838709677419355},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.025210084033613446},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.014354066985645933},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.02},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/":{"ref":"动态规划/","tf":0.08333333333333333},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/":{"ref":"逻辑思维/","tf":0.08333333333333333},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.023255813953488372},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"回溯/":{"ref":"回溯/","tf":0.08333333333333333},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333},"深度搜索/":{"ref":"深度搜索/","tf":0.08333333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218},"堆排序/":{"ref":"堆排序/","tf":0.08333333333333333},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.0196078431372549},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},")":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.012345679012345678},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.04477611940298507},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.019230769230769232},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}},"#":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616}}},")":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.012345679012345678},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}},",":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.01948051948051948},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.016853932584269662},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}},"且":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"=":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}},"docs":{}}}}}}}}}}}}}},"]":{"docs":{},"对":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"1":{"docs":{"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333}}},"docs":{}}}}}}},":":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.012345679012345678},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"*":{"docs":{},"*":{"2":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"docs":{}}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715}},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}},"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.017391304347826087}},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}},"i":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.009876543209876543},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.025423728813559324}},"，":{"docs":{},"即":{"docs":{},"最":{"docs":{},"大":{"docs":{},"面":{"docs":{},"积":{"docs":{},"为":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}},"*":{"1":{"0":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}},"docs":{}},"docs":{}},":":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}},"s":{"docs":{},":":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}}}}}},"+":{"1":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}},"docs":{}},"，":{"docs":{},"则":{"docs":{},"说":{"docs":{},"明":{"docs":{},"q":{"docs":{},",":{"docs":{},"p":{"docs":{},"都":{"docs":{},"在":{"docs":{},"右":{"docs":{},"边":{"docs":{},"。":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.009345794392523364}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.007009345794392523}},":":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834}},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{},"h":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}},"i":{"docs":{},")":{"docs":{},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}}}}}}}},"p":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}},"1":{"docs":{},",":{"4":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}},"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.023668639053254437},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.023668639053254437},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}},"n":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676}},")":{"docs":{},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.02158273381294964},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.009202453987730062},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.01892744479495268},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}}}},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},":":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}}}}}}}}},"+":{"1":{"docs":{},")":{"docs":{},")":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}},":":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}},"]":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}}},"docs":{}}},"s":{"1":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}}}},"docs":{}}}}}}},"2":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}}}},"docs":{}}}}}}},"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}},"docs":{}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"1":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.013824884792626729}}}}},"docs":{}}},"2":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.013824884792626729}}}}},"docs":{}}},"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"1":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}},"docs":{}}}},"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}}}}}}},"s":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}},"docs":{}}}}}}}},"m":{"docs":{},")":{"docs":{},":":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.02877697841726619},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.009202453987730062},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.025236593059936908}}}},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541}}}}},"docs":{}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.015151515151515152}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.015151515151515152}}}}}}},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}}},"docs":{}}}}}}}},"p":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}},"docs":{}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368}}}}},"docs":{}}}}}}}}}},"2":{"docs":{},"*":{"docs":{},"*":{"docs":{},"n":{"docs":{},")":{"docs":{},":":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}}}},",":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}}}}}}}}}},"n":{"docs":{},")":{"docs":{},":":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}}}}}}},"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.018518518518518517}},"l":{"docs":{},"e":{"docs":{},"n":{"1":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}}},"docs":{}}},"docs":{},"(":{"docs":{},"a":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872}},")":{"docs":{},":":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}}}}}},"e":{"docs":{},"w":{"docs":{},"_":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}}}}}}}}}},"s":{"2":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514}}}}}},"docs":{},")":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}},")":{"docs":{},":":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}}}}}}},",":{"docs":{},"r":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"docs":{},"u":{"docs":{},"]":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}},"n":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}},"u":{"docs":{},"m":{"1":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905}},"+":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"2":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905}}}}}}}}},"docs":{}}}}}}}}}},"2":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905}}}}}}},"docs":{},"s":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}},")":{"docs":{},":":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282}}}}}}}}}}},")":{"docs":{},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.018115942028985508},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.031914893617021274},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.015151515151515152},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}},"]":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374}}}},"/":{"docs":{},"/":{"2":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}},"docs":{}}},"+":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}},"】":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684}}}}},"docs":{}}},"k":{"docs":{},")":{"docs":{},":":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}},",":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.01639344262295082}},"i":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}}}}}}},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.018604651162790697}}}}}}}}}}}},"m":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406}}}}}}}},"d":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}},")":{"docs":{},":":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.015151515151515152},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}},"]":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152}}}},"+":{"2":{"docs":{},")":{"docs":{},":":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.014492753623188406}}}}},"docs":{}}},"i":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"n":{"docs":{},")":{"docs":{},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}}}}}}}}}}}}}}},"docs":{}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}},"docs":{}}}}}}}}}},"docs":{}},",":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368}}}}}}}}}},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}}}}}}}}}}}}},")":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}},"s":{"1":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}}}},"docs":{}}}}}}},"2":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}}}}}}},"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}},"docs":{}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}},"a":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},":":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}}}}}}},"u":{"docs":{},",":{"docs":{},"d":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"r":{"docs":{},"]":{"docs":{},")":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.02247191011235955},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.02702702702702703}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}},"l":{"docs":{},")":{"docs":{},":":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},")":{"docs":{},"]":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364}}},":":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"1":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}},"docs":{}}}}}}},"docs":{}}}}}},"（":{"docs":{},"m":{"docs":{},"）":{"docs":{},":":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.029850746268656716}},".":{"docs":{},"s":{"docs":{},"h":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},")":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}}}},":":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},">":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}}}}}}}}}}}}}},"j":{"docs":{},"]":{"docs":{},">":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}},"l":{"docs":{},"l":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}}}}},"o":{"docs":{},"t":{"1":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.04201680672268908}},".":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}}},"2":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.03361344537815126}},")":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}},":":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}},".":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},":":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}},"，":{"docs":{},"根":{"docs":{},"据":{"docs":{},"这":{"docs":{},"个":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"进":{"docs":{},"行":{"docs":{},"判":{"docs":{},"断":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.027624309392265192},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.014598540145985401},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.023148148148148147},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.04830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.034013605442176874},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.017391304347826087},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.027777777777777776},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.027624309392265192},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.0625},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.028708133971291867},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}},")":{"docs":{},":":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.019138755980861243},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}}},",":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.014388489208633094},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077}}},":":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.016574585635359115},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.029197080291970802},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.03389830508474576},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.014388489208633094},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.014492753623188406},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.027210884353741496},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.016574585635359115},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.010416666666666666},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.016129032258064516},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.024390243902439025}}},".":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{},"#":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.03125},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}},":":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"加":{"docs":{},"起":{"docs":{},"来":{"docs":{},"和":{"docs":{},"为":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}}}}}}}}}}}}}}},",":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.026041666666666668},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}},":":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}},",":{"docs":{"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.01932367149758454},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.07482993197278912}},")":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.03389830508474576}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.03225806451612903}}}}}}},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0035087719298245615}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.018867924528301886}}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.022123893805309734}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}}}}}}}}}}}}}},"w":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364}},";":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}},",":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}}}}}}},"b":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}}}}}},"r":{"docs":{},"s":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219}}}},"s":{"docs":{},"e":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{},":":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.010416666666666666}}}}}},"=":{"docs":{},"m":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}},"n":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}}}}}}},"©":{"docs":{"./":{"ref":"./","tf":0.07692307692307693},"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/":{"ref":"数字运算/","tf":0.08333333333333333},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"栈/":{"ref":"栈/","tf":0.08333333333333333},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/":{"ref":"双指针/","tf":0.08333333333333333},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/":{"ref":"二分/","tf":0.08333333333333333},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"三数/":{"ref":"三数/","tf":0.08333333333333333},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/":{"ref":"区间搜索/","tf":0.08333333333333333},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/":{"ref":"单调栈/","tf":0.08333333333333333},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/":{"ref":"字符串/","tf":0.08333333333333333},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"数组/":{"ref":"数组/","tf":0.08333333333333333},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.05555555555555555},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666},"矩阵/":{"ref":"矩阵/","tf":0.08333333333333333},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/":{"ref":"链表/","tf":0.08333333333333333},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082},"二叉树/":{"ref":"二叉树/","tf":0.08333333333333333},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/":{"ref":"动态规划/","tf":0.08333333333333333},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/":{"ref":"逻辑思维/","tf":0.08333333333333333},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"回溯/":{"ref":"回溯/","tf":0.08333333333333333},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333},"深度搜索/":{"ref":"深度搜索/","tf":0.08333333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218},"堆排序/":{"ref":"堆排序/","tf":0.08333333333333333},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}},"何":{"docs":{},"去":{"docs":{},"何":{"docs":{},"从":{"docs":{},"g":{"docs":{},"w":{"docs":{"./":{"ref":"./","tf":0.07692307692307693},"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数字运算/":{"ref":"数字运算/","tf":0.08333333333333333},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"栈/":{"ref":"栈/","tf":0.08333333333333333},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/":{"ref":"双指针/","tf":0.08333333333333333},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/":{"ref":"二分/","tf":0.08333333333333333},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"三数/":{"ref":"三数/","tf":0.08333333333333333},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/":{"ref":"区间搜索/","tf":0.08333333333333333},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/":{"ref":"单调栈/","tf":0.08333333333333333},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/":{"ref":"字符串/","tf":0.08333333333333333},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"数组/":{"ref":"数组/","tf":0.08333333333333333},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.05555555555555555},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666},"矩阵/":{"ref":"矩阵/","tf":0.08333333333333333},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/":{"ref":"链表/","tf":0.08333333333333333},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082},"二叉树/":{"ref":"二叉树/","tf":0.08333333333333333},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/":{"ref":"动态规划/","tf":0.08333333333333333},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/":{"ref":"逻辑思维/","tf":0.08333333333333333},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"回溯/":{"ref":"回溯/","tf":0.08333333333333333},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333},"深度搜索/":{"ref":"深度搜索/","tf":0.08333333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218},"堆排序/":{"ref":"堆排序/","tf":0.08333333333333333},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}},"前":{"docs":{},"言":{"docs":{"./":{"ref":"./","tf":10}}},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"又":{"docs":{},"叫":{"docs":{},"做":{"docs":{},"波":{"docs":{},"兰":{"docs":{},"式":{"docs":{},"。":{"docs":{},"同":{"docs":{},"样":{"docs":{},"的":{"docs":{},"道":{"docs":{},"理":{"docs":{},"，":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"的":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"是":{"docs":{},"由":{"docs":{},"相":{"docs":{},"应":{"docs":{},"的":{"docs":{},"语":{"docs":{},"法":{"docs":{},"树":{"docs":{},"的":{"docs":{},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"。":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"树":{"docs":{},"的":{"docs":{},"功":{"docs":{},"能":{"docs":{},"很":{"docs":{},"强":{"docs":{},"大":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"做":{"docs":{},"文":{"docs":{},"本":{"docs":{},"词":{"docs":{},"频":{"docs":{},"统":{"docs":{},"计":{"docs":{},"，":{"docs":{},"例":{"docs":{},"如":{"docs":{},"我":{"docs":{},"们":{"docs":{},"在":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"框":{"docs":{},"中":{"docs":{},"的":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"提":{"docs":{},"示":{"docs":{},"，":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"利":{"docs":{},"用":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"树":{"docs":{},"实":{"docs":{},"现":{"docs":{},"。":{"docs":{},"因":{"docs":{},"此":{"docs":{},"，":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"树":{"docs":{},"基":{"docs":{},"本":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"是":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"插":{"docs":{},"入":{"docs":{},"，":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"，":{"docs":{},"删":{"docs":{},"除":{"docs":{},"，":{"docs":{},"查":{"docs":{},"找":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"等":{"docs":{},"。":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"积":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}},"三":{"docs":{},"句":{"docs":{},"话":{"docs":{},"可":{"docs":{},"以":{"docs":{},"变":{"docs":{},"成":{"docs":{},"这":{"docs":{},"样":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}}}},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"这":{"docs":{},"儿":{"docs":{},"没":{"docs":{},"有":{"docs":{},"用":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"看":{"docs":{},"怎":{"docs":{},"么":{"docs":{},"写":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}}}}}}}}}}}}}}}}},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"展":{"docs":{},"开":{"docs":{},"为":{"docs":{},"链":{"docs":{},"表":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}}}}}}}}},"面":{"docs":{},"先":{"docs":{},"讨":{"docs":{},"论":{"docs":{},"递":{"docs":{},"归":{"docs":{},"到":{"docs":{},"底":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"情":{"docs":{},"况":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}}}}}}}}}}}},"两":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"求":{"docs":{},"解":{"docs":{},"，":{"docs":{},"而":{"docs":{},"第":{"docs":{},"三":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"则":{"docs":{},"可":{"docs":{},"以":{"docs":{},"将":{"docs":{},"前":{"docs":{},"半":{"docs":{},"部":{"docs":{},"分":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"和":{"docs":{},"（":{"docs":{},"此":{"docs":{},"处":{"docs":{},"的":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"必":{"docs":{},"须":{"docs":{},"包":{"docs":{},"含":{"docs":{},"前":{"docs":{},"半":{"docs":{},"部":{"docs":{},"分":{"docs":{},"的":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"）":{"docs":{},"与":{"docs":{},"后":{"docs":{},"半":{"docs":{},"部":{"docs":{},"分":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"和":{"docs":{},"（":{"docs":{},"此":{"docs":{},"处":{"docs":{},"的":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"必":{"docs":{},"须":{"docs":{},"包":{"docs":{},"含":{"docs":{},"后":{"docs":{},"半":{"docs":{},"部":{"docs":{},"分":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"）":{"docs":{},"相":{"docs":{},"加":{"docs":{},"得":{"docs":{},"到":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"个":{"docs":{},"高":{"docs":{},"频":{"docs":{},"元":{"docs":{},"素":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":10.008264462809917}}}}}}}}},"!":{"docs":{},"=":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.02112676056338028},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.018867924528301886},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.013888888888888888},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.013636363636363636},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}},"'":{"docs":{},"#":{"docs":{},"'":{"docs":{},":":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}},"\"":{"1":{"0":{"0":{"docs":{},"\"":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}}},"1":{"0":{"1":{"docs":{},"\"":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}}},"docs":{},"\"":{"docs":{},",":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}}}},"1":{"docs":{},"\"":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}}},"docs":{}},"docs":{}},"1":{"docs":{},"\"":{"docs":{},",":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}}}},"2":{"3":{"docs":{},"\"":{"docs":{},",":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}},"docs":{},"\"":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}},"3":{"docs":{},"\"":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"7":{"docs":{},"\"":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}},"\"":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"2":{"2":{"6":{"docs":{},"\"":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}},"docs":{}},"5":{"5":{"2":{"5":{"5":{"1":{"1":{"1":{"3":{"5":{"docs":{},"\"":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},".":{"2":{"5":{"5":{"docs":{},".":{"1":{"1":{"1":{"docs":{},".":{"3":{"5":{"docs":{},"\"":{"docs":{},"]":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{},"\"":{"docs":{},",":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}},"3":{"docs":{},"\"":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349}}}}},"4":{"1":{"9":{"3":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}},"docs":{}},"docs":{}},"2":{"docs":{},"\"":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}},"5":{"6":{"docs":{},"\"":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}},"docs":{}},"docs":{}},"5":{"6":{"0":{"8":{"8":{"docs":{},"\"":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"\"":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349}}}}},"6":{"docs":{},"\"":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"9":{"docs":{},"\"":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.009523809523809525},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.028037383177570093}},"\"":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}},"\"":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.023952095808383235},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.011834319526627219},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.022099447513812154},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.06666666666666667},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.050156739811912224},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.034482758620689655},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.011834319526627219},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.018518518518518517},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.009433962264150943},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.013157894736842105},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.025},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.022099447513812154},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.010416666666666666},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.014814814814814815},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.028169014084507043},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.015151515151515152},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.013888888888888888}},"每":{"docs":{},"一":{"docs":{},"行":{"docs":{},"都":{"docs":{},"用":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"成":{"docs":{},"功":{"docs":{},"啦":{"docs":{},"，":{"docs":{},"不":{"docs":{},"是":{"docs":{},"返":{"docs":{},"回":{"docs":{},"的":{"docs":{},"下":{"docs":{},"标":{"docs":{},"，":{"docs":{},"而":{"docs":{},"是":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"\"":{"docs":{},"\"":{"docs":{},"\"":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}},"为":{"docs":{},"树":{"docs":{},"添":{"docs":{},"加":{"docs":{},"节":{"docs":{},"点":{"docs":{},"\"":{"docs":{},"\"":{"docs":{},"\"":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}}},"树":{"docs":{},"类":{"docs":{},"\"":{"docs":{},"\"":{"docs":{},"\"":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}},"节":{"docs":{},"点":{"docs":{},"类":{"docs":{},"\"":{"docs":{},"\"":{"docs":{},"\"":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}},"。":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}},"*":{"docs":{},"\"":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.009523809523809525}}},":":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}},"]":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}},"a":{"docs":{},"*":{"docs":{},"b":{"docs":{},"\"":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}},"+":{"docs":{},"\"":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.009523809523809525}}},":":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}},"]":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349}}}}},",":{"1":{"docs":{},")":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}},"docs":{}}}},"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}},"/":{"docs":{},"\"":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349}}},":":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}},"]":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},":":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}},"(":{"docs":{},")":{"docs":{},"\"":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}},"[":{"docs":{},"]":{"docs":{},"{":{"docs":{},"}":{"docs":{},"\"":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}}}},"(":{"docs":{},")":{"docs":{},"\"":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}}}}},"[":{"docs":{},")":{"docs":{},"]":{"docs":{},"\"":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}}},"]":{"docs":{},"\"":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}},"\"":{"docs":{},":":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588}}}},"(":{"docs":{},")":{"docs":{},"\"":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}}}}},"{":{"docs":{},"[":{"docs":{},"]":{"docs":{},"}":{"docs":{},"\"":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}}}},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}},"\"":{"docs":{},":":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}}},"(":{"docs":{},")":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"\"":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}}}}}}}},"a":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}},"b":{"docs":{},"a":{"docs":{},"\"":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}},"。":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}},"c":{"docs":{},"a":{"docs":{},"\"":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}},"b":{"docs":{},"c":{"docs":{},"b":{"docs":{},"b":{"docs":{},"\"":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}}}}},"\"":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"其":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}}}}}},"。":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}},"b":{"docs":{},"\"":{"docs":{},",":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}},"\"":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}},",":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428}}},"（":{"1":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}},"docs":{}}}},"a":{"docs":{},"b":{"docs":{},"\"":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}},"。":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}},"\"":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.012658227848101266},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.012295081967213115},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428}}},"a":{"docs":{},"\"":{"docs":{},"。":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}},"n":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}},",":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}}}}}}}},"\"":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541}},",":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.013392857142857142}}}},"*":{"docs":{},"\"":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}},"c":{"docs":{},"?":{"docs":{},"b":{"docs":{},"\"":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}},"c":{"docs":{},"d":{"docs":{},"c":{"docs":{},"b":{"docs":{},"\"":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}},"\"":{"docs":{},",":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}},"d":{"docs":{},"c":{"docs":{},"e":{"docs":{},"b":{"docs":{},"\"":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"\"":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385}}}}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385}}}}}},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}},",":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385}}}}}}}}},"t":{"docs":{},"'":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}}},"\"":{"docs":{},"（":{"1":{"2":{"docs":{},"）":{"docs":{},"。":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}},"docs":{}},"docs":{}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}},"o":{"docs":{},"s":{"docs":{},"\"":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581}},"s":{"2":{"0":{"0":{"9":{"docs":{},"\"":{"docs":{},";":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"\"":{"docs":{},";":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"\"":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}},"x":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"\"":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}},"k":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"其":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}}}}}}}}}},"b":{"docs":{},"\"":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"其":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}}}}}},",":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428}}}},"b":{"docs":{},"b":{"docs":{},"b":{"docs":{},"b":{"docs":{},"\"":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}}},"f":{"docs":{},"\"":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}},"z":{"docs":{},"\"":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}},"p":{"docs":{},"w":{"docs":{},"w":{"docs":{},"k":{"docs":{},"e":{"docs":{},"w":{"docs":{},"\"":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}}}}},"e":{"docs":{},"n":{"docs":{},"\"":{"docs":{},"]":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}},"f":{"docs":{},"l":{"docs":{},"\"":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}}},"s":{"docs":{},"'":{"docs":{},"t":{"docs":{},"e":{"docs":{},"l":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}},"e":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{},"]":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}},"s":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"]":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}},"*":{"docs":{},"a":{"docs":{},"*":{"docs":{},"b":{"docs":{},"\"":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}},"b":{"docs":{},"\"":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}},"\"":{"docs":{},",":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}},"c":{"docs":{},"e":{"docs":{},"\"":{"docs":{},".":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}},".":{"docs":{},"*":{"docs":{},"\"":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633}}}}},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"*":{"docs":{},"i":{"docs":{},"s":{"docs":{},"*":{"docs":{},"p":{"docs":{},"*":{"docs":{},".":{"docs":{},"\"":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{},"\"":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}},"?":{"docs":{},"a":{"docs":{},"\"":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}}}}}}}}},"v":{"docs":{},"f":{"docs":{},"\"":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}}},"#":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.029940119760479042},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.038461538461538464},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.02097902097902098},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.04},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.03896103896103896},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.014084507042253521},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.02824858757062147},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.029850746268656716},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.01},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.019230769230769232},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.027624309392265192},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.04938271604938271},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.04411764705882353},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.06451612903225806},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.03367875647668394},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.009876543209876543},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.021739130434782608},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.03367875647668394},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.026455026455026454},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.018808777429467086},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.04455445544554455},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.08620689655172414},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.028037383177570093},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.023622047244094488},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.027777777777777776},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.04054054054054054},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.045454545454545456},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.031914893617021274},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.03937007874015748},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0234375},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.034013605442176874},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.014388489208633094},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.045454545454545456},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.02459016393442623},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.041666666666666664},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.02247191011235955},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.055},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0427807486631016},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.02631578947368421},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.013824884792626729},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.046296296296296294},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.03007518796992481},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.050724637681159424},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.05454545454545454},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.07075471698113207},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.044642857142857144},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.017341040462427744},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.013157894736842105},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.03278688524590164},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.022556390977443608},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.014388489208633094},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.037037037037037035},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.043478260869565216},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.02040816326530612},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.06956521739130435},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.027624309392265192},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.026041666666666668},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.019138755980861243},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.03},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.02097902097902098},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.016129032258064516},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.08333333333333333},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.027607361963190184},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.030303030303030304},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.027777777777777776},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.061611374407582936},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.00946372239747634},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.17727272727272728},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.030373831775700934},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.017241379310344827},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.04113924050632911},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.051094890510948905},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.027649769585253458},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.02631578947368421},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.06206896551724138},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.051094890510948905},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.026490066225165563},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.01775147928994083},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.04225352112676056},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.019417475728155338},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.03278688524590164},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.020833333333333332},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.012048192771084338},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.042105263157894736},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.023255813953488372},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.030303030303030304},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.03858520900321544},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.01775147928994083},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.03858520900321544},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.027777777777777776},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.0410958904109589},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.037037037037037035},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.029411764705882353},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.03783783783783784}},"n":{"docs":{},"为":{"docs":{},"待":{"docs":{},"转":{"docs":{},"换":{"docs":{},"的":{"docs":{},"十":{"docs":{},"进":{"docs":{},"制":{"docs":{},"数":{"docs":{},"，":{"docs":{},"x":{"docs":{},"为":{"docs":{},"想":{"docs":{},"转":{"docs":{},"为":{"docs":{},"的":{"docs":{},"进":{"docs":{},"制":{"docs":{},"，":{"docs":{},"取":{"docs":{},"值":{"docs":{},"为":{"2":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"记":{"docs":{},"录":{"docs":{},"下":{"docs":{},"第":{"docs":{},"二":{"docs":{},"、":{"docs":{},"第":{"docs":{},"三":{"docs":{},"个":{"docs":{},"数":{"docs":{},"的":{"docs":{},"下":{"docs":{},"标":{"docs":{},"位":{"docs":{},"置":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}},"!":{"docs":{},"/":{"docs":{},"u":{"docs":{},"s":{"docs":{},"r":{"docs":{},"/":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581}}}}}}}}}}}}}}}}}},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},"存":{"docs":{},"在":{"docs":{},"结":{"docs":{},"束":{"docs":{},"'":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"'":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"在":{"docs":{},"左":{"docs":{},"边":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}}}}}}},"左":{"docs":{},"边":{"docs":{},"是":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}}}},"除":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.011560693641618497}},"去":{"0":{"docs":{},"开":{"docs":{},"头":{"docs":{},"，":{"docs":{},"且":{"docs":{},"长":{"docs":{},"度":{"docs":{},"大":{"docs":{},"于":{"1":{"docs":{},"情":{"docs":{},"况":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}},"docs":{}}}}}}}}}},"docs":{}}},"#":{"docs":{},"#":{"docs":{},"#":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.022988505747126436}}}}},"如":{"docs":{},"果":{"docs":{},"某":{"docs":{},"一":{"docs":{},"趟":{"docs":{},"不":{"docs":{},"冒":{"docs":{},"泡":{"docs":{},"了":{"docs":{},"没":{"docs":{},"有":{"docs":{},"发":{"docs":{},"生":{"docs":{},"交":{"docs":{},"换":{"docs":{},"过":{"docs":{},"程":{"docs":{},"）":{"docs":{},"，":{"docs":{},"就":{"docs":{},"代":{"docs":{},"表":{"docs":{},"排":{"docs":{},"好":{"docs":{},"序":{"docs":{},"了":{"docs":{},"，":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}}}}}}}}}}}}}}}}}}},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"都":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"加":{"docs":{},"入":{"docs":{},"队":{"docs":{},"列":{"docs":{},"继":{"docs":{},"续":{"docs":{},"判":{"docs":{},"断":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}},"树":{"docs":{},"是":{"docs":{},"空":{"docs":{},"的":{"docs":{},"，":{"docs":{},"则":{"docs":{},"对":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"赋":{"docs":{},"值":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}}}}},"没":{"docs":{},"有":{"docs":{},"剩":{"docs":{},"余":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"找":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"合":{"docs":{},"法":{"docs":{},"i":{"docs":{},"p":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"s":{"docs":{},"为":{"docs":{},"待":{"docs":{},"处":{"docs":{},"理":{"docs":{},"字":{"docs":{},"段":{"docs":{},"，":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"存":{"docs":{},"储":{"docs":{},"所":{"docs":{},"有":{"docs":{},"i":{"docs":{},"p":{"docs":{},"小":{"docs":{},"段":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}},"截":{"docs":{},"断":{"docs":{},"s":{"docs":{},"，":{"docs":{},"并":{"docs":{},"将":{"docs":{},"本":{"docs":{},"次":{"docs":{},"截":{"docs":{},"取":{"docs":{},"内":{"docs":{},"容":{"docs":{},"写":{"docs":{},"入":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"字":{"docs":{},"超":{"docs":{},"出":{"docs":{},"范":{"docs":{},"围":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}}}}},"递":{"docs":{},"归":{"docs":{},"出":{"docs":{},"口":{"docs":{},"，":{"docs":{},"凑":{"docs":{},"够":{"4":{"docs":{},"段":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}},"docs":{}}}}}}}},"遍":{"docs":{},"历":{"docs":{},"取":{"docs":{},"s":{"docs":{},"的":{"docs":{},"头":{"docs":{},"，":{"docs":{},"长":{"docs":{},"度":{"docs":{},"从":{"1":{"docs":{},"到":{"3":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}},"docs":{}}},"docs":{}}}}}}}}}}},"对":{"docs":{},"已":{"docs":{},"有":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"进":{"docs":{},"行":{"docs":{},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}}}}}},"弹":{"docs":{},"出":{"docs":{},"队":{"docs":{},"列":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}}}},"（":{"docs":{},"因":{"docs":{},"为":{"docs":{},"最":{"docs":{},"大":{"docs":{},"堆":{"docs":{},"是":{"docs":{},"最":{"docs":{},"小":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"一":{"docs":{},"泡":{"docs":{},"屎":{"docs":{},"一":{"docs":{},"趴":{"docs":{},"尿":{"docs":{},"，":{"docs":{},"拉":{"docs":{},"扯":{"docs":{},"大":{"docs":{},"的":{"docs":{},"。":{"docs":{},"）":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}}}}}}}}}}}},"'":{"0":{"1":{"2":{"3":{"4":{"5":{"6":{"7":{"8":{"9":{"docs":{},"+":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"'":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}},":":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.016260162601626018},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666}}},"（":{"docs":{},"水":{"docs":{},"）":{"docs":{},"组":{"docs":{},"成":{"docs":{},"的":{"docs":{},"的":{"docs":{},"二":{"docs":{},"维":{"docs":{},"网":{"docs":{},"格":{"docs":{},"，":{"docs":{},"计":{"docs":{},"算":{"docs":{},"岛":{"docs":{},"屿":{"docs":{},"的":{"docs":{},"数":{"docs":{},"量":{"docs":{},"。":{"docs":{},"一":{"docs":{},"个":{"docs":{},"岛":{"docs":{},"被":{"docs":{},"水":{"docs":{},"包":{"docs":{},"围":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"它":{"docs":{},"是":{"docs":{},"通":{"docs":{},"过":{"docs":{},"水":{"docs":{},"平":{"docs":{},"方":{"docs":{},"向":{"docs":{},"或":{"docs":{},"垂":{"docs":{},"直":{"docs":{},"方":{"docs":{},"向":{"docs":{},"上":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"的":{"docs":{},"陆":{"docs":{},"地":{"docs":{},"连":{"docs":{},"接":{"docs":{},"而":{"docs":{},"成":{"docs":{},"的":{"docs":{},"。":{"docs":{},"=":{"docs":{},"=":{"docs":{},"你":{"docs":{},"可":{"docs":{},"以":{"docs":{},"假":{"docs":{},"设":{"docs":{},"网":{"docs":{},"格":{"docs":{},"的":{"docs":{},"四":{"docs":{},"个":{"docs":{},"边":{"docs":{},"均":{"docs":{},"被":{"docs":{},"水":{"docs":{},"包":{"docs":{},"围":{"docs":{},"。":{"docs":{},"=":{"docs":{},"=":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"1":{"docs":{},"'":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}},":":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}},"（":{"docs":{},"陆":{"docs":{},"地":{"docs":{},"）":{"docs":{},"和":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}}}},"2":{"docs":{},"'":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}},"3":{"docs":{},"'":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}},"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.008982035928143712},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.023529411764705882},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.01818181818181818},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.01818181818181818},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.016129032258064516},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}},"'":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.015151515151515152},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.023529411764705882}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}},"s":{"docs":{},")":{"docs":{},")":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},",":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}}}},")":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}},"s":{"docs":{},")":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}}}}},"'":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.011834319526627219},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.011834319526627219},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633}}},":":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}},"'":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}},":":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588}}}}},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"e":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"[":{"docs":{},":":{"docs":{},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}}},"s":{"docs":{},"[":{"docs":{},":":{"docs":{},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}},"i":{"docs":{},"[":{"docs":{},":":{"docs":{},":":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}}}}}}}}},"'":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.00949367088607595}}}},"+":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"_":{"docs":{},"x":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941}}}}}}}},":":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"'":{"docs":{},")":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.03125}}},":":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}},"'":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}},",":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.03076923076923077}}}}},"(":{"docs":{},"'":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}},":":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588}}},"，":{"docs":{},"'":{"docs":{},")":{"docs":{},"'":{"docs":{},"，":{"docs":{},"'":{"docs":{},"{":{"docs":{},"'":{"docs":{},"，":{"docs":{},"'":{"docs":{},"}":{"docs":{},"'":{"docs":{},"，":{"docs":{},"'":{"docs":{},"[":{"docs":{},"'":{"docs":{},"，":{"docs":{},"'":{"docs":{},"]":{"docs":{},"'":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"'":{"docs":{},":":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}},"]":{"docs":{},"'":{"docs":{},":":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}},"{":{"docs":{},"'":{"docs":{},":":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}},"}":{"docs":{},"'":{"docs":{},":":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}},"a":{"docs":{},"'":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}},",":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385}}},"。":{"docs":{},"因":{"docs":{},"此":{"docs":{},"，":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}},"b":{"docs":{},"c":{"docs":{"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125}},"'":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514}},",":{"docs":{},"则":{"docs":{},"s":{"1":{"docs":{},"不":{"docs":{},"是":{"docs":{},"s":{"2":{"docs":{},"的":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},",":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}}}}}}},"docs":{}}}},"是":{"docs":{},"s":{"2":{"docs":{},"的":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}},",":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.034482758620689655}}}}}}}},"docs":{}}}},"docs":{}}}}},"d":{"docs":{},"'":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514}}},"f":{"docs":{},"d":{"docs":{},"'":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514}}}}},"e":{"docs":{},"'":{"docs":{},",":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.012578616352201259}}},"，":{"docs":{},"在":{"docs":{},"移":{"docs":{},"动":{"docs":{},"一":{"docs":{},"次":{"docs":{},"之":{"docs":{},"后":{"docs":{},"结":{"docs":{},"果":{"docs":{},"就":{"docs":{},"是":{"docs":{},"'":{"docs":{},"b":{"docs":{},"c":{"docs":{},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"'":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"'":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}}}},"d":{"docs":{},"'":{"docs":{},",":{"docs":{},"则":{"docs":{},"s":{"1":{"docs":{},"不":{"docs":{},"是":{"docs":{},"s":{"2":{"docs":{},"的":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},",":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}}}}}}},"docs":{}}}}},"docs":{}}}}}}},"a":{"docs":{},"a":{"docs":{},"d":{"docs":{},"'":{"docs":{},"和":{"docs":{},"’":{"docs":{},"'":{"docs":{},"d":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"'":{"docs":{},"是":{"docs":{},"换":{"docs":{},"位":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"c":{"docs":{},"s":{"docs":{},"s":{"docs":{},"s":{"docs":{},"d":{"docs":{},"f":{"docs":{},"d":{"docs":{},"d":{"docs":{},"f":{"docs":{},"'":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514}}}}}}}}}}}}}},"d":{"docs":{},"'":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514}}}}},"e":{"docs":{},"'":{"docs":{},",":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.03076923076923077}}},")":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219}}}},"n":{"docs":{},"d":{"docs":{},"'":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901}},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}},"o":{"docs":{},"'":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.030303030303030304}},",":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.03076923076923077}}},"（":{"docs":{},"字":{"docs":{},"母":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}},"u":{"docs":{},"'":{"docs":{},",":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385}}},"]":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385}}},")":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"'":{"docs":{},":":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425}}}}}}}},"s":{"docs":{},"'":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514}}},"f":{"docs":{},"f":{"docs":{},"s":{"docs":{},"f":{"docs":{},"'":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},"'":{"docs":{},")":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}},",":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},"]":{"docs":{},"'":{"docs":{},":":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{},"'":{"docs":{},")":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}}}}}}}}}}},",":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}},"'":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622}},"'":{"docs":{},")":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}},"d":{"docs":{},"g":{"docs":{},"c":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"d":{"docs":{},"c":{"docs":{},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125}}}}}}}}}}},"w":{"docs":{},"'":{"docs":{},",":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"'":{"docs":{},")":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992}}},":":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}}}},"s":{"docs":{},"d":{"docs":{},"'":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514}}}}}},"c":{"docs":{},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"b":{"docs":{},"'":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}}}}},"'":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}},",":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}},")":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"'":{"docs":{},":":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.03125}}}}}}},"'":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}},"。":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748}}},",":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.01932367149758454},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.027210884353741496}}},":":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748}}}}}}}}}}},"'":{"docs":{},")":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}},"_":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"_":{"docs":{},"'":{"docs":{},":":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}}}}}}},"#":{"docs":{},"'":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}},",":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.023923444976076555}}},"]":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}},"*":{"docs":{},"'":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.015822784810126583},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.020491803278688523}},":":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.012295081967213115}}}}},"?":{"docs":{},"'":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.012295081967213115}}}},"h":{"docs":{},"'":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}},"n":{"docs":{},"'":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219}}}},"r":{"docs":{},"'":{"docs":{},")":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219}}}}},"x":{"docs":{},"'":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.022727272727272728}},")":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}},"。":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"在":{"docs":{},"水":{"docs":{},"平":{"docs":{},"或":{"docs":{},"垂":{"docs":{},"直":{"docs":{},"方":{"docs":{},"向":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"，":{"docs":{},"则":{"docs":{},"称":{"docs":{},"它":{"docs":{},"们":{"docs":{},"是":{"docs":{},"“":{"docs":{},"相":{"docs":{},"连":{"docs":{},"”":{"docs":{},"的":{"docs":{},"。":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"z":{"docs":{},"'":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"，":{"docs":{},"将":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"中":{"docs":{},"所":{"docs":{},"有":{"docs":{},"'":{"docs":{},"o":{"docs":{},"'":{"docs":{},"改":{"docs":{},"为":{"docs":{},"'":{"docs":{},"x":{"docs":{},"'":{"docs":{},",":{"docs":{},"将":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"中":{"docs":{},"所":{"docs":{},"有":{"docs":{},"'":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"变":{"docs":{},"为":{"docs":{},"'":{"docs":{},"o":{"docs":{},"'":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}},"(":{"0":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}},"1":{"0":{"docs":{},"*":{"docs":{},"*":{"9":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.013392857142857142}}},"docs":{}}}},"2":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}},"3":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}},"docs":{}},"2":{"2":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}},"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.016260162601626018},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},"*":{"docs":{},"*":{"3":{"1":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.023529411764705882}}},"docs":{}},"docs":{}}}},"4":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}},"5":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}},"6":{"7":{"4":{"5":{"1":{"2":{"3":{"4":{"docs":{},",":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.009523809523809525}}},"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},"l":{"1":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.013888888888888888}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}}}}},"2":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}}}}},"docs":{},"+":{"docs":{},"r":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}},"e":{"docs":{},"n":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},")":{"docs":{},"+":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},")":{"docs":{},")":{"docs":{},"/":{"docs":{},"/":{"2":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}},"docs":{}}}}}},"docs":{}}}}}}}}}}}},"docs":{}}}}}}},"f":{"docs":{},"t":{"docs":{},"+":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}},"/":{"docs":{},"/":{"2":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839}}},"docs":{}}}}}}}}}},")":{"docs":{},"b":{"docs":{},"o":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.012953367875647668},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.012953367875647668}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}},"o":{"docs":{},"p":{"docs":{},")":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}}}},"a":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},")":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}}},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"a":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285}}}}}}}}},"[":{"docs":{},"i":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852}}}}}}}},"p":{"docs":{},"[":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428}}}},"f":{"docs":{},"s":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}},"每":{"docs":{},"次":{"docs":{},"减":{"docs":{},"去":{"docs":{},"一":{"docs":{},"个":{"docs":{},"除":{"docs":{},"数":{"docs":{},"，":{"docs":{},"统":{"docs":{},"计":{"docs":{},"可":{"docs":{},"以":{"docs":{},"减":{"docs":{},"去":{"docs":{},"多":{"docs":{},"少":{"docs":{},"个":{"docs":{},"除":{"docs":{},"数":{"docs":{},")":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}}}}}}}}}}}}}}}}}}}},"除":{"docs":{},"数":{"docs":{},"倍":{"docs":{},"增":{"docs":{},"法":{"docs":{},")":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}}}}},"(":{"1":{"0":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.012698412698412698}}},"docs":{}},"2":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}},"9":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}},"docs":{},"m":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}},"扫":{"docs":{},"描":{"docs":{},"到":{"docs":{},"的":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"是":{"docs":{},"开":{"docs":{},"括":{"docs":{},"号":{"docs":{},"'":{"docs":{},"(":{"docs":{},"'":{"docs":{},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}},"符":{"docs":{},"o":{"docs":{},"p":{"docs":{},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}},"闭":{"docs":{},"括":{"docs":{},"号":{"docs":{},"'":{"docs":{},")":{"docs":{},"'":{"docs":{},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}},"结":{"docs":{},"束":{"docs":{},"而":{"docs":{},"栈":{"docs":{},"中":{"docs":{},"还":{"docs":{},"有":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}},"栈":{"docs":{},"为":{"docs":{},"空":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"入":{"docs":{},"栈":{"docs":{},"元":{"docs":{},"素":{"docs":{},"a":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"大":{"docs":{},"于":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"元":{"docs":{},"素":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"元":{"docs":{},"素":{"docs":{},"大":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{},"入":{"docs":{},"栈":{"docs":{},"元":{"docs":{},"素":{"docs":{},")":{"docs":{},":":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}},"docs":{}},"_":{"docs":{},"i":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715}}}},")":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"]":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}}}}}}}},"+":{"docs":{},"x":{"docs":{},"/":{"docs":{},"r":{"docs":{},")":{"docs":{},"/":{"2":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"docs":{}}}}}}}},"找":{"0":{"docs":{},"时":{"docs":{},"候":{"docs":{},"用":{"docs":{},"的":{"docs":{},"是":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"查":{"docs":{},"找":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"0":{"docs":{},"应":{"docs":{},"该":{"docs":{},"在":{"docs":{},"中":{"docs":{},"间":{"docs":{},"附":{"docs":{},"近":{"docs":{},"，":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"查":{"docs":{},"找":{"docs":{},"更":{"docs":{},"快":{"docs":{},")":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},"docs":{}},"m":{"docs":{},"+":{"docs":{},"n":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676}}}}}}}}}}}}}}}}},"d":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}},")":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"1":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}}}},"docs":{},"s":{"1":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"]":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}}}}}}},"docs":{},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"]":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}}}}}}}}}}},"i":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.013824884792626729},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}},"t":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}},">":{"docs":{},">":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{},"&":{"1":{"docs":{"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827}}},"docs":{}}}}}}},"=":{"0":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.0125}}},"docs":{}}},"+":{"1":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.017391304347826087}}}},"docs":{}},"]":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}}},"docs":{}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834}}}}}}},"，":{"docs":{},"j":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}},")":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}},",":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.03488372093023256},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.0136986301369863}},"j":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386}}}}}},"h":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715}}}}}},"前":{"docs":{},"缀":{"docs":{},"树":{"docs":{},")":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":2.5}}}}}}}}}},"，":{"docs":{},"包":{"docs":{},"含":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}},"−":{"2":{"3":{"1":{"docs":{},")":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}},"docs":{}},"docs":{}},"docs":{}},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},")":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"1":{"docs":{},")":{"docs":{},"：":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"m":{"docs":{},")":{"docs":{},"和":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"m":{"docs":{},")":{"docs":{},"。":{"docs":{},"典":{"docs":{},"型":{"docs":{},"的":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"假":{"docs":{},"设":{"docs":{},"当":{"docs":{},"前":{"docs":{},"已":{"docs":{},"经":{"docs":{},"开":{"docs":{},"始":{"docs":{},"计":{"docs":{},"算":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"只":{"docs":{},"可":{"docs":{},"能":{"docs":{},"从":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"s":{"docs":{},"i":{"docs":{},"只":{"docs":{},"可":{"docs":{},"能":{"docs":{},"从":{"docs":{},"s":{"docs":{},"i":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"2":{"docs":{},")":{"docs":{},"：":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"m":{"docs":{},")":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"m":{"docs":{},")":{"docs":{},"，":{"docs":{},"此":{"docs":{},"方":{"docs":{},"法":{"docs":{},"需":{"docs":{},"要":{"2":{"docs":{},"m":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"。":{"docs":{},"当":{"docs":{},"我":{"docs":{},"们":{"docs":{},"求":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"时":{"docs":{},"，":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}}}}}}}}}}}},"i":{"docs":{},"时":{"docs":{},"，":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"3":{"docs":{},")":{"docs":{},"：":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"m":{"docs":{},")":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"m":{"docs":{},")":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"m":{"docs":{},"大":{"docs":{},"小":{"docs":{},"的":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"此":{"docs":{},"方":{"docs":{},"法":{"docs":{},"和":{"docs":{},"方":{"docs":{},"法":{"docs":{},"三":{"docs":{},"的":{"docs":{},"区":{"docs":{},"别":{"docs":{},"，":{"docs":{},"方":{"docs":{},"法":{"docs":{},"三":{"docs":{},"需":{"docs":{},"要":{"2":{"docs":{},"m":{"docs":{},"大":{"docs":{},"小":{"docs":{},"的":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"此":{"docs":{},"方":{"docs":{},"法":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"m":{"docs":{},"大":{"docs":{},"小":{"docs":{},"的":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"在":{"docs":{},"方":{"docs":{},"法":{"docs":{},"三":{"docs":{},"中":{"docs":{},"我":{"docs":{},"们":{"docs":{},"保":{"docs":{},"存":{"docs":{},"当":{"docs":{},"前":{"docs":{},"行":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"中":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"假":{"docs":{},"设":{"docs":{},"我":{"docs":{},"们":{"docs":{},"当":{"docs":{},"前":{"docs":{},"计":{"docs":{},"算":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"知":{"docs":{},"道":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"知":{"docs":{},"道":{"docs":{},"s":{"docs":{},"i":{"docs":{},"的":{"docs":{},"值":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"保":{"docs":{},"存":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"行":{"docs":{},"中":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"计":{"docs":{},"算":{"docs":{},"s":{"docs":{},"i":{"docs":{},"时":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"更":{"docs":{},"新":{"docs":{},"u":{"docs":{},"p":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}},"+":{"docs":{},"+":{"docs":{},"l":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}},"b":{"docs":{},"o":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},")":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{},"形":{"docs":{},"式":{"docs":{},"：":{"docs":{},"[":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},")":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},")":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}},"测":{"docs":{},"评":{"docs":{},"系":{"docs":{},"统":{"docs":{},"对":{"docs":{},"该":{"docs":{},"结":{"docs":{},"点":{"docs":{},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{},"表":{"docs":{},"述":{"docs":{},"是":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}},"金":{"docs":{},"额":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.030120481927710843}}}},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}},"]":{"docs":{},"=":{"docs":{},"=":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"]":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}}}}}}}}},")":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}},"s":{"docs":{},")":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428}}}},"docs":{}}}}}},"[":{"docs":{},"i":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}},"删":{"docs":{},"除":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.013824884792626729},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.01775147928994083},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.01775147928994083}}}},"将":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.018433179723502304},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.023668639053254437},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.023668639053254437}}},"插":{"docs":{},"入":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"拼":{"docs":{},"接":{"docs":{},"比":{"docs":{},"较":{"docs":{},"哦":{"docs":{},")":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}}},"数":{"docs":{},"字":{"docs":{},"拼":{"docs":{},"接":{"docs":{},"后":{"docs":{},"最":{"docs":{},"大":{"docs":{},")":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}},"这":{"docs":{},"儿":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"再":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"，":{"docs":{},"存":{"docs":{},"放":{"docs":{},"访":{"docs":{},"问":{"docs":{},"标":{"docs":{},"志":{"docs":{},")":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"空":{"docs":{},"间":{"docs":{},"消":{"docs":{},"耗":{"docs":{},"太":{"docs":{},"大":{"docs":{},"。":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"代":{"docs":{},"表":{"docs":{},"土":{"docs":{},"地":{"docs":{},")":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}},"水":{"docs":{},"平":{"docs":{},"或":{"docs":{},"垂":{"docs":{},"直":{"docs":{},")":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}}},"如":{"docs":{},"何":{"docs":{},"从":{"5":{"docs":{},"亿":{"docs":{},"个":{"docs":{},"数":{"docs":{},"中":{"docs":{},"找":{"docs":{},"出":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}},"docs":{}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},".":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"k":{"docs":{},")":{"docs":{},")":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}}}}}}},"+":{"1":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}},"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.013986013986013986},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.050793650793650794},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.029850746268656716},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.022099447513812154},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.031914893617021274},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.06349206349206349},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.020833333333333332},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.015544041450777202},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.015544041450777202},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.01990049751243781},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.015151515151515152},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.01948051948051948},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.046762589928057555},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.038834951456310676},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.014598540145985401},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.018518518518518517},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.037037037037037035},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.03225806451612903},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.06896551724137931},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.022099447513812154},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.028708133971291867},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.021505376344086023},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.015337423312883436},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.011111111111111112},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.011235955056179775},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.009478672985781991},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.04100946372239748},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.03614457831325301},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.022321428571428572},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.041379310344827586},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.039603960396039604},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.038834951456310676},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.019417475728155338},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.03278688524590164},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.03125},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},"=":{"1":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.009876543209876543}}},"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.027586206896551724},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.013452914798206279},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.03571428571428571},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.028985507246376812},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.018134715025906734},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.010869565217391304},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.018134715025906734},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.02702702702702703},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.012578616352201259},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.012145748987854251},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.023148148148148147},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.02},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.014018691588785047},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.023809523809523808},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.023076923076923078},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.028409090909090908},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}},"a":{"docs":{},"b":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}},"'":{"docs":{},"*":{"docs":{},"e":{"docs":{},"f":{"docs":{},",":{"docs":{},"继":{"docs":{},"续":{"docs":{},"+":{"docs":{},"a":{"docs":{},"b":{"docs":{},"'":{"docs":{},"，":{"docs":{},"依":{"docs":{},"此":{"docs":{},"类":{"docs":{},"推":{"docs":{},"。":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"'":{"docs":{},"e":{"docs":{},"f":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}},"/":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.015873015873015872},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.022099447513812154},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.014598540145985401},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.02631578947368421},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.022988505747126436},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.03389830508474576},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.03597122302158273},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.013888888888888888},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.02608695652173913},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.037037037037037035},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.027777777777777776},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.022099447513812154},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.010416666666666666},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.03496503496503497},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.07142857142857142},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.06097560975609756},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},"/":{"2":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}},"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.012539184952978056},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.025},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.016666666666666666},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.014285714285714285},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"应":{"docs":{},"该":{"docs":{},"插":{"docs":{},"入":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"相":{"docs":{},"减":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818}}}}}}}}}}}}}}}}}}}}},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"这":{"docs":{},"么":{"docs":{},"判":{"docs":{},"断":{"docs":{},"，":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}}}}}},"=":{"2":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}},"docs":{}}},"*":{"docs":{},"*":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.025},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.04741379310344827},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.01904761904761905},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.017045454545454544}},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.011976047904191617},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.009404388714733543},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.011976047904191617},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.022099447513812154},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.009404388714733543},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.0125},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.009433962264150943},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.025},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.022099447513812154},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.014814814814814815},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}},":":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}},"=":{"0":{"docs":{},",":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}},";":{"docs":{},"i":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}},"1":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.009876543209876543},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}},"3":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}},"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.09580838323353294},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.03508771929824561},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.0641025641025641},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.07692307692307693},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.034482758620689655},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.058823529411764705},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.043478260869565216},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.11210762331838565},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.06666666666666667},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.14782608695652175},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.06896551724137931},"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.05194805194805195},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.050793650793650794},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.028169014084507043},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.0847457627118644},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.04477611940298507},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.07},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.07142857142857142},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.046153846153846156},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.05970149253731343},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.13609467455621302},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.0673076923076923},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.03314917127071823},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.11702127659574468},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.05673758865248227},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.11594202898550725},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.09523809523809523},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.04838709677419355},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.1},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.07894736842105263},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.030864197530864196},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.050359712230215826},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.024193548387096774},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.05454545454545454},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.07936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.052083333333333336},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.11428571428571428},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.08549222797927461},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.078125},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.1308641975308642},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.07407407407407407},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.10507246376811594},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.08549222797927461},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.06878306878306878},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.07836990595611286},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.07425742574257425},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.0625},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.05},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.1484375},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.028037383177570093},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.07086614173228346},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.06756756756756757},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.10344827586206896},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.06918238993710692},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.0845771144278607},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.06363636363636363},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.15151515151515152},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.06382978723404255},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.05844155844155844},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.13609467455621302},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.07079646017699115},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.029850746268656716},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.08620689655172414},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.14035087719298245},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0390625},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.14285714285714285},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.10434782608695652},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.05755395683453238},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.08974358974358974},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.06341463414634146},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.06363636363636363},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.0963855421686747},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.05737704918032787},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.05747126436781609},"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.05555555555555555},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.052083333333333336},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.07042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.0625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.10071942446043165},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.0963855421686747},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.08125},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.08974358974358974},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.05555555555555555},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.1232876712328767},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.0449438202247191},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.105},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.0625},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.10931174089068826},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.06951871657754011},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.10526315789473684},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.12442396313364056},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.11336032388663968},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.08333333333333333},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.11654135338345864},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.13043478260869565},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.07272727272727272},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.0970873786407767},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.10849056603773585},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.08928571428571429},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.1329479768786127},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.08552631578947369},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.05},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.08196721311475409},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.043795620437956206},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.10526315789473684},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.06578947368421052},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.06896551724137931},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.0423728813559322},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.050359712230215826},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.041666666666666664},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.06763285024154589},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.05442176870748299},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.06086956521739131},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.04938271604938271},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.0967741935483871},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.13445378151260504},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.09722222222222222},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.03314917127071823},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.11979166666666667},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.11483253588516747},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.1},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.04895104895104895},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.03225806451612903},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.047619047619047616},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.0705521472392638},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.06439393939393939},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.05555555555555555},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.08148148148148149},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.07303370786516854},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.08294930875576037},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.05687203791469194},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0914826498422713},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.058823529411764705},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.06818181818181818},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.09036144578313253},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.10185185185185185},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.08177570093457943},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.07758620689655173},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0875},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.15},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.056962025316455694},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.06557377049180328},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.06569343065693431},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.059907834101382486},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.09821428571428571},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.04065040650406504},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.05263157894736842},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.056818181818181816},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.027586206896551724},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.06569343065693431},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.10810810810810811},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.10596026490066225},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.09900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.0970873786407767},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.03488372093023256},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.06190476190476191},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.047619047619047616},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.05325443786982249},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.056338028169014086},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.046153846153846156},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.04854368932038835},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.03278688524590164},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.020833333333333332},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.04225352112676056},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.07228915662650602},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.058823529411764705},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.07368421052631578},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.058823529411764705},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.06511627906976744},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.04823151125401929},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.06818181818181818},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.05325443786982249},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.03333333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.021052631578947368},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.04823151125401929},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.041666666666666664},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.0410958904109589},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.11494252873563218},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.047619047619047616},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.09090909090909091},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.05405405405405406},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.06862745098039216},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.04864864864864865}},"=":{"0":{"docs":{},":":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}}},")":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}},"1":{"docs":{},",":{"docs":{},"b":{"docs":{},"a":{"docs":{},"g":{"docs":{},")":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282}}}}}}}},"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.011976047904191617},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.013986013986013986},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.041379310344827586},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.02666666666666667},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.028169014084507043},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.04519774011299435},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.016574585635359115},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.02127659574468085},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.024691358024691357},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.020833333333333332},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.01485148514851485},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.041666666666666664},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.04054054054054054},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.025157232704402517},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.01818181818181818},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.031914893617021274},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.012987012987012988},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.022123893805309734},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.03937007874015748},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.034482758620689655},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.02631578947368421},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.01818181818181818},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.01875},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.025},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.013888888888888888},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0213903743315508},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.02304147465437788},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.023121387283236993},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.019736842105263157},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.029197080291970802},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.014388489208633094},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.032407407407407406},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.01932367149758454},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.025210084033613446},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.016574585635359115},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.03409090909090909},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.030303030303030304},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.014814814814814815},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.018433179723502304},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.00946372239747634},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.013636363636363636},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.018518518518518517},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.022151898734177215},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.02459016393442623},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.024390243902439025},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.0380952380952381},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.023668639053254437},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.046153846153846156},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.030303030303030304},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.045454545454545456},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.023668639053254437},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.05},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.034482758620689655},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},"'":{"2":{"docs":{},"'":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}}}},"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}},"'":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}},".":{"docs":{},"'":{"docs":{},":":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}},"?":{"docs":{},"'":{"docs":{},":":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}},"注":{"docs":{},"意":{"docs":{},"：":{"docs":{},"=":{"docs":{},"=":{"docs":{},"因":{"docs":{},"为":{"docs":{},"左":{"docs":{},"边":{"docs":{},"和":{"docs":{},"右":{"docs":{},"边":{"docs":{},"对":{"docs":{},"于":{"docs":{},"接":{"docs":{},"雨":{"docs":{},"水":{"docs":{},"没":{"docs":{},"有":{"docs":{},"用":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"左":{"docs":{},"边":{"docs":{},"我":{"docs":{},"们":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"加":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},">":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}},"docs":{}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"1":{"docs":{},")":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}}},"docs":{}}}}}},"i":{"docs":{},"f":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}}},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},":":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},"*":{"docs":{},"(":{"docs":{},"m":{"docs":{},"+":{"2":{"docs":{},")":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}},"docs":{}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}}}}}}}}}}}},"docs":{},"]":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}},"docs":{}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"h":{"docs":{},")":{"docs":{},":":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},":":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}}}}}}}}}},">":{"0":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.01},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0213903743315508},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818}}},"1":{"1":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644}}},"docs":{"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0427807486631016},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.05263157894736842},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.011560693641618497},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.025}}},"2":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.01},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.013888888888888888},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0374331550802139},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.007518796992481203},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.014492753623188406},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.009433962264150943},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.026785714285714284},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.10526315789473684},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.017341040462427744},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.025},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}},"我":{"docs":{},"们":{"docs":{},"此":{"docs":{},"时":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"先":{"docs":{},"建":{"docs":{},"立":{"docs":{},"一":{"docs":{},"个":{"docs":{},"双":{"docs":{},"向":{"docs":{},"连":{"docs":{},"接":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"然":{"docs":{},"后":{"docs":{},"再":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"即":{"docs":{},"可":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}}}}}}}}}}}}}}}},"。":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644}}}},"3":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.02},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.013888888888888888},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0213903743315508},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.007518796992481203},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.014492753623188406},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.03636363636363636},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.009433962264150943},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.07894736842105263},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.023121387283236993},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.025},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}},"\"":{"docs":{},"]":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}},"4":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.015},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.020833333333333332},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.012145748987854251},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0106951871657754},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.007518796992481203},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.014492753623188406},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.02727272727272727},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.011560693641618497},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0375},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644}},",":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}},"5":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.01},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.016042780748663103},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.014492753623188406},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.011560693641618497},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0375}},",":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}},";":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}},".":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}},"\"":{"docs":{},",":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}},"6":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834}}},"7":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}},"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.008982035928143712},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.013986013986013986},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.03587443946188341},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.015},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.03296703296703297},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.03546099290780142},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.018518518518518517},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.024193548387096774},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.023809523809523808},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.03125},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.023316062176165803},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.012345679012345678},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.014492753623188406},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.023316062176165803},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.015873015873015872},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.009404388714733543},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.039603960396039604},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.023622047244094488},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.018867924528301886},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.015748031496062992},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.03125},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.014634146341463415},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.016666666666666666},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.02247191011235955},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.020833333333333332},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.020242914979757085},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.037037037037037035},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.018796992481203006},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.05825242718446602},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.018867924528301886},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.021897810218978103},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.027777777777777776},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.05442176870748299},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.017391304347826087},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.010416666666666666},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.016129032258064516},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.03067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.03409090909090909},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.014218009478672985},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.013636363636363636},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.018691588785046728},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.01293103448275862},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.00949367088607595},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.012295081967213115},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.041474654377880185},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.032520325203252036},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.0594059405940594},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.05825242718446602},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.014285714285714285},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.047337278106508875},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.018604651162790697},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.017045454545454544},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.047337278106508875},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.025},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.026455026455026454},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.02702702702702703},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.02702702702702703}},"=":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}}}}},"docs":{}}}}}}}}}}}},">":{"docs":{"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827}},"=":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}},">":{"docs":{},">":{"docs":{},">":{"docs":{},">":{"docs":{},">":{"docs":{},"'":{"docs":{},"a":{"docs":{"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}},"docs":{}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"来":{"docs":{},"获":{"docs":{},"得":{"docs":{},"新":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},"。":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0427807486631016},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.007518796992481203},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}},",":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0106951871657754},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}}},"【":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"】":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.011560693641618497}}}},"docs":{}}},"docs":{}},"，":{"7":{"docs":{},"】":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"先":{"docs":{},"保":{"docs":{},"证":{"docs":{},"数":{"docs":{},"组":{"docs":{},"有":{"docs":{},"序":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"在":{"docs":{},"这":{"docs":{},"之":{"docs":{},"前":{"docs":{},"先":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.0196078431372549}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"2":{"docs":{},"，":{"3":{"docs":{},"】":{"docs":{},",":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"一":{"docs":{},"直":{"docs":{},"都":{"docs":{},"指":{"docs":{},"着":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}},"'":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},")":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}},"x":{"docs":{},")":{"docs":{},")":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}}}}}}}}}}}}},"[":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}},",":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.013888888888888888}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"2":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}},"1":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}},"docs":{}}},"docs":{}}},"9":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}},"，":{"docs":{},"链":{"docs":{},"表":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}},"]":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}},"。":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}},"+":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},"+":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}},"docs":{}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{},"+":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},"+":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}},"docs":{}}}}}}}}}}}}}},"*":{"2":{"5":{"6":{"docs":{"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025}}},"docs":{}},"6":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}},"docs":{}},"5":{"8":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}},"docs":{}},"docs":{},"(":{"docs":{},"m":{"docs":{},"+":{"2":{"docs":{},")":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}},"docs":{}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}},"docs":{}}}}}}}},"k":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}},"docs":{}}}},"a":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}}}}},"m":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}}}}}}}}}}},"1":{"0":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"7":{"docs":{},",":{"6":{"docs":{},",":{"1":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},"]":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}},"5":{"docs":{},",":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}},"9":{"docs":{},",":{"2":{"docs":{},",":{"5":{"docs":{},",":{"3":{"docs":{},",":{"7":{"docs":{},",":{"1":{"0":{"1":{"docs":{},",":{"1":{"8":{"docs":{},"]":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}}},"2":{"docs":{},",":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}}},"5":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}},",":{"docs":{"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105}}}}},"docs":{}}},"6":{"docs":{},",":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}},"8":{"docs":{},",":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}},"docs":{},",":{"0":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}}},"docs":{}}},"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}},"docs":{}}},"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}},"2":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},"，":{"docs":{},"数":{"docs":{},"组":{"1":{"docs":{},"/":{"3":{"docs":{},"长":{"docs":{},"=":{"2":{"docs":{},"（":{"docs":{},"向":{"docs":{},"下":{"docs":{},"取":{"docs":{},"整":{"docs":{},"）":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"1":{"docs":{},"和":{"2":{"docs":{},"都":{"docs":{},"是":{"docs":{},"符":{"docs":{},"合":{"docs":{},"条":{"docs":{},"件":{"docs":{},"的":{"docs":{},"。":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}},"docs":{}}}},"docs":{}}},"docs":{}}}}}},"docs":{}}},"docs":{}}},"3":{"docs":{},"]":{"docs":{},",":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"4":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},"]":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}},",":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}},"docs":{}}},"2":{"docs":{},"]":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}},",":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}},"2":{"docs":{},",":{"3":{"docs":{},",":{"3":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"4":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}}}},"docs":{}}},"docs":{}}}}}}}}}}}}},"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}},",":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}},"3":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}},"docs":{}}},"docs":{}}},"1":{"docs":{},"]":{"docs":{"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}},"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}}},"docs":{}}},"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}},",":{"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}},"docs":{}},"]":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}},"docs":{}}},"8":{"docs":{},",":{"1":{"2":{"docs":{},",":{"1":{"1":{"docs":{},",":{"1":{"0":{"docs":{},",":{"9":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"]":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}}}},"6":{"docs":{},",":{"9":{"docs":{},",":{"8":{"docs":{},",":{"7":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"9":{"9":{"docs":{},",":{"8":{"docs":{},",":{"7":{"docs":{},",":{"6":{"docs":{},",":{"5":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"]":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}},",":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}}},"docs":{}}},"3":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}},"2":{"docs":{},"]":{"docs":{},",":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}}},"5":{"docs":{},",":{"4":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}}},"docs":{}}},"6":{"docs":{},"]":{"docs":{},",":{"docs":{"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.058823529411764705}}}}},"7":{"docs":{},"]":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}}},"docs":{}},"]":{"docs":{"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358}},",":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}}}},"6":{"docs":{},",":{"7":{"docs":{},",":{"9":{"docs":{},",":{"4":{"docs":{},",":{"1":{"0":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}},",":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}}},"4":{"docs":{},"]":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}},",":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}}},"5":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}},"docs":{}},"]":{"docs":{},",":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}},"。":{"docs":{},"由":{"docs":{},"于":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"不":{"docs":{},"相":{"docs":{},"交":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}},"6":{"docs":{},"]":{"docs":{},".":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}},"8":{"docs":{},",":{"6":{"docs":{},",":{"2":{"docs":{},",":{"5":{"docs":{},",":{"4":{"docs":{},",":{"8":{"docs":{},",":{"3":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}},"。":{"docs":{},"在":{"docs":{},"此":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"容":{"docs":{},"器":{"docs":{},"能":{"docs":{},"够":{"docs":{},"容":{"docs":{},"纳":{"docs":{},"水":{"docs":{},"（":{"docs":{},"表":{"docs":{},"示":{"docs":{},"为":{"docs":{},"蓝":{"docs":{},"色":{"docs":{},"部":{"docs":{},"分":{"docs":{},"）":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"为":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.029411764705882353}}},"]":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.009202453987730062},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}},"*":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.02608695652173913}}}}}}}}}}},",":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}},"2":{"0":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},",":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}}},"docs":{}}},"3":{"docs":{},",":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521}}}},"4":{"docs":{},",":{"1":{"2":{"docs":{},",":{"8":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{},",":{"0":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}},"3":{"docs":{},"]":{"docs":{},",":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}}},"5":{"docs":{},",":{"6":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}},"。":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358}}}},"docs":{}}},"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}}},"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}}},"docs":{}}},"3":{"docs":{},"]":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}},"docs":{}},"]":{"docs":{},",":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}},"3":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}}},"2":{"docs":{},"]":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}},"3":{"2":{"docs":{},",":{"2":{"docs":{},",":{"2":{"3":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616}}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{},"]":{"docs":{},",":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}}},"4":{"docs":{},"]":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}},"5":{"docs":{},"]":{"docs":{},",":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}}},"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{},",":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}}},"docs":{}}},"7":{"docs":{},",":{"1":{"0":{"1":{"docs":{},"]":{"docs":{},"，":{"docs":{},"它":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"是":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}},"]":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},",":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}}},"4":{"docs":{},"]":{"docs":{},",":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}}},"5":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}},"docs":{}}},"docs":{}}},"6":{"docs":{},"]":{"docs":{},",":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}},",":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"6":{"docs":{},"]":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}},"，":{"docs":{},"链":{"docs":{},"表":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}},"docs":{}}},"7":{"docs":{},",":{"9":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}},"]":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}},",":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}},"3":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}}},"4":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}}}},"docs":{}}}}}}}},"docs":{}}},"2":{"docs":{},",":{"0":{"docs":{},",":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}},"1":{"docs":{},",":{"4":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}}},"docs":{}}},"5":{"docs":{},",":{"6":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}},"3":{"docs":{},"]":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"4":{"docs":{},"]":{"docs":{},",":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}},"。":{"docs":{},"在":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}},"docs":{}}},"3":{"0":{"docs":{},",":{"3":{"4":{"docs":{},",":{"5":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"4":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}},"docs":{}}},"docs":{}},"]":{"docs":{},")":{"docs":{},"。":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}},"docs":{}},"]":{"docs":{},",":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}}},"5":{"docs":{},",":{"1":{"docs":{},",":{"6":{"docs":{},",":{"2":{"docs":{},",":{"0":{"docs":{},",":{"8":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"7":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}},",":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}},"9":{"9":{"docs":{},",":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894}}}},"docs":{},",":{"2":{"0":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"1":{"5":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}},"，":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}},",":{"docs":{"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}}},"docs":{}}},"docs":{}},"docs":{}}}}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}},"]":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105}},",":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}},"4":{"7":{"docs":{},"]":{"docs":{},":":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}},"8":{"docs":{},"]":{"docs":{},":":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}},"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}},"docs":{}}},"docs":{}}},"8":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}},"，":{"docs":{},"链":{"docs":{},"表":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}},"docs":{}}},"docs":{}}},"9":{"docs":{},"]":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}},"docs":{}}},"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}},"docs":{}}},"3":{"docs":{},"]":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}}},"5":{"docs":{},",":{"1":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},",":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.018518518518518517}}},"，":{"docs":{},"它":{"docs":{},"可":{"docs":{},"以":{"docs":{},"表":{"docs":{},"示":{"docs":{},"为":{"docs":{},":":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}}}}}}}}}},"docs":{}}},"6":{"docs":{},",":{"7":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.012345679012345678},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.015748031496062992},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358}},",":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.012987012987012988}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"9":{"docs":{},"]":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}},"docs":{}},"]":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}},"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}},"5":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"8":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}},"。":{"docs":{},"在":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"6":{"docs":{},",":{"2":{"docs":{},",":{"4":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"1":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993}}}}},"docs":{}}},"docs":{}},"docs":{}}},"6":{"docs":{},",":{"7":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"8":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993}}}},"docs":{}}},"docs":{}}},"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}},"]":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}},"6":{"docs":{},",":{"2":{"docs":{},",":{"8":{"docs":{},",":{"0":{"docs":{},",":{"4":{"docs":{},",":{"7":{"docs":{},",":{"9":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"3":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}},",":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"7":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"7":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"3":{"docs":{},",":{"6":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"6":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}}},"9":{"9":{"docs":{},",":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}},"docs":{},",":{"1":{"0":{"docs":{},",":{"1":{"1":{"docs":{},",":{"1":{"2":{"docs":{},"]":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"5":{"docs":{},",":{"7":{"docs":{},",":{"2":{"0":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"2":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105}}}}},"docs":{}},"3":{"docs":{},",":{"1":{"5":{"docs":{},",":{"2":{"0":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}},"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.02},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.02631578947368421},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.02158273381294964},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.041666666666666664},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.027777777777777776},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0182648401826484},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.02247191011235955},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.007009345794392523},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.021897810218978103},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.021897810218978103},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.012048192771084338},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.0196078431372549},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.02702702702702703}},"]":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.02112676056338028},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.025362318840579712},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.019230769230769232},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.019230769230769232},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.06766917293233082},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.039473684210526314},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.04597701149425287},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.02877697841726619},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.02097902097902098},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.021505376344086023},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.02459016393442623},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.020833333333333332},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.018604651162790697},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.03333333333333333},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.021164021164021163},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.029411764705882353},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.021621621621621623}},",":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}},"然":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"个":{"docs":{},"添":{"docs":{},"加":{"docs":{},"元":{"docs":{},"素":{"docs":{},",":{"docs":{},"因":{"docs":{},"为":{"docs":{},"从":{"docs":{},"两":{"docs":{},"边":{"docs":{},"向":{"docs":{},"中":{"docs":{},"间":{"docs":{},"遍":{"docs":{},"历":{"docs":{},",":{"docs":{},"添":{"docs":{},"加":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"从":{"docs":{},"大":{"docs":{},"到":{"docs":{},"小":{"docs":{},",":{"docs":{},"如":{"docs":{},"果":{"docs":{},"我":{"docs":{},"们":{"docs":{},"用":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},")":{"docs":{},"，":{"docs":{},"则":{"docs":{},"最":{"docs":{},"后":{"docs":{},"需":{"docs":{},"要":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"如":{"docs":{},"果":{"docs":{},"添":{"docs":{},"加":{"docs":{},"元":{"docs":{},"素":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},")":{"docs":{},"则":{"docs":{},"每":{"docs":{},"次":{"docs":{},"添":{"docs":{},"加":{"docs":{},"元":{"docs":{},"素":{"docs":{},",":{"docs":{},"其":{"docs":{},"实":{"docs":{},"内":{"docs":{},"部":{"docs":{},"都":{"docs":{},"有":{"docs":{},"大":{"docs":{},"量":{"docs":{},"操":{"docs":{},"作":{"docs":{},"(":{"docs":{},"当":{"docs":{},"前":{"docs":{},"元":{"docs":{},"素":{"docs":{},"向":{"docs":{},"后":{"docs":{},"移":{"docs":{},"位":{"docs":{},")":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"先":{"docs":{},"定":{"docs":{},"义":{"docs":{},"好":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"直":{"docs":{},"接":{"docs":{},"修":{"docs":{},"改":{"docs":{},"相":{"docs":{},"应":{"docs":{},"位":{"docs":{},"置":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}},":":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}}},"x":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}},"−":{"2":{"3":{"1":{"docs":{},",":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}},"docs":{}},"docs":{}},"docs":{}},"a":{"docs":{},",":{"docs":{},"b":{"docs":{},"]":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}}},"[":{"0":{"docs":{},"]":{"docs":{},"*":{"docs":{},"*":{"2":{"docs":{},"]":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}},"docs":{}}}}},"docs":{}},"r":{"docs":{},"r":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082}}}}},"docs":{}}}},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}},"docs":{}}}}}}}},"\"":{"1":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}},"\"":{"docs":{},",":{"docs":{},"\"":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"1":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"0":{"docs":{},"\"":{"docs":{},"]":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}},"docs":{}}}}},"docs":{}}}}},"1":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"0":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}},"docs":{}}}}},"1":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"1":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}},"docs":{}}}}},"docs":{}}}}},"docs":{}}}}},"1":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"1":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"1":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"1":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}},"docs":{}}}}},"docs":{}}}}},"docs":{}}}}},"docs":{}}}}},"2":{"5":{"5":{"docs":{},".":{"2":{"5":{"5":{"docs":{},".":{"1":{"1":{"docs":{},".":{"1":{"3":{"5":{"docs":{},"\"":{"docs":{},",":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{},"\"":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"4":{"docs":{},"\"":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"docs":{},"+":{"docs":{},"\"":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"\"":{"docs":{},"]":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"\"":{"docs":{},"]":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"\"":{"docs":{},"]":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}}}}}}}},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"\"":{"docs":{},"]":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}},",":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}}}}}},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}},"'":{"2":{"docs":{},"'":{"docs":{},"]":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}},"docs":{},"}":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"]":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},")":{"docs":{},"'":{"docs":{},"]":{"docs":{},":":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}}}}}}}}}}},"a":{"docs":{},"'":{"docs":{},",":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385}},"'":{"docs":{},"b":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"c":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}},"d":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},"]":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}},"#":{"docs":{},"'":{"docs":{},"]":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}},"s":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"f":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"c":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"s":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}},"!":{"docs":{},"t":{"docs":{},"i":{"docs":{},"p":{"docs":{},"]":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"]":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.02127659574468085},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}},"i":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.027777777777777776},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}}}},"+":{"1":{"docs":{},",":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}},"j":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}},"docs":{}}}}},"docs":{}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{},"]":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.015544041450777202},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.015544041450777202}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"]":{"docs":{},"*":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"s":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}},"docs":{}}}}}}},"s":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}},"docs":{}}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"]":{"docs":{},"*":{"2":{"6":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}},"docs":{}},"docs":{}}}}}},"e":{"docs":{},"w":{"docs":{},"_":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}},"docs":{}}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},")":{"docs":{},",":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282}}}}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{},",":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},"*":{"docs":{},"(":{"docs":{},"s":{"2":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}}},"docs":{}}}}}}},"docs":{}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},")":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"2":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}},"docs":{}}},"docs":{}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"2":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}},"docs":{}}}}}}},"docs":{}}}}}},"n":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152}}},"m":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}}},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"8":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"5":{"docs":{},",":{"1":{"8":{"docs":{},"]":{"docs":{},"]":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},"]":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}},"docs":{}}},"docs":{}}}}},"5":{"docs":{},"]":{"docs":{},"]":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}},"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"8":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"5":{"docs":{},",":{"1":{"8":{"docs":{},"]":{"docs":{},"]":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{},"i":{"docs":{},"]":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}},"docs":{}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"]":{"docs":{},"*":{"docs":{},"m":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{},"*":{"docs":{},"m":{"docs":{},"]":{"docs":{},"*":{"docs":{},"n":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}},"docs":{}}}},"docs":{}}}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"]":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}},"*":{"docs":{},"(":{"docs":{},"m":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}},"docs":{}}}}}}}}}}},"]":{"docs":{},"]":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{},"*":{"docs":{},"m":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}},"docs":{}}}},"docs":{}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"]":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"]":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}},".":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},"]":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"]":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},"]":{"docs":{},",":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}}}}}}}}}}}}},"[":{"docs":{},":":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}}}}}},"(":{"docs":{},"n":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}},"i":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}},"docs":{}}}}},"_":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.014492753623188406},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.009202453987730062},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"_":{"docs":{},"_":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.022988505747126436}},"l":{"docs":{},"i":{"docs":{},")":{"docs":{},":":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}},")":{"docs":{},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.009404388714733543},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"_":{"docs":{},"_":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358}}}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":5}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}}}}}}}}}},"a":{"1":{"docs":{},"，":{"docs":{},"a":{"2":{"docs":{},"，":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"，":{"docs":{},"a":{"docs":{},"n":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"代":{"docs":{},"表":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"中":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}},"2":{"docs":{"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358}}},"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"*":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}},"_":{"docs":{},"_":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"_":{"docs":{},"_":{"docs":{},"(":{"docs":{},")":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"3":{"docs":{},"'":{"docs":{},")":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}}}}},"docs":{}}}}}}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.018867924528301886},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.01293103448275862},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364}}},"=":{"docs":{},"[":{"0":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},",":{"8":{"docs":{},",":{"9":{"docs":{},",":{"docs":{},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"b":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"c":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"d":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"f":{"docs":{},"'":{"docs":{},"]":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},"]":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}},",":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"1":{"docs":{},",":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"[":{"0":{"docs":{},"]":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}},">":{"docs":{},"=":{"0":{"docs":{},":":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}}},"docs":{}}}}},"1":{"docs":{},":":{"docs":{},"]":{"docs":{},"+":{"docs":{},"a":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}},"docs":{}}}}}}},"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"]":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}},"a":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"]":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}}}}}}},"i":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414}},"]":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}},":":{"docs":{},":":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}},"n":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.039473684210526314},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},")":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}},"b":{"docs":{},")":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}},"v":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}},"v":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"：":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}},"]":{"docs":{},"=":{"docs":{},"=":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"]":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"d":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.02912621359223301},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.0297029702970297},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.02912621359223301}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}},"d":{"docs":{},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}},"m":{"docs":{},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}}}}}}}}}}}},":":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}},"2":{"docs":{},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}},"3":{"docs":{},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}},"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}}}}}}}}}}}}},"l":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}}}},"e":{"docs":{},"n":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285}}}}},"r":{"docs":{},"r":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.010869565217391304},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.02459016393442623},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}},"a":{"docs":{},"y":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.054385964912280704},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}},")":{"docs":{},":":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}},":":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.025974025974025976},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.03125}}},"[":{"0":{"docs":{},"]":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}},"）":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}}}}}}},",":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.022099447513812154},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.022099447513812154}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}}}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}},"[":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}},"i":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}},"]":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}},"=":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"docs":{"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517}}}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082}}}}},"1":{"docs":{},"]":{"docs":{},")":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}},"docs":{}}}},"j":{"docs":{},"]":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}}}}},"+":{"docs":{},"[":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{},"]":{"docs":{"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517}}}}}}}}}}}}}}}}},":":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517}}}}}}}}},"_":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203}},">":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"_":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}},",":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.027586206896551724},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.01904761904761905},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.022727272727272728}},"化":{"docs":{},"简":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}},",":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.013452914798206279}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"_":{"1":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406}}},"docs":{}}}}},"a":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.04285714285714286}}}}}},"b":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.04285714285714286}}}}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"'":{"docs":{"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}},">":{"0":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}},"docs":{},"=":{"0":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}},"docs":{}}}}}},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425}}}}}}}},")":{"docs":{},":":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"平":{"docs":{},"方":{"docs":{},"组":{"docs":{},"成":{"docs":{},"的":{"docs":{},"新":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"要":{"docs":{},"求":{"docs":{},"也":{"docs":{},"按":{"docs":{},"非":{"docs":{},"递":{"docs":{},"减":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"排":{"docs":{},"序":{"docs":{},"。":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"求":{"docs":{},"导":{"docs":{},"可":{"docs":{},"以":{"docs":{},"知":{"docs":{},"道":{"docs":{},"，":{"docs":{},"函":{"docs":{},"数":{"docs":{},"上":{"docs":{},"任":{"docs":{},"意":{"docs":{},"一":{"docs":{},"点":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{},"y":{"docs":{},")":{"docs":{},"的":{"docs":{},"切":{"docs":{},"线":{"docs":{},"的":{"docs":{},"斜":{"docs":{},"率":{"docs":{},"为":{"2":{"docs":{},"x":{"docs":{},"。":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"，":{"docs":{},"c":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}}}},";":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}},"那":{"docs":{},"么":{"docs":{},"我":{"docs":{},"们":{"docs":{},"的":{"docs":{},"目":{"docs":{},"的":{"docs":{},"就":{"docs":{},"是":{"docs":{},"求":{"docs":{},"得":{"docs":{},"x":{"docs":{},"使":{"docs":{},"得":{"docs":{},"f":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"与":{"docs":{},"x":{"docs":{},"轴":{"docs":{},"的":{"docs":{},"交":{"docs":{},"点":{"docs":{},"的":{"docs":{},"横":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"(":{"docs":{},"即":{"docs":{},"a":{"docs":{},"的":{"docs":{},"正":{"docs":{},"平":{"docs":{},"方":{"docs":{},"根":{"docs":{},")":{"docs":{},"。":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}}}}}}}}}}}}}}}}}}},"+":{"docs":{},"[":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}},"b":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862}}}},"p":{"docs":{},"p":{"docs":{},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}},"l":{"docs":{},"e":{"docs":{},":":{"docs":{},"{":{"docs":{},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}},"\"":{"docs":{},"。":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}},"s":{"docs":{},"c":{"docs":{},"i":{"docs":{},"i":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}},"码":{"docs":{},"中":{"docs":{},"的":{"9":{"0":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}},"docs":{}},"docs":{}}}}}}},"'":{"docs":{"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125}}}},"*":{"2":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.012578616352201259}}},"docs":{}},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.031818181818181815}},",":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909}}},":":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.013636363636363636}}},"。":{"docs":{},"编":{"docs":{},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"来":{"docs":{},"计":{"docs":{},"算":{"docs":{},"可":{"docs":{},"以":{"docs":{},"凑":{"docs":{},"成":{"docs":{},"总":{"docs":{},"金":{"docs":{},"额":{"docs":{},"所":{"docs":{},"需":{"docs":{},"的":{"docs":{},"最":{"docs":{},"少":{"docs":{},"的":{"docs":{},"硬":{"docs":{},"币":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"没":{"docs":{},"有":{"docs":{},"任":{"docs":{},"何":{"docs":{},"一":{"docs":{},"种":{"docs":{},"硬":{"docs":{},"币":{"docs":{},"组":{"docs":{},"合":{"docs":{},"能":{"docs":{},"组":{"docs":{},"成":{"docs":{},"总":{"docs":{},"金":{"docs":{},"额":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"a":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}},"i":{"docs":{},")":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.023255813953488372}}}}},"b":{"2":{"docs":{"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358}}},"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.011976047904191617},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.02608695652173913},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.025974025974025976},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.025157232704402517},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.047619047619047616},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.016194331983805668},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.020242914979757085},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.01293103448275862},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0375},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.041379310344827586},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"b":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"*":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}}}}}},"y":{"docs":{},")":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}}}}}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.0440251572327044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.01293103448275862},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}}}}}},"=":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}},"docs":{}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.0125},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386}},":":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.03296703296703297},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.015873015873015872},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.018867924528301886},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.015151515151515152},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}},",":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}},":":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}},":":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}},"!":{"docs":{},"=":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}},"'":{"docs":{},"o":{"docs":{},"'":{"docs":{},":":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}},":":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}}},"=":{"docs":{},"'":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}},"o":{"docs":{},"'":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}},"x":{"docs":{},"'":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}},"=":{"docs":{},"'":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}},"o":{"docs":{},"'":{"docs":{},":":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}},"g":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}},":":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.02564102564102564},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.038461538461538464},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.013986013986013986},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},"]":{"docs":{"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025}}}}},"j":{"docs":{},")":{"docs":{},"]":{"docs":{"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"]":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806}}}}}}}},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"]":{"docs":{},"]":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"]":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"]":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}},"(":{"docs":{},"k":{"1":{"docs":{},")":{"docs":{},")":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}}}}},"2":{"docs":{},")":{"docs":{},")":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}}}}},"docs":{}}}}}}}},"n":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421}},"_":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}}}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},":":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}},"f":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0043859649122807015},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.02280701754385965},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.017391304347826087}}},"y":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}},"l":{"docs":{},"i":{"docs":{},",":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},")":{"docs":{},")":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}},"a":{"docs":{},"+":{"docs":{},"b":{"docs":{},")":{"docs":{},"[":{"2":{"docs":{},":":{"docs":{},"]":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}}}},"docs":{}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"2":{"docs":{},")":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}},"3":{"docs":{},")":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}},"4":{"docs":{},")":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}},"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}}}}}}}}}},"e":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}},"e":{"docs":{},"r":{"docs":{},"）":{"docs":{},"或":{"docs":{},"直":{"docs":{},"接":{"docs":{},"将":{"docs":{},"输":{"docs":{},"入":{"docs":{},"转":{"docs":{},"换":{"docs":{},"为":{"docs":{},"整":{"docs":{},"数":{"docs":{},"来":{"docs":{},"处":{"docs":{},"理":{"docs":{},"。":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}}}}},"e":{"docs":{},"n":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285}}}}},"u":{"docs":{},"y":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}}}}}}}}}}}}}},",":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364}}},"c":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.026905829596412557}},"s":{"docs":{},",":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852}}},">":{"docs":{},"=":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"c":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}},"s":{"docs":{},"+":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"c":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.02},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.009478672985781991},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}},";":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242}}}},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{},"_":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"b":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"]":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}}}}}}},"j":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414}},"]":{"docs":{},")":{"docs":{},",":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.04285714285714286}}}}}},"i":{"docs":{},"]":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087}},">":{"0":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}},"docs":{},"=":{"0":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}},"docs":{}}}}}},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}}},"，":{"docs":{},"a":{"docs":{},"为":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"a":{"docs":{},"，":{"docs":{},"a":{"docs":{},"为":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"就":{"docs":{},"返":{"docs":{},"回":{"docs":{},"b":{"docs":{"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655}}}}}}}}}}}}}}}}}}}}}}}}},"使":{"docs":{},"得":{"docs":{"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358}}}}},"/":{"docs":{},"k":{"docs":{},"=":{"docs":{},"（":{"docs":{},"x":{"0":{"docs":{},"+":{"docs":{},"a":{"docs":{},"/":{"docs":{},"x":{"0":{"docs":{},"）":{"docs":{},"/":{"2":{"docs":{},"。":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}},"docs":{}}}},"docs":{}}}}}},"docs":{}}}},"。":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}},"。":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}},";":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.02040816326530612},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}},"）":{"docs":{},"，":{"docs":{},"在":{"docs":{},"要":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"（":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"）":{"docs":{},"的":{"docs":{},"两":{"docs":{},"侧":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"这":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"就":{"docs":{},"是":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"父":{"docs":{},"节":{"docs":{},"点":{"docs":{},"；":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834}},"e":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}},"a":{"docs":{},"l":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}},"docs":{},"l":{"docs":{},",":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}},"docs":{}},",":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}}}}}},"f":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.03293413173652695},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.02564102564102564},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.027972027972027972},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.013452914798206279},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.05263157894736842},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.014084507042253521},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.01694915254237288},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.04477611940298507},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.025},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.03296703296703297},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.03571428571428571},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.028846153846153848},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.027624309392265192},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.026595744680851064},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.028985507246376812},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.031746031746031744},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.02631578947368421},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.024691358024691357},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.016129032258064516},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.03636363636363636},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.015544041450777202},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.012345679012345678},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.014492753623188406},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.015544041450777202},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.021164021164021163},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.02821316614420063},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.034653465346534656},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.025157232704402517},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.014925373134328358},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.02727272727272727},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.01948051948051948},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.02247191011235955},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.02654867256637168},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.023622047244094488},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.029850746268656716},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0390625},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.013605442176870748},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.017391304347826087},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.014388489208633094},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.03205128205128205},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.024390243902439025},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.02727272727272727},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.05555555555555555},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.02112676056338028},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.017985611510791366},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.025},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.03205128205128205},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.03},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.020833333333333332},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.020242914979757085},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.018433179723502304},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.012145748987854251},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.018518518518518517},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.022556390977443608},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.018867924528301886},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.013157894736842105},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.03278688524590164},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0364963503649635},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.022556390977443608},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.02877697841726619},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.018518518518518517},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.014492753623188406},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.02608695652173913},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.024691358024691357},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.025210084033613446},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.027624309392265192},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.020833333333333332},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.03827751196172249},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.02},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.027972027972027972},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.026881720430107527},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.023809523809523808},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.024390243902439025},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.02147239263803681},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.030303030303030304},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.018518518518518517},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.011235955056179775},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.014218009478672985},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.015772870662460567},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.01818181818181818},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.018518518518518517},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.02570093457943925},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.00949367088607595},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.012295081967213115},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.017857142857142856},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.013245033112582781},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.023809523809523808},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.05263157894736842},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.040983606557377046},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.03125},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.028169014084507043},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.03614457831325301},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.0196078431372549},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.042105263157894736},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.029411764705882353},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.04186046511627907},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.030303030303030304},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.012861736334405145},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.03333333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.015151515151515152},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.021052631578947368},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.012861736334405145},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.013888888888888888},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.034482758620689655},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.026455026455026454},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.029411764705882353},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.02702702702702703}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.013824884792626729}}}}}}}}}}}}}}}}},"c":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}},"o":{"docs":{},"d":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},")":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.021897810218978103},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405}},",":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}}}},"e":{"docs":{},"p":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"i":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.029850746268656716}}}}}},"t":{"docs":{},"h":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.022988505747126436}},"%":{"2":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},":":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}},"docs":{}}}},"docs":{}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},".":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}},"=":{"docs":{},"{":{"docs":{},"}":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},"+":{"docs":{},"=":{"1":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}},"docs":{}}},"=":{"1":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}},"docs":{}},">":{"docs":{},"n":{"docs":{},"/":{"3":{"docs":{},"]":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}},"docs":{}}}}}}},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}},"(":{"docs":{},"i":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},")":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}}}}}}},"f":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.038461538461538464},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.038461538461538464}},"f":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.017857142857142856}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.013452914798206279}}}}}}}},"n":{"docs":{},"d":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.03587443946188341}},",":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852}}},":":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.026905829596412557}},")":{"docs":{},":":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852}}}},":":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852}}},"。":{"docs":{},"将":{"docs":{},"两":{"docs":{},"数":{"docs":{},"相":{"docs":{},"除":{"docs":{},"，":{"docs":{},"要":{"docs":{},"求":{"docs":{},"不":{"docs":{},"使":{"docs":{},"用":{"docs":{},"乘":{"docs":{},"法":{"docs":{},"、":{"docs":{},"除":{"docs":{},"法":{"docs":{},"和":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}},"(":{"6":{"docs":{},",":{"3":{"docs":{},")":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}},"docs":{}}},"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},"+":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"j":{"docs":{},")":{"docs":{},"+":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},",":{"1":{"0":{"docs":{},")":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}},"docs":{}},"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}},"r":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}},"s":{"docs":{},":":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.014354066985645933}},",":{"docs":{"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818}}},")":{"docs":{},":":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421}}}}}}},"f":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.02280701754385965},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386}}}}}}}}}}}}}}},"p":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.017543859649122806},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.027777777777777776},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.014218009478672985},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.013392857142857142},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}},"[":{"0":{"docs":{},"]":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.012618296529968454},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}},"[":{"0":{"docs":{},"]":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}},"docs":{},"j":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}},"]":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}},"i":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}},"+":{"1":{"docs":{},"]":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}},"docs":{}},"]":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}},",":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}},"d":{"docs":{},"p":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}},"docs":{}}}}}}},"1":{"docs":{},"]":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}},"[":{"1":{"docs":{},"]":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576}}}},"docs":{}},"=":{"3":{"docs":{},"，":{"2":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}},"docs":{}}},"docs":{}}}},"2":{"docs":{},"]":{"docs":{},",":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}},"=":{"4":{"docs":{},"，":{"3":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}},"docs":{}}},"docs":{}}}},"3":{"docs":{},"]":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}},"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.009478672985781991},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428}},"i":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.015151515151515152},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.018433179723502304},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}},"]":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.011111111111111112},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.014218009478672985},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.02631578947368421},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}},")":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}},"[":{"0":{"docs":{},"]":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}},"docs":{},"j":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.00949367088607595},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}},"]":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.00949367088607595},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.018433179723502304}},"=":{"0":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}},"docs":{}}}}},"表":{"docs":{},"示":{"docs":{},"前":{"docs":{},"i":{"docs":{},"个":{"docs":{},"字":{"docs":{},"母":{"docs":{},"的":{"docs":{},"最":{"docs":{},"少":{"docs":{},"分":{"docs":{},"割":{"docs":{},"次":{"docs":{},"数":{"docs":{},",":{"docs":{},"默":{"docs":{},"认":{"docs":{},"为":{"docs":{},"i":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}},"*":{"2":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}},"docs":{}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"+":{"1":{"docs":{},":":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"做":{"docs":{},"任":{"docs":{},"何":{"docs":{},"调":{"docs":{},"整":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}}}}}}}}}}}},"docs":{}}}}}}}},"+":{"1":{"docs":{},"]":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428}}}},"docs":{}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}}}},"j":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}},"]":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374}},"=":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}},"=":{"1":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408}}},"docs":{}}},"+":{"1":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}},")":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}}}},"docs":{}}}},"k":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}},"]":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}},"[":{"docs":{},"m":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}},"]":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.016853932584269662}}}}}}},"'":{"4":{"docs":{},"'":{"docs":{},"]":{"docs":{},"+":{"1":{"docs":{},"=":{"4":{"docs":{},",":{"docs":{},"所":{"docs":{},"以":{"docs":{},"最":{"docs":{},"后":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"d":{"docs":{},"p":{"docs":{},")":{"docs":{},",":{"docs":{},"答":{"docs":{},"案":{"docs":{},"为":{"5":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"6":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}},"docs":{}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}},"docs":{}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"]":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},"]":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}}}}}}},"n":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338}}},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{},"]":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}},"(":{"docs":{},"m":{"docs":{},",":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}},"docs":{}}}}}}}}}}}}},"i":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.018433179723502304}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}}}}}}},"=":{"docs":{},"【":{"1":{"docs":{},"，":{"2":{"docs":{},"，":{"4":{"docs":{},"】":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}},"docs":{}}},"docs":{}}},"docs":{}}},"和":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"实":{"docs":{},"际":{"docs":{},"位":{"docs":{},"置":{"docs":{},"相":{"docs":{},"差":{"1":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"当":{"docs":{},"前":{"docs":{},"状":{"docs":{},"态":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"的":{"docs":{},"上":{"docs":{},"上":{"docs":{},"（":{"docs":{},"前":{"2":{"docs":{},"）":{"docs":{},"状":{"docs":{},"态":{"docs":{},"位":{"docs":{},"d":{"docs":{},"p":{"docs":{},"【":{"docs":{},"i":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"【":{"docs":{},"n":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.016260162601626018}},"】":{"docs":{},"表":{"docs":{},"示":{"docs":{},"n":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"可":{"docs":{},"编":{"docs":{},"码":{"docs":{},"数":{"docs":{},"，":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}}}}}}}}}}}}},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}}}}}}}}}}},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0035087719298245615}}}}}},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.014492753623188406},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.018867924528301886}}},"y":{"docs":{},",":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}},";":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.014492753623188406},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.014150943396226415}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}}}}}}}}}}}}}}},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}},"=":{"docs":{},"c":{"docs":{},"'":{"docs":{},",":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"变":{"docs":{},"成":{"docs":{},"：":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}},"n":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}},",":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}},":":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834}},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},")":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}}},"[":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"]":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}},"e":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}}}}},"l":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901}},"s":{"docs":{},"e":{"docs":{},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.011976047904191617},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.013986013986013986},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.025974025974025976},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.04225352112676056},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.022598870056497175},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.015},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.057692307692307696},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.039473684210526314},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.012345679012345678},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.016129032258064516},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.012953367875647668},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.009876543209876543},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.012953367875647668},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.019230769230769232},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.02926829268292683},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.03125},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.01875},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.019230769230769232},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.017341040462427744},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.015151515151515152},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.014218009478672985},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.018604651162790697},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.022988505747126436},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.026455026455026454},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.02702702702702703}}}}},"e":{"docs":{},"m":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364}}}}},")":{"docs":{},":":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}},"=":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}},"i":{"docs":{},"f":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.027586206896551724},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.014084507042253521},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.01694915254237288},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.024390243902439025},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.023809523809523808},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.028409090909090908},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}},"n":{"docs":{},"d":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}},"\"":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}},")":{"docs":{},":":{"docs":{"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}},",":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}},"]":{"docs":{},":":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},":":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872}}}}}}}}}}},")":{"docs":{},":":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}},"]":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}},"s":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428}}}},",":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}},"i":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{},":":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}},"docs":{}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},"o":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"e":{"docs":{},"l":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}}}}}},"g":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}}},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"w":{"docs":{},"o":{"docs":{},"w":{"docs":{},"!":{"docs":{},"!":{"docs":{},"!":{"docs":{},"\"":{"docs":{},";":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219}}},"u":{"docs":{},"t":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}},"n":{"docs":{},"t":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872}},"e":{"docs":{},":":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}},"f":{"docs":{},"为":{"docs":{},"例":{"docs":{},"：":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349}}}}}}}}}}}}}},"r":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}},")":{"docs":{},":":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}},":":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}}}},"k":{"docs":{},"a":{"docs":{},"t":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}},"f":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.056179775280898875}},"a":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094}},"l":{"docs":{},"s":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.008982035928143712},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.028169014084507043},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.038461538461538464},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.037037037037037035},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.018808777429467086},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0297029702970297},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.03773584905660377},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.034482758620689655},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.012987012987012988},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.028089887640449437},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0234375},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.02112676056338028},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.03508771929824561},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.0423728813559322},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.025210084033613446},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.02},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.011111111111111112},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.012658227848101266},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.020491803278688523},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.022508038585209004},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.022508038585209004}},"e":{"docs":{},"。":{"docs":{"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}},":":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}},".":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}},";":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}},"s":{"docs":{},"t":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.01},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.02631578947368421},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.041474654377880185},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.04245283018867924},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.019736842105263157},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.03278688524590164}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.013824884792626729},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.02830188679245283},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.04918032786885246}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.009216589861751152},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}},":":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.009216589861751152},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428}}}}}}}},":":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.009433962264150943},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.013157894736842105},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082}}},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}}},":":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403}}},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"跳":{"docs":{},"到":{"3":{"docs":{},",":{"docs":{},"第":{"docs":{},"二":{"docs":{},"次":{"docs":{},"跳":{"docs":{},"到":{"5":{"docs":{},",":{"docs":{},"由":{"docs":{},"于":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"为":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{},"所":{"docs":{},"以":{"docs":{},"退":{"docs":{},"出":{"docs":{},"循":{"docs":{},"环":{"docs":{},",":{"docs":{},"所":{"docs":{},"以":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.02127659574468085}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.015873015873015872},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.016216216216216217}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.018518518518518517},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.023622047244094488},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.029850746268656716}}}}}}}},"_":{"1":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839}}}}}}}}},"docs":{}}}},"a":{"docs":{},"x":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"(":{"docs":{},"'":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"c":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"'":{"docs":{},",":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125}}}}}}}},"d":{"docs":{},"c":{"docs":{},"d":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"c":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"'":{"docs":{},",":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}}}}}}}}}}}}}}}}},"s":{"1":{"docs":{},",":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}}},"docs":{}}}},"m":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.007009345794392523}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"t":{"docs":{},"h":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.03278688524590164}}}}}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.028985507246376812},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"3":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},")":{"docs":{},":":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}}}}}},"docs":{},"(":{"docs":{},"[":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"4":{"5":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},")":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"o":{"docs":{},"f":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"c":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728}}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414}}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085}}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"l":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.015625}}}}}}}}}}}},"g":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.014218009478672985}}}},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.01818181818181818}}}}}}}},"\"":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},":":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}},"(":{"0":{"docs":{},")":{"docs":{"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549}}}},"1":{"docs":{},")":{"docs":{"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549}}}},"2":{"6":{"docs":{},",":{"1":{"6":{"docs":{},")":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{},"n":{"docs":{"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0392156862745098}},",":{"docs":{},"x":{"docs":{},")":{"docs":{},":":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}},")":{"docs":{"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0392156862745098}},"。":{"docs":{"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549}}}}},"i":{"docs":{},")":{"docs":{},"=":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"f":{"docs":{},"(":{"docs":{},"j":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}},"docs":{}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"(":{"6":{"docs":{},")":{"docs":{"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.05263157894736842}}}},"docs":{},"n":{"docs":{"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.05263157894736842}},")":{"docs":{},":":{"docs":{"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.05263157894736842},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549}}}},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.05555555555555555}}}},",":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.0392156862745098}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}}}}}}}},"l":{"docs":{},"i":{"docs":{},")":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.01},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.02631578947368421}},":":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.01},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.02631578947368421}}}},",":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.04807692307692308}}}}},"s":{"1":{"docs":{},",":{"docs":{"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025}}}},"docs":{},",":{"0":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}}}}}}}}},"docs":{"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"0":{"docs":{},")":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}}},"docs":{}}}}}}}}},"docs":{}},",":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.01639344262295082},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678}}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},",":{"docs":{},"x":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{},"j":{"docs":{},",":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}}}}},"[":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},")":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"a":{"docs":{},",":{"2":{"docs":{},",":{"0":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},")":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616}}}}}}}}}},"docs":{}}},"docs":{}},"r":{"docs":{},"r":{"docs":{},",":{"docs":{"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818}}},")":{"docs":{},":":{"docs":{"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},",":{"docs":{"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.03636363636363636}}}}}}},"'":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"a":{"docs":{},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"a":{"docs":{},"a":{"docs":{},"b":{"docs":{},"d":{"docs":{},"d":{"docs":{},"a":{"docs":{},"'":{"docs":{},")":{"docs":{"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}},":":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}},")":{"docs":{"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}}}}}}}}}}}}}},"x":{"docs":{},",":{"docs":{},"y":{"docs":{},")":{"docs":{},":":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}},"i":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684}}}},"docs":{}}}},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}},"e":{"docs":{},"n":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094}}}},"（":{"0":{"docs":{},"）":{"docs":{},"=":{"6":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"docs":{}}}},"1":{"docs":{},"）":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"（":{"docs":{},"f":{"docs":{},"（":{"0":{"docs":{},"）":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},"docs":{}}}}}}}}}},"2":{"docs":{},"）":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"（":{"docs":{},"f":{"docs":{},"（":{"1":{"docs":{},"）":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},"docs":{}}}}}}}}}},"3":{"docs":{},"）":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"（":{"docs":{},"f":{"docs":{},"（":{"2":{"docs":{},"）":{"docs":{},"+":{"7":{"docs":{},"，":{"7":{"docs":{},"）":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"（":{"1":{"docs":{},"+":{"7":{"docs":{},"，":{"7":{"docs":{},"）":{"docs":{},"=":{"8":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"docs":{}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}},"docs":{}}},"docs":{}}}},"docs":{}}}}}}}}}},"4":{"docs":{},"）":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"（":{"docs":{},"f":{"docs":{},"（":{"3":{"docs":{},"）":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},"docs":{}}}}}}}}}},"docs":{},"i":{"docs":{},"）":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"（":{"docs":{},"f":{"docs":{},"（":{"docs":{},"i":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}},"：":{"docs":{},"以":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"为":{"docs":{},"末":{"docs":{},"尾":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"和":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"，":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"相":{"docs":{},"对":{"docs":{},"位":{"docs":{},"置":{"docs":{},"不":{"docs":{},"变":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762}}}},"=":{"0":{"docs":{},";":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}},"docs":{}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.021739130434782608}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.021739130434782608}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}}}}}}}}}}}},"h":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.014814814814814815}},"e":{"docs":{},"a":{"docs":{},"d":{"1":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.02}},",":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}},"2":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.02}},")":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}},":":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}},":":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}},"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.023952095808383235},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.03},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.020833333333333332},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0213903743315508},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.02631578947368421},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.041474654377880185},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.027777777777777776},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.07518796992481203},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.03636363636363636},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.02358490566037736},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.06896551724137931},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.026785714285714284},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.05202312138728324},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.05263157894736842},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125}},")":{"docs":{},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.013824884792626729},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.01},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0106951871657754},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.017543859649122806},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.009216589861751152},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.018796992481203006},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.013157894736842105}},":":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.009216589861751152},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.007518796992481203}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.017543859649122806},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}},":":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428}}}}}}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.022556390977443608},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.018867924528301886},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.013157894736842105},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125}}},";":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}},",":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.03278688524590164}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}},"a":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.020242914979757085}},",":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.012145748987854251}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834}}}}}}},":":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834}}}},"b":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.03643724696356275}},")":{"docs":{},":":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.012145748987854251}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834}}}}}}},":":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834}}}},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.03278688524590164}}}}}}}},"p":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"q":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}},".":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}}}}},"g":{"docs":{},"w":{"docs":{},")":{"docs":{},"[":{"2":{"docs":{},"]":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}},"docs":{}}}}},"p":{"docs":{},")":{"docs":{},"[":{"2":{"docs":{},"]":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}},"docs":{}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},",":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}}}}},"g":{"docs":{},"w":{"docs":{},",":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834}}}}},"p":{"docs":{},",":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}}}}}}}}},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"h":{"docs":{},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}}}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"h":{"docs":{},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"h":{"docs":{},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"h":{"docs":{},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"h":{"docs":{},",":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.026455026455026454},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.02702702702702703}}}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"h":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.021164021164021163},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.021621621621621623}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}}}}}}}}},"x":{"docs":{},"(":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},")":{"docs":{},")":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}}},"r":{"docs":{},"e":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.03278688524590164},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.029411764705882353}},".":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.007772020725388601},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.007407407407407408},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.007772020725388601}},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.015544041450777202},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.015544041450777202},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}},"[":{"0":{"docs":{},"]":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676}}}},"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}},":":{"docs":{},"]":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.007772020725388601},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.007772020725388601}}}},"i":{"docs":{},"]":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.007772020725388601},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.007772020725388601}},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.010362694300518135},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.010362694300518135}}},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}},">":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}},"j":{"docs":{},"]":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.012953367875647668},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.012953367875647668}},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}},">":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"]":{"docs":{},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676}}}}}}}},"s":{"docs":{},")":{"docs":{},":":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}},":":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.009876543209876543}}},"[":{"0":{"docs":{},"]":{"docs":{},"*":{"1":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}},"docs":{}}}},"docs":{},":":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}},"i":{"docs":{},"]":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.009876543209876543}},")":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}},":":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.007407407407407408}}},">":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"]":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}},"o":{"docs":{},"w":{"docs":{},"]":{"docs":{},">":{"docs":{},"=":{"docs":{},"h":{"docs":{},":":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},":":{"docs":{},"]":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"]":{"docs":{},")":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}},"j":{"docs":{},"]":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203}}}}}}}}}},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986}}}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421}}}}}}},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288}}}}}}}}}}}}}}}},"o":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}},"r":{"docs":{},"i":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428}}},"y":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}}}},":":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}}}}},"g":{"docs":{},"h":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.03209876543209877},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676}}}}}},"=":{"docs":{},"h":{"docs":{},":":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.012345679012345678}}}}},")":{"docs":{},":":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094}}}}}}}}}}}}}}}},")":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}},"m":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.03550295857988166},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.03550295857988166},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.02112676056338028},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.0125},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.02158273381294964},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.021739130434782608},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.015337423312883436},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.01892744479495268},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.013888888888888888},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}}}},"a":{"docs":{},"j":{"docs":{},"o":{"docs":{},"r":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.027972027972027972},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}},"c":{"docs":{},"h":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541}},"s":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}},")":{"docs":{},":":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}}}}},"h":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.011403508771929825},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358}},".":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0035087719298245615},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.014492753623188406},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.0125},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}},":":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.014492753623188406},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.014492753623188406}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}},",":{"docs":{},"r":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}},"docs":{},"k":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}},"]":{"docs":{},"=":{"docs":{},"=":{"docs":{},"\"":{"1":{"docs":{},"\"":{"docs":{},":":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203}}}}},"docs":{}}}}}}}}},"i":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}},"docs":{},"j":{"docs":{},"]":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}},")":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}},"=":{"docs":{},"=":{"docs":{},"'":{"1":{"docs":{},"'":{"docs":{},":":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152}}}}},"docs":{}}}}}}}}}},",":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.0125}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}},";":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}},",":{"docs":{},"n":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}},";":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}}}},")":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}},"docs":{},"j":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}},"]":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}},"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}},"i":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}},"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}},"j":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}},"]":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0546875},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.017241379310344827},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.025},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.05}},")":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}}},"+":{"1":{"docs":{},"]":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}},"docs":{}}},"l":{"docs":{},"]":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}},"+":{"1":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}},"docs":{}}},"b":{"docs":{},"]":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}},";":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}},":":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"u":{"docs":{},"m":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.014492753623188406}}}}}}}}}}}}}}}}},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}}}}}}}}}}}}}},"(":{"0":{"docs":{},",":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}}}}}}}}}}},"4":{"docs":{},",":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}},"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338}},"b":{"docs":{},"a":{"docs":{},"g":{"docs":{},",":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.01694915254237288},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.007407407407407408},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}},"w":{"docs":{},"i":{"docs":{},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},")":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}}}}}}},"[":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}},"_":{"1":{"docs":{},",":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"_":{"2":{"docs":{},")":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}},"docs":{}}}}}}},"docs":{}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},",":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678}}}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},")":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}},"[":{"docs":{},"i":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}},"]":{"docs":{},",":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}}}}},"j":{"docs":{},"]":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.009478672985781991}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},",":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}}}}}},"(":{"docs":{},"a":{"docs":{},")":{"docs":{},",":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"b":{"docs":{},")":{"docs":{},")":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}}}}}}}}}}},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"a":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.02857142857142857}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"*":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"*":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}}}}}}}}}},"docs":{}}}}}}},",":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}},"docs":{}}}}}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}},")":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}},"(":{"docs":{},"h":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},",":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},")":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},",":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678}}}}}}}}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},",":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}},"i":{"docs":{},",":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.01694915254237288},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.03125},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.02586206896551724},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.03333333333333333},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}},",":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}},":":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.028985507246376812}},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406}}}}},"docs":{}},":":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406}}}}}},"i":{"docs":{},"d":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.03125},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.01293103448275862},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.03333333333333333}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.023622047244094488},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}},":":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}},"i":{"docs":{},"d":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408}}}}}},"u":{"docs":{},"b":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.014388489208633094},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.02336448598130841}},":":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.009345794392523364}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.009345794392523364}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}}}}}}}}}}}}},"m":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.007009345794392523}},":":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.021897810218978103},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.013245033112582781}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.03225806451612903}},":":{"docs":{"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516}}}},".":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.021897810218978103},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.021897810218978103}},"_":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}},"o":{"docs":{},"f":{"docs":{},"i":{"docs":{},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},",":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}},"p":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},",":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},",":{"docs":{},"(":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}},"docs":{}}},"n":{"docs":{},",":{"docs":{},"n":{"docs":{},",":{"docs":{},"n":{"docs":{},",":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"m":{"docs":{},",":{"docs":{},"m":{"docs":{},",":{"docs":{},"m":{"docs":{},",":{"docs":{},"m":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"i":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}}}}},"r":{"docs":{},"k":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.009302325581395349}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}}}}}}}}}},":":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.007894736842105263}},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082}}}}}}},"l":{"docs":{},"i":{"docs":{},",":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.012145748987854251}}}}}}}}}}}}}},"r":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"1":{"docs":{},",":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.01}}}},"docs":{}}}}}},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"1":{"docs":{},")":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}},"2":{"docs":{},")":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}},"docs":{},")":{"docs":{},":":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}}}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.020833333333333332}}}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421}}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}}}}}}}}}}}}},"m":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}},"[":{"0":{"docs":{},"]":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}}},"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}},"i":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}},"]":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}},"[":{"0":{"docs":{},"]":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}},"docs":{},"j":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}},"]":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}}}},"o":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}},")":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909}},":":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}},"[":{"docs":{},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.01818181818181818}}}}}}}}}}},":":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}},"i":{"docs":{},"d":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.01},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.028846153846153848},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.024691358024691357},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.016129032258064516},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.03636363636363636},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.012345679012345678},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.012987012987012988},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.017391304347826087},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}},"d":{"docs":{},"l":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525}},"e":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.013157894736842105}}}}}}}}}}}}}}},"]":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}},")":{"docs":{},",":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839}}},"*":{"docs":{},"h":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}},"+":{"1":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.014814814814814815},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}},",":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.012345679012345678},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}},"docs":{}},"*":{"docs":{},"*":{"2":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"docs":{}}},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.012345679012345678}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}}}}},",":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}},":":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}},",":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421}}}}}},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406}}}}},"d":{"docs":{},"i":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.05263157894736842}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.04819277108433735},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.04819277108433735},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}},":":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.02702702702702703},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.013245033112582781}},"e":{"docs":{},")":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}},">":{"0":{"docs":{},":":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}},"docs":{}}}}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{},",":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"1":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.012345679012345678},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}}}},"docs":{}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},",":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}}},"i":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}},",":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}},"docs":{}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},",":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.03508771929824561}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},",":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},")":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"[":{"docs":{},"i":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227}},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},",":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.019417475728155338}}}}}}}}}}}}},"u":{"docs":{},"p":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},",":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"[":{"docs":{},"j":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}},"docs":{}},",":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"j":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}},"i":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152}}}},"i":{"docs":{},"，":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"d":{"docs":{},"p":{"docs":{},"i":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}}}}}},"i":{"docs":{},",":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285}}}},"[":{"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"4":{"docs":{},",":{"7":{"docs":{},",":{"4":{"docs":{},",":{"6":{"docs":{},",":{"4":{"docs":{},",":{"7":{"docs":{},",":{"8":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},",":{"1":{"0":{"docs":{},",":{"8":{"docs":{},"]":{"docs":{},",":{"4":{"docs":{},",":{"8":{"docs":{},")":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806}}}},"docs":{}}},"docs":{}}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806}}}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}}}}}}}}}}},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.017985611510791366},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.015772870662460567}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.021897810218978103},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.021897810218978103}},"_":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}}}}}}}}}}}},"o":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"h":{"docs":{},"a":{"docs":{},"l":{"docs":{},"f":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}}},"docs":{}}}},"docs":{}}}}}}}},"d":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}},"v":{"docs":{},"e":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.007518796992481203}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}},":":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.014925373134328358}}}}}}}}}}}}}}},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}},"docs":{},"n":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}},":":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.012269938650306749}}},">":{"docs":{},"=":{"0":{"docs":{},":":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}},"docs":{}}},"y":{"docs":{},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.016129032258064516}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}}}}}}}}}},"=":{"docs":{},"{":{"docs":{},"}":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}},"docs":{}}}}}}},"[":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"]":{"docs":{},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}}}}}}}}}}}}}},"*":{"docs":{},"n":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}},",":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}},"n":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}},")":{"docs":{},":":{"docs":{"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655}}},"!":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}},"!":{"docs":{},"]":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}},"n":{"2":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775}}},"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.008982035928143712},"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.03260869565217391},"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.05263157894736842},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.015},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.03571428571428571},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.029585798816568046},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.03597122302158273},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.025906735751295335},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.01728395061728395},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.025906735751295335},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.029585798816568046},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.05309734513274336},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.017391304347826087},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.02112676056338028},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.0125},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.016666666666666666},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0319634703196347},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.02247191011235955},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.012145748987854251},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.021739130434782608},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.02830188679245283},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.015337423312883436},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.033707865168539325},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.018957345971563982},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.058823529411764705},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.018072289156626505},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.027586206896551724},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.03488372093023256},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.04929577464788732},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.019417475728155338},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.04225352112676056},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.02702702702702703}},"=":{"0":{"docs":{},":":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}}},"1":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}},"2":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"要":{"docs":{},"向":{"docs":{},"下":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}}},"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}}}}},"=":{"0":{"docs":{},":":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}},"1":{"docs":{},":":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862}}}},"docs":{}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.008982035928143712},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.03},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.016042780748663103},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.027649769585253458},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.016194331983805668},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.03007518796992481},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.019417475728155338},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.01932367149758454},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.017391304347826087},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.05042016806722689},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.057291666666666664},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.023923444976076555},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.016129032258064516},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.03571428571428571},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.019801980198019802},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.019417475728155338}},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}},",":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.014285714285714285},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.017045454545454544}}},":":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.016574585635359115},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.009404388714733543},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.01485148514851485},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.009216589861751152},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.011278195488721804},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.009433962264150943},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.017341040462427744},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.029197080291970802},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.018518518518518517},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.025210084033613446},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.016574585635359115},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.046875},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.03349282296650718},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.03763440860215054},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.034482758620689655},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.01}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"了":{"docs":{},"。":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}}}}}}}}}}}}}},"#":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}},"d":{"docs":{},"e":{"1":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.01680672268907563}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}}}},"2":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.01680672268907563}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"=":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0043859649122807015},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.0219435736677116},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.009216589861751152},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.027777777777777776},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.007518796992481203},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.010416666666666666},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.019138755980861243},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.04597701149425287}},".":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},",":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}}}},"v":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}}}}}},"v":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}},":":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}},":":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}}}}}}}}},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.009404388714733543},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986}}},"[":{"docs":{},"\"":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"\"":{"docs":{},"]":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}},"'":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"'":{"docs":{},"]":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"]":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.009404388714733543}}}}}}}},"，":{"docs":{},"连":{"docs":{},"上":{"docs":{},"原":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"的":{"docs":{},"话":{"docs":{},"就":{"docs":{},"算":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},"变":{"docs":{},"动":{"docs":{},"了":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"还":{"docs":{},"可":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{},"d":{"docs":{},"u":{"docs":{},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{},":":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}},",":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}}},"(":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},")":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}},"w":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}},"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}},"j":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}},"]":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}},":":{"docs":{},"]":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}},"u":{"docs":{},"m":{"1":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.03482587064676617},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.05303030303030303},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}},",":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}},":":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.015151515151515152}},">":{"0":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}},"docs":{},"=":{"0":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}},"docs":{}}}}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}}}}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"1":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"]":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}}}}},"docs":{}}}}}},"2":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.029850746268656716},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.022727272727272728}},")":{"docs":{},":":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}},":":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.015151515151515152}},")":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}},">":{"0":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}},"docs":{},"=":{"0":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}},"docs":{}}}}}}},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}}}}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"2":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"]":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}}}}},"docs":{}}}}}},"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.02564102564102564},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.013986013986013986},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.05755395683453238},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.023809523809523808},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.020833333333333332},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.01948051948051948},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.028089887640449437},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.013605442176870748},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.02158273381294964},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.009478672985781991},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.02570093457943925},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}},"s":{"1":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.0650887573964497},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.0425531914893617},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.0650887573964497}},",":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.015957446808510637}}},".":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}},"docs":{}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}}}},":":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}},"[":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"]":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.01775147928994083},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.01775147928994083}}}}}},"m":{"docs":{},"]":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}},">":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},":":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}}}},"docs":{}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"_":{"1":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}}},"docs":{}}}}}},"~":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"]":{"docs":{},")":{"docs":{},"/":{"2":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}},"docs":{}}}}}}}}}}}}},"+":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}},"docs":{}}}}}}},"2":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.05325443786982249},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.02127659574468085},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.05325443786982249}},")":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.015957446808510637}}},")":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}},":":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.026595744680851064},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}},"[":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}},"n":{"docs":{},"]":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.011834319526627219},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.011834319526627219}}},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"_":{"2":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},":":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}}}},"docs":{}}}}}},":":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"_":{"2":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}}}},"docs":{}}}}}}}},"的":{"docs":{},"下":{"docs":{},"标":{"docs":{},"为":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}}},"，":{"docs":{},"将":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}}}},"。":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}},"docs":{},")":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.02097902097902098},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.015748031496062992},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.029850746268656716},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.017391304347826087},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.009478672985781991},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.007009345794392523},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.02459016393442623},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.009302325581395349},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.011363636363636364}}}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.038461538461538464},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.02097902097902098},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.020689655172413793},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.028985507246376812},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.024691358024691357},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.016853932584269662},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.031496062992125984},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.034482758620689655},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.02040816326530612},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.017391304347826087},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.018518518518518517},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.011682242990654205},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.014285714285714285},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.020833333333333332},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.018604651162790697},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.017045454545454544},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.024793388429752067}}},"[":{"0":{"docs":{},"]":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.02127659574468085},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.024691358024691357},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.047244094488188976},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.029850746268656716},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.011682242990654205},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.021897810218978103},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.021897810218978103}},",":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}}}}}},"1":{"docs":{},":":{"docs":{},"]":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567}},":":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}},"]":{"docs":{},")":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}}},"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.012345679012345678},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}},":":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.012987012987012988},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}},",":{"docs":{},"则":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"右":{"docs":{},"边":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}}}}}},"如":{"docs":{},"【":{"2":{"docs":{},"，":{"2":{"docs":{},"，":{"2":{"docs":{},"，":{"1":{"docs":{},"，":{"2":{"docs":{},"】":{"docs":{},"无":{"docs":{},"法":{"docs":{},"区":{"docs":{},"别":{"docs":{},"时":{"docs":{},"，":{"docs":{},"只":{"docs":{},"能":{"docs":{},"求":{"docs":{},"左":{"docs":{},"右":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"返":{"docs":{},"回":{"docs":{},"左":{"docs":{},"右":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"中":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},"/":{"docs":{},"/":{"2":{"docs":{},"]":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}}},"docs":{}}}}}}}}}}},"+":{"1":{"docs":{},"]":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872}}}},"docs":{}},"]":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}},":":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}}}},"r":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}},")":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839}}},":":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358}}},"：":{"docs":{},"例":{"docs":{},"子":{"docs":{},"：":{"docs":{},"[":{"7":{"docs":{},",":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839}}}},"docs":{}}}}}}}}}}},"]":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}}},"~":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"]":{"docs":{},")":{"docs":{},"/":{"2":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}},"docs":{}}}}}}}}}}}}},"j":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}},"+":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}},":":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}},"+":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},">":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"+":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},":":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"]":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}},"docs":{}}}}}}}}},":":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}},"docs":{}},"]":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.01948051948051948},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}},":":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}},"i":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.020833333333333332},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.017391304347826087}},"]":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.020833333333333332},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.017391304347826087},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.023696682464454975},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.009302325581395349},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.0196078431372549}},":":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}},",":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{},"x":{"docs":{},"+":{"docs":{},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368}}}}}}}}}}}}}}}}}}},"x":{"docs":{},"+":{"docs":{},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{},"（":{"docs":{},"含":{"docs":{},"义":{"docs":{},"为":{"docs":{},"保":{"docs":{},"留":{"docs":{},"前":{"docs":{},"面":{"docs":{},"累":{"docs":{},"加":{"docs":{},"和":{"docs":{},"与":{"docs":{},"以":{"docs":{},"当":{"docs":{},"前":{"docs":{},"元":{"docs":{},"素":{"docs":{},"为":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"哪":{"docs":{},"种":{"docs":{},"更":{"docs":{},"优":{"docs":{},"）":{"docs":{},"，":{"docs":{},"即":{"docs":{},"判":{"docs":{},"断":{"docs":{},"后":{"docs":{},"面":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"是":{"docs":{},"否":{"docs":{},"舍":{"docs":{},"去":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"累":{"docs":{},"计":{"docs":{},"加":{"docs":{},"和":{"docs":{},"，":{"docs":{},"并":{"docs":{},"继":{"docs":{},"续":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"下":{"docs":{},"一":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}}}}}}},">":{"docs":{},"=":{"0":{"docs":{},":":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}},"docs":{}}}}},"(":{"docs":{},"i":{"docs":{},"+":{"docs":{},"k":{"docs":{},")":{"docs":{},"%":{"docs":{},"n":{"docs":{},"]":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}}}}}}}},":":{"docs":{},"]":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.01327433628318584}}},"i":{"docs":{},"]":{"docs":{},":":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282}}}}},"k":{"docs":{},"]":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}}}},"n":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}},"k":{"docs":{},":":{"docs":{},"i":{"docs":{},"]":{"docs":{},":":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},":":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},":":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}}}}}},".":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.020833333333333332}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{},"x":{"docs":{},")":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}}}},"docs":{}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}},"i":{"docs":{},")":{"docs":{"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.02127659574468085},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.017391304347826087},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.1111111111111111},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}},")":{"docs":{},":":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}},"+":{"1":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}},":":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}}},"docs":{}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827}}}}}}}}}}}}}}}}}},",":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.032467532467532464},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.033707865168539325},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.022123893805309734},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.02564102564102564},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.02564102564102564},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.01639344262295082},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}},"其":{"docs":{},"中":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}},"返":{"docs":{},"回":{"docs":{},"该":{"docs":{},"数":{"docs":{},"组":{"docs":{},"所":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"的":{"docs":{},"子":{"docs":{},"集":{"docs":{},"（":{"docs":{},"幂":{"docs":{},"集":{"docs":{},"）":{"docs":{},"。":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0043859649122807015},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}},"s":{"docs":{},",":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}},":":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"+":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"/":{"2":{"docs":{},"]":{"docs":{},";":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762}}}}},"docs":{}}}}}}}}}}}}}}}}},")":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762}}}}}}},",":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.013986013986013986}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"a":{"docs":{},"t":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}}}}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425}}}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0182648401826484}}}}},"=":{"2":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}}}},"docs":{}},"[":{"docs":{},"r":{"docs":{},"]":{"docs":{},"，":{"docs":{},"l":{"docs":{},"+":{"docs":{},"+":{"docs":{},"或":{"docs":{},"者":{"docs":{},"r":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"需":{"docs":{},"要":{"docs":{},"将":{"docs":{},"r":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}}}}}}}}}},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.015873015873015872},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.016216216216216217}},":":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}},":":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}},"l":{"docs":{},"l":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227}},")":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.020833333333333332}}},"。":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}},".":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}},"，":{"docs":{},"另":{"docs":{},"一":{"docs":{},"边":{"docs":{},"返":{"docs":{},"回":{"docs":{},"a":{"docs":{},"或":{"docs":{},"者":{"docs":{},"b":{"docs":{},"。":{"docs":{},"那":{"docs":{},"么":{"docs":{},"另":{"docs":{},"一":{"docs":{},"边":{"docs":{},"返":{"docs":{},"回":{"docs":{},"的":{"docs":{},"就":{"docs":{},"是":{"docs":{},"他":{"docs":{},"们":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"公":{"docs":{},"共":{"docs":{},"父":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}},":":{"docs":{"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}},")":{"docs":{},"。":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.022556390977443608},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.014492753623188406},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}},"w":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}},"_":{"docs":{},"x":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.015625}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}},".":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}},"docs":{}}}},"j":{"docs":{},"]":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"]":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}},"docs":{}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0106951871657754},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.015037593984962405}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.023121387283236993}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.023121387283236993}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},":":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.02358490566037736},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.012269938650306749},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}},"/":{"2":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}},"3":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}},"docs":{},"/":{"2":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}},"docs":{},"x":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}},"，":{"docs":{},"其":{"docs":{},"格":{"docs":{},"雷":{"docs":{},"编":{"docs":{},"码":{"docs":{},"序":{"docs":{},"列":{"docs":{},"并":{"docs":{},"不":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"。":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}}}}}}}}}}},"打":{"docs":{},"印":{"docs":{},"其":{"docs":{},"格":{"docs":{},"雷":{"docs":{},"编":{"docs":{},"码":{"docs":{},"序":{"docs":{},"列":{"docs":{},"。":{"docs":{},"格":{"docs":{},"雷":{"docs":{},"编":{"docs":{},"码":{"docs":{},"序":{"docs":{},"列":{"docs":{},"必":{"docs":{},"须":{"docs":{},"以":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}}}}}}}}}}}}}}}}}},"生":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"包":{"docs":{},"含":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}},"计":{"docs":{},"算":{"docs":{"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549}}}}},"%":{"4":{"docs":{"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903}}},"docs":{},"x":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}},">":{"0":{"docs":{},":":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}},"docs":{},"=":{"0":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}},":":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}},"docs":{}}},"。":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}},"）":{"docs":{},"来":{"docs":{},"保":{"docs":{},"存":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}}},",":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.017985611510791366},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.015772870662460567},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.041666666666666664},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}},"m":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.014492753623188406}}}},"n":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.009433962264150943}},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}},"j":{"docs":{},"]":{"docs":{},":":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}}}}}}}}}},"*":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}},"n":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"(":{"docs":{},"n":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}},";":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}},"{":{"docs":{},"k":{"docs":{},"}":{"docs":{},"n":{"docs":{},"k":{"docs":{},"。":{"docs":{},"$":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}},"+":{"1":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}},"docs":{}}}},"docs":{}},"x":{"docs":{},"t":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856}}}},"!":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}},"i":{"docs":{},"m":{"docs":{"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":5.032258064516129}}}}},"p":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.020242914979757085},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.036458333333333336},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0189873417721519},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.02459016393442623}},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"[":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}}},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333}}}}},"docs":{}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421}}}}}}}},"a":{"docs":{},"m":{"docs":{},"_":{"2":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}},"3":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}},"docs":{}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0043859649122807015}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"'":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}}}}}},"s":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}},"t":{"docs":{},"h":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.007017543859649123},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}},",":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.02877697841726619},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.014388489208633094},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259}}}}}}}}}}},")":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}}},";":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"a":{"docs":{},"\"":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.007017543859649123}},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.018604651162790697}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616}}}}}}}}}}}}}}}}},"n":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}},"l":{"docs":{},"u":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}},"n":{"docs":{},",":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}},"o":{"docs":{"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.034482758620689655},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.043859649122807015},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.02304147465437788}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.02631578947368421}}}}}}},"p":{"docs":{},"u":{"docs":{},"l":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}}}}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"t":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}},"[":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}},":":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},":":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}}}}}}}}}}}},"w":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}},"j":{"docs":{"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517}}}},"r":{"docs":{},"e":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.015037593984962405},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.036231884057971016},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.044642857142857144},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.03468208092485549}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},")":{"docs":{},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}},".":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028}}},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.012539184952978056}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}},">":{"0":{"docs":{},":":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}}},"docs":{}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},":":{"docs":{},"上":{"docs":{},"元":{"docs":{},"素":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547}}}}}}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.03636363636363636},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.023121387283236993}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}}}}}}},"的":{"docs":{},"先":{"docs":{},"序":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.021164021164021163}},"(":{"1":{"1":{"1":{"docs":{},")":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561}}}},"docs":{}},"docs":{}},"4":{"4":{"4":{"4":{"docs":{},")":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561}}}},"docs":{}},"docs":{}},"docs":{}},"6":{"6":{"6":{"6":{"docs":{},")":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}},"a":{"docs":{},",":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}},"b":{"docs":{},")":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"=":{"docs":{},"'":{"docs":{},"'":{"docs":{},")":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"[":{"2":{"docs":{},"]":{"docs":{},")":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}},"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}},"_":{"docs":{},")":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203}}}},")":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.01818181818181818},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.01818181818181818},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.022556390977443608},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}},"+":{"1":{"docs":{},")":{"docs":{"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421}}}},"docs":{}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},")":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009}}}}}}},"t":{"docs":{},".":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"[":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},",":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}}},"\"":{"docs":{},"十":{"docs":{},"进":{"docs":{},"制":{"docs":{},"数":{"docs":{},"为":{"docs":{},"：":{"docs":{},"\"":{"docs":{},",":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}}}},"转":{"docs":{},"换":{"docs":{},"为":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"为":{"docs":{},"：":{"docs":{},"\"":{"docs":{},",":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}}},"八":{"docs":{},"进":{"docs":{},"制":{"docs":{},"为":{"docs":{},"：":{"docs":{},"\"":{"docs":{},",":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}}},"十":{"docs":{},"六":{"docs":{},"进":{"docs":{},"制":{"docs":{},"为":{"docs":{},"：":{"docs":{},"\"":{"docs":{},",":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}}}}}}},"没":{"docs":{},"有":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"最":{"docs":{},"近":{"docs":{},"下":{"docs":{},"标":{"docs":{},"为":{"docs":{},"\"":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}}},"前":{"docs":{},"三":{"docs":{},"名":{"docs":{},"：":{"docs":{},"\"":{"docs":{},"+":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"1":{"docs":{},")":{"docs":{},"+":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"+":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"2":{"docs":{},")":{"docs":{},"+":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"+":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"3":{"docs":{},")":{"docs":{},")":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514}}}}}}}}}},"b":{"docs":{},")":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616}}},"a":{"docs":{},"g":{"docs":{},")":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.02631578947368421}}}}}},"n":{"docs":{},")":{"docs":{"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421}}},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},")":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}}}}}}}}}},"'":{"docs":{},"最":{"docs":{},"近":{"docs":{},"下":{"docs":{},"标":{"docs":{},"为":{"docs":{},"'":{"docs":{},",":{"0":{"docs":{},")":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}}},"docs":{}}}}}}}},"有":{"docs":{},"相":{"docs":{},"等":{"docs":{},"元":{"docs":{},"素":{"docs":{},",":{"docs":{},"最":{"docs":{},"近":{"docs":{},"下":{"docs":{},"标":{"docs":{},"为":{"docs":{},"'":{"docs":{},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}},"没":{"docs":{},"有":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"最":{"docs":{},"近":{"docs":{},"下":{"docs":{},"标":{"docs":{},"为":{"docs":{},"'":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}},")":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"是":{"docs":{},"换":{"docs":{},"位":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"'":{"docs":{},")":{"docs":{"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025}}}}}}}}}}},"是":{"docs":{},"换":{"docs":{},"位":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"'":{"docs":{},")":{"docs":{"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}}}}}},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}},"i":{"docs":{},")":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856}}}}},"i":{"docs":{},")":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}},",":{"docs":{},"k":{"docs":{},")":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},"[":{"0":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"a":{"docs":{},")":{"docs":{},")":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.007009345794392523}}}}}}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}},".":{"docs":{},"s":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},"[":{"docs":{},":":{"docs":{},":":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}}}},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}},"e":{"docs":{},"r":{"1":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}},"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"h":{"docs":{},",":{"docs":{},"\"":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"\"":{"docs":{},",":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"h":{"docs":{},")":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},",":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}},"t":{"docs":{},")":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}},"docs":{}}}},"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},")":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806}}}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827}}},"^":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827}}}}}}}}}}},")":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},".":{"docs":{},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{},"_":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}}}}}}},"x":{"docs":{},")":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.013953488372093023}}}},"_":{"docs":{},")":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},")":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}},")":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},")":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}}}},"t":{"docs":{},"n":{"docs":{},"(":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009}},"s":{"docs":{},")":{"docs":{},":":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}},":":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}},"[":{"0":{"docs":{},"]":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}},"1":{"docs":{},":":{"docs":{},"]":{"docs":{},":":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}}}},"o":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.017391304347826087}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}},":":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}},"y":{"2":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834}}},"3":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834}}},"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"2":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}},"3":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}},"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}},"代":{"docs":{},"码":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}},"，":{"docs":{},"在":{"docs":{},"里":{"docs":{},"面":{"docs":{},"赋":{"docs":{},"d":{"docs":{},"p":{"docs":{},"的":{"docs":{},"初":{"docs":{},"值":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}}}}},"：":{"docs":{},"自":{"docs":{},"定":{"docs":{},"义":{"docs":{},"排":{"docs":{},"序":{"docs":{},"方":{"docs":{},"法":{"docs":{},"—":{"docs":{},"—":{"docs":{},"》":{"docs":{},"冒":{"docs":{},"泡":{"docs":{},"排":{"docs":{},"序":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}}}}}}}}},"先":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"后":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"使":{"docs":{},"用":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}},"没":{"docs":{},"有":{"docs":{},"大":{"docs":{},"顶":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"想":{"docs":{},"实":{"docs":{},"现":{"docs":{},"大":{"docs":{},"顶":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"每":{"docs":{},"次":{"docs":{},"放":{"docs":{},"入":{"docs":{},"的":{"docs":{},"数":{"docs":{},"*":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}},":":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}},":":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}},":":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.03125}},":":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.010416666666666666}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748}},":":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748}}}}}}},",":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.01932367149758454},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}},"、":{"docs":{},"q":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}},"，":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"表":{"docs":{},"示":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}},"]":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}},"n":{"docs":{},"p":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}},"]":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}},"=":{"docs":{},"=":{"docs":{},"'":{"docs":{},".":{"docs":{},"'":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}},"?":{"docs":{},"'":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}}}}}}},"j":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0189873417721519},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.012295081967213115}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}},"，":{"docs":{},"请":{"docs":{},"你":{"docs":{},"来":{"docs":{},"实":{"docs":{},"现":{"docs":{},"一":{"docs":{},"个":{"docs":{},"支":{"docs":{},"持":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}},"s":{"1":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.02702702702702703},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}},":":{"docs":{"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025}}},"[":{"docs":{},"i":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},":":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.02702702702702703},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.012578616352201259}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}},":":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}}}}},",":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}},"2":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.02702702702702703}},")":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514}},":":{"docs":{"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}}},":":{"docs":{"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.034482758620689655}}},"[":{"docs":{},"j":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}},"i":{"docs":{},"]":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.02702702702702703},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.012578616352201259}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.015625},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666}}}}}},"为":{"docs":{},"基":{"docs":{},"准":{"docs":{},"，":{"docs":{},"依":{"docs":{},"次":{"docs":{},"取":{"docs":{},"出":{"docs":{},"s":{"2":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"与":{"docs":{},"s":{"1":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"相":{"docs":{},"等":{"docs":{},"不":{"docs":{},"，":{"docs":{},"相":{"docs":{},"等":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}}}}}}}}}}},"docs":{}}}}}}}}}},"docs":{}}}}}}}}}}},"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.04},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.026455026455026454},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.02727272727272727},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.015151515151515152},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.02727272727272727},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.03614457831325301},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.03614457831325301},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.030303030303030304},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.018518518518518517},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.022222222222222223},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.022151898734177215},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.02459016393442623},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.03125},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.030303030303030304}},")":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}},")":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}}}}},".":{"docs":{},"s":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}},")":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"'":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"s":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"\"":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}}}}}}}}}}}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.014970059880239521},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.02112676056338028},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.03296703296703297},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.015873015873015872},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.018518518518518517},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.011111111111111112},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.013392857142857142},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385}}}}}}}},"商":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}},"[":{"0":{"docs":{},"]":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666}}}},"docs":{},":":{"docs":{},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}},"i":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.00949367088607595},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.024390243902439025}},"]":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}}}},":":{"docs":{},"]":{"docs":{},":":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},":":{"docs":{},"i":{"docs":{},"]":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}},"[":{"docs":{},":":{"docs":{},":":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}}}}}}},"s":{"docs":{},"]":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}}}},"r":{"docs":{},"t":{"docs":{},":":{"docs":{},"i":{"docs":{},"]":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}},"n":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581}}},"j":{"docs":{},":":{"docs":{},"i":{"docs":{},"]":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408}},"[":{"docs":{},":":{"docs":{},":":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}}}}},"o":{"docs":{},"d":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"[":{"0":{"docs":{},":":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655}}}}}}}}}}}}}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"b":{"docs":{},",":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}}}}},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}},"docs":{}}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}},"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}}}}},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.016574585635359115},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.016574585635359115}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}}}}}}}}}}}}}}},"n":{"docs":{},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"k":{"docs":{},",":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"_":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.017391304347826087}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},",":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"_":{"1":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"1":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.018518518518518517},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}}}},"docs":{}}}},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}},"k":{"docs":{},"t":{"docs":{},"h":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"i":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},"+":{"1":{"docs":{},",":{"docs":{},"j":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}},"docs":{}},",":{"docs":{},"j":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},")":{"docs":{},":":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}},"docs":{}}}},"d":{"docs":{},"x":{"docs":{},",":{"docs":{},"j":{"docs":{},"d":{"docs":{},"x":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}},"k":{"docs":{},",":{"docs":{},"[":{"docs":{},"]":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},",":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368}},"[":{"docs":{},"]":{"docs":{},",":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"j":{"docs":{},",":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}}}},"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}},"s":{"docs":{},",":{"0":{"docs":{},",":{"docs":{},"[":{"docs":{},"]":{"docs":{},",":{"docs":{},"x":{"docs":{},")":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}}}}},"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.02727272727272727},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.02727272727272727}},"i":{"docs":{},",":{"docs":{},"x":{"docs":{},",":{"docs":{},"x":{"docs":{},")":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"0":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}}}}}}}}}}},"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.01327433628318584},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.03278688524590164},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}}},"docs":{},":":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}}}}}}}}}}}},",":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}},"x":{"docs":{},")":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.013888888888888888}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.013888888888888888}}}}}}}}},")":{"docs":{"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678}}}}}}},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909}}}}}}}},"i":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}},"+":{"1":{"docs":{},",":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684}}}}}}}},"j":{"docs":{},",":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}}}}}},"docs":{}},",":{"0":{"docs":{},",":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}},"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.012048192771084338},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684}}}}}}}},"j":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}},"+":{"1":{"docs":{},",":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}}}},"docs":{}}},"n":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}},"d":{"docs":{},"x":{"docs":{},",":{"docs":{},"j":{"docs":{},"d":{"docs":{},"x":{"docs":{},",":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},",":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"i":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},"+":{"1":{"docs":{},",":{"docs":{},"j":{"docs":{},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}},"docs":{}},",":{"docs":{},"j":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},"+":{"1":{"docs":{},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}},"docs":{}}}}}}},"docs":{}},",":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}},",":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.027777777777777776}}}}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}},"r":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.014388489208633094},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.037037037037037035},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.03225806451612903},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.03614457831325301},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.042105263157894736},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.025078369905956112},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.024752475247524754},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.014354066985645933},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.034482758620689655}}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547}}}}}}}}}}}}}}}},"x":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368}}}}}}},"'":{"docs":{},".":{"docs":{},"'":{"docs":{},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}}},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"[":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"]":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}}}},"docs":{}}}}}},"s":{"docs":{},",":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}},"[":{"docs":{},"i":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622}}}}}}}}}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"_":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282}}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},":":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},",":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"+":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"h":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}},":":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}},"[":{"0":{"docs":{},"]":{"docs":{},"*":{"1":{"docs":{},".":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}}}},"docs":{}},"+":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"h":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{},"/":{"2":{"docs":{},".":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}},"docs":{}}}}},"docs":{}}}}}}}}}}}}}}},"docs":{}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"h":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}},":":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}},"[":{"0":{"docs":{},"]":{"docs":{},"*":{"1":{"docs":{},".":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}}}},"docs":{}}}},"docs":{}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.01607717041800643},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.01607717041800643}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},")":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},",":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}}}}}}}}}}}},"x":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.01639344262295082},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.028169014084507043},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.0196078431372549},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.029411764705882353},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.009302325581395349}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}}}}},"l":{"docs":{},"i":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}}}}}}}}}}}}}},"k":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.020833333333333332}},")":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}},"l":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.017543859649122806},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775}}}}}}},"\"":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}},"b":{"docs":{},".":{"docs":{},".":{"docs":{},"\"":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}},"p":{"docs":{},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901}}}}}}}},"/":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176}}}}}}}}}}}}}},",":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}},"e":{"docs":{},")":{"docs":{},":":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}},"[":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}}}}},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}},"(":{"docs":{},")":{"docs":{"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.009302325581395349},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},",":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}}}}}},"r":{"1":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}},"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.02564102564102564},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}}},"g":{"docs":{},"n":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.02242152466367713}}}},"z":{"docs":{},"e":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.009478672985781991}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.009216589861751152},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}}}}},")":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.013452914798206279},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.03296703296703297},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.015544041450777202},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.009876543209876543},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.014492753623188406},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.015544041450777202},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.02564102564102564},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.02564102564102564},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.007518796992481203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.03278688524590164},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.014218009478672985},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.013636363636363636},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.0196078431372549}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.017543859649122806},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},",":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.01}}}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},",":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.02459016393442623}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},",":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}},"b":{"docs":{},"a":{"docs":{},"g":{"docs":{},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"t":{"docs":{},"o":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.017391304347826087}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.007017543859649123},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.02112676056338028},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.010362694300518135},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.012345679012345678},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.037037037037037035},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.03260869565217391},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.010362694300518135}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}},"docs":{}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}},"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.012698412698412698},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.028169014084507043},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676}}}}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},")":{"docs":{},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}},"i":{"docs":{},")":{"docs":{},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"t":{"2":{"docs":{},"/":{"docs":{},"t":{"1":{"docs":{},")":{"docs":{},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"docs":{}}}},"docs":{}}}}},")":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.04225352112676056},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.01694915254237288},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.007407407407407408},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676}}}},"o":{"docs":{},"p":{"docs":{},"s":{"docs":{},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"]":{"docs":{},"(":{"docs":{},"t":{"2":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}},"docs":{}}}}}}}}}}}},"t":{"2":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}},"*":{"docs":{},"t":{"1":{"docs":{},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}},"docs":{}}},"+":{"docs":{},"t":{"1":{"docs":{},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}},"docs":{}}}},"docs":{}},"j":{"docs":{},")":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}},":":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.02112676056338028},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.022598870056497175},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676}}},"[":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.02112676056338028},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}},"j":{"docs":{},"]":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}},":":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}},"i":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},"r":{"docs":{},"t":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.02824858757062147},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.01818181818181818},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.01818181818181818},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}},"+":{"1":{"docs":{},")":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}}},"docs":{}},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028}}}}}}}}}}}}},",":{"docs":{"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.0625},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.01818181818181818},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.01818181818181818},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}},")":{"docs":{},":":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}},"r":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.008982035928143712},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.021164021164021163},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.009404388714733543},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.03070175438596491},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.021164021164021163},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}},":":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}},"[":{"0":{"docs":{},"]":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}},"docs":{}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028}}}}}}},"(":{"docs":{},"x":{"docs":{},")":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.015625}}}},"y":{"docs":{},")":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.015151515151515152}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}}}},"_":{"docs":{},"x":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.03529411764705882}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}},")":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}}}}},")":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.03296703296703297},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.015873015873015872},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.009404388714733543},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.019801980198019802},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.018867924528301886},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666}}},",":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.018867924528301886},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}},":":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872}}},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581}}}}}}}},"p":{"docs":{},"h":{"docs":{},"a":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581}}}}}}}}}}}}}},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421}}}}},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"_":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}},":":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}}},"函":{"docs":{},"数":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}}}}}}},"q":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.016129032258064516}},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}}}}},"x":{"docs":{},":":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"决":{"docs":{},"定":{"docs":{},"了":{"docs":{},"最":{"docs":{},"后":{"docs":{},"非":{"docs":{},"法":{"docs":{},"循":{"docs":{},"环":{"docs":{},"出":{"docs":{},"去":{"docs":{},"时":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"=":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"=":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"(":{"docs":{},"s":{"1":{"docs":{},",":{"docs":{},"s":{"2":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}}}},"docs":{}}}},"docs":{}}}},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.02459016393442623}}}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.020833333333333332}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0035087719298245615}},"(":{"docs":{},"s":{"1":{"docs":{},",":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.02702702702702703}}}},"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}}}}}},"m":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.007017543859649123},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.03597122302158273},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.03597122302158273},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.027777777777777776},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.055944055944055944},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.04672897196261682}},"_":{"1":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.028985507246376812}}},"2":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.028985507246376812}},")":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406}}}},"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125}}}}},":":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.03389830508474576},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259}}},")":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.02158273381294964},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.05555555555555555}},":":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.014388489208633094},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259}}},",":{"docs":{},"因":{"docs":{},"为":{"docs":{},"这":{"docs":{},"样":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"只":{"docs":{},"会":{"docs":{},"统":{"docs":{},"计":{"docs":{},"以":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"为":{"docs":{},"根":{"docs":{},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"和":{"docs":{},"是":{"docs":{},"否":{"docs":{},"满":{"docs":{},"足":{"docs":{},"要":{"docs":{},"求":{"docs":{},"。":{"docs":{},"而":{"docs":{},"忽":{"docs":{},"略":{"docs":{},"了":{"docs":{},"以":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"和":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.02877697841726619},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.027972027972027972}},"x":{"docs":{},"+":{"docs":{},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},",":{"docs":{},"x":{"docs":{},")":{"docs":{"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},",":{"docs":{},"x":{"docs":{},")":{"docs":{"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{},"x":{"docs":{},")":{"docs":{"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986}}}}}}},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{},"g":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}},"y":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.029850746268656716}},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"1":{"0":{"0":{"0":{"0":{"0":{"0":{"docs":{},")":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.029850746268656716}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.014814814814814815},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}},"i":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.015151515151515152}}}},"，":{"docs":{},"最":{"docs":{},"多":{"docs":{},"删":{"docs":{},"除":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"。":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"能":{"docs":{},"成":{"docs":{},"为":{"docs":{},"回":{"docs":{},"文":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}}}}}}}}}}}}}}}}}}}}}}},"将":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}},"计":{"docs":{},"算":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581}},"[":{"docs":{},":":{"docs":{},":":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}},"docs":{}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.035},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.02631578947368421},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.027649769585253458},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.02830188679245283},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.026785714285714284},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.019736842105263157},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.04918032786885246}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.02},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.013824884792626729},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.02358490566037736},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.026785714285714284},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.013157894736842105},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.03278688524590164}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.009433962264150943}}}}}}}}}}}},":":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.013824884792626729},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428}}},"和":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"同":{"docs":{},"时":{"docs":{},"往":{"docs":{},"前":{"docs":{},"走":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}},"=":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428}}}}}},"k":{"docs":{},"i":{"docs":{},"p":{"docs":{},"a":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.016194331983805668}}},"b":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.016194331983805668}}}}}},"的":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"部":{"docs":{},"分":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}},"s":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616}}}}}},"t":{"1":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.009216589861751152}},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}},"!":{"docs":{},"=":{"docs":{},"t":{"2":{"docs":{},":":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}},"docs":{}}}},",":{"docs":{},"t":{"2":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}},"docs":{}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}},"2":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.009216589861751152}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.009216589861751152}}}}}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}},"c":{"docs":{},"h":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}},"m":{"docs":{},"p":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.008982035928143712},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087},"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.028169014084507043},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.031746031746031744},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.02072538860103627},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.037037037037037035},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.025362318840579712},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.02072538860103627},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.014925373134328358},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.030303030303030304},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.014388489208633094},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0106951871657754},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.014598540145985401},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.013636363636363636},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.029411764705882353},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}}},".":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.015},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.016042780748663103}},")":{"docs":{},")":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}},":":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.014354066985645933}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.014354066985645933}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}},")":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}}}},"docs":{},"~":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{},")":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}},"(":{"docs":{},"i":{"docs":{},"+":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{},"%":{"docs":{},"n":{"docs":{},"]":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}}}}}}}}}}}},"i":{"docs":{},"]":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}}},"_":{"1":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.013605442176870748}}},"2":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}},"docs":{},"c":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.013452914798206279}},"s":{"docs":{},",":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852}}}}},"r":{"docs":{},"e":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.02242152466367713},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.05172413793103448},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.04838709677419355}}}},"d":{"docs":{},"i":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.02857142857142857}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}},":":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.015151515151515152},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},"左":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"求":{"docs":{},"和":{"docs":{},"后":{"docs":{},"，":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"也":{"docs":{},"为":{"docs":{},"左":{"docs":{},"元":{"docs":{},"素":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547}}}}}}}}}}}}}}}}}}},"+":{"1":{"docs":{},")":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}},"docs":{}},">":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676}}}}}}}}}}}}},"%":{"1":{"0":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}},"docs":{}},"docs":{}},"/":{"docs":{},"/":{"1":{"0":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905}}},"docs":{}},"docs":{}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}},"[":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"]":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}},":":{"docs":{},"i":{"docs":{},"]":{"docs":{},":":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}},"]":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}}}}},"=":{"docs":{},"=":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.016666666666666666}},")":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}},":":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}}}}}}},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"u":{"docs":{},"e":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.03508771929824561},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.035211267605633804},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.04395604395604396},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.038461538461538464},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.031746031746031744},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.025078369905956112},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.034653465346534656},"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.02702702702702703},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.03773584905660377},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.05172413793103448},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.015625},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.017543859649122806},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.026785714285714284},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.024390243902439025},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.037037037037037035},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.022151898734177215},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.020491803278688523},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.022508038585209004},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.022508038585209004}},":":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}},",":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644}},"否":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581}}}}}}},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}},"}":{"docs":{},"}":{"docs":{},"#":{"docs":{},"第":{"docs":{},"二":{"docs":{},"次":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"，":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"'":{"docs":{},"p":{"docs":{},"'":{"docs":{},"存":{"docs":{},"在":{"docs":{},"结":{"docs":{},"束":{"docs":{},"'":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"'":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}},"}":{"docs":{},"}":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}},"。":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}},"如":{"docs":{},"果":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"都":{"docs":{},"不":{"docs":{},"相":{"docs":{},"同":{"docs":{},"，":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}}},".":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}}},";":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}},"a":{"docs":{},"p":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.015544041450777202},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.015544041450777202}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0035087719298245615}}}}}}},"e":{"docs":{},"e":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.03859649122807018},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.018808777429467086},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.034653465346534656},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077}},"e":{"docs":{},")":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.021897810218978103},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.010416666666666666},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.016129032258064516},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}}},",":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.009259259259259259}}},":":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.02608695652173913},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"_":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},")":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}}}}}}}}}}}}},".":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.0219435736677116}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}}},"t":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{},"{":{"docs":{},"'":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"'":{"docs":{},":":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"}":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}}}}},"}":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},".":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}}}},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},".":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"[":{"1":{"docs":{},",":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}},"docs":{}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},".":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901}}},"[":{"docs":{},"'":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"'":{"docs":{},"]":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901}}}}}}},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"'":{"docs":{},"]":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}},"i":{"docs":{},"]":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}}}}}}}},"/":{"docs":{},")":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}}}}}}}}}},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},",":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.027906976744186046}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.013953488372093023}}}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}}}}},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421}}}}}},"e":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":2.5219435736677114}},"(":{"docs":{},")":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}},";":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}},".":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.012539184952978056}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028}}}}},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}}},"树":{"docs":{},"，":{"docs":{},"即":{"docs":{},"字":{"docs":{},"典":{"docs":{},"树":{"docs":{},"，":{"docs":{},"又":{"docs":{},"称":{"docs":{},"单":{"docs":{},"词":{"docs":{},"查":{"docs":{},"找":{"docs":{},"树":{"docs":{},"或":{"docs":{},"键":{"docs":{},"树":{"docs":{},"，":{"docs":{},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"树":{"docs":{},"形":{"docs":{},"结":{"docs":{},"构":{"docs":{},"，":{"docs":{},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"哈":{"docs":{},"希":{"docs":{},"树":{"docs":{},"的":{"docs":{},"变":{"docs":{},"种":{"docs":{},"。":{"docs":{},"典":{"docs":{},"型":{"docs":{},"应":{"docs":{},"用":{"docs":{},"是":{"docs":{},"用":{"docs":{},"于":{"docs":{},"统":{"docs":{},"计":{"docs":{},"和":{"docs":{},"排":{"docs":{},"序":{"docs":{},"大":{"docs":{},"量":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"（":{"docs":{},"但":{"docs":{},"不":{"docs":{},"仅":{"docs":{},"限":{"docs":{},"于":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"）":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"经":{"docs":{},"常":{"docs":{},"被":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"引":{"docs":{},"擎":{"docs":{},"系":{"docs":{},"统":{"docs":{},"用":{"docs":{},"于":{"docs":{},"文":{"docs":{},"本":{"docs":{},"词":{"docs":{},"频":{"docs":{},"统":{"docs":{},"计":{"docs":{},"。":{"docs":{},"它":{"docs":{},"的":{"docs":{},"优":{"docs":{},"点":{"docs":{},"是":{"docs":{},"：":{"docs":{},"最":{"docs":{},"大":{"docs":{},"限":{"docs":{},"度":{"docs":{},"地":{"docs":{},"减":{"docs":{},"少":{"docs":{},"无":{"docs":{},"谓":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"查":{"docs":{},"询":{"docs":{},"效":{"docs":{},"率":{"docs":{},"比":{"docs":{},"哈":{"docs":{},"希":{"docs":{},"表":{"docs":{},"高":{"docs":{},"。":{"docs":{},"”":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"i":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421}}}},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.0196078431372549}},",":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.0196078431372549}}},":":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}}}}}}},"w":{"docs":{},"o":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.02894736842105263}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.02564102564102564},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.01951219512195122},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.01875},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.02564102564102564}}}}}}}}}}}}},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}},":":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.012698412698412698}}}}}}},"p":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}},"k":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},",":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}}}},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471}}}}}}}}}}}}}}}}},".":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}},"a":{"docs":{},"r":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.02158273381294964},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.023809523809523808},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.045454545454545456},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.02247191011235955},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.02564102564102564},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.014634146341463415},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.0125},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.02564102564102564},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.04216867469879518},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.049019607843137254},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368}},":":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.02158273381294964},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.023809523809523808},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.012987012987012988},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.016853932584269662},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.01951219512195122},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.01875},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368}}},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"存":{"docs":{},"在":{"docs":{},"返":{"docs":{},"回":{"docs":{},"下":{"docs":{},"标":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}}}}}}}}}}}}}}},"。":{"docs":{},"找":{"docs":{},"出":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}}},"该":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"具":{"docs":{},"有":{"docs":{},"以":{"docs":{},"下":{"docs":{},"特":{"docs":{},"性":{"docs":{},"：":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}}}}}}}}},")":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.01948051948051948},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.016853932584269662},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}},":":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.012987012987012988},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.016853932584269662},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.02564102564102564},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.02564102564102564},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368}}},"{":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{},"x":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.018072289156626505},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.021052631578947368}}}}}}}}}}},"）":{"docs":{},"都":{"docs":{},"是":{"docs":{},"正":{"docs":{},"整":{"docs":{},"数":{"docs":{},"。":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}}}}}}},"=":{"docs":{},"=":{"0":{"docs":{},":":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}},"docs":{}}}}}}},"k":{"docs":{},"e":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}},"i":{"docs":{},"l":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.013888888888888888},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.013888888888888888}}}}}}}}}},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872}}}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},":":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"c":{"docs":{},"\"":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}}}}}}},";":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.012145748987854251}}}}}},"x":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.011976047904191617},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.03529411764705882},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.03225806451612903},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0390625},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.020242914979757085},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.014388489208633094},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.014492753623188406},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.030303030303030304},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.008928571428571428},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.02459016393442623},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.020833333333333332},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.027906976744186046},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.030303030303030304},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.025},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.20454545454545456},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}},")":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.02158273381294964},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}},":":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.01639344262295082},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}},":":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.03225806451612903},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0390625}},"b":{"docs":{},"a":{"docs":{},"g":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282}}}}}}}},"(":{"docs":{},"x":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"docs":{},"x":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082}}}}}}},"docs":{}}}}}}},"docs":{}}}},"x":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}},",":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}},"1":{"docs":{},"]":{"docs":{},",":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}},"docs":{}}}},"[":{"0":{"docs":{},"]":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941}}}},"1":{"docs":{},":":{"docs":{},"]":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941}}}}},"docs":{"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993}},":":{"docs":{},":":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}}},"i":{"docs":{},"]":{"docs":{},",":{"docs":{},"x":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.029411764705882353}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},",":{"docs":{},"x":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.029411764705882353}}}}}}}}}}}}},"k":{"docs":{},"]":{"docs":{},",":{"docs":{},"x":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"，":{"docs":{},"部":{"docs":{},"分":{"docs":{},"排":{"docs":{},"列":{"docs":{},"组":{"docs":{},"合":{"docs":{},"是":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"，":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}},">":{"1":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"docs":{}},"的":{"docs":{},"平":{"docs":{},"方":{"docs":{},"根":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"6":{"9":{"docs":{},"简":{"docs":{},"单":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":10}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}},"%":{"1":{"0":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}},"docs":{}},"docs":{}},"/":{"docs":{},"/":{"1":{"0":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}},"docs":{}},"docs":{}}},"=":{"docs":{},"=":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}},"/":{"docs":{},"/":{"1":{"0":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}},"docs":{}},"docs":{}}}}}}}}}}}}}},",":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.012145748987854251},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.021505376344086023},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.025}},"y":{"docs":{},":":{"docs":{},"x":{"docs":{},"*":{"docs":{},"y":{"docs":{},",":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}}}}}},"i":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986}}}}}}}}}}},"x":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}},")":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},")":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},":":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.013953488372093023}}}}}}}},"'":{"docs":{},".":{"docs":{},"'":{"docs":{},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},")":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}}}},"，":{"docs":{},"满":{"docs":{},"足":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}},"+":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},"]":{"docs":{},",":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},"]":{"docs":{},",":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},":":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}},",":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}}}}}}}},"y":{"docs":{},">":{"docs":{},"y":{"docs":{},"+":{"docs":{},"x":{"docs":{},":":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"：":{"docs":{},"(":{"docs":{},"内":{"docs":{},"置":{"docs":{},"排":{"docs":{},"序":{"docs":{},"方":{"docs":{},"法":{"docs":{},")":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}}}}}}}}},"y":{"docs":{},"+":{"docs":{},"x":{"docs":{},":":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}},"{":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.0125},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.016666666666666666},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0182648401826484},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.020833333333333332},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.009523809523809525},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.01607717041800643},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.01607717041800643}},"'":{"3":{"docs":{},"'":{"docs":{},":":{"2":{"docs":{},",":{"docs":{},"'":{"4":{"3":{"docs":{},"'":{"docs":{},":":{"4":{"3":{"docs":{},"}":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806}}}},"docs":{}},"docs":{}}}},"docs":{}},"docs":{}}}},"docs":{}}}},"docs":{},"{":{"docs":{},"'":{"docs":{},":":{"0":{"docs":{},",":{"docs":{},"'":{"docs":{},"[":{"docs":{},"'":{"docs":{},":":{"0":{"docs":{},",":{"docs":{},"'":{"docs":{},"(":{"docs":{},"'":{"docs":{},":":{"0":{"docs":{},",":{"docs":{},"'":{"docs":{},")":{"docs":{},"'":{"docs":{},":":{"1":{"docs":{},",":{"docs":{},"'":{"docs":{},"}":{"docs":{},"'":{"docs":{},":":{"1":{"docs":{},",":{"docs":{},"'":{"docs":{},"]":{"docs":{},"'":{"docs":{},":":{"1":{"docs":{},"}":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}},"docs":{}}}}}}},"docs":{}}}}}}},"docs":{}}}}}}},"docs":{}}}}}}},"docs":{}}}}}}},"docs":{},"'":{"docs":{},"}":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"[":{"docs":{},"'":{"docs":{},":":{"docs":{},"'":{"docs":{},"]":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"(":{"docs":{},"'":{"docs":{},":":{"docs":{},"'":{"docs":{},")":{"docs":{},"'":{"docs":{},"}":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},")":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"[":{"docs":{},"]":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"{":{"docs":{},"}":{"docs":{},"'":{"docs":{},"}":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}}}}}}}}}}}}},"a":{"docs":{},"'":{"docs":{},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}},"e":{"docs":{},"'":{"docs":{},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028}}}},"n":{"docs":{},"d":{"docs":{},"'":{"docs":{},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"}":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}}},"l":{"docs":{},"'":{"docs":{},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028}}}}},"p":{"docs":{},"'":{"docs":{},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.012539184952978056}}}}},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"'":{"docs":{},":":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"}":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}}}}}},"}":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.013392857142857142},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}},")":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}},"​":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.005988023952095809},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.028985507246376812},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.02857142857142857},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.046875},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.008097165991902834},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.01680672268907563},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386}}},"临":{"docs":{},"时":{"docs":{},"草":{"docs":{},"稿":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":10.002994011976048}}}}}},"检":{"docs":{},"测":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"序":{"docs":{},"并":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"右":{"docs":{},"侧":{"docs":{},"节":{"docs":{},"点":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}}}}}}}}},"经":{"docs":{},"过":{"docs":{},"分":{"docs":{},"析":{"docs":{},"知":{"docs":{},"道":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}},",":{"docs":{},"当":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"=":{"docs":{},"=":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"，":{"docs":{},"调":{"docs":{},"整":{"docs":{},"已":{"docs":{},"经":{"docs":{},"完":{"docs":{},"整":{"docs":{},"，":{"docs":{},"以":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"为":{"docs":{},"界":{"docs":{},"限":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"左":{"docs":{},"边":{"docs":{},"比":{"docs":{},"右":{"docs":{},"边":{"docs":{},"小":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"当":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"上":{"docs":{},"面":{"docs":{},"的":{"docs":{},"几":{"docs":{},"个":{"docs":{},"i":{"docs":{},"f":{"docs":{},"判":{"docs":{},"断":{"docs":{},"后":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"能":{"docs":{},"走":{"docs":{},"到":{"docs":{},"这":{"docs":{},"一":{"docs":{},"步":{"docs":{},"，":{"docs":{},"i":{"docs":{},"f":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}}}}}}}}}}}}}}}}}}}}}},"典":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},"回":{"docs":{},"溯":{"docs":{},"，":{"docs":{},"深":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":5}}}}}}},",":{"docs":{},"深":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":2.5}}}}}}}}}}},"采":{"docs":{},"用":{"docs":{},"分":{"docs":{},"治":{"docs":{},"法":{"docs":{"临时草稿.html":{"ref":"临时草稿.html","tf":0.0029940119760479044},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}},"j":{"0":{"docs":{},":":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}},"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.05357142857142857},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.057971014492753624},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.03125},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.010362694300518135},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.021739130434782608},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.010362694300518135},"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.025},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0234375},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.023622047244094488},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.014925373134328358},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.015151515151515152},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.027210884353741496},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.01951219512195122},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.025},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.03237410071942446},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.025},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.04},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.015337423312883436},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.018518518518518517},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.013824884792626729},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.025236593059936908},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125},"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":0.016666666666666666},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.018433179723502304},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.01775147928994083},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.015384615384615385},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.01607717041800643},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.01775147928994083},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.030303030303030304},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.021052631578947368},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.01607717041800643},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.013888888888888888},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.02054794520547945},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}}}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}},"d":{"docs":{},"g":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}},"e":{"docs":{},":":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"e":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}},",":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.027777777777777776}}},"]":{"docs":{},")":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}},":":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641}}},"!":{"docs":{},"=":{"docs":{},"i":{"docs":{},":":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}}},"+":{"1":{"docs":{},"]":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}},",":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}},")":{"docs":{},",":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}},"docs":{}},"=":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},"=":{"0":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}},"1":{"docs":{},":":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576}}}},"docs":{}},"m":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}},">":{"0":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}},":":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227}}}},"docs":{}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}},")":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}},")":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.0136986301369863}}},",":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.0136986301369863}}}},"d":{"docs":{},"x":{"docs":{},",":{"docs":{},"j":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}},"k":{"1":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}},",":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806}}},":":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.01639344262295082}}},"_":{"docs":{},"p":{"docs":{},"o":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806}},"s":{"docs":{},")":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}}}}}}}},"2":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}},")":{"docs":{},":":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806}}}},":":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806}}},"_":{"docs":{},"p":{"docs":{},"o":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.017543859649122806}},"s":{"docs":{},")":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}}}}}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.03314917127071823},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.05673758865248227},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.020833333333333332},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.021739130434782608},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":0.05},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.06637168141592921},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.033707865168539325},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.026737967914438502},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.02631578947368421},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":5.075},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.04918032786885246},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.03314917127071823},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.028169014084507043},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.03614457831325301},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.042105263157894736},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.04132231404958678},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}},"m":{"docs":{},"p":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},")":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.016574585635359115},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.016574585635359115}},":":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.016574585635359115},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.03636363636363636},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.017699115044247787},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.03278688524590164},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.016574585635359115},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.0196078431372549}}}},":":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.016574585635359115},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.02247191011235955},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.016574585635359115},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.02702702702702703}},"]":{"docs":{},"+":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},":":{"docs":{},"n":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}}},"docs":{}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}}},"x":{"0":{"docs":{},",":{"docs":{},"k":{"docs":{},"=":{"2":{"docs":{},"x":{"0":{"docs":{},",":{"docs":{},"y":{"0":{"docs":{},"=":{"docs":{},"x":{"0":{"docs":{},"^":{"2":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"docs":{}}},"docs":{}}}},"docs":{}}}},"docs":{}}},"docs":{}}}}},"docs":{}},"+":{"0":{"docs":{},".":{"1":{"docs":{},")":{"docs":{"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818}}}},"docs":{}}},"1":{"docs":{},"$":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}},",":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.018604651162790697}}}},"docs":{}},">":{"0":{"docs":{},":":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}},"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},":":{"docs":{"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818}}}}}}}}}}},"=":{"0":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.007246376811594203}}},"docs":{}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},")":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}}}}}}}}}}}}},"e":{"docs":{},"y":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872}}}}}}}}}}},"docs":{}},",":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872}}},"=":{"docs":{},"l":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.02459016393442623},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}}},"c":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"t":{"docs":{},"o":{"docs":{},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"(":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},")":{"docs":{},")":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}}}}}}}}}}}}}},"%":{"docs":{},"n":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.01327433628318584}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}}}}},",":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.01639344262295082},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.018604651162790697}}},"]":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}},"=":{"docs":{},"=":{"1":{"docs":{},":":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}},"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},":":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.018604651162790697}}}}}}}}}}},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}}}},"o":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.03787878787878788}},"n":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.002631578947368421}}}},"(":{"docs":{},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},")":{"docs":{},"]":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.018808777429467086}},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}},"(":{"1":{"docs":{},")":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428}},"。":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}}}}}},"（":{"docs":{},"即":{"docs":{},"，":{"docs":{},"常":{"docs":{},"量":{"docs":{},"）":{"docs":{},"内":{"docs":{},"存":{"docs":{},"解":{"docs":{},"决":{"docs":{},"此":{"docs":{},"问":{"docs":{},"题":{"docs":{},"吗":{"docs":{},"？":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}},"docs":{},"n":{"2":{"docs":{},")":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}},"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}},")":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}}}}}}}},"。":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}},"(":{"docs":{},"m":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}},"k":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}},"n":{"docs":{},")":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},")":{"docs":{},")":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}}}},"p":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349}},":":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}},"e":{"docs":{},"r":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"}":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}},"s":{"docs":{},":":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"b":{"docs":{},"j":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},")":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364}},":":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364}}},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364}}},"[":{"0":{"docs":{},"]":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}},"=":{"docs":{},"=":{"1":{"docs":{},":":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576}}}},"docs":{}}}}},"docs":{},"j":{"docs":{},"]":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}}},"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576}},"i":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364}},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}},"docs":{},"j":{"docs":{},"]":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}}}}}},"[":{"4":{"8":{"docs":{},"]":{"docs":{},":":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}},"docs":{}},"docs":{}}}},"）":{"docs":{},"。":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}},"q":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.012145748987854251},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748}},"u":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}}}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}},"u":{"docs":{},"e":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.014598540145985401},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.03759398496240601},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.02631578947368421},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.022988505747126436},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.0136986301369863},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}},":":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.014598540145985401},"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.03759398496240601},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.02631578947368421},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.022988505747126436},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},".":{"docs":{},"l":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},")":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},")":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.009569377990430622},"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}},"docs":{}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}}}}}},"_":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.015037593984962405},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.02631578947368421},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.022988505747126436}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"是":{"docs":{},"左":{"docs":{},"旋":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.02040816326530612}},"，":{"docs":{},"那":{"docs":{},"我":{"docs":{},"们":{"docs":{},"在":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"继":{"docs":{},"续":{"docs":{},"搜":{"docs":{},"索":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748}}},")":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.01932367149758454},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}},",":{"docs":{},"p":{"docs":{},"分":{"docs":{},"布":{"docs":{},"在":{"docs":{},"根":{"docs":{},"结":{"docs":{},"点":{"docs":{},"的":{"docs":{},"两":{"docs":{},"边":{"docs":{},"，":{"docs":{},"则":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"为":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112}},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0035087719298245615}},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.015337423312883436}}}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.011363636363636364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"f":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}},"p":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.01079136690647482},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.006309148264984227}},"[":{"0":{"docs":{},"]":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.01079136690647482},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}},"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}},"j":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.007194244604316547},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}},"]":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.01079136690647482},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}}}}}}}}}}}}},",":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}},";":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242}}},"=":{"0":{"docs":{},",":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}},"docs":{}}},"v":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.019417475728155338}},"a":{"docs":{},"l":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.019417475728155338},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.019801980198019802},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.019417475728155338}},"i":{"docs":{},"d":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.005263157894736842}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.03296703296703297}}}}}}}}}}}}}}}}}}}},"u":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.023809523809523808},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.015748031496062992},"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.02631578947368421},"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.01282051282051282},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834}},"e":{"docs":{},")":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}},"]":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}}},"docs":{}}}}}}}}},"docs":{}}}}},")":{"docs":{},":":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":0.00641025641025641},"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}}}}},"y":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}}},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}}}},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"1":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.018433179723502304},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.023668639053254437},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.023668639053254437}},":":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}},"[":{"docs":{},"i":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.013824884792626729}},"]":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.018433179723502304}}}}},",":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.01775147928994083},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.01775147928994083}},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219}}}}},"docs":{}},",":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}}}},"2":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.013824884792626729},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.01775147928994083},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.01775147928994083}},":":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}},"[":{"docs":{},"j":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}},"]":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.013824884792626729}}}}},"，":{"docs":{},"计":{"docs":{},"算":{"docs":{},"出":{"docs":{},"将":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}}},")":{"docs":{},":":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.023668639053254437},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.023668639053254437}},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219}}}}},"docs":{}}}}}}},"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0043859649122807015},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.018808777429467086},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.018518518518518517},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.01929260450160772},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.01929260450160772}},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.006269592476489028},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}},":":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.02821316614420063},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.039603960396039604},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386}}},",":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.01607717041800643},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.01607717041800643}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.011111111111111112}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}},":":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901}}}}}}}}},")":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}},":":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.011111111111111112}}}},":":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.025925925925925925}}},"]":{"docs":{},")":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}},"，":{"docs":{},"判":{"docs":{},"定":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}},"s":{"docs":{},":":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901}}},"\"":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}},",":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}},"+":{"1":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386}},")":{"docs":{},";":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}},"docs":{}}}}}}},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.014814814814814815}}}}}}}}}}}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}},";":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}},"1":{"docs":{},":":{"docs":{},"]":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}},"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818},"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.02127659574468085},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332},"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":0.03278688524590164},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.029411764705882353}}}}}},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}}}}},"z":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0008771929824561404}}}}},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"LeetCode刷题优先顺序.html":{"ref":"LeetCode刷题优先顺序.html","tf":0.0017543859649122807}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"(":{"docs":{},"*":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{},"#":{"docs":{},"z":{"docs":{},"i":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},"函":{"docs":{},"数":{"docs":{},"用":{"docs":{},"于":{"docs":{},"将":{"docs":{},"可":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"对":{"docs":{},"象":{"docs":{},"作":{"docs":{},"为":{"docs":{},"参":{"docs":{},"数":{"docs":{},"，":{"docs":{},"将":{"docs":{},"对":{"docs":{},"象":{"docs":{},"中":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"打":{"docs":{},"包":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"个":{"docs":{},"元":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"o":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}},"中":{"docs":{},"的":{"docs":{},"一":{"docs":{},"种":{"docs":{},"可":{"docs":{},"能":{"docs":{},"。":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"a":{"docs":{},"s":{"docs":{},"c":{"docs":{},"i":{"docs":{},"i":{"docs":{},"码":{"docs":{},"为":{"6":{"5":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}},"docs":{}},"docs":{}},"值":{"docs":{},"为":{"9":{"7":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}},"docs":{}},"docs":{}}}}}}}}}}}}},"数":{"docs":{},"字":{"1":{"docs":{},"~":{"1":{"0":{"0":{"0":{"docs":{},"存":{"docs":{},"放":{"docs":{},"在":{"docs":{},"含":{"docs":{},"有":{"1":{"0":{"0":{"1":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"组":{"docs":{},"成":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{},"只":{"docs":{},"有":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"值":{"docs":{},"重":{"docs":{},"复":{"docs":{},"，":{"docs":{},"其":{"docs":{},"他":{"docs":{},"数":{"docs":{},"字":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"，":{"docs":{},"设":{"docs":{},"计":{"docs":{},"一":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"将":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"找":{"docs":{},"出":{"docs":{},"来":{"docs":{},"，":{"docs":{},"要":{"docs":{},"求":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"只":{"docs":{},"能":{"docs":{},"访":{"docs":{},"问":{"docs":{},"一":{"docs":{},"次":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"使":{"docs":{},"用":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"存":{"docs":{},"储":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"能":{"docs":{},"否":{"docs":{},"设":{"docs":{},"计":{"docs":{},"一":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"实":{"docs":{},"现":{"docs":{},"？":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}},"运":{"docs":{},"算":{"docs":{"数字运算/":{"ref":"数字运算/","tf":10.083333333333334}}}},"在":{"docs":{},"排":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":10.018181818181818}}}}}}}}}}}}},"。":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}},"拼":{"docs":{},"接":{"docs":{},"后":{"docs":{},"最":{"docs":{},"大":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":2.5}}}}}}}},"组":{"docs":{"数组/":{"ref":"数组/","tf":10.083333333333334}},"中":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"_":{"docs":{},"两":{"docs":{},"个":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":10}}}}}}}}}}}},"第":{"docs":{},"k":{"docs":{},"大":{"docs":{},"的":{"docs":{},"数":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":10}}}}}}},"元":{"docs":{},"素":{"docs":{},"全":{"docs":{},"部":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"例":{"docs":{},"如":{"docs":{},"【":{"1":{"docs":{},"，":{"1":{"docs":{},"，":{"1":{"docs":{},"，":{"1":{"docs":{},"】":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}},"大":{"docs":{},"部":{"docs":{},"分":{"docs":{},"元":{"docs":{},"素":{"docs":{},"相":{"docs":{},"同":{"docs":{},"，":{"docs":{},"如":{"docs":{},"【":{"1":{"docs":{},"，":{"0":{"docs":{},"，":{"1":{"docs":{},"，":{"1":{"docs":{},"，":{"1":{"docs":{},"】":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}},"存":{"docs":{},"在":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"每":{"docs":{},"次":{"docs":{},"只":{"docs":{},"缩":{"docs":{},"小":{"docs":{},"一":{"docs":{},"个":{"docs":{},"查":{"docs":{},"找":{"docs":{},"范":{"docs":{},"围":{"docs":{"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358}}}}}}}}}}}}}}}}}}}}}},"有":{"docs":{},"n":{"docs":{},"+":{"2":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{},"n":{"docs":{},"个":{"docs":{},"数":{"docs":{},"出":{"docs":{},"现":{"docs":{},"了":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"次":{"docs":{},"，":{"2":{"docs":{},"个":{"docs":{},"数":{"docs":{},"出":{"docs":{},"现":{"docs":{},"了":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"次":{"docs":{},"（":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"不":{"docs":{},"相":{"docs":{},"同":{"docs":{},"）":{"docs":{},"，":{"docs":{},"请":{"docs":{},"用":{"docs":{},"o":{"docs":{},"（":{"1":{"docs":{},"）":{"docs":{},"的":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"，":{"docs":{},"找":{"docs":{},"出":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"，":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"找":{"docs":{},"出":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}}},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"者":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}},"不":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}}}}}}}},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}}},"端":{"docs":{},"点":{"docs":{},"，":{"docs":{},"不":{"docs":{},"可":{"docs":{},"能":{"docs":{},"盛":{"docs":{},"水":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"跳":{"docs":{},"过":{"docs":{},"，":{"docs":{},"不":{"docs":{},"用":{"docs":{},"遍":{"docs":{},"历":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}},"无":{"docs":{},"序":{"docs":{"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}}},"有":{"docs":{},"序":{"docs":{},"，":{"docs":{},"用":{"docs":{},"二":{"docs":{},"分":{"docs":{"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}}}}}}},"本":{"docs":{},"身":{"docs":{},"没":{"docs":{},"有":{"docs":{},"旋":{"docs":{},"转":{"docs":{},"，":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"例":{"docs":{},"如":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"表":{"docs":{},"示":{"docs":{},"前":{"docs":{},"i":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"分":{"docs":{},"割":{"docs":{},"次":{"docs":{},"数":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"在":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"需":{"docs":{},"要":{"docs":{},"知":{"docs":{},"道":{"docs":{},"j":{"docs":{},"至":{"docs":{},"i":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{},"。":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"定":{"docs":{},"义":{"docs":{},"为":{"docs":{},"：":{"docs":{},"以":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}},"尾":{"docs":{},"部":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}},"学":{"docs":{},"云":{"docs":{},"算":{"docs":{},"法":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285}}}}}},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"设":{"docs":{},"计":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":2.5}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}}}},"流":{"docs":{},"的":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"2":{"9":{"5":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":5},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":5}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}},"从":{"0":{"docs":{},"行":{"0":{"docs":{},"列":{"docs":{},"开":{"docs":{},"始":{"docs":{},"遍":{"docs":{},"历":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}},"docs":{}}},"1":{"docs":{},"行":{"1":{"docs":{},"列":{"docs":{},"开":{"docs":{},"始":{"docs":{},"遍":{"docs":{},"历":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}},"docs":{}},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"不":{"docs":{},"然":{"0":{"docs":{},"位":{"docs":{},"置":{"docs":{},"会":{"docs":{},"重":{"docs":{},"复":{"docs":{},"计":{"docs":{},"算":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}},"docs":{}}}}}}},"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"上":{"docs":{},"看":{"docs":{},"，":{"2":{"docs":{},"的":{"docs":{},"幂":{"docs":{},"一":{"docs":{},"定":{"docs":{},"是":{"docs":{},"这":{"docs":{},"样":{"docs":{},"的":{"docs":{},"形":{"docs":{},"式":{"docs":{},"：":{"docs":{},"整":{"docs":{},"个":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"数":{"docs":{},"上":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"位":{"docs":{},"是":{"1":{"docs":{},"，":{"docs":{},"其":{"docs":{},"他":{"docs":{},"位":{"docs":{},"全":{"docs":{},"是":{"0":{"docs":{},"；":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}},"理":{"docs":{},"论":{"docs":{},"上":{"docs":{},"讲":{"docs":{},"，":{"docs":{},"已":{"docs":{},"知":{"docs":{},"一":{"docs":{},"棵":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"要":{"docs":{},"求":{"docs":{},"出":{"docs":{},"它":{"docs":{},"的":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"序":{"docs":{},"列":{"docs":{},"是":{"docs":{},"不":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"的":{"docs":{},"，":{"docs":{},"即":{"docs":{},"文":{"docs":{},"法":{"docs":{},"是":{"docs":{},"有":{"docs":{},"多":{"docs":{},"义":{"docs":{},"性":{"docs":{},"的":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"，":{"docs":{},"在":{"docs":{},"这":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"右":{"docs":{},"边":{"docs":{},"往":{"docs":{},"最":{"docs":{},"高":{"docs":{},"点":{"docs":{},"遍":{"docs":{},"历":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}},"到":{"docs":{},"左":{"docs":{},"依":{"docs":{},"次":{"docs":{},"计":{"docs":{},"算":{"docs":{},"各":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"高":{"docs":{},"度":{"docs":{},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"乘":{"docs":{},"以":{"docs":{},"该":{"docs":{},"高":{"docs":{},"度":{"docs":{},"为":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"，":{"docs":{},"宽":{"docs":{},"为":{"docs":{},"数":{"docs":{},"组":{"docs":{},"长":{"docs":{},"度":{"docs":{},"减":{"docs":{},"去":{"docs":{},"当":{"docs":{},"前":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"下":{"docs":{},"标":{"docs":{},"（":{"docs":{},"数":{"docs":{},"组":{"docs":{},"下":{"docs":{},"标":{"docs":{},"从":{"0":{"docs":{},"开":{"docs":{},"始":{"docs":{},"计":{"docs":{},"算":{"docs":{},"）":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"比":{"docs":{},"较":{"docs":{},"谁":{"docs":{},"大":{"docs":{},"就":{"docs":{},"行":{"docs":{},"了":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"向":{"docs":{},"左":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"+":{"docs":{},"j":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"获":{"docs":{},"取":{"docs":{},"得":{"docs":{},"到":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"读":{"docs":{},",":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.015625}}}}}}},"左":{"docs":{},"边":{"docs":{},"往":{"docs":{},"最":{"docs":{},"高":{"docs":{},"点":{"docs":{},"遍":{"docs":{},"历":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}},"向":{"docs":{},"右":{"docs":{},"读":{"docs":{},",":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}}}}},"下":{"docs":{},"角":{"docs":{},"开":{"docs":{},"始":{"docs":{},"查":{"docs":{},"找":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}}}}}},"上":{"docs":{},"角":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"总":{"docs":{},"共":{"docs":{},"有":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}},"到":{"docs":{},"右":{"docs":{},"下":{"docs":{},"角":{"docs":{},"一":{"docs":{},"共":{"docs":{},"有":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}}}}}}}},"尾":{"docs":{},"巴":{"docs":{},"开":{"docs":{},"始":{"docs":{},"左":{"docs":{},"旋":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"走":{"docs":{},"到":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"了":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"路":{"docs":{},"径":{"docs":{},"之":{"docs":{},"和":{"docs":{},"不":{"docs":{},"为":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"向":{"docs":{},"上":{"docs":{},"回":{"docs":{},"溯":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"中":{"docs":{},"序":{"docs":{},"与":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"序":{"docs":{},"列":{"docs":{},"构":{"docs":{},"造":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"0":{"6":{"docs":{},")":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"和":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"构":{"docs":{},"造":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":10}}}}}}}}}}}}}},"上":{"docs":{},"到":{"docs":{},"下":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}}},"后":{"docs":{},"往":{"docs":{},"前":{"docs":{},"匹":{"docs":{},"配":{"docs":{},",":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}},"数":{"docs":{},"据":{"docs":{},"流":{"docs":{},"中":{"docs":{},"添":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"到":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"中":{"docs":{},"。":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}}}}},"如":{"2":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}},"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684}},"果":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}},"有":{"docs":{},"两":{"docs":{},"个":{"1":{"docs":{},"，":{"docs":{},"一":{"docs":{},"定":{"docs":{},"不":{"docs":{},"是":{"2":{"docs":{},"的":{"docs":{},"幂":{"docs":{},"）":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806}}}}}},"docs":{}}}}}}},"docs":{},"中":{"docs":{},"间":{"docs":{},"结":{"docs":{},"点":{"docs":{},"，":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"中":{"docs":{},"间":{"docs":{},"结":{"docs":{},"点":{"docs":{},"。":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"在":{"docs":{},"使":{"docs":{},"用":{"docs":{},"摩":{"docs":{},"尔":{"docs":{},"算":{"docs":{},"法":{"docs":{},"时":{"docs":{},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"记":{"docs":{},"录":{"docs":{},"两":{"docs":{},"个":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{},"，":{"docs":{},"会":{"docs":{},"怎":{"docs":{},"么":{"docs":{},"样":{"docs":{},"呢":{"docs":{},"？":{"docs":{},"直":{"docs":{},"觉":{"docs":{},"告":{"docs":{},"诉":{"docs":{},"我":{"docs":{},"，":{"docs":{},"这":{"docs":{},"会":{"docs":{},"得":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{},"，":{"docs":{},"和":{"docs":{},"一":{"docs":{},"个":{"docs":{},"出":{"docs":{},"现":{"docs":{},"次":{"docs":{},"数":{"docs":{},"仅":{"docs":{},"次":{"docs":{},"于":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{},"的":{"docs":{},"数":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"不":{"docs":{},"一":{"docs":{},"定":{"docs":{},"会":{"docs":{},"比":{"docs":{},"数":{"docs":{},"组":{"docs":{},"长":{"docs":{},"的":{"1":{"docs":{},"/":{"3":{"docs":{},"大":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"要":{"docs":{},"求":{"docs":{},"a":{"docs":{},"的":{"docs":{},"平":{"docs":{},"方":{"docs":{},"根":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"令":{"docs":{},"f":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},"=":{"docs":{},"x":{"docs":{},"^":{"2":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"扫":{"docs":{},"描":{"docs":{},"到":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},"，":{"docs":{},"则":{"docs":{},"压":{"docs":{},"进":{"docs":{},"s":{"2":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"到":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},"，":{"docs":{},"则":{"docs":{},"从":{"docs":{},"s":{"2":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"两":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},"进":{"docs":{},"行":{"docs":{},"相":{"docs":{},"应":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"并":{"docs":{},"将":{"docs":{},"结":{"docs":{},"果":{"docs":{},"压":{"docs":{},"进":{"docs":{},"s":{"2":{"docs":{},"(":{"docs":{},"s":{"2":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"出":{"2":{"docs":{},"个":{"docs":{},"进":{"1":{"docs":{},"个":{"docs":{},")":{"docs":{},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}},"docs":{}}}},"docs":{}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"没":{"docs":{},"有":{"docs":{},"相":{"docs":{},"等":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},">":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{},"且":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"=":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":0.013157894736842105}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"旋":{"docs":{},"转":{"docs":{},"，":{"docs":{},"则":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"小":{"docs":{},"于":{"docs":{},"最":{"docs":{},"后":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"当":{"docs":{},"前":{"docs":{},"值":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}},">":{"docs":{},"r":{"2":{"docs":{},"且":{"docs":{},"不":{"docs":{},"等":{"docs":{},"于":{"docs":{},"r":{"1":{"docs":{},"：":{"docs":{},"r":{"3":{"docs":{},"=":{"docs":{},"r":{"2":{"docs":{},",":{"docs":{},"r":{"2":{"docs":{},"=":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}}}}},"docs":{}}}},"docs":{}}}},"docs":{}}}},"docs":{}}}}}}},"docs":{}}},"大":{"docs":{},"于":{"docs":{},"r":{"3":{"docs":{},"且":{"docs":{},"不":{"docs":{},"等":{"docs":{},"于":{"docs":{},"r":{"2":{"docs":{},",":{"docs":{},"r":{"3":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}},"docs":{}}}},"docs":{}}}}}}},"docs":{}}}}}}}},"节":{"docs":{},"点":{"docs":{},"是":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},",":{"docs":{},"且":{"docs":{},"路":{"docs":{},"径":{"docs":{},"之":{"docs":{},"和":{"docs":{},"等":{"docs":{},"于":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.01694915254237288}}}}}}}}}}}}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"至":{"docs":{},"少":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"并":{"docs":{},"且":{"docs":{},"所":{"docs":{},"有":{"docs":{},"字":{"docs":{},"符":{"docs":{},"都":{"docs":{},"是":{"docs":{},"字":{"docs":{},"母":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"公":{"docs":{},"共":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}}}}}}}}}}}}},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"求":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"深":{"docs":{},"度":{"docs":{},"和":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"深":{"docs":{},"度":{"docs":{},"，":{"docs":{},"取":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"再":{"docs":{},"加":{"1":{"docs":{},"。":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}},"从":{"docs":{},"某":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"两":{"docs":{},"串":{"docs":{},"对":{"docs":{},"应":{"docs":{},"字":{"docs":{},"符":{"docs":{},"不":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"得":{"docs":{},"重":{"docs":{},"新":{"docs":{},"计":{"docs":{},"数":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"串":{"docs":{},"长":{"docs":{},"度":{"docs":{},"不":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"则":{"docs":{},"s":{"1":{"docs":{},"要":{"docs":{},"想":{"docs":{},"成":{"docs":{},"为":{"docs":{},"s":{"2":{"docs":{},"的":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"则":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}}}}}}}}}}}},"docs":{}}}}}}},"docs":{}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"没":{"docs":{},"有":{"docs":{},"交":{"docs":{},"点":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}},"棵":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"1":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"2":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"1":{"docs":{},"与":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"2":{"docs":{},"节":{"docs":{},"点":{"docs":{},"值":{"docs":{},"相":{"docs":{},"同":{"docs":{},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"他":{"docs":{},"们":{"docs":{},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"也":{"docs":{},"有":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"结":{"docs":{},"构":{"docs":{},"，":{"docs":{},"且":{"docs":{},"值":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"1":{"docs":{},".":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}},"docs":{}}}}}}}}}},"任":{"docs":{},"何":{"docs":{},"值":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"出":{"docs":{},"现":{"docs":{},"至":{"docs":{},"少":{"docs":{},"两":{"docs":{},"次":{"docs":{},"，":{"docs":{},"函":{"docs":{},"数":{"docs":{},"返":{"docs":{},"回":{"docs":{"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}},"docs":{}},"]":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.031496062992125984}}}}}}}}}}},"负":{"docs":{},"数":{"docs":{},"，":{"docs":{},"不":{"docs":{},"是":{"docs":{},"回":{"docs":{},"文":{"docs":{},"数":{"docs":{},"；":{"docs":{},"如":{"docs":{},"果":{"docs":{},"个":{"docs":{},"位":{"docs":{},"数":{"docs":{},"是":{"0":{"docs":{},"（":{"docs":{},"除":{"0":{"docs":{},"这":{"docs":{},"种":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"情":{"docs":{},"况":{"docs":{},"）":{"docs":{},"，":{"docs":{},"不":{"docs":{},"是":{"docs":{},"回":{"docs":{},"文":{"docs":{},"数":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}}}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}},"你":{"docs":{},"已":{"docs":{},"经":{"docs":{},"实":{"docs":{},"现":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}}}}}},"完":{"docs":{},"成":{"docs":{},"了":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}}}}}}}}}},"最":{"docs":{},"多":{"docs":{},"只":{"docs":{},"允":{"docs":{},"许":{"docs":{},"完":{"docs":{},"成":{"docs":{},"一":{"docs":{},"笔":{"docs":{},"交":{"docs":{},"易":{"docs":{},"（":{"docs":{},"即":{"docs":{},"买":{"docs":{},"入":{"docs":{},"和":{"docs":{},"卖":{"docs":{},"出":{"docs":{},"一":{"docs":{},"支":{"docs":{},"股":{"docs":{},"票":{"docs":{},"）":{"docs":{},"，":{"docs":{},"设":{"docs":{},"计":{"docs":{},"一":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"来":{"docs":{},"计":{"docs":{},"算":{"docs":{},"你":{"docs":{},"所":{"docs":{},"能":{"docs":{},"获":{"docs":{},"取":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"利":{"docs":{},"润":{"docs":{},"。":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"此":{"docs":{},"时":{"docs":{},"上":{"docs":{},"边":{"docs":{},"大":{"docs":{},"于":{"docs":{},"下":{"docs":{},"边":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"此":{"docs":{},"时":{"docs":{},"已":{"docs":{},"经":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"完":{"docs":{},"成":{"docs":{},"了":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"碰":{"docs":{},"到":{"docs":{},"空":{"docs":{},"发":{"docs":{},"现":{"docs":{},"已":{"docs":{},"经":{"docs":{},"结":{"docs":{},"束":{"docs":{},"，":{"docs":{},"则":{"docs":{},"无":{"docs":{},"环":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"无":{"docs":{},"环":{"docs":{},"，":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}}}},"先":{"docs":{},"执":{"docs":{},"行":{"docs":{},"f":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}}}}}}}}}},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"将":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"相":{"docs":{},"加":{"docs":{},"起":{"docs":{},"来":{"docs":{},"，":{"docs":{},"则":{"docs":{},"会":{"docs":{},"返":{"docs":{},"回":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"来":{"docs":{},"表":{"docs":{},"示":{"docs":{},"它":{"docs":{},"们":{"docs":{},"的":{"docs":{},"和":{"docs":{},"。":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"题":{"docs":{},"目":{"docs":{},"增":{"docs":{},"加":{"docs":{},"难":{"docs":{},"度":{"docs":{},",":{"docs":{},"说":{"docs":{},"如":{"docs":{},"果":{"docs":{},"n":{"docs":{},"不":{"docs":{},"满":{"docs":{},"足":{"docs":{},"条":{"docs":{},"件":{"docs":{},",":{"docs":{},"就":{"docs":{},"返":{"docs":{},"回":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"下":{"docs":{},"面":{"docs":{},"两":{"docs":{},"句":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"有":{"docs":{},"很":{"docs":{},"多":{"docs":{},"个":{"docs":{},"连":{"docs":{},"着":{"docs":{},"的":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"走":{"docs":{},"到":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}}}}}}}}}}}}}}}}}}}}}}}}}}},"节":{"docs":{},"点":{"docs":{},"总":{"docs":{},"数":{"docs":{},"不":{"docs":{},"是":{"docs":{"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125}}}}}}}},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"则":{"docs":{},"深":{"docs":{},"度":{"docs":{},"为":{"0":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}},"docs":{}}}}}}}}}}},"都":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"和":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"深":{"docs":{},"度":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"。":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}},"它":{"docs":{},"没":{"docs":{},"碎":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"我":{"docs":{},"们":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"知":{"docs":{},"道":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}}},"采":{"docs":{},"用":{"docs":{},"k":{"docs":{},"倒":{"docs":{},"着":{"docs":{},"从":{"docs":{},"大":{"docs":{},"到":{"docs":{},"小":{"docs":{},"计":{"docs":{},"算":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}},"问":{"docs":{},"题":{"docs":{},"规":{"docs":{},"模":{"docs":{},"小":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"1":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"解":{"docs":{},"决":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}}}}}},"docs":{}}}}}}}}},"数":{"docs":{},"列":{"docs":{},"第":{"docs":{},"i":{"docs":{},"项":{"docs":{},"在":{"docs":{},"之":{"docs":{},"前":{"docs":{},"出":{"docs":{},"现":{"docs":{},"过":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"找":{"docs":{},"到":{"docs":{},"第":{"docs":{},"i":{"docs":{},"项":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"在":{"docs":{},"前":{"docs":{},"i":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}}},"没":{"docs":{},"有":{"docs":{},"在":{"docs":{},"之":{"docs":{},"前":{"docs":{},"出":{"docs":{},"现":{"docs":{},"过":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}}}}},"据":{"docs":{},"个":{"docs":{},"数":{"docs":{},"为":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"，":{"docs":{},"则":{"docs":{},"，":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},"出":{"docs":{},"现":{"docs":{},"在":{"docs":{},"元":{"docs":{},"素":{"docs":{},"个":{"docs":{},"数":{"docs":{},"多":{"docs":{},"的":{"docs":{},"堆":{"docs":{},"的":{"docs":{},"堆":{"docs":{},"顶":{"docs":{},"中":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}}}}}}}}}}}},"流":{"docs":{},"中":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},"所":{"docs":{},"有":{"docs":{},"整":{"docs":{},"数":{"docs":{},"都":{"docs":{},"在":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}},"s":{"docs":{},"【":{"docs":{},"n":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.016260162601626018}}}}},"j":{"docs":{},"位":{"docs":{},"的":{"docs":{},"数":{"docs":{},"值":{"docs":{},"比":{"docs":{},"i":{"docs":{},"位":{"docs":{},"小":{"docs":{},"，":{"docs":{},"则":{"docs":{},"可":{"docs":{},"加":{"docs":{},"入":{"docs":{},"i":{"docs":{},"位":{"docs":{},"的":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"比":{"docs":{},"较":{"docs":{},"队":{"docs":{},"列":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}}}}}}}}},"现":{"docs":{},"在":{"docs":{},"r":{"docs":{},"e":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"加":{"docs":{},"上":{"docs":{},"后":{"docs":{},"面":{"docs":{},"能":{"docs":{},"加":{"docs":{},"上":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"已":{"docs":{},"经":{"docs":{},"小":{"docs":{},"于":{"docs":{},"k":{"docs":{},"了":{"docs":{},"）":{"docs":{},",":{"docs":{},"那":{"docs":{},"么":{"docs":{},"也":{"docs":{},"剪":{"docs":{},"枝":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"上":{"docs":{},"图":{"docs":{},"的":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"为":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}},"何":{"docs":{},"找":{"docs":{},"所":{"docs":{},"有":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"的":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"?":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}},"从":{"5":{"docs":{},"亿":{"docs":{},"个":{"docs":{},"数":{"docs":{},"中":{"docs":{},"找":{"docs":{},"出":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":5},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":5}}}}}}}}}}}},"docs":{}}},"s":{"1":{"docs":{},"=":{"docs":{},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},"，":{"docs":{},"s":{"2":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}},"docs":{}}}},"b":{"docs":{},"c":{"docs":{},"'":{"docs":{},"，":{"docs":{},"s":{"2":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.034482758620689655}}},"docs":{}}}}}},"c":{"docs":{},"'":{"docs":{},"，":{"docs":{},"s":{"2":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}},"docs":{}}}}},"d":{"docs":{},"'":{"docs":{},"，":{"docs":{},"s":{"2":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}},"docs":{}}}}}}}}},"docs":{}},"数":{"docs":{},"组":{"docs":{},"[":{"6":{"docs":{},",":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},"docs":{}}}},"下":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}},"：":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}},"面":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"：":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"a":{"docs":{},"，":{"docs":{},"b":{"docs":{},"只":{"docs":{},"与":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"a":{"docs":{},"交":{"docs":{},"换":{"docs":{},"，":{"docs":{},"与":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"a":{"docs":{},"不":{"docs":{},"交":{"docs":{},"换":{"docs":{},"。":{"docs":{},"去":{"docs":{},"重":{"docs":{},"复":{"docs":{},"。":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"此":{"docs":{},"时":{"docs":{},"，":{"docs":{},"n":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806}}}},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"要":{"docs":{},"将":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"所":{"docs":{},"有":{"docs":{},"结":{"docs":{},"果":{"docs":{},"加":{"docs":{},"起":{"docs":{},"来":{"docs":{},"然":{"docs":{},"后":{"docs":{},"再":{"docs":{},"加":{"1":{"docs":{},"即":{"docs":{},"为":{"docs":{},"以":{"docs":{},"新":{"docs":{},"的":{"docs":{},"字":{"docs":{},"母":{"docs":{},"为":{"docs":{},"结":{"docs":{},"尾":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"总":{"docs":{},"数":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"要":{"docs":{},"将":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"加":{"docs":{},"起":{"docs":{},"来":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"题":{"docs":{},"中":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"使":{"docs":{},"用":{"docs":{},"整":{"docs":{},"数":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}}}}}}}}}},"方":{"docs":{},"法":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"更":{"docs":{},"生":{"docs":{},"动":{"docs":{},"的":{"docs":{},"例":{"docs":{},"子":{"docs":{},"来":{"docs":{},"形":{"docs":{},"容":{"docs":{},"：":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"环":{"docs":{},"形":{"docs":{},"跑":{"docs":{},"道":{"docs":{},"上":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"运":{"docs":{},"动":{"docs":{},"员":{"docs":{},"在":{"docs":{},"同":{"docs":{},"一":{"docs":{},"地":{"docs":{},"点":{"docs":{},"起":{"docs":{},"跑":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"运":{"docs":{},"动":{"docs":{},"员":{"docs":{},"速":{"docs":{},"度":{"docs":{},"快":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"运":{"docs":{},"动":{"docs":{},"员":{"docs":{},"速":{"docs":{},"度":{"docs":{},"慢":{"docs":{},"。":{"docs":{},"当":{"docs":{},"两":{"docs":{},"人":{"docs":{},"跑":{"docs":{},"了":{"docs":{},"一":{"docs":{},"段":{"docs":{},"时":{"docs":{},"间":{"docs":{},"，":{"docs":{},"速":{"docs":{},"度":{"docs":{},"快":{"docs":{},"的":{"docs":{},"运":{"docs":{},"动":{"docs":{},"员":{"docs":{},"必":{"docs":{},"然":{"docs":{},"会":{"docs":{},"从":{"docs":{},"速":{"docs":{},"度":{"docs":{},"慢":{"docs":{},"的":{"docs":{},"运":{"docs":{},"动":{"docs":{},"员":{"docs":{},"身":{"docs":{},"后":{"docs":{},"再":{"docs":{},"次":{"docs":{},"追":{"docs":{},"上":{"docs":{},"并":{"docs":{},"超":{"docs":{},"过":{"docs":{},"，":{"docs":{},"原":{"docs":{},"因":{"docs":{},"很":{"docs":{},"简":{"docs":{},"单":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"跑":{"docs":{},"道":{"docs":{},"是":{"docs":{},"环":{"docs":{},"形":{"docs":{},"的":{"docs":{},"。":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}},"幂":{"docs":{},"次":{"docs":{},"方":{"docs":{},"。":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806}}}}}},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}},"那":{"docs":{},"么":{"docs":{},"问":{"docs":{},"题":{"docs":{},"就":{"docs":{},"很":{"docs":{},"容":{"docs":{},"易":{"docs":{},"了":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"先":{"docs":{},"将":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"返":{"docs":{},"回":{"docs":{},"中":{"docs":{},"间":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"值":{"docs":{},"即":{"docs":{},"可":{"docs":{},"（":{"docs":{},"众":{"docs":{},"数":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"大":{"docs":{},"于":{"docs":{},"一":{"docs":{},"半":{"docs":{},"，":{"docs":{},"排":{"docs":{},"好":{"docs":{},"序":{"docs":{},"的":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"中":{"docs":{},"间":{"docs":{},"元":{"docs":{},"素":{"docs":{},"一":{"docs":{},"定":{"docs":{},"是":{"docs":{},"众":{"docs":{},"数":{"docs":{},"）":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"量":{"docs":{},"分":{"docs":{},"别":{"docs":{},"为":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"其":{"docs":{},"中":{"docs":{},"的":{"docs":{},"众":{"docs":{},"数":{"docs":{},"。":{"docs":{},"众":{"docs":{},"数":{"docs":{},"是":{"docs":{},"指":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"出":{"docs":{},"现":{"docs":{},"次":{"docs":{},"数":{"docs":{},"大":{"docs":{},"于":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}}}}}}}}}}}}}}}}}}}}}},"出":{"docs":{},"其":{"docs":{},"中":{"docs":{},"所":{"docs":{},"有":{"docs":{},"出":{"docs":{},"现":{"docs":{},"超":{"docs":{},"过":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}}}}}}}}}}}}},"字":{"docs":{},"。":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}}}}},"格":{"docs":{},"雷":{"docs":{},"编":{"docs":{},"码":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"其":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}}}}}}}}}},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"效":{"docs":{},"。":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}}}}}}}}},"找":{"docs":{},"出":{"docs":{},"最":{"docs":{},"长":{"docs":{},"的":{"docs":{},"包":{"docs":{},"含":{"docs":{},"有":{"docs":{},"效":{"docs":{},"括":{"docs":{},"号":{"docs":{},"的":{"docs":{},"子":{"docs":{},"串":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}}}}}}}}}}}}}}}}}}}}}}},"平":{"docs":{},"方":{"docs":{},"为":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.01}}},"根":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"6":{"9":{"docs":{},"简":{"docs":{},"单":{"docs":{},")":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}}},"docs":{}},"docs":{}}}}}}}}}},"是":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}}}}},"小":{"docs":{},"写":{"docs":{},"字":{"docs":{},"母":{"docs":{},"。":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"长":{"docs":{},"度":{"docs":{},"是":{"5":{"0":{"0":{"0":{"0":{"docs":{},"。":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"，":{"docs":{},"以":{"docs":{},"及":{"docs":{},"字":{"docs":{},"符":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}}}}},"下":{"docs":{},"标":{"docs":{},"为":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}},"一":{"docs":{},"个":{"docs":{},"必":{"docs":{},"须":{"docs":{},"指":{"docs":{},"向":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}},"节":{"docs":{},"点":{"docs":{},"指":{"docs":{},"向":{"docs":{},"$":{"docs":{},"n":{"docs":{},"{":{"docs":{},"k":{"docs":{},"}":{"docs":{},"n":{"docs":{},"k":{"docs":{},"$":{"docs":{},"。":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}}}}}},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"使":{"docs":{},"得":{"docs":{},"它":{"docs":{},"们":{"docs":{},"相":{"docs":{},"加":{"docs":{},"之":{"docs":{},"和":{"docs":{},"等":{"docs":{},"于":{"docs":{},"目":{"docs":{},"标":{"docs":{},"数":{"docs":{},"。":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"都":{"docs":{},"将":{"docs":{},"在":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}}}}},"柱":{"docs":{},"子":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"图":{"docs":{},"，":{"docs":{},"计":{"docs":{},"算":{"docs":{},"按":{"docs":{},"此":{"docs":{},"排":{"docs":{},"列":{"docs":{},"的":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"，":{"docs":{},"下":{"docs":{},"雨":{"docs":{},"之":{"docs":{},"后":{"docs":{},"能":{"docs":{},"接":{"docs":{},"多":{"docs":{},"少":{"docs":{},"雨":{"docs":{},"水":{"docs":{},"。":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"位":{"docs":{},"置":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715}}}},"二":{"docs":{},"维":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"，":{"docs":{},"找":{"docs":{},"出":{"docs":{},"只":{"docs":{},"包":{"docs":{},"含":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}}}}}}}}},"网":{"docs":{},"格":{"docs":{},"地":{"docs":{},"图":{"docs":{},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}}}}}}}},"最":{"docs":{},"大":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"，":{"docs":{},"并":{"docs":{},"返":{"docs":{},"回":{"docs":{},"其":{"docs":{},"面":{"docs":{},"积":{"docs":{},"。":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}}}}}}}},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"，":{"docs":{},"并":{"docs":{},"返":{"docs":{},"回":{"docs":{},"其":{"docs":{},"面":{"docs":{},"积":{"docs":{},"。":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}}}}}},"和":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"是":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748}},"节":{"docs":{},"点":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227}}}}}}}}}},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"以":{"docs":{},"及":{"docs":{},"右":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}}}}}}}}},"形":{"docs":{},"式":{"docs":{},"给":{"docs":{},"出":{"docs":{},"。":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}}}}}}},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"一":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}}}}}}}}}}}}},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}},"，":{"docs":{},"\"":{"docs":{},"p":{"docs":{},"w":{"docs":{},"k":{"docs":{},"e":{"docs":{},"\"":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}}}}}},"小":{"docs":{},"于":{"1":{"1":{"0":{"docs":{},"。":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}},"docs":{}},"docs":{}},"docs":{}}},"都":{"docs":{},"小":{"docs":{},"于":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"符":{"docs":{},"合":{"docs":{},"条":{"docs":{},"件":{"docs":{},"的":{"docs":{},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"和":{"docs":{},"宽":{"docs":{},"度":{"docs":{},"都":{"docs":{},"不":{"docs":{},"超":{"docs":{},"过":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}}}}}},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}}}}},"旋":{"docs":{},"转":{"docs":{},"操":{"docs":{},"作":{"docs":{},"就":{"docs":{},"是":{"docs":{},"将":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}}}}}}},"乘":{"docs":{},"积":{"docs":{},"，":{"docs":{},"它":{"docs":{},"们":{"docs":{},"的":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"也":{"docs":{},"表":{"docs":{},"示":{"docs":{},"为":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"形":{"docs":{},"式":{"docs":{},"。":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}}}}}}}}}}}}}}}}},"延":{"docs":{},"伸":{"docs":{},"题":{"docs":{},"目":{"docs":{},"，":{"docs":{},"本":{"docs":{},"题":{"docs":{},"中":{"docs":{},"的":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}}}}}}},"原":{"docs":{},"地":{"docs":{},"算":{"docs":{},"法":{"docs":{},"。":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}}}}},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}},"倍":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"请":{"docs":{},"将":{"docs":{},"最":{"docs":{},"后":{"docs":{},"剩":{"docs":{},"余":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"保":{"docs":{},"持":{"docs":{},"原":{"docs":{},"有":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"。":{"docs":{"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}},"。":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}},"都":{"docs":{},"在":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}},"和":{"docs":{},"最":{"docs":{},"大":{"docs":{},"，":{"docs":{},"为":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}}}}},"解":{"docs":{},"法":{"docs":{},"，":{"docs":{},"尝":{"docs":{},"试":{"docs":{},"使":{"docs":{},"用":{"docs":{},"更":{"docs":{},"为":{"docs":{},"精":{"docs":{},"妙":{"docs":{},"的":{"docs":{},"分":{"docs":{},"治":{"docs":{},"法":{"docs":{},"求":{"docs":{},"解":{"docs":{},"。":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}}}}}}}}}}}}}}}}}},"总":{"docs":{},"和":{"docs":{},"最":{"docs":{},"小":{"docs":{},"。":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}},"值":{"docs":{},"永":{"docs":{},"远":{"docs":{},"是":{"docs":{},"有":{"docs":{},"效":{"docs":{},"的":{"docs":{},",":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775}}}}}}}}},"均":{"docs":{},"不":{"docs":{},"超":{"docs":{},"过":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}},"是":{"docs":{},"多":{"docs":{},"少":{"docs":{},"。":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"移":{"docs":{},"动":{"docs":{},"次":{"docs":{},"数":{"docs":{},"是":{"docs":{},"多":{"docs":{},"少":{"docs":{},"？":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}},"：":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}},"至":{"docs":{},"少":{"docs":{},"为":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}},"成":{"docs":{},"员":{"docs":{},"依":{"docs":{},"次":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"个":{"docs":{},"成":{"docs":{},"员":{"docs":{},"相":{"docs":{},"同":{"docs":{},"就":{"docs":{},"再":{"docs":{},"比":{"docs":{},"较":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"成":{"docs":{},"员":{"docs":{},"。":{"docs":{},"问":{"docs":{},"题":{"docs":{},"中":{"docs":{},"的":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"第":{"docs":{},"三":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"在":{"docs":{},"调":{"docs":{},"用":{"docs":{},"了":{"docs":{},"你":{"docs":{},"的":{"docs":{},"函":{"docs":{},"数":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"该":{"docs":{},"链":{"docs":{},"表":{"docs":{},"应":{"docs":{},"变":{"docs":{},"为":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"在":{"docs":{},"调":{"docs":{},"用":{"docs":{},"了":{"docs":{},"你":{"docs":{},"的":{"docs":{},"函":{"docs":{},"数":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"该":{"docs":{},"链":{"docs":{},"表":{"docs":{},"应":{"docs":{},"变":{"docs":{},"为":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"测":{"docs":{},"试":{"docs":{},"代":{"docs":{},"码":{"docs":{},"，":{"docs":{},"则":{"docs":{},"可":{"docs":{},"能":{"docs":{},"会":{"docs":{},"捕":{"docs":{},"获":{"docs":{},"此":{"docs":{},"错":{"docs":{},"误":{"docs":{},"。":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}}}}},"。":{"docs":{},"请":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"趟":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"完":{"docs":{},"成":{"docs":{},"反":{"docs":{},"转":{"docs":{},"。":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}}}}}}}}}}},"用":{"docs":{},"来":{"docs":{},"表":{"docs":{},"示":{"docs":{},"两":{"docs":{},"个":{"docs":{},"非":{"docs":{},"负":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"。":{"docs":{},"其":{"docs":{},"中":{"docs":{},"，":{"docs":{},"它":{"docs":{},"们":{"docs":{},"各":{"docs":{},"自":{"docs":{},"的":{"docs":{},"位":{"docs":{},"数":{"docs":{},"是":{"docs":{},"按":{"docs":{},"照":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"方":{"docs":{},"式":{"docs":{},"存":{"docs":{},"储":{"docs":{},"的":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"它":{"docs":{},"们":{"docs":{},"的":{"docs":{},"每":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"只":{"docs":{},"能":{"docs":{},"存":{"docs":{},"储":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}},"非":{"docs":{},"空":{"docs":{},"单":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"中":{"docs":{},"间":{"docs":{},"结":{"docs":{},"点":{"docs":{},"。":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"到":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644}}}}}}}}}}}}},"路":{"docs":{},"径":{"docs":{},"有":{"docs":{},":":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}},"两":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}},"端":{"docs":{},"点":{"docs":{},"分":{"docs":{},"别":{"docs":{},"为":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}}},"深":{"docs":{},"度":{"docs":{},"尽":{"docs":{},"可":{"docs":{},"能":{"docs":{},"大":{"docs":{},"（":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"是":{"docs":{},"它":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"）":{"docs":{},"。":{"docs":{},"”":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}}}},"祖":{"docs":{},"先":{"docs":{},"且":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"个":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"差":{"docs":{},"的":{"docs":{},"绝":{"docs":{},"对":{"docs":{},"值":{"docs":{},"不":{"docs":{},"超":{"docs":{},"过":{"1":{"docs":{},"。":{"docs":{"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}}}},"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}},"网":{"docs":{},"格":{"docs":{},"。":{"docs":{},"有":{"docs":{},"多":{"docs":{},"少":{"docs":{},"可":{"docs":{},"能":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"？":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}}}}},"上":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"放":{"docs":{},"置":{"docs":{},"一":{"docs":{},"些":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}}}}}}}}}}},"初":{"docs":{},"始":{"docs":{},"值":{"docs":{},"如":{"docs":{},"何":{"docs":{},"，":{"docs":{},"你":{"docs":{},"确":{"docs":{},"定":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}},"含":{"docs":{},"义":{"docs":{},"是":{"docs":{},"k":{"docs":{},"个":{"docs":{},"鸡":{"docs":{},"蛋":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}},"楼":{"docs":{},"层":{"docs":{},"落":{"docs":{},"下":{"docs":{},"的":{"docs":{},"鸡":{"docs":{},"蛋":{"docs":{},"都":{"docs":{},"会":{"docs":{},"碎":{"docs":{},"，":{"docs":{},"从":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}}},"正":{"docs":{},"则":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"。":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}},"方":{"docs":{},"形":{"docs":{},"。":{"docs":{},"网":{"docs":{},"格":{"docs":{},"为":{"docs":{},"长":{"docs":{},"方":{"docs":{},"形":{"docs":{},"，":{"docs":{},"且":{"docs":{},"宽":{"docs":{},"度":{"docs":{},"和":{"docs":{},"高":{"docs":{},"度":{"docs":{},"均":{"docs":{},"不":{"docs":{},"超":{"docs":{},"过":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}},"通":{"docs":{},"配":{"docs":{},"符":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"。":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}},"不":{"docs":{},"同":{"docs":{},"非":{"docs":{},"空":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}}}}}}},"消":{"docs":{},"息":{"docs":{},"通":{"docs":{},"过":{"docs":{},"以":{"docs":{},"下":{"docs":{},"方":{"docs":{},"式":{"docs":{},"进":{"docs":{},"行":{"docs":{},"了":{"docs":{},"编":{"docs":{},"码":{"docs":{},"：":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}}}}}}}}}}}}},"立":{"docs":{},"方":{"docs":{},"体":{"docs":{},"。":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}}}}},"组":{"docs":{},"合":{"docs":{},"。":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}},"距":{"docs":{},"离":{"docs":{},"。":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},"是":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}}}}}}},"示":{"docs":{},"例":{"1":{"docs":{},":":{"docs":{"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358}}}},"2":{"docs":{},":":{"docs":{"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358}}}},"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.05263157894736842},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.02564102564102564},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.013986013986013986},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.03529411764705882},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.021739130434782608},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.009523809523809525},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.035211267605633804},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.01},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.02197802197802198},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.03076923076923077},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.012345679012345678},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.058823529411764705},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.016129032258064516},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.03773584905660377},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581},"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.034482758620689655},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.04672897196261682},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.023622047244094488},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.027777777777777776},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.012578616352201259},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.05172413793103448},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.012987012987012988},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.015748031496062992},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.029850746268656716},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0234375},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.013605442176870748},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.01},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0106951871657754},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.02631578947368421},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.013824884792626729},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.012145748987854251},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.018518518518518517},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.05263157894736842},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.011560693641618497},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.013157894736842105},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.024691358024691357},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.024390243902439025},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.011111111111111112},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.016853932584269662},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.018518518518518517},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.015822784810126583},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.020491803278688523},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.013392857142857142},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.016260162601626018},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.02631578947368421},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.03773584905660377},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.019867549668874173},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.02912621359223301},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.012048192771084338},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.0196078431372549},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.021052631578947368},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.013888888888888888},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.0136986301369863},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471}},":":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}},"：":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}},"给":{"docs":{},"定":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.0125},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386}},"一":{"docs":{},"个":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"编":{"docs":{},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"来":{"docs":{},"判":{"docs":{},"断":{"docs":{},"它":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.017543859649122806}}}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.017241379310344827}}}}}}}}}}}}}}}}},"型":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"找":{"docs":{},"出":{"docs":{},"由":{"docs":{},"三":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"成":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"，":{"docs":{},"并":{"docs":{},"输":{"docs":{},"出":{"docs":{},"这":{"docs":{},"个":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"。":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"非":{"docs":{},"空":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"除":{"docs":{},"了":{"docs":{},"某":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"以":{"docs":{},"外":{"docs":{},"，":{"docs":{},"其":{"docs":{},"余":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"均":{"docs":{},"出":{"docs":{},"现":{"docs":{},"两":{"docs":{},"次":{"docs":{},"。":{"docs":{},"找":{"docs":{},"出":{"docs":{},"那":{"docs":{},"个":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"了":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"其":{"docs":{},"最":{"docs":{},"大":{"docs":{},"路":{"docs":{},"径":{"docs":{},"和":{"docs":{},"。":{"docs":{"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678}}}}}}}}}}}}}}},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"其":{"docs":{},"中":{"docs":{},"出":{"docs":{},"现":{"docs":{},"频":{"docs":{},"率":{"docs":{},"前":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}}},"负":{"docs":{},"整":{"docs":{},"数":{"docs":{"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358}}}}}},"大":{"docs":{},"小":{"docs":{},"为":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}}}},"代":{"docs":{},"表":{"docs":{},"编":{"docs":{},"码":{"docs":{},"总":{"docs":{},"位":{"docs":{},"数":{"docs":{},"的":{"docs":{},"非":{"docs":{},"负":{"docs":{},"整":{"docs":{},"数":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}}}}}}}}},"每":{"docs":{},"个":{"docs":{},"房":{"docs":{},"屋":{"docs":{},"存":{"docs":{},"放":{"docs":{},"金":{"docs":{},"额":{"docs":{},"的":{"docs":{},"非":{"docs":{},"负":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"计":{"docs":{},"算":{"docs":{},"你":{"docs":{},"在":{"docs":{},"不":{"docs":{},"触":{"docs":{},"动":{"docs":{},"警":{"docs":{},"报":{"docs":{},"装":{"docs":{},"置":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"能":{"docs":{},"够":{"docs":{},"偷":{"docs":{},"窃":{"docs":{},"到":{"docs":{},"的":{"docs":{},"最":{"docs":{},"高":{"docs":{},"金":{"docs":{},"额":{"docs":{},"。":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"只":{"docs":{},"包":{"docs":{},"括":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}},"含":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"非":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"请":{"docs":{},"计":{"docs":{},"算":{"docs":{},"解":{"docs":{},"码":{"docs":{},"方":{"docs":{},"法":{"docs":{},"的":{"docs":{},"总":{"docs":{},"数":{"docs":{},"。":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}}}}}}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"复":{"docs":{},"原":{"docs":{},"它":{"docs":{},"并":{"docs":{},"返":{"docs":{},"回":{"docs":{},"所":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"的":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}},"按":{"docs":{},"非":{"docs":{},"递":{"docs":{},"减":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}}}}}}}}}},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"，":{"docs":{},"编":{"docs":{},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}}}}}}}},",":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}}},"树":{"docs":{},"，":{"docs":{},"找":{"docs":{},"出":{"docs":{},"其":{"docs":{},"最":{"docs":{},"大":{"docs":{},"深":{"docs":{},"度":{"docs":{},"。":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}}}}},"返":{"docs":{},"回":{"docs":{},"其":{"docs":{},"节":{"docs":{},"点":{"docs":{},"值":{"docs":{},"自":{"docs":{},"底":{"docs":{},"向":{"docs":{},"上":{"docs":{},"的":{"docs":{},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105}}}}}}}}}}}},"的":{"docs":{},"锯":{"docs":{},"齿":{"docs":{},"形":{"docs":{},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{},"（":{"docs":{},"即":{"docs":{},"先":{"docs":{},"从":{"docs":{},"左":{"docs":{},"往":{"docs":{},"右":{"docs":{},"，":{"docs":{},"再":{"docs":{},"从":{"docs":{},"右":{"docs":{},"往":{"docs":{},"左":{"docs":{},"进":{"docs":{},"行":{"docs":{},"下":{"docs":{},"一":{"docs":{},"层":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"以":{"docs":{},"此":{"docs":{},"类":{"docs":{},"推":{"docs":{},"，":{"docs":{},"层":{"docs":{},"与":{"docs":{},"层":{"docs":{},"之":{"docs":{},"间":{"docs":{},"交":{"docs":{},"替":{"docs":{},"进":{"docs":{},"行":{"docs":{},"）":{"docs":{},"。":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"所":{"docs":{},"有":{"docs":{},"从":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"到":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"。":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}}}}}}}}}}}}}}}},"它":{"docs":{},"的":{"docs":{},"每":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{},"都":{"docs":{},"存":{"docs":{},"放":{"docs":{},"着":{"docs":{},"一":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"值":{"docs":{},"。":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}}}}}}}}}}}}}},"原":{"docs":{},"地":{"docs":{},"将":{"docs":{},"它":{"docs":{},"展":{"docs":{},"开":{"docs":{},"为":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}}}}}}}}}}},"判":{"docs":{},"断":{"docs":{},"它":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"高":{"docs":{},"度":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"。":{"docs":{"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}}}}}}}}}}}}}}}}}},"和":{"docs":{},"一":{"docs":{},"个":{"docs":{},"目":{"docs":{},"标":{"docs":{},"和":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"该":{"docs":{},"树":{"docs":{},"中":{"docs":{},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"到":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"，":{"docs":{},"这":{"docs":{},"条":{"docs":{},"路":{"docs":{},"径":{"docs":{},"上":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"值":{"docs":{},"相":{"docs":{},"加":{"docs":{},"等":{"docs":{},"于":{"docs":{},"目":{"docs":{},"标":{"docs":{},"和":{"docs":{},"。":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"找":{"docs":{},"到":{"docs":{},"所":{"docs":{},"有":{"docs":{},"从":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"到":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"路":{"docs":{},"径":{"docs":{},"总":{"docs":{},"和":{"docs":{},"等":{"docs":{},"于":{"docs":{},"给":{"docs":{},"定":{"docs":{},"目":{"docs":{},"标":{"docs":{},"和":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"。":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}},"维":{"docs":{},"网":{"docs":{},"格":{"docs":{},"和":{"docs":{},"一":{"docs":{},"个":{"docs":{},"单":{"docs":{},"词":{"docs":{},"，":{"docs":{},"找":{"docs":{},"出":{"docs":{},"该":{"docs":{},"单":{"docs":{},"词":{"docs":{},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"于":{"docs":{},"网":{"docs":{},"格":{"docs":{},"中":{"docs":{},"。":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"，":{"docs":{},"包":{"docs":{},"含":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}},"包":{"docs":{},"含":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}},"红":{"docs":{},"色":{"docs":{},"、":{"docs":{},"白":{"docs":{},"色":{"docs":{},"和":{"docs":{},"蓝":{"docs":{},"色":{"docs":{},"，":{"docs":{},"一":{"docs":{},"共":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}}}}}}}}}}}},"非":{"docs":{},"负":{"docs":{},"整":{"docs":{},"数":{"docs":{},"的":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}},"了":{"docs":{},"一":{"docs":{},"些":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}},"括":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}}},"排":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"和":{"docs":{},"一":{"docs":{},"个":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"，":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"，":{"docs":{},"并":{"docs":{},"返":{"docs":{},"回":{"docs":{},"其":{"docs":{},"索":{"docs":{},"引":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"于":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"它":{"docs":{},"将":{"docs":{},"会":{"docs":{},"被":{"docs":{},"按":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"插":{"docs":{},"入":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"删":{"docs":{},"除":{"docs":{},"所":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"。":{"docs":{"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421}}}}}}}}}}}}}}}}}}}},"含":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"只":{"docs":{},"保":{"docs":{},"留":{"docs":{},"原":{"docs":{},"始":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"仅":{"docs":{},"包":{"docs":{},"含":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}},"，":{"docs":{},"验":{"docs":{},"证":{"docs":{},"它":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{},"，":{"docs":{},"只":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"字":{"docs":{},"母":{"docs":{},"和":{"docs":{},"数":{"docs":{},"字":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"忽":{"docs":{},"略":{"docs":{},"字":{"docs":{},"母":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"写":{"docs":{},"。":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"请":{"docs":{},"你":{"docs":{},"找":{"docs":{},"出":{"docs":{},"其":{"docs":{},"中":{"docs":{},"不":{"docs":{},"含":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}}}}}}}}}}}}},"你":{"docs":{},"需":{"docs":{},"要":{"docs":{},"反":{"docs":{},"转":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"中":{"docs":{},"每":{"docs":{},"个":{"docs":{},"单":{"docs":{},"词":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"仍":{"docs":{},"保":{"docs":{},"留":{"docs":{},"空":{"docs":{},"格":{"docs":{},"和":{"docs":{},"单":{"docs":{},"词":{"docs":{},"的":{"docs":{},"初":{"docs":{},"始":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"。":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}},"，":{"docs":{},"将":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"向":{"docs":{},"右":{"docs":{},"移":{"docs":{},"动":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"含":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"给":{"docs":{},"定":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"1":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}}},"docs":{}}}}}}}}}}}}}}}}}}}},"它":{"docs":{},"的":{"docs":{},"第":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}}},"已":{"docs":{},"按":{"docs":{},"照":{"docs":{},"升":{"docs":{},"序":{"docs":{},"排":{"docs":{},"列":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}}}}}},"含":{"docs":{},"有":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}}},"未":{"docs":{},"经":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"最":{"docs":{},"长":{"docs":{},"且":{"docs":{},"连":{"docs":{},"续":{"docs":{},"的":{"docs":{},"的":{"docs":{},"递":{"docs":{},"增":{"docs":{},"序":{"docs":{},"列":{"docs":{},"。":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}}}}}}}}}}}}}}}}}}}}}}}},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"最":{"docs":{},"长":{"docs":{},"递":{"docs":{},"增":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}}}}}}},"正":{"docs":{},"整":{"docs":{},"数":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"旋":{"docs":{},"转":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"将":{"docs":{},"链":{"docs":{},"表":{"docs":{},"每":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"向":{"docs":{},"右":{"docs":{},"移":{"docs":{},"动":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}}}}}}}}}}}}}}},"判":{"docs":{},"断":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"环":{"docs":{},"。":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403}}}}}}}}}}}},"返":{"docs":{},"回":{"docs":{},"链":{"docs":{},"表":{"docs":{},"开":{"docs":{},"始":{"docs":{},"入":{"docs":{},"环":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}}}}}}}}}}},"删":{"docs":{},"除":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}},":":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}},"带":{"docs":{},"有":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}},"无":{"docs":{},"序":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"其":{"docs":{},"中":{"docs":{},"最":{"docs":{},"长":{"docs":{},"上":{"docs":{},"升":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}}}}}}}},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}}}}}}}},"可":{"docs":{},"能":{"docs":{},"包":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}}}}}}}}}}},"包":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"所":{"docs":{},"有":{"docs":{},"不":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"全":{"docs":{},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}}}}}}}}}}}}}}}}}}}}}},"没":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"其":{"docs":{},"所":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"的":{"docs":{},"全":{"docs":{},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}}},"由":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}},"颗":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"它":{"docs":{},"的":{"docs":{},"每":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"都":{"docs":{},"是":{"docs":{},"正":{"docs":{},"数":{"docs":{},"或":{"docs":{},"负":{"docs":{},"数":{"docs":{},"，":{"docs":{},"如":{"docs":{},"何":{"docs":{},"找":{"docs":{},"到":{"docs":{},"一":{"docs":{},"颗":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"是":{"docs":{},"的":{"docs":{},"该":{"docs":{},"子":{"docs":{},"树":{"docs":{},"和":{"docs":{},"最":{"docs":{},"大":{"docs":{"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"组":{"docs":{},"非":{"docs":{},"负":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"重":{"docs":{},"新":{"docs":{},"排":{"docs":{},"列":{"docs":{},"它":{"docs":{},"们":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"使":{"docs":{},"之":{"docs":{},"组":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"。":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}}}}}}}}}}},"编":{"docs":{},"码":{"docs":{},"总":{"docs":{},"位":{"docs":{},"数":{"docs":{},"为":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}}}}},"两":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}},"，":{"docs":{},"被":{"docs":{},"除":{"docs":{},"数":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}}}}},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"他":{"docs":{},"们":{"docs":{},"的":{"docs":{},"和":{"docs":{},"（":{"docs":{},"用":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"表":{"docs":{},"示":{"docs":{},"）":{"docs":{},"。":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}}}}}}},"有":{"docs":{},"序":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}}}}},"大":{"docs":{},"小":{"docs":{},"为":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},",":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}},"形":{"docs":{},"式":{"docs":{},"的":{"docs":{},"非":{"docs":{},"负":{"docs":{},"整":{"docs":{},"数":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}}}}}}}}},"以":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"形":{"docs":{},"式":{"docs":{},"表":{"docs":{},"示":{"docs":{},"的":{"docs":{},"非":{"docs":{},"负":{"docs":{},"整":{"docs":{},"数":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}}}}}}}}}}}},"单":{"docs":{},"词":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}},"逆":{"docs":{},"波":{"docs":{},"兰":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"总":{"docs":{},"是":{"docs":{},"有":{"docs":{},"效":{"docs":{},"的":{"docs":{},"。":{"docs":{},"换":{"docs":{},"句":{"docs":{},"话":{"docs":{},"说":{"docs":{},"，":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"总":{"docs":{},"会":{"docs":{},"得":{"docs":{},"出":{"docs":{},"有":{"docs":{},"效":{"docs":{},"数":{"docs":{},"值":{"docs":{},"且":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"除":{"docs":{},"数":{"docs":{},"为":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}},"的":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}},"整":{"docs":{},"型":{"docs":{},"数":{"docs":{},"组":{"docs":{},"长":{"docs":{},"度":{"docs":{},"范":{"docs":{},"围":{"docs":{},"是":{"docs":{},"[":{"3":{"docs":{},",":{"1":{"0":{"4":{"docs":{},"]":{"docs":{},"，":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"范":{"docs":{},"围":{"docs":{},"是":{"docs":{},"[":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}}}}}}}}}},"节":{"docs":{},"点":{"docs":{},"为":{"docs":{},"非":{"docs":{},"末":{"docs":{},"尾":{"docs":{},"节":{"docs":{},"点":{"docs":{},"并":{"docs":{},"且":{"docs":{},"一":{"docs":{},"定":{"docs":{},"是":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"有":{"docs":{},"效":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}},"矩":{"docs":{},"阵":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}}}},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}}},"你":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"值":{"docs":{},"为":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.018518518518518517}}}}}}}},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"结":{"docs":{},"点":{"docs":{},"数":{"docs":{},"介":{"docs":{},"于":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}}},"这":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"：":{"1":{"docs":{"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125}}},"docs":{}}}}}},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.024390243902439025}}}}},"如":{"docs":{},"下":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"以":{"docs":{},"及":{"docs":{},"目":{"docs":{},"标":{"docs":{},"和":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993}}}}}}}}}}}}},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},":":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}}}}},"不":{"docs":{},"同":{"docs":{},"面":{"docs":{},"额":{"docs":{},"的":{"docs":{},"硬":{"docs":{},"币":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}}}}}}},"矩":{"docs":{},"阵":{"docs":{},"中":{"docs":{},"至":{"docs":{},"少":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"是":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}}}}},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"个":{"docs":{},"数":{"docs":{},"不":{"docs":{},"超":{"docs":{},"过":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}}}}}}},"出":{"docs":{},"一":{"docs":{},"个":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941}},"区":{"docs":{},"间":{"docs":{},"的":{"docs":{},"集":{"docs":{},"合":{"docs":{},"，":{"docs":{},"请":{"docs":{},"合":{"docs":{},"并":{"docs":{},"所":{"docs":{},"有":{"docs":{},"重":{"docs":{},"叠":{"docs":{},"的":{"docs":{},"区":{"docs":{},"间":{"docs":{},"。":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}}}}},"组":{"docs":{},"序":{"docs":{},"列":{"docs":{},",":{"docs":{},"序":{"docs":{},"列":{"docs":{},"中":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"都":{"docs":{},"大":{"docs":{},"于":{"0":{"docs":{},"，":{"docs":{},"则":{"docs":{},"该":{"docs":{},"序":{"docs":{},"列":{"docs":{},"中":{"docs":{},"元":{"docs":{},"素":{"docs":{},"可":{"docs":{},"以":{"docs":{},"构":{"docs":{},"成":{"docs":{},"多":{"docs":{},"少":{"docs":{},"个":{"docs":{},"三":{"docs":{},"角":{"docs":{},"形":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}}},"你":{"docs":{},"一":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"每":{"docs":{"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}},"两":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}}}}}}},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"插":{"docs":{},"入":{"docs":{},"节":{"docs":{},"点":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":10}}}}}}}}}},"解":{"docs":{},"释":{"docs":{},":":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.03508771929824561},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.021739130434782608},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.009523809523809525},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.037383177570093455},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.023622047244094488},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.015625},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0106951871657754},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.018518518518518517},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.018518518518518517},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.012658227848101266},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.01639344262295082},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.016260162601626018},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.02631578947368421},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.019867549668874173},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}},"：":{"3":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}},"6":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}},"7":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}},"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862}},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"环":{"docs":{},"，":{"docs":{},"其":{"docs":{},"尾":{"docs":{},"部":{"docs":{},"连":{"docs":{},"接":{"docs":{},"到":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}},"二":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}}}}}}}}}}}}},"没":{"docs":{},"有":{"docs":{},"环":{"docs":{},"。":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}}},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"不":{"docs":{},"相":{"docs":{},"交":{"docs":{},"，":{"docs":{},"因":{"docs":{},"此":{"docs":{},"返":{"docs":{},"回":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}},"析":{"docs":{},"：":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}},"题":{"docs":{},"思":{"docs":{},"路":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}},"维":{"docs":{},"：":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}},"法":{"3":{"docs":{},"：":{"docs":{},"不":{"docs":{},"使":{"docs":{},"用":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"设":{"docs":{},"置":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"p":{"1":{"docs":{},",":{"docs":{},"p":{"2":{"docs":{},"，":{"docs":{},"开":{"docs":{},"始":{"docs":{},"均":{"docs":{},"指":{"docs":{},"向":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"每":{"docs":{},"次":{"docs":{},"p":{"1":{"docs":{},"向":{"docs":{},"后":{"docs":{},"移":{"docs":{},"动":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"p":{"2":{"docs":{},"向":{"docs":{},"后":{"docs":{},"移":{"docs":{},"动":{"docs":{},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"比":{"docs":{},"较":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"指":{"docs":{},"向":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"是":{"docs":{},"否":{"docs":{},"相":{"docs":{},"同":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"相":{"docs":{},"同":{"docs":{},"，":{"docs":{},"则":{"docs":{},"判":{"docs":{},"断":{"docs":{},"出":{"docs":{},"链":{"docs":{},"表":{"docs":{},"有":{"docs":{},"环":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"同":{"docs":{},"，":{"docs":{},"则":{"docs":{},"继":{"docs":{},"续":{"docs":{},"下":{"docs":{},"一":{"docs":{},"次":{"docs":{},"循":{"docs":{},"环":{"docs":{},"。":{"docs":{},"有":{"docs":{},"“":{"docs":{},"环":{"docs":{},"”":{"docs":{},"自":{"docs":{},"会":{"docs":{},"“":{"docs":{},"重":{"docs":{},"逢":{"docs":{},"”":{"docs":{},"。":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}},"码":{"docs":{},"方":{"docs":{},"法":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"9":{"1":{"docs":{},")":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"9":{"1":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}}}},"集":{"docs":{},"不":{"docs":{},"能":{"docs":{},"包":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"组":{"docs":{},"合":{"docs":{},"。":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}}}}}}}}}}},"输":{"docs":{},"入":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421}},":":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.05263157894736842},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.02564102564102564},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.013986013986013986},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.03529411764705882},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.021739130434782608},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.009523809523809525},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.035211267605633804},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.02197802197802198},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.03076923076923077},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.029850746268656716},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.012345679012345678},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.058823529411764705},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.016129032258064516},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.03773584905660377},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.04672897196261682},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.023622047244094488},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.027777777777777776},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.012578616352201259},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.05172413793103448},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.012987012987012988},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.015748031496062992},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.029850746268656716},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0234375},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.013605442176870748},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.01},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0106951871657754},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.018518518518518517},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.05263157894736842},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.011560693641618497},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.024691358024691357},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.011111111111111112},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.018518518518518517},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.015822784810126583},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.02459016393442623},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.016260162601626018},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.02631578947368421},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.03773584905660377},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.019867549668874173},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.012048192771084338},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.0196078431372549},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.021052631578947368},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.0136986301369863},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471}}},"数":{"docs":{},"字":{"docs":{},"：":{"5":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}},"docs":{}}}},"为":{"docs":{},"非":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"且":{"docs":{},"只":{"docs":{},"包":{"docs":{},"含":{"docs":{},"数":{"docs":{},"字":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}}}}}}}}}}}}},"：":{"1":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}},"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862}},"中":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"串":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}},"[":{"0":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}},"docs":{}},"]":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.01}},"\"":{"docs":{},"h":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"\"":{"docs":{},"]":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"o":{"docs":{},"\"":{"docs":{},"]":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}}}}}}}}}}}}}}}}}}}}}},"[":{"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"0":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},"]":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}}}},"docs":{}}},"docs":{}}}}},"2":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},"]":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"2":{"docs":{},"]":{"docs":{},"]":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}}}},"docs":{}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.02631578947368421},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.013824884792626729}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"v":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.012145748987854251}}}}}}}}}}}},"(":{"2":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}},"docs":{}},"k":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.016853932584269662}}},"\"":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"\"":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}},"b":{"docs":{},"a":{"docs":{},"\"":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}},"c":{"docs":{},"\"":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"任":{"docs":{},"意":{"docs":{},"三":{"docs":{},"个":{"docs":{},"数":{"docs":{},"的":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"不":{"docs":{},"会":{"docs":{},"超":{"docs":{},"出":{"3":{"2":{"docs":{},"位":{"docs":{},"有":{"docs":{},"符":{"docs":{},"号":{"docs":{},"整":{"docs":{},"数":{"docs":{},"的":{"docs":{},"范":{"docs":{},"围":{"docs":{},"。":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"公":{"docs":{},"共":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"。":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}}}}}}}},"无":{"docs":{},"须":{"docs":{},"数":{"docs":{},"组":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":3.3397435897435894},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":3.3397435897435894}}}}}},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":3.338211382113821},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":3.339583333333333}},"、":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}},"解":{"docs":{},"释":{"docs":{},"：":{"docs":{},"从":{"docs":{},"各":{"docs":{},"自":{"docs":{},"的":{"docs":{},"表":{"docs":{},"头":{"docs":{},"开":{"docs":{},"始":{"docs":{},"算":{"docs":{},"起":{"docs":{},"，":{"docs":{},"链":{"docs":{},"表":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}}}}},"相":{"docs":{},"交":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"为":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834}}}}}}}}}}}},"[":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}},"描":{"docs":{},"述":{"docs":{},":":{"docs":{"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616}}}}},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},",":{"docs":{},"按":{"docs":{},"字":{"docs":{},"典":{"docs":{},"序":{"docs":{},"打":{"docs":{},"印":{"docs":{},"出":{"docs":{},"该":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"中":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{},"例":{"docs":{},"如":{"docs":{},"输":{"docs":{},"入":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},",":{"docs":{},"则":{"docs":{},"打":{"docs":{},"印":{"docs":{},"出":{"docs":{},"由":{"docs":{},"字":{"docs":{},"符":{"docs":{},"a":{"docs":{},",":{"docs":{},"b":{"docs":{},",":{"docs":{},"c":{"docs":{},"所":{"docs":{},"能":{"docs":{},"排":{"docs":{},"列":{"docs":{},"出":{"docs":{},"来":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},",":{"docs":{},"a":{"docs":{},"c":{"docs":{},"b":{"docs":{},",":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},",":{"docs":{},"b":{"docs":{},"c":{"docs":{},"a":{"docs":{},",":{"docs":{},"c":{"docs":{},"a":{"docs":{},"b":{"docs":{},"和":{"docs":{},"c":{"docs":{},"b":{"docs":{},"a":{"docs":{},"。":{"docs":{"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"长":{"docs":{},"度":{"docs":{},"不":{"docs":{},"超":{"docs":{},"过":{"9":{"docs":{},"(":{"docs":{},"可":{"docs":{},"能":{"docs":{},"有":{"docs":{},"字":{"docs":{},"符":{"docs":{},"重":{"docs":{},"复":{"docs":{},")":{"docs":{},",":{"docs":{},"字":{"docs":{},"符":{"docs":{},"只":{"docs":{},"包":{"docs":{},"括":{"docs":{},"大":{"docs":{},"小":{"docs":{},"写":{"docs":{},"字":{"docs":{},"母":{"docs":{},"。":{"docs":{"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"n":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"找":{"docs":{},"出":{"docs":{},"其":{"docs":{},"中":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"k":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{},"例":{"docs":{},"如":{"docs":{},"输":{"docs":{},"入":{"4":{"docs":{},",":{"5":{"docs":{},",":{"1":{"docs":{},",":{"6":{"docs":{},",":{"2":{"docs":{},",":{"7":{"docs":{},",":{"3":{"docs":{},",":{"8":{"docs":{},"这":{"8":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"则":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"4":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"是":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"docs":{},"。":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"docs":{}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"出":{"1":{"docs":{},"+":{"2":{"docs":{},"+":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"+":{"docs":{},"n":{"docs":{},"_":{"docs":{},"短":{"docs":{},"路":{"docs":{},"原":{"docs":{},"理":{"docs":{"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":10}}}}}}}}}}}}}},"docs":{}}},"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.018518518518518517},"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684}},":":{"docs":{"数字运算/2的幂_LeetCode_231.html":{"ref":"数字运算/2的幂_LeetCode_231.html","tf":0.05263157894736842},"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.02564102564102564},"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.013986013986013986},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.013793103448275862},"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.03529411764705882},"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.021739130434782608},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.013452914798206279},"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.017391304347826087},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.009523809523809525},"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.035211267605633804},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.02197802197802198},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.03076923076923077},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.029850746268656716},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.012345679012345678},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.014388489208633094},"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.058823529411764705},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.016129032258064516},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.03773584905660377},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.04672897196261682},"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.023622047244094488},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.027777777777777776},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.012578616352201259},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.009950248756218905},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":0.05172413793103448},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.012987012987012988},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.011235955056179775},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.015748031496062992},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.029850746268656716},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0234375},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.013605442176870748},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.01},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0106951871657754},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.018518518518518517},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.01818181818181818},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.05263157894736842},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.011560693641618497},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.024691358024691357},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.011111111111111112},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.00909090909090909},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.018518518518518517},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.015822784810126583},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.01639344262295082},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.016260162601626018},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.02631578947368421},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.03773584905660377},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.019867549668874173},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.015873015873015872},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.011834319526627219},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.011834319526627219},"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.021052631578947368},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.0136986301369863},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471}}},"：":{"1":{"0":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}},"1":{"1":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}},"docs":{}},"6":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}},"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}},"2":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}},"3":{"4":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}},"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}},"4":{"4":{"4":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}},"docs":{}},"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}},"6":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}},"7":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}},"docs":{"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.05263157894736842},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.013793103448275862}},"后":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"串":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}},"[":{"0":{"docs":{},",":{"1":{"docs":{},",":{"9":{"docs":{},",":{"1":{"6":{"docs":{},",":{"1":{"0":{"0":{"docs":{},"]":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"9":{"docs":{},",":{"9":{"docs":{},",":{"4":{"9":{"docs":{},",":{"1":{"2":{"1":{"docs":{},"]":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{},"\"":{"docs":{},"h":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"\"":{"docs":{},"]":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"\"":{"docs":{},"]":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.017543859649122806}}}}},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.009216589861751152}}}}}},"n":{"docs":{},"o":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834}}}}}}},"此":{"docs":{},"列":{"docs":{},"表":{"docs":{},"中":{"docs":{},"的":{"docs":{},"结":{"docs":{},"点":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.013157894736842105}}}}}}}}}},"环":{"docs":{},"形":{"docs":{},"链":{"docs":{},"表":{"docs":{},"是":{"docs":{},"第":{"docs":{},"几":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"有":{"docs":{},"错":{"docs":{},"，":{"docs":{},"深":{"docs":{},"拷":{"docs":{},"贝":{"docs":{},"也":{"docs":{},"不":{"docs":{},"行":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}}}}}}}}}}}}}}}}}},"节":{"docs":{},"点":{"docs":{},"值":{"docs":{},"到":{"docs":{},"列":{"docs":{},"表":{"docs":{},"，":{"docs":{},"重":{"docs":{},"建":{"docs":{},"链":{"docs":{},"表":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}},"结":{"docs":{},"果":{"docs":{},"可":{"docs":{},"能":{"docs":{},"非":{"docs":{},"常":{"docs":{},"大":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"你":{"docs":{},"需":{"docs":{},"要":{"docs":{},"返":{"docs":{},"回":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"整":{"docs":{},"数":{"docs":{},"。":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"^":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.013452914798206279},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.10884353741496598}},"=":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.03896103896103896},"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.03125},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}}}},"你":{"docs":{},"可":{"docs":{},"以":{"docs":{},"不":{"docs":{},"使":{"docs":{},"用":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"来":{"docs":{},"实":{"docs":{},"现":{"docs":{},"吗":{"docs":{},"？":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}}}}}}}}}}},"假":{"docs":{},"设":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}},"数":{"docs":{},"组":{"docs":{},"是":{"docs":{},"非":{"docs":{},"空":{"docs":{},"的":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"总":{"docs":{},"是":{"docs":{},"存":{"docs":{},"在":{"docs":{},"众":{"docs":{},"数":{"docs":{},"。":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}}}}}}}}}}}}}}}}}}}},"中":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}}}}}}}}}},"无":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176}}}}}}}},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"字":{"docs":{},"符":{"docs":{},"都":{"docs":{},"是":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}}}}}}}}}}}},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"输":{"docs":{},"入":{"docs":{},"都":{"docs":{},"是":{"docs":{},"由":{"docs":{},"小":{"docs":{},"写":{"docs":{},"字":{"docs":{},"母":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}},"单":{"docs":{},"词":{"docs":{},"都":{"docs":{},"是":{"docs":{},"由":{"docs":{},"小":{"docs":{},"写":{"docs":{},"字":{"docs":{},"母":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}}},"每":{"docs":{},"个":{"docs":{},"输":{"docs":{},"入":{"docs":{},"只":{"docs":{},"对":{"docs":{},"应":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"的":{"docs":{},"答":{"docs":{},"案":{"docs":{},"，":{"docs":{},"而":{"docs":{},"且":{"docs":{},"你":{"docs":{},"不":{"docs":{},"可":{"docs":{},"以":{"docs":{},"重":{"docs":{},"复":{"docs":{},"使":{"docs":{},"用":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"树":{"docs":{},"中":{"docs":{},"没":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}}}}}}}}}},"字":{"docs":{},"典":{"docs":{},"中":{"docs":{},"没":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"单":{"docs":{},"词":{"docs":{},"。":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}}}}},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}},"删":{"docs":{},"除":{"docs":{},"c":{"docs":{},"字":{"docs":{},"符":{"docs":{},"。":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}}}}}}},"在":{"docs":{},"常":{"docs":{},"数":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"内":{"docs":{},"完":{"docs":{},"成":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"目":{"docs":{},"吗":{"docs":{},"？":{"docs":{},"（":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}}},"迭":{"docs":{},"代":{"docs":{},"或":{"docs":{},"递":{"docs":{},"归":{"docs":{},"地":{"docs":{},"反":{"docs":{},"转":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{},"你":{"docs":{},"能":{"docs":{},"否":{"docs":{},"用":{"docs":{},"两":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"？":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}}}}}}}}}}}}}}},"认":{"docs":{},"为":{"docs":{},"每":{"docs":{},"种":{"docs":{},"硬":{"docs":{},"币":{"docs":{},"的":{"docs":{},"数":{"docs":{},"量":{"docs":{},"是":{"docs":{},"无":{"docs":{},"限":{"docs":{},"的":{"docs":{},"。":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}}}}}}}}}}}}}},"先":{"docs":{},"偷":{"docs":{},"窃":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}},"对":{"docs":{},"一":{"docs":{},"个":{"docs":{},"单":{"docs":{},"词":{"docs":{},"进":{"docs":{},"行":{"docs":{},"如":{"docs":{},"下":{"docs":{},"三":{"docs":{},"种":{"docs":{},"操":{"docs":{},"作":{"docs":{},"：":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}}}}}}}}}}}},"分":{"docs":{},"别":{"docs":{},"给":{"docs":{},"这":{"docs":{},"三":{"docs":{},"个":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"分":{"docs":{},"发":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}}}}}}}}}}}}}},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"应":{"docs":{},"该":{"docs":{},"具":{"docs":{},"有":{"docs":{},"线":{"docs":{},"性":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"。":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}}}}}}}}}}},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"必":{"docs":{},"须":{"docs":{},"是":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}}}}}}}}},"只":{"docs":{},"能":{"docs":{},"使":{"docs":{},"用":{"docs":{},"常":{"docs":{},"数":{"docs":{},"的":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"。":{"docs":{"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125}}}}}}}}}}}}}},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"必":{"docs":{},"须":{"docs":{},"优":{"docs":{},"于":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}}}}}}}}},"目":{"docs":{},"标":{"docs":{},"是":{"docs":{},"确":{"docs":{},"切":{"docs":{},"地":{"docs":{},"知":{"docs":{},"道":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}},"能":{"docs":{},"想":{"docs":{},"出":{"docs":{},"一":{"docs":{},"个":{"docs":{},"仅":{"docs":{},"使":{"docs":{},"用":{"docs":{},"常":{"docs":{},"数":{"docs":{},"空":{"docs":{},"间":{"docs":{},"的":{"docs":{},"一":{"docs":{},"趟":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"算":{"docs":{},"法":{"docs":{},"吗":{"docs":{},"？":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"将":{"docs":{},"整":{"docs":{},"数":{"docs":{},"转":{"docs":{},"为":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"来":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"吗":{"docs":{},"？":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}}}}}}}}}}}}}}}}}}},"用":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403}}},"尝":{"docs":{},"试":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"趟":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"实":{"docs":{},"现":{"docs":{},"吗":{"docs":{},"？":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}},"否":{"docs":{},"用":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428}}}},"将":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"降":{"docs":{},"低":{"docs":{},"到":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}}}},"不":{"docs":{},"能":{"docs":{},"使":{"docs":{},"用":{"docs":{},"任":{"docs":{},"何":{"docs":{},"內":{"docs":{},"建":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}}}}},"只":{"docs":{},"是":{"docs":{},"单":{"docs":{},"纯":{"docs":{},"的":{"docs":{},"改":{"docs":{},"变":{"docs":{},"节":{"docs":{},"点":{"docs":{},"内":{"docs":{},"部":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"而":{"docs":{},"是":{"docs":{},"需":{"docs":{},"要":{"docs":{},"实":{"docs":{},"际":{"docs":{},"的":{"docs":{},"进":{"docs":{},"行":{"docs":{},"节":{"docs":{},"点":{"docs":{},"交":{"docs":{},"换":{"docs":{},"。":{"docs":{"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"先":{"docs":{},"偷":{"docs":{},"窃":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}}}},"是":{"docs":{},"否":{"docs":{},"可":{"docs":{},"以":{"docs":{},"不":{"docs":{},"用":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"解":{"docs":{},"决":{"docs":{},"此":{"docs":{},"题":{"docs":{},"？":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"专":{"docs":{},"业":{"docs":{},"的":{"docs":{},"小":{"docs":{},"偷":{"docs":{},"，":{"docs":{},"计":{"docs":{},"划":{"docs":{},"偷":{"docs":{},"窃":{"docs":{},"沿":{"docs":{},"街":{"docs":{},"的":{"docs":{},"房":{"docs":{},"屋":{"docs":{},"。":{"docs":{},"每":{"docs":{},"间":{"docs":{},"房":{"docs":{},"内":{"docs":{},"都":{"docs":{},"藏":{"docs":{},"有":{"docs":{},"一":{"docs":{},"定":{"docs":{},"的":{"docs":{},"现":{"docs":{},"金":{"docs":{},"，":{"docs":{},"影":{"docs":{},"响":{"docs":{},"你":{"docs":{},"偷":{"docs":{},"窃":{"docs":{},"的":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"制":{"docs":{},"约":{"docs":{},"因":{"docs":{},"素":{"docs":{},"就":{"docs":{},"是":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"的":{"docs":{},"房":{"docs":{},"屋":{"docs":{},"装":{"docs":{},"有":{"docs":{},"相":{"docs":{},"互":{"docs":{},"连":{"docs":{},"通":{"docs":{},"的":{"docs":{},"防":{"docs":{},"盗":{"docs":{},"系":{"docs":{},"统":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"间":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"的":{"docs":{},"房":{"docs":{},"屋":{"docs":{},"在":{"docs":{},"同":{"docs":{},"一":{"docs":{},"晚":{"docs":{},"上":{"docs":{},"被":{"docs":{},"小":{"docs":{},"偷":{"docs":{},"闯":{"docs":{},"入":{"docs":{},"，":{"docs":{},"系":{"docs":{},"统":{"docs":{},"会":{"docs":{},"自":{"docs":{},"动":{"docs":{},"报":{"docs":{},"警":{"docs":{},"。":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"每":{"docs":{},"间":{"docs":{},"房":{"docs":{},"内":{"docs":{},"都":{"docs":{},"藏":{"docs":{},"有":{"docs":{},"一":{"docs":{},"定":{"docs":{},"的":{"docs":{},"现":{"docs":{},"金":{"docs":{},"。":{"docs":{},"这":{"docs":{},"个":{"docs":{},"地":{"docs":{},"方":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"房":{"docs":{},"屋":{"docs":{},"都":{"docs":{},"围":{"docs":{},"成":{"docs":{},"一":{"docs":{},"圈":{"docs":{},"，":{"docs":{},"这":{"docs":{},"意":{"docs":{},"味":{"docs":{},"着":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"房":{"docs":{},"屋":{"docs":{},"和":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"房":{"docs":{},"屋":{"docs":{},"是":{"docs":{},"紧":{"docs":{},"挨":{"docs":{},"着":{"docs":{},"的":{"docs":{},"。":{"docs":{},"同":{"docs":{},"时":{"docs":{},"，":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"的":{"docs":{},"房":{"docs":{},"屋":{"docs":{},"装":{"docs":{},"有":{"docs":{},"相":{"docs":{},"互":{"docs":{},"连":{"docs":{},"通":{"docs":{},"的":{"docs":{},"防":{"docs":{},"盗":{"docs":{},"系":{"docs":{},"统":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"间":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"的":{"docs":{},"房":{"docs":{},"屋":{"docs":{},"在":{"docs":{},"同":{"docs":{},"一":{"docs":{},"晚":{"docs":{},"上":{"docs":{},"被":{"docs":{},"小":{"docs":{},"偷":{"docs":{},"闯":{"docs":{},"入":{"docs":{},"，":{"docs":{},"系":{"docs":{},"统":{"docs":{},"会":{"docs":{},"自":{"docs":{},"动":{"docs":{},"报":{"docs":{},"警":{"docs":{},"。":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"将":{"docs":{},"获":{"docs":{},"得":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}},"知":{"docs":{},"道":{"docs":{},"存":{"docs":{},"在":{"docs":{},"楼":{"docs":{},"层":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"应":{"docs":{},"该":{"docs":{},"为":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}},"需":{"docs":{},"要":{"docs":{},"按":{"docs":{},"照":{"docs":{},"以":{"docs":{},"下":{"docs":{},"要":{"docs":{},"求":{"docs":{},"，":{"docs":{},"帮":{"docs":{},"助":{"docs":{},"老":{"docs":{},"师":{"docs":{},"给":{"docs":{},"这":{"docs":{},"些":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"分":{"docs":{},"发":{"docs":{},"糖":{"docs":{},"果":{"docs":{},"：":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}}}}}}}}}}},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":10.012820512820513}}}}}}}}},"有":{"docs":{},"连":{"docs":{},"续":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{},"既":{"docs":{},"不":{"docs":{},"入":{"docs":{},"栈":{"docs":{},",":{"docs":{},"同":{"docs":{},"时":{"docs":{},"还":{"docs":{},"要":{"docs":{},"不":{"docs":{},"断":{"docs":{},"更":{"docs":{},"新":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"句":{"docs":{},"话":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"不":{"docs":{},"加":{"docs":{},"大":{"docs":{},"括":{"docs":{},"号":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}}}}}}}}},"作":{"docs":{},"为":{"docs":{},"空":{"docs":{},"串":{"docs":{},"，":{"docs":{},"才":{"docs":{},"能":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"成":{"docs":{},"功":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}},"包":{"docs":{},"含":{"docs":{},"数":{"docs":{},"字":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}},"小":{"docs":{},"写":{"docs":{},"字":{"docs":{},"母":{"docs":{},"。":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}}},"会":{"docs":{},"走":{"docs":{},"一":{"docs":{},"个":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}},"=":{"docs":{},"=":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}}}}}}},"需":{"docs":{},"对":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"排":{"docs":{},"序":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"两":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"都":{"docs":{},"排":{"docs":{},"序":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}}}}}}}}}}}},"要":{"docs":{},"o":{"docs":{},"(":{"docs":{},"k":{"docs":{},")":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}},"能":{"docs":{},"往":{"docs":{},"上":{"docs":{},"和":{"docs":{},"往":{"docs":{},"左":{"docs":{},"延":{"docs":{},"伸":{"1":{"docs":{},"单":{"docs":{},"位":{"docs":{},"，":{"docs":{},"(":{"docs":{},"i":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}},"2":{"docs":{},"个":{"docs":{},"单":{"docs":{},"位":{"docs":{},"：":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}},"3":{"docs":{},"个":{"docs":{},"单":{"docs":{},"位":{"docs":{},"，":{"docs":{},"(":{"docs":{},"i":{"docs":{},"，":{"docs":{},"j":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}}}},"docs":{}}}}}}}}}},"异":{"docs":{},"或":{"docs":{"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}},"解":{"docs":{},"决":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.02564102564102564},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}},"法":{"docs":{"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":5}}},"操":{"docs":{},"作":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":10.006802721088436}},"满":{"docs":{},"足":{"docs":{},"交":{"docs":{},"换":{"docs":{},"律":{"docs":{},"和":{"docs":{},"结":{"docs":{},"合":{"docs":{},"律":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}}}}}}}}}}}},"说":{"docs":{},"明":{"docs":{"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125}},"：":{"docs":{"数字运算/只出现一次的数字.html":{"ref":"数字运算/只出现一次的数字.html","tf":0.01282051282051282},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}},"本":{"docs":{},"题":{"docs":{},"中":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"将":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"定":{"docs":{},"义":{"docs":{},"为":{"docs":{},"有":{"docs":{},"效":{"docs":{},"的":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{},"。":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}},"每":{"docs":{},"次":{"docs":{},"只":{"docs":{},"能":{"docs":{},"向":{"docs":{},"下":{"docs":{},"或":{"docs":{},"者":{"docs":{},"向":{"docs":{},"右":{"docs":{},"移":{"docs":{},"动":{"docs":{},"一":{"docs":{},"步":{"docs":{},"。":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}}}}}}},"不":{"docs":{},"允":{"docs":{},"许":{"docs":{},"修":{"docs":{},"改":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}}}}}}},"*":{"docs":{},"m":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}},"你":{"docs":{},"不":{"docs":{},"能":{"docs":{},"倾":{"docs":{},"斜":{"docs":{},"容":{"docs":{},"器":{"docs":{},"，":{"docs":{},"且":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}}}}},"解":{"docs":{},"集":{"docs":{},"不":{"docs":{},"能":{"docs":{},"包":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"子":{"docs":{},"集":{"docs":{},"。":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}}}}}}}}}}}},":":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835},"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}},"边":{"docs":{},"界":{"docs":{},"的":{"1":{"docs":{},"也":{"docs":{},"算":{"docs":{},"岛":{"docs":{},"屿":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}},"docs":{}}}}},"一":{"docs":{},"下":{"docs":{},"解":{"docs":{},"题":{"docs":{},"思":{"docs":{},"路":{"docs":{},"哈":{"docs":{},"，":{"docs":{},"其":{"docs":{},"实":{"docs":{},"主":{"docs":{},"要":{"docs":{},"还":{"docs":{},"是":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"，":{"docs":{},"利":{"docs":{},"用":{"docs":{},"每":{"docs":{},"个":{"docs":{},"字":{"docs":{},"母":{"docs":{},"的":{"docs":{},"a":{"docs":{},"s":{"docs":{},"c":{"docs":{},"i":{"docs":{},"i":{"docs":{},"码":{"docs":{},"作":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"来":{"docs":{},"作":{"docs":{},"为":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"5":{"8":{"docs":{},"长":{"docs":{},"度":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"来":{"docs":{},"存":{"docs":{},"储":{"docs":{},"每":{"docs":{},"个":{"docs":{},"字":{"docs":{},"母":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"，":{"docs":{},"为":{"docs":{},"什":{"docs":{},"么":{"docs":{},"是":{"5":{"8":{"docs":{},"呢":{"docs":{},"，":{"docs":{},"主":{"docs":{},"要":{"docs":{},"是":{"docs":{},"由":{"docs":{},"于":{"docs":{},"a":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"⌊":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}},"⌋":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}},"众":{"docs":{},"数":{"docs":{},"是":{"docs":{},"指":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"出":{"docs":{},"现":{"docs":{},"次":{"docs":{},"数":{"docs":{},"大":{"docs":{},"于":{"docs":{},"n":{"docs":{},"/":{"2":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}},"docs":{}}}}}}}}}}}}}}}}},"假":{"docs":{},"设":{"docs":{},"数":{"docs":{},"组":{"docs":{},"是":{"docs":{},"：":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},"。":{"docs":{},"算":{"docs":{},"法":{"docs":{},"步":{"docs":{},"骤":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"有":{"docs":{},"这":{"docs":{},"样":{"docs":{},"一":{"docs":{},"个":{"docs":{},"场":{"docs":{},"景":{"docs":{},"：":{"docs":{},"票":{"docs":{},"选":{"docs":{},"村":{"docs":{},"长":{"docs":{},"，":{"docs":{},"每":{"docs":{},"人":{"docs":{},"可":{"docs":{},"投":{"docs":{},"一":{"docs":{},"票":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"将":{"docs":{},"候":{"docs":{},"选":{"docs":{},"村":{"docs":{},"长":{"docs":{},"从":{"1":{"docs":{},"开":{"docs":{},"始":{"docs":{},"编":{"docs":{},"号":{"docs":{},"，":{"docs":{},"村":{"docs":{},"民":{"docs":{},"们":{"docs":{},"在":{"docs":{},"票":{"docs":{},"上":{"docs":{},"写":{"docs":{},"上":{"docs":{},"候":{"docs":{},"选":{"docs":{},"村":{"docs":{},"长":{"docs":{},"的":{"docs":{},"编":{"docs":{},"号":{"docs":{},"即":{"docs":{},"可":{"docs":{},"完":{"docs":{},"成":{"docs":{},"投":{"docs":{},"票":{"docs":{},"。":{"docs":{},"那":{"docs":{},"么":{"docs":{},"最":{"docs":{},"后":{"docs":{},"统":{"docs":{},"计":{"docs":{},"的":{"docs":{},"票":{"docs":{},"可":{"docs":{},"形":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"整":{"docs":{},"型":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{},"那":{"docs":{},"么":{"docs":{},"谁":{"docs":{},"是":{"docs":{},"村":{"docs":{},"长":{"docs":{},"呢":{"docs":{},"？":{"docs":{},"票":{"docs":{},"数":{"docs":{},"过":{"docs":{},"半":{"docs":{},"的":{"docs":{},"那":{"docs":{},"个":{"docs":{},"人":{"docs":{},"。":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"的":{"docs":{},"环":{"docs":{},"境":{"docs":{},"只":{"docs":{},"能":{"docs":{},"存":{"docs":{},"储":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}},"得":{"docs":{},"下":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941}}}}}}}}}}}}},"按":{"docs":{},"照":{"docs":{},"升":{"docs":{},"序":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"在":{"docs":{},"预":{"docs":{},"先":{"docs":{},"未":{"docs":{},"知":{"docs":{},"的":{"docs":{},"某":{"docs":{},"个":{"docs":{},"点":{"docs":{},"上":{"docs":{},"进":{"docs":{},"行":{"docs":{},"了":{"docs":{},"旋":{"docs":{},"转":{"docs":{},"。":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358}}}}}}}}}}}}}}}}}}}}}}}}}}},"过":{"docs":{},"点":{"docs":{},"（":{"docs":{},"x":{"0":{"docs":{},",":{"docs":{},"y":{"0":{"docs":{},"）":{"docs":{},"的":{"docs":{},"切":{"docs":{},"线":{"docs":{},"方":{"docs":{},"程":{"docs":{},"为":{"docs":{},"y":{"docs":{},"=":{"docs":{},"k":{"docs":{},"x":{"docs":{},"+":{"docs":{},"b":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"切":{"docs":{},"线":{"docs":{},"与":{"docs":{},"x":{"docs":{},"轴":{"docs":{},"的":{"docs":{},"交":{"docs":{},"点":{"docs":{},"横":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"为":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}},"列":{"docs":{},"表":{"docs":{},"为":{"docs":{},"：":{"docs":{},"$":{"docs":{},"n":{"1":{"docs":{},"→":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"→":{"docs":{},"n":{"docs":{},"k":{"docs":{},"−":{"1":{"docs":{},"→":{"docs":{},"n":{"docs":{},"k":{"docs":{},"→":{"docs":{},"n":{"docs":{},"k":{"docs":{},"+":{"1":{"docs":{},"→":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"→":{"docs":{},"n":{"docs":{},"m":{"docs":{},"→":{"docs":{},"∅":{"docs":{},"$":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}}},"docs":{}}}}}}},"存":{"docs":{},"在":{"docs":{},"链":{"docs":{},"表":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}},"你":{"docs":{},"正":{"docs":{},"在":{"docs":{},"爬":{"docs":{},"楼":{"docs":{},"梯":{"docs":{},"。":{"docs":{},"需":{"docs":{},"要":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}}}}}}}}}}},"每":{"docs":{},"个":{"docs":{},"v":{"docs":{},"=":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"都":{"docs":{},"是":{"docs":{},"独":{"docs":{},"立":{"docs":{},"的":{"docs":{},",":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"都":{"docs":{},"可":{"docs":{},"以":{"docs":{},"提":{"docs":{},"供":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"利":{"docs":{},"用":{"docs":{},"n":{"docs":{},"/":{"2":{"docs":{},"条":{"docs":{},"件":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}}}},"docs":{}}},"集":{"docs":{},"合":{"docs":{},"创":{"docs":{},"建":{"docs":{},"一":{"docs":{},"个":{"docs":{},"无":{"docs":{},"序":{"docs":{},"但":{"docs":{},"不":{"docs":{},"重":{"docs":{},"复":{"docs":{},"（":{"docs":{},"重":{"docs":{},"要":{"docs":{},"）":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"集":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"判":{"docs":{},"断":{"docs":{},"不":{"docs":{},"同":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"感":{"docs":{},"受":{"docs":{},"得":{"docs":{},"到":{"docs":{},"，":{"docs":{},"算":{"docs":{},"法":{"docs":{},"会":{"docs":{},"保":{"docs":{},"存":{"docs":{},"一":{"docs":{},"个":{"docs":{},"当":{"docs":{},"前":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{},"，":{"docs":{},"和":{"docs":{},"得":{"docs":{},"分":{"docs":{},"，":{"docs":{},"当":{"docs":{},"遇":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"不":{"docs":{},"是":{"docs":{},"当":{"docs":{},"前":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{},"时":{"docs":{},"，":{"docs":{},"得":{"docs":{},"分":{"docs":{},"会":{"docs":{},"减":{"docs":{},"一":{"docs":{},"，":{"docs":{},"当":{"docs":{},"减":{"docs":{},"到":{"0":{"docs":{},"时":{"docs":{},"，":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{},"会":{"docs":{},"发":{"docs":{},"生":{"docs":{},"改":{"docs":{},"变":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"重":{"docs":{},"置":{"docs":{},"得":{"docs":{},"分":{"docs":{},"为":{"1":{"docs":{},"。":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"使":{"docs":{},"用":{"docs":{},"快":{"docs":{},"速":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"思":{"docs":{},"想":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358}}}}}}}}},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684}}}}}}}},"用":{"docs":{},"类":{"docs":{},"似":{"docs":{},"快":{"docs":{},"速":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"类":{"docs":{},"似":{"docs":{},"冒":{"docs":{},"泡":{"docs":{},"排":{"docs":{},"序":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}}}}}}}}}}}}}}}}}},"利":{"docs":{},"用":{"docs":{},"对":{"docs":{},"撞":{"docs":{},"指":{"docs":{},"针":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}},"不":{"docs":{},"用":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"s":{"docs":{},",":{"docs":{},"直":{"docs":{},"接":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}}},"加":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"i":{"docs":{},"f":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}}}}}}},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"答":{"docs":{},"案":{"docs":{},"也":{"docs":{},"正":{"docs":{},"确":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}}}}}}}}},"搜":{"docs":{},"索":{"docs":{},"文":{"docs":{},"字":{"docs":{},"或":{"docs":{},"正":{"docs":{},"则":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"只":{"docs":{},"包":{"docs":{},"含":{"docs":{},"字":{"docs":{},"母":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}}}}}}}}}}}}}},"表":{"docs":{},"示":{"docs":{},"任":{"docs":{},"何":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"母":{"docs":{},"。":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}},"是":{"docs":{},"任":{"docs":{},"意":{"docs":{},"值":{"docs":{},"。":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}},"被":{"docs":{},"拆":{"docs":{},"分":{"docs":{},"成":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408}}}}}},"参":{"docs":{},"考":{"docs":{},"最":{"docs":{},"大":{"docs":{},"矩":{"docs":{},"形":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}},"作":{"docs":{},"为":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"单":{"docs":{},"字":{"docs":{},"符":{"docs":{},"a":{"docs":{},"，":{"docs":{},"多":{"docs":{},"字":{"docs":{},"符":{"docs":{},"处":{"docs":{},"理":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}},"匹":{"docs":{},"配":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}},"任":{"docs":{},"何":{"docs":{},"单":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"。":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}},"意":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}},"（":{"docs":{},"包":{"docs":{},"括":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"）":{"docs":{},"。":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},",":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}}},"将":{"docs":{},"它":{"docs":{},"分":{"docs":{},"开":{"docs":{},"写":{"docs":{},"成":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}}}}},"能":{"docs":{},"变":{"docs":{},"为":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358}}}},"包":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}}}}},"会":{"docs":{},"有":{"docs":{},"多":{"docs":{},"种":{"docs":{},"最":{"docs":{},"长":{"docs":{},"上":{"docs":{},"升":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"组":{"docs":{},"合":{"docs":{},"，":{"docs":{},"你":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"输":{"docs":{},"出":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"且":{"docs":{},"只":{"docs":{},"包":{"docs":{},"含":{"docs":{},"从":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541}}}}}}}}}}},"被":{"docs":{},"视":{"docs":{},"为":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}},"重":{"docs":{},"叠":{"docs":{},"区":{"docs":{},"间":{"docs":{},"。":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}}}}}}},"假":{"docs":{},"定":{"docs":{},"整":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"结":{"docs":{},"构":{"docs":{},"中":{"docs":{},"没":{"docs":{},"有":{"docs":{},"循":{"docs":{},"环":{"docs":{},"。":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}}}}}},"省":{"docs":{},"略":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"不":{"docs":{},"省":{"docs":{},"略":{"docs":{},"含":{"docs":{},"义":{"docs":{},"更":{"docs":{},"明":{"docs":{},"确":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}}}}}}}},"不":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"来":{"docs":{},"判":{"docs":{},"断":{"docs":{},"在":{"docs":{},"线":{"docs":{},"条":{"docs":{},"总":{"docs":{},"是":{"docs":{},"为":{"docs":{},"x":{"docs":{},"时":{"docs":{},"你":{"docs":{},"的":{"docs":{},"输":{"docs":{},"赢":{"docs":{},"情":{"docs":{},"况":{"docs":{},"呢":{"docs":{},"？":{"docs":{},"这":{"docs":{},"样":{"docs":{},"你":{"docs":{},"以":{"docs":{},"后":{"docs":{},"跟":{"docs":{},"别":{"docs":{},"人":{"docs":{},"玩":{"docs":{},"这":{"docs":{},"个":{"docs":{},"游":{"docs":{},"戏":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"就":{"docs":{},"不":{"docs":{},"会":{"docs":{},"输":{"docs":{},"啦":{"docs":{},"。":{"docs":{"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"字":{"docs":{},"典":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}},"法":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}},"这":{"docs":{},"么":{"docs":{},"取":{"docs":{},"值":{"docs":{},"是":{"docs":{},"错":{"docs":{},"的":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}}}}}}}}}},"符":{"docs":{},"串":{"docs":{"字符串/":{"ref":"字符串/","tf":10.083333333333334},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}},"只":{"docs":{},"包":{"docs":{},"含":{"docs":{},"从":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}}}}},"的":{"docs":{},"反":{"docs":{},"转":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":10.017241379310345}}}},"当":{"docs":{},"前":{"docs":{},"字":{"docs":{},"符":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}},"转":{"docs":{},"换":{"docs":{},"整":{"docs":{},"数":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":5.009345794392523}}}}}},"相":{"docs":{},"乘":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}}}}}}},"_":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":5}}}}}}}}}}}},"加":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"4":{"1":{"5":{"docs":{},")":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"4":{"1":{"5":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}},"列":{"docs":{},"表":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}}}},"：":{"docs":{},"s":{"docs":{},"串":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}},"全":{"docs":{},"排":{"docs":{},"列":{"docs":{"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":10}}}}}},"中":{"docs":{},"没":{"docs":{},"有":{"docs":{},"空":{"docs":{},"格":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"一":{"docs":{},"直":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"条":{"docs":{},"件":{"docs":{},"没":{"docs":{},"有":{"docs":{},"使":{"docs":{},"用":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}}}}}}}}}}}},"定":{"docs":{},"义":{"docs":{},"格":{"docs":{},"雷":{"docs":{},"编":{"docs":{},"码":{"docs":{},"序":{"docs":{},"列":{"docs":{},"必":{"docs":{},"须":{"docs":{},"以":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}}}}}}}}}},"依":{"docs":{},"次":{"docs":{},"对":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"做":{"docs":{},"异":{"docs":{},"或":{"docs":{},"运":{"docs":{},"行":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"用":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"表":{"docs":{},"示":{"docs":{},"是":{"0":{"0":{"1":{"0":{"docs":{},"。":{"docs":{},"异":{"docs":{},"或":{"docs":{},"得":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"中":{"docs":{},"的":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"二":{"docs":{},"位":{"docs":{},"是":{"1":{"docs":{},"，":{"docs":{},"于":{"docs":{},"是":{"docs":{},"我":{"docs":{},"们":{"docs":{},"根":{"docs":{},"据":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"二":{"docs":{},"位":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"1":{"docs":{},"分":{"docs":{},"为":{"docs":{},"两":{"docs":{},"个":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"{":{"2":{"docs":{},",":{"3":{"docs":{},",":{"6":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},"}":{"docs":{},"中":{"docs":{},"所":{"docs":{},"有":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"二":{"docs":{},"位":{"docs":{},"都":{"docs":{},"是":{"1":{"docs":{},"，":{"docs":{},"而":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"{":{"4":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},"}":{"docs":{},"中":{"docs":{},"所":{"docs":{},"有":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"二":{"docs":{},"位":{"docs":{},"都":{"docs":{},"是":{"0":{"docs":{},"。":{"docs":{},"接":{"docs":{},"下":{"docs":{},"来":{"docs":{},"只":{"docs":{},"要":{"docs":{},"分":{"docs":{},"别":{"docs":{},"两":{"docs":{},"个":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"求":{"docs":{},"异":{"docs":{},"或":{"docs":{},"，":{"docs":{},"就":{"docs":{},"能":{"docs":{},"找":{"docs":{},"到":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"是":{"6":{"docs":{},"，":{"docs":{},"而":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"是":{"4":{"docs":{},"。":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"先":{"docs":{},"不":{"docs":{},"看":{"docs":{},"找":{"docs":{},"到":{"docs":{},"俩":{"docs":{},"个":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"先":{"docs":{},"看":{"docs":{},"这":{"docs":{},"样":{"docs":{},"一":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"如":{"docs":{},"何":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"呢":{"docs":{},"？":{"docs":{},"比":{"docs":{},"如":{"docs":{},"数":{"docs":{},"组":{"docs":{},"：":{"docs":{},"{":{"4":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},"}":{"docs":{},"，":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"一":{"docs":{},"个":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"是":{"4":{"docs":{},"。":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"想":{"docs":{},"一":{"docs":{},"想":{"docs":{},"“":{"docs":{},"异":{"docs":{},"或":{"docs":{},"”":{"docs":{},"运":{"docs":{},"算":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"性":{"docs":{},"质":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"直":{"docs":{},"接":{"docs":{},"举":{"docs":{},"例":{"docs":{},"说":{"docs":{},"明":{"docs":{},"。":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}}},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"s":{"2":{"docs":{},"来":{"docs":{},"实":{"docs":{},"现":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"从":{"docs":{},"左":{"docs":{},"往":{"docs":{},"右":{"docs":{},"进":{"docs":{},"行":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"到":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},"，":{"docs":{},"则":{"docs":{},"压":{"docs":{},"进":{"docs":{},"s":{"2":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"到":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},"，":{"docs":{},"则":{"docs":{},"从":{"docs":{},"s":{"2":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"两":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}},"观":{"docs":{},"察":{"docs":{},"发":{"docs":{},"现":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}}}}}}}}}},"知":{"docs":{},"道":{"docs":{},"异":{"docs":{},"或":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"性":{"docs":{},"质":{"docs":{},"是":{"docs":{},"：":{"docs":{},"任":{"docs":{},"何":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"异":{"docs":{},"或":{"docs":{},"它":{"docs":{},"自":{"docs":{},"己":{"docs":{},"都":{"docs":{},"等":{"docs":{},"于":{"0":{"docs":{},"。":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"我":{"docs":{},"们":{"docs":{},"从":{"docs":{},"头":{"docs":{},"到":{"docs":{},"尾":{"docs":{},"依":{"docs":{},"次":{"docs":{},"异":{"docs":{},"或":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"最":{"docs":{},"终":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"刚":{"docs":{},"好":{"docs":{},"是":{"docs":{},"那":{"docs":{},"个":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"比":{"docs":{},"如":{"docs":{},"数":{"docs":{},"组":{"docs":{},"{":{"4":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},"}":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"先":{"docs":{},"用":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"4":{"docs":{},"（":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"形":{"docs":{},"式":{"docs":{},"：":{"0":{"1":{"0":{"0":{"docs":{},"）":{"docs":{},"和":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"5":{"docs":{},"（":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"形":{"docs":{},"式":{"docs":{},"：":{"0":{"1":{"0":{"1":{"docs":{},"）":{"docs":{},"进":{"docs":{},"行":{"docs":{},"异":{"docs":{},"或":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"0":{"1":{"0":{"0":{"docs":{},"和":{"0":{"1":{"0":{"1":{"docs":{},"异":{"docs":{},"或":{"docs":{},"得":{"docs":{},"到":{"0":{"0":{"0":{"1":{"docs":{},"，":{"docs":{},"用":{"docs":{},"这":{"docs":{},"个":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"与":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"三":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"5":{"docs":{},"（":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"形":{"docs":{},"式":{"docs":{},"：":{"0":{"1":{"0":{"1":{"docs":{},"）":{"docs":{},"进":{"docs":{},"行":{"docs":{},"异":{"docs":{},"或":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"0":{"0":{"0":{"1":{"docs":{},"和":{"0":{"1":{"0":{"1":{"docs":{},"异":{"docs":{},"或":{"docs":{},"得":{"docs":{},"到":{"0":{"1":{"0":{"0":{"docs":{},"，":{"docs":{},"正":{"docs":{},"好":{"docs":{},"是":{"docs":{},"结":{"docs":{},"果":{"docs":{},"数":{"docs":{},"字":{"4":{"docs":{},"。":{"docs":{},"这":{"docs":{},"是":{"docs":{},"因":{"docs":{},"为":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"异":{"docs":{},"或":{"docs":{},"是":{"docs":{},"为":{"0":{"docs":{},"的":{"docs":{},"，":{"docs":{},"因":{"docs":{},"此":{"docs":{},"就":{"docs":{},"只":{"docs":{},"剩":{"docs":{},"下":{"docs":{},"那":{"docs":{},"个":{"docs":{},"不":{"docs":{},"成":{"docs":{},"对":{"docs":{},"的":{"docs":{},"孤":{"docs":{},"苦":{"docs":{},"伶":{"docs":{},"仃":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}},"docs":{}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{},"返":{"docs":{},"回":{"docs":{},"输":{"docs":{},"入":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"反":{"docs":{},"转":{"docs":{},"后":{"docs":{},"的":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"如":{"docs":{},"果":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{},"的":{"docs":{},"话":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"想":{"docs":{},"要":{"docs":{},"容":{"docs":{},"乃":{"docs":{},"的":{"docs":{},"水":{"docs":{},"最":{"docs":{},"多":{"docs":{},"，":{"docs":{},"最":{"docs":{},"好":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"是":{"docs":{},"l":{"docs":{},"和":{"docs":{},"r":{"docs":{},"都":{"docs":{},"是":{"docs":{},"最":{"docs":{},"大":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"二":{"docs":{},"者":{"docs":{},"离":{"docs":{},"的":{"docs":{},"最":{"docs":{},"远":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"是":{"docs":{},"理":{"docs":{},"想":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"最":{"docs":{},"一":{"docs":{},"般":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"是":{"docs":{},"二":{"docs":{},"者":{"docs":{},"离":{"docs":{},"的":{"docs":{},"足":{"docs":{},"够":{"docs":{},"远":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"二":{"docs":{},"者":{"docs":{},"都":{"docs":{},"不":{"docs":{},"是":{"docs":{},"很":{"docs":{},"大":{"docs":{},",":{"docs":{},"二":{"docs":{},"者":{"docs":{},"都":{"docs":{},"很":{"docs":{},"大":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"二":{"docs":{},"者":{"docs":{},"离":{"docs":{},"的":{"docs":{},"近":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"还":{"docs":{},"是":{"docs":{},"从":{"docs":{},"头":{"docs":{},"到":{"docs":{},"尾":{"docs":{},"一":{"docs":{},"次":{"docs":{},"异":{"docs":{},"或":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"最":{"docs":{},"终":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"就":{"docs":{},"是":{"docs":{},"两":{"docs":{},"个":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"异":{"docs":{},"或":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"其":{"docs":{},"他":{"docs":{},"数":{"docs":{},"字":{"docs":{},"都":{"docs":{},"出":{"docs":{},"现":{"docs":{},"了":{"docs":{},"两":{"docs":{},"次":{"docs":{},"，":{"docs":{},"在":{"docs":{},"异":{"docs":{},"或":{"docs":{},"中":{"docs":{},"全":{"docs":{},"部":{"docs":{},"抵":{"docs":{},"消":{"docs":{},"了":{"docs":{},"。":{"docs":{},"由":{"docs":{},"于":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"不":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"异":{"docs":{},"或":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"不":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"这":{"docs":{},"个":{"docs":{},"结":{"docs":{},"果":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"表":{"docs":{},"示":{"docs":{},"至":{"docs":{},"少":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"为":{"1":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"在":{"docs":{},"结":{"docs":{},"果":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"为":{"1":{"docs":{},"的":{"docs":{},"位":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"记":{"docs":{},"为":{"docs":{},"第":{"docs":{},"n":{"docs":{},"位":{"docs":{},"。":{"docs":{},"现":{"docs":{},"在":{"docs":{},"我":{"docs":{},"们":{"docs":{},"以":{"docs":{},"第":{"docs":{},"n":{"docs":{},"位":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"1":{"docs":{},"为":{"docs":{},"标":{"docs":{},"准":{"docs":{},"把":{"docs":{},"元":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"分":{"docs":{},"成":{"docs":{},"两":{"docs":{},"个":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"第":{"docs":{},"n":{"docs":{},"位":{"docs":{},"都":{"docs":{},"是":{"1":{"docs":{},"，":{"docs":{},"而":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"第":{"docs":{},"n":{"docs":{},"位":{"docs":{},"都":{"docs":{},"是":{"0":{"docs":{},"。":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"归":{"docs":{},"并":{"docs":{},"的":{"docs":{},"起":{"docs":{},"点":{"docs":{},"为":{"docs":{},"m":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}}}}}},"要":{"docs":{},"将":{"docs":{},"l":{"docs":{},"=":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"、":{"docs":{},"r":{"docs":{},"=":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}}}}}}}}}}}}}},"docs":{}}}}}},"求":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"高":{"docs":{},"度":{"docs":{},"，":{"docs":{},"左":{"docs":{},"边":{"docs":{},"和":{"docs":{},"右":{"docs":{},"边":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"小":{"docs":{},"于":{"docs":{},"该":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"高":{"docs":{},"度":{"docs":{},"的":{"docs":{},"下":{"docs":{},"标":{"docs":{},"。":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"尽":{"docs":{},"可":{"docs":{},"能":{"docs":{},"将":{"docs":{},"负":{"docs":{},"号":{"docs":{},"与":{"docs":{},"后":{"docs":{},"面":{"docs":{},"所":{"docs":{},"有":{"docs":{},"连":{"docs":{},"续":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"组":{"docs":{},"合":{"docs":{},"起":{"docs":{},"来":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"得":{"docs":{},"到":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"按":{"docs":{},"照":{"docs":{},"从":{"docs":{},"左":{"docs":{},"向":{"docs":{},"右":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"存":{"docs":{},"储":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"注":{"docs":{},"意":{"docs":{},"到":{"docs":{},"对":{"docs":{},"于":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},":":{"docs":{},"i":{"docs":{},"和":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},":":{"docs":{},"j":{"docs":{},"相":{"docs":{},"乘":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"结":{"docs":{},"果":{"docs":{},"在":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},":":{"docs":{},"i":{"docs":{},"+":{"docs":{},"j":{"docs":{},"和":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},":":{"docs":{},"i":{"docs":{},"+":{"docs":{},"j":{"docs":{},"+":{"1":{"docs":{},"上":{"docs":{},"。":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"会":{"docs":{},"在":{"docs":{},"[":{"0":{"docs":{},":":{"2":{"docs":{},"]":{"docs":{},"这":{"docs":{},"个":{"docs":{},"区":{"docs":{},"间":{"docs":{},"查":{"docs":{},"找":{"docs":{},"对":{"docs":{},"应":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"样":{"docs":{},"是":{"docs":{},"错":{"docs":{},"误":{"docs":{},"的":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"区":{"docs":{},"间":{"docs":{},"并":{"docs":{},"不":{"docs":{},"是":{"docs":{},"递":{"docs":{},"增":{"docs":{},"区":{"docs":{},"间":{"docs":{},"。":{"docs":{},"那":{"docs":{},"要":{"docs":{},"怎":{"docs":{},"么":{"docs":{},"做":{"docs":{},"呢":{"docs":{},"？":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"最":{"docs":{},"大":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"将":{"docs":{},"其":{"docs":{},"加":{"docs":{},"入":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"根":{"docs":{},"据":{"docs":{},"最":{"docs":{},"大":{"docs":{},"堆":{"docs":{},"的":{"docs":{},"性":{"docs":{},"质":{"docs":{},"，":{"docs":{},"大":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"会":{"docs":{},"排":{"docs":{},"到":{"docs":{},"最":{"docs":{},"前":{"docs":{},"面":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"我":{"docs":{},"们":{"docs":{},"看":{"docs":{},"当":{"docs":{},"前":{"docs":{},"堆":{"docs":{},"中":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"个":{"docs":{},"数":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.02247191011235955}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"希":{"docs":{},"望":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}},"需":{"docs":{},"要":{"docs":{},"进":{"docs":{},"行":{"docs":{},"插":{"docs":{},"入":{"docs":{},"、":{"docs":{},"删":{"docs":{},"除":{"docs":{},"和":{"docs":{},"修":{"docs":{},"改":{"docs":{},"操":{"docs":{},"作":{"docs":{},"将":{"docs":{},"a":{"docs":{},"串":{"docs":{},"变":{"docs":{},"为":{"docs":{},"b":{"docs":{},"串":{"docs":{},"，":{"docs":{},"定":{"docs":{},"义":{"docs":{},"c":{"0":{"docs":{},"，":{"docs":{},"c":{"1":{"docs":{},"，":{"docs":{},"c":{"2":{"docs":{},"分":{"docs":{},"别":{"docs":{},"为":{"docs":{},"三":{"docs":{},"种":{"docs":{},"操":{"docs":{},"作":{"docs":{},"的":{"docs":{},"代":{"docs":{},"价":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}},"假":{"docs":{},"设":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"可":{"docs":{},"以":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"减":{"docs":{},"一":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"得":{"docs":{},"到":{"docs":{},"正":{"docs":{},"确":{"docs":{},"答":{"docs":{},"案":{"docs":{},"，":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"表":{"docs":{},"示":{"docs":{},"数":{"docs":{},"组":{"docs":{},"前":{"docs":{},"i":{"docs":{},"项":{"docs":{},"构":{"docs":{},"成":{"docs":{},"的":{"docs":{},"不":{"docs":{},"同":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"来":{"docs":{},"解":{"docs":{},"决":{"docs":{},"。":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}}}}}}}}}},"只":{"docs":{},"需":{"docs":{},"修":{"docs":{},"改":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"为":{"docs":{},"【":{"docs":{},"i":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}},"寻":{"docs":{},"找":{"docs":{},"最":{"docs":{},"近":{"docs":{},"的":{"docs":{},"空":{"docs":{},"节":{"docs":{},"点":{"docs":{},"进":{"docs":{},"行":{"docs":{},"插":{"docs":{},"入":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"是":{"docs":{},"广":{"docs":{},"度":{"docs":{},"遍":{"docs":{},"历":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}}}}}}},"摩":{"docs":{},"尔":{"docs":{},"投":{"docs":{},"票":{"docs":{},"算":{"docs":{},"法":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":10.004761904761905},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":10.005681818181818}},"可":{"docs":{},"以":{"docs":{},"快":{"docs":{},"速":{"docs":{},"的":{"docs":{},"计":{"docs":{},"算":{"docs":{},"出":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"出":{"docs":{},"现":{"docs":{},"次":{"docs":{},"数":{"docs":{},"过":{"docs":{},"半":{"docs":{},"的":{"docs":{},"数":{"docs":{},"即":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{},"（":{"docs":{},"m":{"docs":{},"a":{"docs":{},"j":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"）":{"docs":{},"，":{"docs":{},"算":{"docs":{},"法":{"docs":{},"核":{"docs":{},"心":{"docs":{},"思":{"docs":{},"想":{"docs":{},"是":{"docs":{},"同":{"docs":{},"加":{"docs":{},"，":{"docs":{},"异":{"docs":{},"减":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"举":{"docs":{},"个":{"docs":{},"例":{"docs":{},"子":{"docs":{},"。":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"根":{"docs":{},"投":{"docs":{},"票":{"docs":{},"法":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}}}}}},"求":{"1":{"0":{"1":{"0":{"0":{"0":{"0":{"1":{"docs":{},"中":{"1":{"docs":{},"的":{"docs":{},"数":{"docs":{},"量":{"docs":{},"是":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"还":{"docs":{},"是":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"；":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}}}}}}}}}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"+":{"2":{"docs":{},"+":{"3":{"docs":{},"+":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"+":{"docs":{},"n":{"docs":{},"，":{"docs":{},"要":{"docs":{},"求":{"docs":{},"不":{"docs":{},"能":{"docs":{},"使":{"docs":{},"用":{"docs":{},"乘":{"docs":{},"除":{"docs":{},"法":{"docs":{},"、":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"、":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"、":{"docs":{},"i":{"docs":{},"f":{"docs":{},"、":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"、":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"、":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"等":{"docs":{},"关":{"docs":{},"键":{"docs":{},"字":{"docs":{},"及":{"docs":{},"条":{"docs":{},"件":{"docs":{},"判":{"docs":{},"断":{"docs":{},"语":{"docs":{},"句":{"docs":{},"（":{"docs":{},"a":{"docs":{},"?":{"docs":{},"b":{"docs":{},":":{"docs":{},"c":{"docs":{},"）":{"docs":{},"。":{"docs":{"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{},"众":{"docs":{},"数":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":2.5068965517241377}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":5}}}}}}}}}}}},"最":{"docs":{},"小":{"docs":{},"三":{"docs":{},"元":{"docs":{},"组":{"docs":{},"距":{"docs":{},"离":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":10.014285714285714}}}}}}}}},"在":{"docs":{},"该":{"docs":{},"柱":{"docs":{},"状":{"docs":{},"图":{"docs":{},"中":{"docs":{},"，":{"docs":{},"能":{"docs":{},"够":{"docs":{},"勾":{"docs":{},"勒":{"docs":{},"出":{"docs":{},"来":{"docs":{},"的":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"面":{"docs":{},"积":{"docs":{},"。":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}}}}}},"左":{"docs":{},"边":{"docs":{},"，":{"docs":{},"右":{"docs":{},"边":{"docs":{},"两":{"docs":{},"边":{"docs":{},"的":{"docs":{},"下":{"docs":{},"标":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"要":{"docs":{},"在":{"docs":{},"原":{"docs":{},"始":{"docs":{},"数":{"docs":{},"组":{"docs":{},"左":{"docs":{},"右":{"docs":{},"各":{"docs":{},"添":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"无":{"docs":{},"穷":{"docs":{},"小":{"docs":{},"（":{"docs":{},"或":{"docs":{},"者":{"docs":{},"原":{"docs":{},"始":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"）":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"和":{"docs":{},"它":{"docs":{},"右":{"docs":{},"边":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"比":{"docs":{},"它":{"docs":{},"大":{"docs":{},"的":{"docs":{},"数":{"docs":{},"之":{"docs":{},"间":{"docs":{},"的":{"docs":{},"数":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"求":{"docs":{},"出":{"docs":{},"后":{"docs":{},"相":{"docs":{},"加":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"两":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"距":{"docs":{},"离":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":10.008771929824562}}}}}}}}}}}}}},"出":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"a":{"docs":{},"和":{"docs":{},"b":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},",":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}}}},"树":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"数":{"docs":{},"量":{"docs":{"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":10.03448275862069}}}}}}}}},"这":{"docs":{},"意":{"docs":{},"味":{"docs":{},"着":{"1":{"docs":{},"是":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"出":{"docs":{},"现":{"docs":{},"次":{"docs":{},"数":{"docs":{},"过":{"docs":{},"半":{"docs":{},"的":{"docs":{},"数":{"docs":{},"。":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}},"docs":{}}}},"里":{"docs":{},"需":{"docs":{},"要":{"docs":{},"区":{"docs":{},"分":{"docs":{},"的":{"docs":{},"是":{"docs":{},"，":{"docs":{},"摩":{"docs":{},"尔":{"docs":{},"算":{"docs":{},"法":{"docs":{},"不":{"docs":{},"能":{"docs":{},"用":{"docs":{},"来":{"docs":{},"得":{"docs":{},"到":{"docs":{},"众":{"docs":{},"数":{"docs":{},"（":{"docs":{},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"）":{"docs":{},"，":{"docs":{},"例":{"docs":{},"如":{"docs":{},"数":{"docs":{},"组":{"docs":{},"：":{"docs":{},"[":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},"，":{"docs":{},"摩":{"docs":{},"尔":{"docs":{},"算":{"docs":{},"法":{"docs":{},"得":{"docs":{},"出":{"docs":{},"最":{"docs":{},"后":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"应":{"docs":{},"该":{"docs":{},"是":{"4":{"docs":{},"，":{"docs":{},"但":{"4":{"docs":{},"并":{"docs":{},"不":{"docs":{},"是":{"docs":{},"众":{"docs":{},"数":{"docs":{},"，":{"docs":{},"可":{"docs":{},"是":{"docs":{},"显":{"docs":{},"然":{"4":{"docs":{},"也":{"docs":{},"不":{"docs":{},"是":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{},"，":{"docs":{},"那":{"docs":{},"是":{"docs":{},"因":{"docs":{},"为":{"docs":{},"，":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{},"是":{"docs":{},"指":{"docs":{},"出":{"docs":{},"现":{"docs":{},"次":{"docs":{},"数":{"docs":{},"过":{"docs":{},"半":{"docs":{},"的":{"docs":{},"数":{"docs":{},"，":{"docs":{},"而":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"没":{"docs":{},"有":{"docs":{},"这":{"docs":{},"样":{"docs":{},"的":{"docs":{},"数":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"摩":{"docs":{},"尔":{"docs":{},"算":{"docs":{},"法":{"docs":{},"是":{"docs":{},"是":{"docs":{},"失":{"docs":{},"效":{"docs":{},"的":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"这":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"采":{"docs":{},"取":{"docs":{},"需":{"docs":{},"要":{"docs":{},"重":{"docs":{},"新":{"docs":{},"投":{"docs":{},"票":{"docs":{},"。":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"要":{"docs":{},"分":{"docs":{},"几":{"docs":{},"个":{"docs":{},"步":{"docs":{},"骤":{"docs":{},"来":{"docs":{},"进":{"docs":{},"行":{"docs":{},"求":{"docs":{},"解":{"docs":{},"：":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856}}}}}}}}}}}}},"求":{"docs":{},"出":{"docs":{},"现":{"docs":{},"次":{"docs":{},"数":{"docs":{},"大":{"docs":{},"于":{"docs":{},"一":{"docs":{},"半":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"套":{"docs":{},"用":{"docs":{},"摩":{"docs":{},"尔":{"docs":{},"投":{"docs":{},"票":{"docs":{},"算":{"docs":{},"法":{"docs":{},"即":{"docs":{},"可":{"docs":{},"得":{"docs":{},"到":{"docs":{},"答":{"docs":{},"案":{"docs":{},"。":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"分":{"docs":{},"别":{"docs":{},"是":{"4":{"docs":{},"和":{"6":{"docs":{},"。":{"docs":{},"怎":{"docs":{},"么":{"docs":{},"找":{"docs":{},"到":{"docs":{},"这":{"docs":{},"个":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"呢":{"docs":{},"？":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}},"问":{"docs":{},"题":{"docs":{},"其":{"docs":{},"实":{"docs":{},"和":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}},"通":{"docs":{},"过":{"docs":{},"递":{"docs":{},"归":{"docs":{},"可":{"docs":{},"以":{"docs":{},"很":{"docs":{},"快":{"docs":{},"的":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"要":{"docs":{},"知":{"docs":{},"道":{"docs":{},"了":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"要":{"docs":{},"将":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"添":{"docs":{},"加":{"docs":{},"到":{"docs":{},"每":{"docs":{},"个":{"docs":{},"子":{"docs":{},"集":{"docs":{},"的":{"docs":{},"前":{"docs":{},"面":{"docs":{},"形":{"docs":{},"成":{"docs":{},"新":{"docs":{},"的":{"docs":{},"子":{"docs":{},"集":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"将":{"docs":{},"新":{"docs":{},"的":{"docs":{},"子":{"docs":{},"集":{"docs":{},"添":{"docs":{},"加":{"docs":{},"到":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"中":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"之":{"docs":{},"前":{"docs":{},"问":{"docs":{},"题":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}}}}}},"比":{"docs":{},"查":{"docs":{},"找":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"n":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"多":{"docs":{},"走":{"docs":{},"一":{"docs":{},"步":{"docs":{},",":{"docs":{},"因":{"docs":{},"为":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"找":{"docs":{},"到":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},",":{"docs":{},"我":{"docs":{},"们":{"docs":{},"才":{"docs":{},"能":{"docs":{},"删":{"docs":{},"除":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"n":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"判":{"docs":{},"断":{"docs":{},"可":{"docs":{},"以":{"docs":{},"不":{"docs":{},"要":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"下":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"会":{"docs":{},"判":{"docs":{},"断":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}}}}}}}}}}}}}},"角":{"docs":{},"度":{"docs":{},"思":{"docs":{},"考":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}},"点":{"docs":{},"为":{"docs":{},"右":{"docs":{},"下":{"docs":{},"角":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"的":{"docs":{},"边":{"docs":{},"长":{"docs":{},"为":{"2":{"docs":{},"（":{"docs":{},"红":{"docs":{},"色":{"docs":{},"）":{"docs":{},"，":{"docs":{},"以":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}},"3":{"docs":{},"（":{"docs":{},"绿":{"docs":{},"色":{"docs":{},"）":{"docs":{},"，":{"docs":{},"以":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}},"docs":{}}}}}}}}}},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"的":{"docs":{},"边":{"docs":{},"长":{"docs":{},"为":{"1":{"docs":{},"（":{"docs":{},"蓝":{"docs":{},"色":{"docs":{},"）":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"以":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},"是":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}},"一":{"docs":{},"个":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"类":{"docs":{},"型":{"docs":{},"的":{"docs":{},"使":{"docs":{},"用":{"docs":{},"，":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"属":{"docs":{},"性":{"docs":{},"都":{"docs":{},"是":{"docs":{},"默":{"docs":{},"认":{"docs":{},"值":{"docs":{},"。":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567}},"\\":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}}}}}}}}}}}}}}}}}}}}}}}}},"非":{"docs":{},"常":{"docs":{},"经":{"docs":{},"典":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"通":{"docs":{},"过":{"docs":{},"递":{"docs":{},"归":{"docs":{},"可":{"docs":{},"以":{"docs":{},"非":{"docs":{},"常":{"docs":{},"快":{"docs":{},"的":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"要":{"docs":{},"理":{"docs":{},"清":{"docs":{},"楚":{"docs":{},"这":{"docs":{},"样":{"docs":{},"的":{"docs":{},"几":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"：":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"之":{"docs":{},"前":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}}}}}}}},"道":{"docs":{},"题":{"docs":{},"真":{"docs":{},"正":{"docs":{},"难":{"docs":{},"点":{"docs":{},"在":{"docs":{},"于":{"docs":{},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}},"其":{"docs":{},"实":{"docs":{},"就":{"docs":{},"是":{"docs":{},"单":{"docs":{},"调":{"docs":{},"栈":{"docs":{},"模":{"docs":{},"型":{"docs":{},"。":{"docs":{},"在":{"docs":{},"单":{"docs":{},"调":{"docs":{},"栈":{"docs":{},"中":{"docs":{},"进":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"比":{"docs":{},"较":{"docs":{},"的":{"docs":{},"是":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"栈":{"docs":{},"中":{"docs":{},"维":{"docs":{},"护":{"docs":{},"的":{"docs":{},"是":{"docs":{},"每":{"docs":{},"个":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"下":{"docs":{},"标":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"在":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"统":{"docs":{},"计":{"docs":{},"出":{"docs":{},"宽":{"docs":{},"度":{"docs":{},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"知":{"docs":{},"道":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"计":{"docs":{},"算":{"docs":{},"出":{"docs":{},"各":{"docs":{},"个":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"了":{"docs":{},"。":{"docs":{},"由":{"docs":{},"于":{"docs":{},"我":{"docs":{},"们":{"docs":{},"所":{"docs":{},"有":{"docs":{},"操":{"docs":{},"作":{"docs":{},"都":{"docs":{},"是":{"docs":{},"在":{"docs":{},"进":{"docs":{},"栈":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"间":{"docs":{},"完":{"docs":{},"成":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"三":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}},"儿":{"docs":{},"一":{"docs":{},"定":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"，":{"docs":{},"排":{"docs":{},"除":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}}},"用":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"、":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"、":{"docs":{},"h":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"，":{"docs":{},"是":{"docs":{},"因":{"docs":{},"为":{"docs":{},"后":{"docs":{},"续":{"docs":{},"还":{"docs":{},"会":{"docs":{},"调":{"docs":{},"用":{"docs":{},"这":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"会":{"docs":{},"写":{"docs":{},"成":{"docs":{},"递":{"docs":{},"归":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"（":{"docs":{},"根":{"docs":{},"据":{"docs":{},"题":{"docs":{},"意":{"docs":{},"）":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}}}}}}}}}}}}}}}},"出":{"docs":{},"问":{"docs":{},"题":{"docs":{},"了":{"docs":{},"，":{"docs":{},"不":{"docs":{},"能":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}}}}}}}}}}},"等":{"docs":{},"于":{"docs":{},"也":{"docs":{},"是":{"docs":{},"错":{"docs":{},"的":{"docs":{},"，":{"docs":{},"也":{"docs":{},"要":{"docs":{},"退":{"docs":{},"出":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}},"会":{"docs":{},"影":{"docs":{},"响":{"docs":{},"到":{"docs":{},"程":{"docs":{},"序":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"吗":{"docs":{},"？":{"docs":{},"会":{"docs":{},"有":{"docs":{},"怎":{"docs":{},"样":{"docs":{},"的":{"docs":{},"影":{"docs":{},"响":{"docs":{},"，":{"docs":{},"为":{"docs":{},"什":{"docs":{},"么":{"docs":{},"？":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}}}}}}}},"句":{"docs":{},"话":{"docs":{},"阐":{"docs":{},"述":{"docs":{},"了":{"docs":{},"是":{"docs":{},"左":{"docs":{},"旋":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"这":{"docs":{},"么":{"docs":{},"理":{"docs":{},"解":{"docs":{},"，":{"docs":{},"左":{"docs":{},"边":{"docs":{},"的":{"docs":{},"等":{"docs":{},"于":{"docs":{},"右":{"docs":{},"边":{"docs":{},"的":{"docs":{},"就":{"docs":{},"是":{"docs":{},"左":{"docs":{},"旋":{"docs":{},"；":{"docs":{},"右":{"docs":{},"边":{"docs":{},"的":{"docs":{},"等":{"docs":{},"于":{"docs":{},"左":{"docs":{},"边":{"docs":{},"的":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"右":{"docs":{},"旋":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"样":{"docs":{},"两":{"docs":{},"个":{"docs":{},"回":{"docs":{},"文":{"docs":{},"子":{"docs":{},"串":{"docs":{},"。":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}}}}}}},"的":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"是":{"docs":{},"不":{"docs":{},"符":{"docs":{},"合":{"docs":{},"要":{"docs":{},"求":{"docs":{},"的":{"docs":{},"；":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}}}},"就":{"docs":{},"是":{"docs":{},"把":{"docs":{},"l":{"docs":{},"分":{"docs":{},"成":{"3":{"docs":{},"段":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}},"docs":{}}}}}}},"一":{"docs":{},"步":{"docs":{},"是":{"docs":{},"关":{"docs":{},"键":{"docs":{},"，":{"docs":{},"卖":{"docs":{},"出":{"docs":{},"之":{"docs":{},"后":{"docs":{},"我":{"docs":{},"们":{"docs":{},"必":{"docs":{},"须":{"docs":{},"调":{"docs":{},"整":{"docs":{},"，":{"docs":{},"初":{"docs":{},"始":{"docs":{},"进":{"docs":{},"价":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}}}}}}}}}}}}}}},"基":{"docs":{},"本":{"docs":{},"操":{"docs":{},"作":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}}}},"笔":{"docs":{},"交":{"docs":{},"易":{"docs":{},"所":{"docs":{},"能":{"docs":{},"获":{"docs":{},"得":{"docs":{},"利":{"docs":{},"润":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.019867549668874173}}}}}}}}}}},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"虽":{"docs":{},"然":{"docs":{},"容":{"docs":{},"易":{"docs":{},"理":{"docs":{},"解":{"docs":{},"，":{"docs":{},"但":{"docs":{},"由":{"docs":{},"于":{"docs":{},"涉":{"docs":{},"及":{"docs":{},"到":{"docs":{},"快":{"docs":{},"排":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"，":{"docs":{},"其":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"并":{"docs":{},"非":{"docs":{},"最":{"docs":{},"优":{"docs":{},"；":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"种":{"docs":{},"在":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"中":{"docs":{},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"在":{"docs":{},"判":{"docs":{},"断":{"docs":{},"[":{"1":{"docs":{},",":{"4":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},"=":{"docs":{},"=":{"docs":{},"[":{"4":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},"，":{"docs":{},"两":{"docs":{},"者":{"docs":{},"是":{"docs":{},"不":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"。":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}},"得":{"docs":{},"分":{"docs":{},"为":{"1":{"docs":{},"，":{"docs":{},"当":{"docs":{},"前":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{"数字运算/求众数 LeetCode 169.html":{"ref":"数字运算/求众数 LeetCode 169.html","tf":0.006993006993006993},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}}}}},"docs":{}}}},"你":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"两":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358}}}}}}}}}}}}}},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"搜":{"docs":{},"索":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}}}}},"使":{"docs":{},"得":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}},"只":{"docs":{},"写":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"没":{"docs":{},"有":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"，":{"docs":{},"等":{"docs":{},"于":{"docs":{},"空":{"docs":{},"了":{"docs":{},"吹":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}}}}}}}}}}}}}}},"因":{"docs":{},"为":{"docs":{},"它":{"docs":{},"的":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"不":{"docs":{},"为":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"2":{"docs":{},"。":{"docs":{},"最":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"思":{"docs":{},"路":{"docs":{},"就":{"docs":{},"是":{"docs":{},"添":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"判":{"docs":{},"断":{"docs":{},"i":{"docs":{},"f":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}},"计":{"docs":{},"算":{"docs":{},"它":{"docs":{},"们":{"docs":{},"的":{"docs":{},"和":{"docs":{},"。":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}}}}}},"其":{"docs":{},"中":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}},"找":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"具":{"docs":{},"有":{"docs":{},"最":{"docs":{},"大":{"docs":{},"和":{"docs":{},"的":{"docs":{},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"（":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"最":{"docs":{},"少":{"docs":{},"包":{"docs":{},"含":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"）":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"其":{"docs":{},"最":{"docs":{},"大":{"docs":{},"和":{"docs":{},"。":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"出":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}},"该":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"满":{"docs":{},"足":{"docs":{},"其":{"docs":{},"和":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"序":{"docs":{},"列":{"docs":{},"中":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"（":{"docs":{},"该":{"docs":{},"序":{"docs":{},"列":{"docs":{},"至":{"docs":{},"少":{"docs":{},"包":{"docs":{},"含":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"）":{"docs":{},"。":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"满":{"docs":{},"足":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}},"单":{"docs":{},"调":{"docs":{},"栈":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}},"执":{"docs":{},"行":{"docs":{},"插":{"docs":{},"入":{"docs":{},"尾":{"docs":{},"部":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"表":{"docs":{},"示":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"比":{"docs":{},"所":{"docs":{},"有":{"docs":{},"已":{"docs":{},"知":{"docs":{},"递":{"docs":{},"增":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"尾":{"docs":{},"数":{"docs":{},"都":{"docs":{},"大":{"docs":{},",":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"然":{"docs":{},"后":{"docs":{},"偷":{"docs":{},"窃":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}}}},"返":{"docs":{},"回":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"公":{"docs":{},"共":{"docs":{},"的":{"docs":{},"、":{"docs":{},"长":{"docs":{},"度":{"docs":{},"最":{"docs":{},"长":{"docs":{},"的":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}}}}}}}}}}}}}}}}}}}}}}}},"实":{"docs":{},"现":{"docs":{},"一":{"docs":{},"个":{"docs":{},"支":{"docs":{},"持":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}}},"不":{"docs":{},"检":{"docs":{},"验":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}}}}}},"用":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}}}},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676}},"（":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"）":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}},"自":{"docs":{},"己":{"docs":{},"写":{"docs":{},"反":{"docs":{},"转":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}}}}}},"替":{"docs":{},"换":{"docs":{},",":{"docs":{},"设":{"docs":{},"置":{"docs":{},"一":{"docs":{},"个":{"docs":{},"标":{"docs":{},"志":{"docs":{},"位":{"docs":{},"，":{"docs":{},"跳":{"docs":{},"过":{"docs":{},"外":{"docs":{},"循":{"docs":{},"环":{"docs":{},"的":{"docs":{},"替":{"docs":{},"换":{"docs":{},"操":{"docs":{},"作":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}}}}}}}},"会":{"docs":{},"同":{"docs":{},"时":{"docs":{},"为":{"docs":{},"空":{"docs":{},"。":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}},"动":{"docs":{},"递":{"docs":{},"增":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"会":{"docs":{},"调":{"docs":{},"整":{"docs":{},"递":{"docs":{},"增":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"这":{"docs":{},"儿":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"能":{"docs":{},"使":{"docs":{},"用":{"docs":{},"代":{"docs":{},"码":{"docs":{},"库":{"docs":{},"中":{"docs":{},"的":{"docs":{},"排":{"docs":{},"序":{"docs":{},"函":{"docs":{},"数":{"docs":{},"来":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"。":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}},"任":{"docs":{},"何":{"docs":{},"标":{"docs":{},"准":{"docs":{},"库":{"docs":{},"的":{"docs":{},"大":{"docs":{},"数":{"docs":{},"类":{"docs":{},"型":{"docs":{},"（":{"docs":{},"比":{"docs":{},"如":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}}}}}}}}}}}}}},"交":{"docs":{},"换":{"docs":{},"位":{"docs":{},"置":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}}},"存":{"docs":{},"在":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}},"要":{"docs":{},"忘":{"docs":{},"记":{"docs":{},"写":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}},"给":{"docs":{},"另":{"docs":{},"外":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"分":{"docs":{},"配":{"docs":{},"额":{"docs":{},"外":{"docs":{},"的":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"你":{"docs":{},"必":{"docs":{},"须":{"docs":{},"原":{"docs":{},"地":{"docs":{},"修":{"docs":{},"改":{"docs":{},"输":{"docs":{},"入":{"docs":{},"数":{"docs":{},"组":{"docs":{},"、":{"docs":{},"使":{"docs":{},"用":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"写":{"docs":{},"反":{"docs":{},"了":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}},"从":{"docs":{},"你":{"docs":{},"的":{"docs":{},"函":{"docs":{},"数":{"docs":{},"中":{"docs":{},"返":{"docs":{},"回":{"docs":{},"任":{"docs":{},"何":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}}}}}}}}}}}}}},"然":{"docs":{},"就":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"小":{"docs":{},"写":{"docs":{},"字":{"docs":{},"母":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}}}}}}}}}}}}},"去":{"docs":{},"重":{"docs":{},"代":{"docs":{},"码":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}},"需":{"docs":{},"要":{"docs":{},"旋":{"docs":{},"转":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}}}},"加":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}},"这":{"docs":{},"个":{"docs":{},"传":{"docs":{},"入":{"docs":{},"为":{"docs":{},"空":{"docs":{},"的":{"docs":{},"判":{"docs":{},"断":{"docs":{},"的":{"docs":{},"话":{"docs":{},"会":{"docs":{},"访":{"docs":{},"问":{"docs":{},"越":{"docs":{},"界":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}}}}}}}}}}}}}}},"设":{"docs":{},"置":{"docs":{},"虚":{"docs":{},"拟":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},"，":{"docs":{},"删":{"docs":{},"除":{"docs":{},"有":{"docs":{},"序":{"docs":{},"列":{"docs":{},"表":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"最":{"docs":{},"后":{"docs":{},"要":{"docs":{},"保":{"docs":{},"留":{"docs":{},"一":{"docs":{},"个":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"全":{"docs":{},"部":{"docs":{},"删":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"同":{"docs":{},"路":{"docs":{},"径":{"2":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"6":{"3":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}},"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":5}}}}}}}}}}}},"的":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"9":{"4":{"0":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}},"影":{"docs":{},"响":{"docs":{},"后":{"docs":{},"续":{"docs":{},"计":{"docs":{},"算":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}},"是":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}}}},"知":{"docs":{},"道":{"docs":{},"比":{"docs":{},"较":{"docs":{},"次":{"docs":{},"数":{"docs":{},"的":{"docs":{},"，":{"docs":{},"不":{"docs":{},"能":{"docs":{},"用":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"用":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"循":{"docs":{},"环":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}},"使":{"docs":{},"用":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}}}}}},"可":{"docs":{},"使":{"docs":{},"用":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684}}}}}}}}}},"所":{"docs":{},"以":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}},"我":{"docs":{},"们":{"docs":{},"得":{"docs":{},"到":{"docs":{},"它":{"docs":{},"们":{"docs":{},"后":{"docs":{},"，":{"docs":{},"还":{"docs":{},"需":{"docs":{},"要":{"docs":{},"检":{"docs":{},"查":{"docs":{},"它":{"docs":{},"们":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"是":{"docs":{},"否":{"docs":{},"符":{"docs":{},"合":{"docs":{},"条":{"docs":{},"件":{"docs":{},"。":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}}}}}}}}}}},"要":{"docs":{},"把":{"docs":{},"a":{"docs":{},"【":{"docs":{},"i":{"docs":{},"】":{"docs":{},"等":{"docs":{},"于":{"0":{"docs":{},"时":{"docs":{},"，":{"docs":{},"置":{"docs":{},"为":{"1":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}},"docs":{}}}}}},"docs":{}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"出":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"要":{"docs":{},"远":{"docs":{},"离":{"docs":{},"”":{"4":{"docs":{},"“":{"docs":{},"就":{"docs":{},"行":{"docs":{},"了":{"docs":{},"。":{"docs":{},"当":{"docs":{},"线":{"docs":{},"的":{"docs":{},"总":{"docs":{},"数":{"docs":{},"不":{"docs":{},"是":{"4":{"docs":{},"的":{"docs":{},"倍":{"docs":{},"数":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"先":{"docs":{},"手":{"docs":{},"必":{"docs":{},"赢":{"docs":{},"。":{"docs":{"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"一":{"docs":{},"开":{"docs":{},"始":{"docs":{},"从":{"docs":{},"两":{"docs":{},"边":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"就":{"docs":{},"是":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"种":{"docs":{},"可":{"docs":{},"能":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"这":{"docs":{},"个":{"docs":{},"时":{"docs":{},"候":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"说":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"负":{"docs":{},"数":{"docs":{},"已":{"docs":{},"经":{"docs":{},"按":{"docs":{},"照":{"docs":{},"平":{"docs":{},"方":{"docs":{},"值":{"docs":{},"降":{"docs":{},"序":{"docs":{},"排":{"docs":{},"好":{"docs":{},"了":{"docs":{},"，":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"非":{"docs":{},"负":{"docs":{},"数":{"docs":{},"已":{"docs":{},"经":{"docs":{},"按":{"docs":{},"照":{"docs":{},"平":{"docs":{},"方":{"docs":{},"值":{"docs":{},"升":{"docs":{},"序":{"docs":{},"排":{"docs":{},"好":{"docs":{},"了":{"docs":{},"。":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{},"问":{"docs":{},"题":{"docs":{},"就":{"docs":{},"变":{"docs":{},"成":{"docs":{},"了":{"docs":{},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}},"进":{"docs":{},"栈":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"都":{"docs":{},"是":{"docs":{},"操":{"docs":{},"作":{"docs":{},"元":{"docs":{},"素":{"docs":{},"下":{"docs":{},"标":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{},"元":{"docs":{},"素":{"docs":{},"下":{"docs":{},"标":{"docs":{},"获":{"docs":{},"取":{"docs":{},"元":{"docs":{},"素":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"就":{"docs":{},"变":{"docs":{},"成":{"docs":{},"如":{"docs":{},"何":{"docs":{},"找":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}},"$":{"docs":{},"n":{"docs":{},"{":{"docs":{},"k":{"docs":{},"}":{"docs":{},"n":{"docs":{},"k":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}}}}}}}},"要":{"docs":{},"再":{"docs":{},"加":{"docs":{},"上":{"6":{"docs":{},"个":{"docs":{},"长":{"docs":{},"度":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}}}}},"docs":{}}}}},"有":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}},"递":{"docs":{},"推":{"docs":{},"公":{"docs":{},"式":{"docs":{},"是":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}},"你":{"docs":{},"会":{"docs":{},"发":{"docs":{},"现":{"8":{"docs":{},"条":{"docs":{},"也":{"docs":{},"是":{"docs":{},"必":{"docs":{},"输":{"docs":{},"，":{"8":{"docs":{},"条":{"docs":{},"线":{"docs":{},"可":{"docs":{},"以":{"docs":{},"分":{"docs":{},"成":{"docs":{},"两":{"docs":{},"个":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"部":{"docs":{},"分":{"docs":{},"四":{"docs":{},"条":{"docs":{},"线":{"docs":{},"。":{"docs":{},"自":{"docs":{},"然":{"docs":{},"先":{"docs":{},"手":{"docs":{},"还":{"docs":{},"是":{"docs":{},"必":{"docs":{},"输":{"docs":{},"。":{"4":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"还":{"docs":{},"真":{"docs":{},"是":{"docs":{},"不":{"docs":{},"太":{"docs":{},"吉":{"docs":{},"利":{"docs":{},"。":{"docs":{"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}},"最":{"docs":{},"大":{"docs":{},"利":{"docs":{},"润":{"docs":{},"为":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}}},"有":{"docs":{},"输":{"docs":{},"入":{"docs":{},"只":{"docs":{},"包":{"docs":{},"含":{"docs":{},"小":{"docs":{},"写":{"docs":{},"字":{"docs":{},"母":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}}}}}}}}},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"且":{"docs":{},"元":{"docs":{},"素":{"docs":{},"按":{"docs":{},"顺":{"docs":{},"时":{"docs":{},"针":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"螺":{"docs":{},"旋":{"docs":{},"排":{"docs":{},"列":{"docs":{},"的":{"docs":{},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"。":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}}}}}}},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"都":{"docs":{},"是":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"的":{"docs":{},"。":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}}}}}}}}},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"到":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"为":{"docs":{},":":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}}}}}}}}}}}},"可":{"docs":{},"能":{"docs":{},"的":{"docs":{},"分":{"docs":{},"割":{"docs":{},"方":{"docs":{},"案":{"docs":{},"。":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}}}}}},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"的":{"docs":{},"递":{"docs":{},"增":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"中":{"docs":{},",":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}},"docs":{}}}}}},"数":{"docs":{},"字":{"docs":{},"（":{"docs":{},"包":{"docs":{},"括":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}},"目":{"docs":{},"标":{"docs":{},"数":{"docs":{},"）":{"docs":{},"都":{"docs":{},"是":{"docs":{},"正":{"docs":{},"整":{"docs":{},"数":{"docs":{},"。":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}}},"谓":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"，":{"docs":{},"是":{"docs":{},"要":{"docs":{},"涵":{"docs":{},"盖":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}},"使":{"docs":{},"用":{"docs":{},"的":{"docs":{},"最":{"docs":{},"少":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}}}}}},"需":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}}}}}}},"求":{"docs":{},"解":{"docs":{},"集":{"docs":{},"为":{"docs":{},":":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.012048192771084338},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.0196078431372549}}}}}}}},"次":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}}}}},"以":{"docs":{},"确":{"docs":{},"定":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}},"要":{"docs":{},"求":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}}}}}}}}}}},"使":{"docs":{},"用":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}}}}}}}},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"（":{"docs":{},"n":{"docs":{},"）":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}}}}}}}}}}},"一":{"docs":{},"棵":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"子":{"docs":{},"树":{"docs":{},"和":{"docs":{},"，":{"docs":{},"最":{"docs":{},"容":{"docs":{},"易":{"docs":{},"想":{"docs":{},"到":{"docs":{},"的":{"docs":{},"办":{"docs":{},"法":{"docs":{},"就":{"docs":{},"是":{"docs":{},"对":{"docs":{},"每":{"docs":{},"棵":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"求":{"docs":{},"出":{"docs":{},"这":{"docs":{},"棵":{"docs":{},"子":{"docs":{},"树":{"docs":{},"中":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"和":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"从":{"docs":{},"中":{"docs":{},"选":{"docs":{},"出":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"。":{"docs":{},"恰":{"docs":{},"好":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"就":{"docs":{},"能":{"docs":{},"做":{"docs":{},"到":{"docs":{},"这":{"docs":{},"一":{"docs":{},"点":{"docs":{},"，":{"docs":{},"在":{"docs":{},"对":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"进":{"docs":{},"行":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"与":{"docs":{},"其":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"和":{"docs":{},"的":{"docs":{},"值":{"docs":{},"相":{"docs":{},"加":{"docs":{},"大":{"docs":{},"于":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"，":{"docs":{},"则":{"docs":{},"更":{"docs":{},"新":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"。":{"docs":{"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"注":{"docs":{},"意":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"中":{"docs":{},"逻":{"docs":{},"辑":{"docs":{},"运":{"docs":{},"算":{"docs":{},"符":{"docs":{},"的":{"docs":{},"用":{"docs":{},"法":{"docs":{},"，":{"docs":{},"a":{"docs":{"数字运算/输出1+2+...+n_短路原理.html":{"ref":"数字运算/输出1+2+...+n_短路原理.html","tf":0.034482758620689655}}}}}}}}}}}}}}}}}}}}},"小":{"docs":{},"心":{"docs":{},"的":{"docs":{},"是":{"docs":{},"$":{"docs":{},"n":{"1":{"docs":{},"$":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}},"docs":{}}}}}}}},"预":{"docs":{},"期":{"docs":{},"结":{"docs":{},"果":{"docs":{"数字运算/求众数 II LeetCode 229.html":{"ref":"数字运算/求众数 II LeetCode 229.html","tf":0.006896551724137931}},"：":{"6":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}},"docs":{}}}}}},"−":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.008968609865470852}}},"位":{"docs":{},"的":{"docs":{},"有":{"docs":{},"符":{"docs":{},"号":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"你":{"docs":{},"需":{"docs":{},"要":{"docs":{},"将":{"docs":{},"这":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"中":{"docs":{},"每":{"docs":{},"位":{"docs":{},"上":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"进":{"docs":{},"行":{"docs":{},"反":{"docs":{},"转":{"docs":{},"。":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941}}}}}}}}}}}}}}}}}}}}}},"则":{"docs":{},"其":{"docs":{},"数":{"docs":{},"值":{"docs":{},"范":{"docs":{},"围":{"docs":{},"为":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941}}}}}}}}}}}}}}}},"有":{"docs":{},"符":{"docs":{},"号":{"docs":{},"整":{"docs":{},"数":{"docs":{},"。":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}},"，":{"docs":{},"其":{"docs":{},"数":{"docs":{},"值":{"docs":{},"范":{"docs":{},"围":{"docs":{},"是":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}}}}}},"范":{"docs":{},"围":{"docs":{},"。":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}}}}}}},"置":{"docs":{},"i":{"docs":{},"能":{"docs":{},"容":{"docs":{},"下":{"docs":{},"雨":{"docs":{},"水":{"docs":{},"量":{"docs":{},":":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"3":{"docs":{},",":{"1":{"docs":{},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}},"docs":{}}},"docs":{}}}}}}}}}}}}},"最":{"docs":{},"大":{"docs":{},"面":{"docs":{},"积":{"docs":{},"是":{"docs":{},"什":{"docs":{},"么":{"docs":{},"？":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}},"整":{"docs":{},"数":{"docs":{},"反":{"docs":{},"转":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":3.333333333333333}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941}}}}}}}}}}}},"除":{"docs":{},"法":{"docs":{},"只":{"docs":{},"保":{"docs":{},"留":{"docs":{},"整":{"docs":{},"数":{"docs":{},"部":{"docs":{},"分":{"docs":{},"。":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}},"逆":{"docs":{},"置":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.015625}}}}},"个":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}},"注":{"1":{"docs":{},"：":{"docs":{},"因":{"docs":{},"为":{"docs":{},"第":{"docs":{},"三":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"跨":{"docs":{},"越":{"docs":{},"了":{"docs":{},"中":{"docs":{},"间":{"docs":{},"边":{"docs":{},"界":{"docs":{},"，":{"docs":{},"且":{"docs":{},"要":{"docs":{},"求":{"docs":{},"的":{"docs":{},"序":{"docs":{},"列":{"docs":{},"为":{"docs":{},"连":{"docs":{},"续":{"docs":{},"的":{"docs":{},"，":{"docs":{},"因":{"docs":{},"此":{"docs":{},"第":{"docs":{},"三":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"必":{"docs":{},"定":{"docs":{},"包":{"docs":{},"含":{"docs":{},"左":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}},"的":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"以":{"docs":{},"及":{"docs":{},"右":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"2":{"docs":{},"：":{"docs":{},"若":{"docs":{},"要":{"docs":{},"求":{"docs":{},"的":{"docs":{},"序":{"docs":{},"列":{"docs":{},"可":{"docs":{},"以":{"docs":{},"为":{"docs":{},"不":{"docs":{},"连":{"docs":{},"续":{"docs":{},"的":{"docs":{},"，":{"docs":{},"则":{"docs":{},"第":{"docs":{},"三":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"前":{"docs":{},"半":{"docs":{},"部":{"docs":{},"分":{"docs":{},"最":{"docs":{},"大":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"和":{"docs":{},"与":{"docs":{},"后":{"docs":{},"半":{"docs":{},"部":{"docs":{},"分":{"docs":{},"最":{"docs":{},"大":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"和":{"docs":{},"相":{"docs":{},"加":{"docs":{},"得":{"docs":{},"到":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{},"意":{"docs":{},":":{"docs":{"数字运算/整数反转 LeetCode 7.html":{"ref":"数字运算/整数反转 LeetCode 7.html","tf":0.011764705882352941},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}},"取":{"docs":{},"整":{"docs":{},"数":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"可":{"docs":{},"被":{"docs":{},"认":{"docs":{},"为":{"docs":{},"是":{"docs":{},"有":{"docs":{},"效":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}},"去":{"docs":{},"重":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}},"：":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}},"答":{"docs":{},"案":{"docs":{},"中":{"docs":{},"不":{"docs":{},"可":{"docs":{},"以":{"docs":{},"包":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"三":{"docs":{},"元":{"docs":{},"组":{"docs":{},"。":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"最":{"docs":{},"后":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"进":{"docs":{},"栈":{"docs":{},"后":{"docs":{},"，":{"docs":{},"由":{"docs":{},"于":{"docs":{},"后":{"docs":{},"面":{"docs":{},"没":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"了":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"无":{"docs":{},"法":{"docs":{},"和":{"docs":{},"其":{"docs":{},"他":{"docs":{},"元":{"docs":{},"素":{"docs":{},"进":{"docs":{},"行":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"无":{"docs":{},"法":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"最":{"docs":{},"后":{"docs":{},"添":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"该":{"docs":{},"元":{"docs":{},"素":{"docs":{},"为":{"docs":{},"无":{"docs":{},"穷":{"docs":{},"大":{"docs":{},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"无":{"docs":{},"穷":{"docs":{},"小":{"docs":{},"。":{"docs":{},"具":{"docs":{},"体":{"docs":{},"情":{"docs":{},"况":{"docs":{},"看":{"docs":{},"是":{"docs":{},"单":{"docs":{},"调":{"docs":{},"递":{"docs":{},"增":{"docs":{},"还":{"docs":{},"是":{"docs":{},"单":{"docs":{},"调":{"docs":{},"递":{"docs":{},"减":{"docs":{},"栈":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"单":{"docs":{},"调":{"docs":{},"递":{"docs":{},"减":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"数":{"docs":{},"组":{"docs":{},"最":{"docs":{},"后":{"docs":{},"添":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"无":{"docs":{},"穷":{"docs":{},"小":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"单":{"docs":{},"调":{"docs":{},"递":{"docs":{},"增":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"数":{"docs":{},"组":{"docs":{},"最":{"docs":{},"后":{"docs":{},"添":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"无":{"docs":{},"穷":{"docs":{},"大":{"docs":{},"元":{"docs":{},"素":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"必":{"docs":{},"须":{"docs":{},"先":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}}}}}}}}}}}}}},"在":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"中":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"单":{"docs":{},"词":{"docs":{},"由":{"docs":{},"单":{"docs":{},"个":{"docs":{},"空":{"docs":{},"格":{"docs":{},"分":{"docs":{},"隔":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"中":{"docs":{},"不":{"docs":{},"会":{"docs":{},"有":{"docs":{},"任":{"docs":{},"何":{"docs":{},"额":{"docs":{},"外":{"docs":{},"的":{"docs":{},"空":{"docs":{},"格":{"docs":{},"。":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"儿":{"docs":{},"是":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}}}}}}}}}}}}}},"将":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"编":{"docs":{},"程":{"docs":{},"以":{"docs":{},"为":{"docs":{},"列":{"docs":{},"表":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}}}}}}}}}},"为":{"docs":{},"什":{"docs":{},"么":{"docs":{},"是":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"1":{"docs":{},"[":{"docs":{},"i":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}},"docs":{}}}}}}}}}},"是":{"docs":{},"n":{"docs":{},"行":{"docs":{},"m":{"docs":{},"列":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}},"数":{"docs":{},"组":{"docs":{},"长":{"docs":{},"度":{"docs":{},"不":{"docs":{},"会":{"docs":{},"超":{"docs":{},"过":{"1":{"0":{"0":{"0":{"0":{"docs":{},"。":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}},"给":{"docs":{},"定":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}}}},"你":{"docs":{},"不":{"docs":{},"能":{"docs":{},"同":{"docs":{},"时":{"docs":{},"参":{"docs":{},"与":{"docs":{},"多":{"docs":{},"笔":{"docs":{},"交":{"docs":{},"易":{"docs":{},"（":{"docs":{},"你":{"docs":{},"必":{"docs":{},"须":{"docs":{},"在":{"docs":{},"再":{"docs":{},"次":{"docs":{},"购":{"docs":{},"买":{"docs":{},"前":{"docs":{},"出":{"docs":{},"售":{"docs":{},"掉":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"股":{"docs":{},"票":{"docs":{},"）":{"docs":{},"。":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"可":{"docs":{},"能":{"docs":{},"存":{"docs":{},"在":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358}}}}}}}}}}}}}}},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"返":{"docs":{},"回":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}}},"这":{"docs":{},"儿":{"docs":{},"的":{"docs":{},"调":{"docs":{},"用":{"docs":{},"，":{"docs":{},"不":{"docs":{},"是":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"（":{"docs":{},"i":{"docs":{},"）":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"(":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}},"docs":{}}}}}}}}}}}}}}}}}},"，":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"长":{"docs":{},"度":{"docs":{},"减":{"docs":{},"一":{"docs":{},",":{"docs":{},"因":{"docs":{},"为":{"docs":{},"上":{"docs":{},"面":{"docs":{},"的":{"docs":{},"i":{"docs":{},"f":{"docs":{},"判":{"docs":{},"断":{"docs":{},"，":{"docs":{},"等":{"docs":{},"于":{"docs":{},"校":{"docs":{},"验":{"docs":{},"了":{"docs":{},"最":{"docs":{},"后":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"=":{"docs":{},"'":{"docs":{},"a":{"docs":{},"b":{"docs":{},"'":{"docs":{},",":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"你":{"docs":{},"可":{"docs":{},"以":{"docs":{},"重":{"docs":{},"复":{"docs":{},"使":{"docs":{},"用":{"docs":{},"字":{"docs":{},"典":{"docs":{},"中":{"docs":{},"的":{"docs":{},"单":{"docs":{},"词":{"docs":{},"。":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}}}}}}},"不":{"docs":{},"能":{"docs":{},"在":{"docs":{},"买":{"docs":{},"入":{"docs":{},"股":{"docs":{},"票":{"docs":{},"前":{"docs":{},"卖":{"docs":{},"出":{"docs":{},"股":{"docs":{},"票":{"docs":{},"。":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009}}}}}}}}}}}},"第":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}},"利":{"docs":{},"润":{"docs":{},"不":{"docs":{},"能":{"docs":{},"是":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009}}}}}}}}},".":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.009900990099009901},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"\\":{"1":{"5":{"5":{"3":{"9":{"3":{"0":{"0":{"5":{"3":{"8":{"7":{"4":{"docs":{},".":{"docs":{},"p":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"2":{"0":{"1":{"8":{"0":{"7":{"0":{"3":{"1":{"2":{"0":{"6":{"3":{"5":{"5":{"9":{"4":{"docs":{},".":{"docs":{},"p":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"5":{"2":{"9":{"5":{"docs":{},".":{"docs":{},"p":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}},".":{"docs":{},".":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}}},"也":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"有":{"docs":{},"效":{"docs":{},"的":{"docs":{},"格":{"docs":{},"雷":{"docs":{},"编":{"docs":{},"码":{"docs":{},"序":{"docs":{},"列":{"docs":{},"。":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}}}}}}}}}}},"升":{"docs":{},"序":{"docs":{},"的":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},",":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}}}}}}}}},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"（":{"docs":{},"x":{"0":{"docs":{},"+":{"docs":{},"a":{"docs":{},"/":{"docs":{},"x":{"0":{"docs":{},"）":{"docs":{},"/":{"2":{"docs":{},"是":{"docs":{},"过":{"docs":{},"点":{"docs":{},"（":{"docs":{},"x":{"0":{"docs":{},",":{"docs":{},"y":{"0":{"docs":{},"）":{"docs":{},"的":{"docs":{},"切":{"docs":{},"线":{"docs":{},"与":{"docs":{},"x":{"docs":{},"轴":{"docs":{},"的":{"docs":{},"交":{"docs":{},"点":{"docs":{},"的":{"docs":{},"横":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"。":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}}}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}},"docs":{}}}},"docs":{}}}}}},"docs":{}}}},"，":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"串":{"docs":{},"需":{"docs":{},"要":{"docs":{},"看":{"docs":{},"前":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"状":{"docs":{},"态":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"能":{"docs":{},"直":{"docs":{},"接":{"docs":{},"将":{"docs":{},"输":{"docs":{},"入":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"转":{"docs":{},"换":{"docs":{},"为":{"docs":{},"整":{"docs":{},"数":{"docs":{},"形":{"docs":{},"式":{"docs":{},"。":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}},"例":{"docs":{},"如":{"docs":{},"，":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}},"[":{"0":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"数":{"docs":{},"组":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358}}}},"给":{"docs":{},"定":{"docs":{},"数":{"docs":{},"组":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}}},"如":{"docs":{},"下":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},":":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},":":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}}}}}}},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}}}}},"出":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}},"上":{"docs":{},"图":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"7":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}},"docs":{}}}}}}},",":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}},"a":{"docs":{},":":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}},"：":{"docs":{"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}}},"因":{"docs":{},"此":{"docs":{},"，":{"docs":{},"当":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}},"在":{"docs":{},"最":{"docs":{},"坏":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"移":{"docs":{},"动":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}},"无":{"docs":{},"法":{"docs":{},"执":{"docs":{},"行":{"docs":{},"有":{"docs":{},"效":{"docs":{},"的":{"docs":{},"转":{"docs":{},"换":{"docs":{},"。":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}}}}}}}}},"返":{"docs":{},"回":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}},"为":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}},"数":{"docs":{},"组":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}},"无":{"docs":{},"重":{"docs":{},"复":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"最":{"docs":{},"长":{"docs":{},"子":{"docs":{},"串":{"docs":{},"是":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.023622047244094488}}}}}}}}}}}}},"展":{"docs":{},"开":{"docs":{},"成":{"docs":{},"一":{"docs":{},"维":{"docs":{},"列":{"docs":{},"表":{"docs":{},"后":{"docs":{},"也":{"docs":{},"不":{"docs":{},"是":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"，":{"docs":{},"因":{"docs":{},"此":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"在":{"docs":{},"原":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"上":{"docs":{},"进":{"docs":{},"行":{"docs":{},"查":{"docs":{},"找":{"docs":{},"，":{"docs":{},"查":{"docs":{},"找":{"docs":{},"的":{"docs":{},"起":{"docs":{},"始":{"docs":{},"点":{"docs":{},"是":{"docs":{},"左":{"docs":{},"下":{"docs":{},"角":{"docs":{},"和":{"docs":{},"右":{"docs":{},"上":{"docs":{},"角":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"路":{"docs":{},"径":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}},"q":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}},"过":{"docs":{},"一":{"docs":{},"会":{"docs":{},"还":{"docs":{},"要":{"docs":{},"用":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{},"，":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"儿":{"docs":{},"先":{"docs":{},"用":{"docs":{},"其":{"docs":{},"他":{"docs":{},"变":{"docs":{},"量":{"docs":{},"保":{"docs":{},"存":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"存":{"docs":{},"在":{"docs":{},"目":{"docs":{},"标":{"docs":{},"和":{"docs":{},"为":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644}}}}}}}},"根":{"docs":{},"据":{"docs":{},"定":{"docs":{},"义":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"节":{"docs":{},"点":{"docs":{},"可":{"docs":{},"以":{"docs":{},"为":{"docs":{},"节":{"docs":{},"点":{"docs":{},"本":{"docs":{},"身":{"docs":{},"。":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"只":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"了":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"因":{"docs":{},"此":{"docs":{},"，":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"，":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"样":{"docs":{},"属":{"docs":{},"于":{"docs":{},"同":{"docs":{},"时":{"docs":{},"参":{"docs":{},"与":{"docs":{},"了":{"docs":{},"多":{"docs":{},"笔":{"docs":{},"交":{"docs":{},"易":{"docs":{},"，":{"docs":{},"你":{"docs":{},"必":{"docs":{},"须":{"docs":{},"在":{"docs":{},"再":{"docs":{},"次":{"docs":{},"购":{"docs":{},"买":{"docs":{},"前":{"docs":{},"出":{"docs":{},"售":{"docs":{},"掉":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"股":{"docs":{},"票":{"docs":{},"。":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"机":{"docs":{},"器":{"docs":{},"到":{"docs":{},"底":{"docs":{},"右":{"docs":{},"下":{"docs":{},"角":{"docs":{},"，":{"docs":{},"向":{"docs":{},"下":{"docs":{},"几":{"docs":{},"步":{"docs":{},"，":{"docs":{},"向":{"docs":{},"右":{"docs":{},"几":{"docs":{},"步":{"docs":{},"的":{"docs":{},"总":{"docs":{},"步":{"docs":{},"数":{"docs":{},"都":{"docs":{},"是":{"docs":{},"固":{"docs":{},"定":{"docs":{},"的":{"docs":{},"，":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"单":{"docs":{},"词":{"docs":{},"长":{"docs":{},"度":{"docs":{},"最":{"docs":{},"小":{"docs":{},"是":{"1":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"起":{"docs":{},"点":{"docs":{},"是":{"1":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}},"docs":{}}}}}}}},"docs":{}}}}}}}},"已":{"docs":{},"经":{"docs":{},"碎":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"了":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}},"他":{"docs":{},"们":{"docs":{},"是":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"的":{"docs":{},"。":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}}}}}},"结":{"docs":{},"果":{"docs":{},"可":{"docs":{},"能":{"docs":{},"很":{"docs":{},"大":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"返":{"docs":{},"回":{"docs":{},"答":{"docs":{},"案":{"docs":{},"模":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}}}}}}}}}},"卖":{"docs":{},"出":{"docs":{},"价":{"docs":{},"格":{"docs":{},"需":{"docs":{},"要":{"docs":{},"大":{"docs":{},"于":{"docs":{},"买":{"docs":{},"入":{"docs":{},"价":{"docs":{},"格":{"docs":{},"。":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009}}}}}}}}}}}}}}},"用":{"docs":{},"到":{"docs":{},"了":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"并":{"docs":{},"非":{"docs":{},"最":{"docs":{},"优":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"对":{"docs":{},"于":{"4":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"用":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},",":{"docs":{},"那":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"从":{"docs":{},"左":{"docs":{},"到":{"docs":{},"右":{"docs":{},"，":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"依":{"docs":{},"次":{"docs":{},"递":{"docs":{},"增":{"docs":{},"（":{"docs":{},"可":{"docs":{},"以":{"docs":{},"不":{"docs":{},"是":{"docs":{},"严":{"docs":{},"格":{"docs":{},"递":{"docs":{},"增":{"docs":{},"）":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"我":{"docs":{},"们":{"docs":{},"求":{"docs":{},"解":{"docs":{},"方":{"docs":{},"法":{"docs":{},"为":{"docs":{},"：":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"你":{"docs":{},"注":{"docs":{},"意":{"docs":{},"到":{"docs":{},"下":{"docs":{},"面":{"docs":{},"的":{"docs":{},"这":{"docs":{},"个":{"docs":{},"规":{"docs":{},"律":{"docs":{},"话":{"docs":{},"就":{"docs":{},"非":{"docs":{},"常":{"docs":{},"简":{"docs":{},"单":{"docs":{},"。":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}}}}}}}}}}}}}}}}}}}}}}},"种":{"docs":{},"螺":{"docs":{},"旋":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"重":{"docs":{},"要":{"docs":{},"的":{"docs":{},"是":{"docs":{},"要":{"docs":{},"确":{"docs":{},"定":{"docs":{},"上":{"docs":{},"下":{"docs":{},"左":{"docs":{},"右":{"docs":{},"四":{"docs":{},"条":{"docs":{},"边":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"上":{"docs":{},"边":{"docs":{},"u":{"docs":{},"p":{"docs":{},"就":{"docs":{},"是":{"0":{"docs":{},"，":{"docs":{},"下":{"docs":{},"边":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{},"就":{"docs":{},"是":{"docs":{},"m":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"根":{"docs":{},"据":{"docs":{},"以":{"docs":{},"往":{"docs":{},"的":{"docs":{},"经":{"docs":{},"验":{"docs":{},"一":{"docs":{},"般":{"docs":{},"都":{"docs":{},"是":{"docs":{},"要":{"docs":{},"建":{"docs":{},"一":{"docs":{},"个":{"docs":{},"d":{"docs":{},"u":{"docs":{},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"很":{"docs":{},"多":{"docs":{},"题":{"docs":{},"既":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"还":{"docs":{},"有":{"docs":{},"判":{"docs":{},"断":{"docs":{},"左":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"右":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"也":{"docs":{},"是":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"只":{"docs":{},"判":{"docs":{},"断":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"就":{"docs":{},"会":{"docs":{},"出":{"docs":{},"错":{"docs":{"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"%":{"5":{"0":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},",":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"示":{"docs":{},"例":{"1":{"docs":{"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421}}},"docs":{}}}}}}}}}}}},"docs":{}},"docs":{}},"上":{"docs":{},"面":{"docs":{},"这":{"docs":{},"个":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},",":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}},"矩":{"docs":{},"阵":{"docs":{},"应":{"docs":{},"返":{"docs":{},"回":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}}}}}}}}},"每":{"docs":{},"一":{"docs":{},"行":{"docs":{},"进":{"docs":{},"行":{"docs":{},"应":{"docs":{},"用":{"docs":{},"单":{"docs":{},"调":{"docs":{},"递":{"docs":{},"减":{"docs":{},"栈":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"进":{"docs":{},"行":{"docs":{},"插":{"docs":{},"入":{"docs":{},"排":{"docs":{},"序":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"4":{"7":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"。":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}}}}}}}}}}},"两":{"docs":{},"棵":{"docs":{},"树":{"docs":{},"只":{"docs":{},"进":{"docs":{},"行":{"docs":{},"了":{"docs":{},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"第":{"docs":{},"一":{"docs":{},"行":{"docs":{},"第":{"docs":{},"一":{"docs":{},"列":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"处":{"docs":{},"理":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}}}}}}}},"角":{"docs":{},"线":{"docs":{},"意":{"docs":{},"味":{"docs":{},"着":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"串":{"docs":{},"是":{"docs":{},"否":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}}}},"开":{"docs":{},"头":{"docs":{},"。":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.021739130434782608},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}},"括":{"docs":{},"号":{"docs":{},"'":{"docs":{},"(":{"docs":{},"'":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"并":{"docs":{},"丢":{"docs":{},"弃":{"docs":{},";":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}},"始":{"docs":{},"对":{"docs":{},"两":{"docs":{},"个":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}},"比":{"docs":{},"较":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"成":{"docs":{},"员":{"docs":{},"，":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"成":{"docs":{},"员":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"，":{"docs":{},"没":{"docs":{},"有":{"docs":{},"比":{"docs":{},"较":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"在":{"docs":{},"处":{"docs":{},"理":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"上":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"）":{"docs":{},"。":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}},"相":{"docs":{},"交":{"docs":{},"。":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}},"，":{"docs":{},"后":{"docs":{},"面":{"docs":{},"的":{"docs":{},"每":{"docs":{},"一":{"docs":{},"项":{"docs":{},"数":{"docs":{},"字":{"docs":{},"都":{"docs":{},"是":{"docs":{},"前":{"docs":{},"面":{"docs":{},"两":{"docs":{},"项":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"和":{"docs":{},"。":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"：":{"docs":{"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549}}}}}}}}}}}}}}}}}}}}}}}}}}}},"时":{"docs":{},"，":{"docs":{},"其":{"docs":{},"格":{"docs":{},"雷":{"docs":{},"编":{"docs":{},"码":{"docs":{},"序":{"docs":{},"列":{"docs":{},"为":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}}}}}}},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}},"应":{"docs":{},"当":{"docs":{},"返":{"docs":{},"回":{"docs":{},":":{"docs":{"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.025}}}}}}}},"才":{"docs":{},"有":{"docs":{},"交":{"docs":{},"换":{"docs":{},"的":{"docs":{},"价":{"docs":{},"值":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358}}}}}}}}},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517}}}}}}}},"内":{"docs":{},"完":{"docs":{},"成":{"docs":{},"此":{"docs":{},"题":{"docs":{},"。":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}}}}}},"的":{"docs":{},"解":{"docs":{},"法":{"docs":{},",":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}},"。":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}}}}},"和":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428}},"常":{"docs":{},"数":{"docs":{},"级":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"下":{"docs":{},"，":{"docs":{},"对":{"docs":{},"链":{"docs":{},"表":{"docs":{},"进":{"docs":{},"行":{"docs":{},"排":{"docs":{},"序":{"docs":{},"。":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"且":{"docs":{},"仅":{"docs":{},"用":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}},"（":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"）":{"docs":{},":":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}}}}}}},"：":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"n":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}}}}}}}}}}},"候":{"docs":{},"，":{"docs":{},"已":{"docs":{},"经":{"docs":{},"设":{"docs":{},"置":{"docs":{},"好":{"docs":{},"了":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"儿":{"docs":{},"不":{"docs":{},"用":{"docs":{},"再":{"docs":{},"次":{"docs":{},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}}}}}},"格":{"docs":{},"雷":{"docs":{},"编":{"docs":{},"码":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"8":{"9":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"数":{"docs":{},"字":{"docs":{},"系":{"docs":{},"统":{"docs":{},"，":{"docs":{},"在":{"docs":{},"该":{"docs":{},"系":{"docs":{},"统":{"docs":{},"中":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"连":{"docs":{},"续":{"docs":{},"的":{"docs":{},"数":{"docs":{},"值":{"docs":{},"仅":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"数":{"docs":{},"的":{"docs":{},"差":{"docs":{},"异":{"docs":{},"。":{"docs":{"数字运算/格雷编码_LeetCode_89.html":{"ref":"数字运算/格雷编码_LeetCode_89.html","tf":0.010869565217391304}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"数":{"docs":{},"相":{"docs":{},"除":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"2":{"9":{"docs":{},")":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"2":{"9":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}}},"同":{"docs":{},"，":{"docs":{},"异":{"docs":{},"或":{"docs":{},"，":{"docs":{},"等":{"docs":{},"于":{"0":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}},"docs":{}}}}}}}},"加":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":3.3430420711974107},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":10.009900990099009},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":2.5097087378640777}}}},"不":{"docs":{},"同":{"docs":{},"，":{"docs":{},"异":{"docs":{},"或":{"docs":{},"，":{"docs":{},"等":{"docs":{},"于":{"docs":{},"其":{"docs":{},"他":{"docs":{},"数":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}}}}}}}}}},"之":{"docs":{},"和":{"docs":{"数组/两数之和 II - 输入无须数组.html":{"ref":"数组/两数之和 II - 输入无须数组.html","tf":3.3397435897435894},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":3.338211382113821},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":3.339583333333333},"矩阵/两数之和 II - 输入无须数组.html":{"ref":"矩阵/两数之和 II - 输入无须数组.html","tf":3.3397435897435894},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}},"种":{"docs":{},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{},"方":{"docs":{},"法":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}}},"边":{"docs":{},"向":{"docs":{},"中":{"docs":{},"间":{"docs":{},"遍":{"docs":{},"历":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}}},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"进":{"docs":{},"行":{"docs":{},"合":{"docs":{},"并":{"docs":{},",":{"docs":{},"就":{"docs":{},"联":{"docs":{},"想":{"docs":{},"到":{"docs":{},"归":{"docs":{},"并":{"docs":{},"排":{"docs":{},"序":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"既":{"docs":{},"可":{"docs":{},"以":{"docs":{},"从":{"docs":{},"前":{"docs":{},"往":{"docs":{},"后":{"docs":{},"归":{"docs":{},"并":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"从":{"docs":{},"后":{"docs":{},"往":{"docs":{},"前":{"docs":{},"归":{"docs":{},"并":{"docs":{},"。":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"最":{"docs":{},"长":{"docs":{},"公":{"docs":{},"共":{"docs":{},"子":{"docs":{},"串":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":10.0078125}}}}}}}}},"完":{"docs":{},"全":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"才":{"docs":{},"算":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"成":{"docs":{},"功":{"docs":{},"。":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}}}}}}}}}},"串":{"docs":{},"长":{"docs":{},"度":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"内":{"docs":{},"容":{"docs":{},"相":{"docs":{},"同":{"docs":{},"，":{"docs":{},"则":{"docs":{},"s":{"1":{"docs":{},"是":{"docs":{},"s":{"2":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}},"子":{"docs":{},"链":{"docs":{},"表":{"docs":{},"归":{"docs":{},"并":{"docs":{},"完":{"docs":{},"成":{"docs":{},"，":{"docs":{},"且":{"docs":{},"已":{"docs":{},"完":{"docs":{},"成":{"docs":{},"对":{"docs":{},"其":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"链":{"docs":{},"表":{"docs":{},"头":{"docs":{},"指":{"docs":{},"针":{"docs":{},"给":{"docs":{},"上":{"docs":{},"层":{"docs":{},"递":{"docs":{},"归":{"docs":{},"。":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"相":{"docs":{},"邻":{"docs":{},"元":{"docs":{},"素":{"docs":{},"间":{"docs":{},"的":{"docs":{},"距":{"docs":{},"离":{"docs":{},"为":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}}}}}},"次":{"docs":{},"反":{"docs":{},"转":{"docs":{"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":0.03125}}}}},"棵":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"如":{"docs":{},"果":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"则":{"docs":{},"两":{"docs":{},"棵":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"有":{"docs":{},"着":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"结":{"docs":{},"构":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"在":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"上":{"docs":{},"有":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"值":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"串":{"docs":{},"都":{"docs":{},"为":{"docs":{},"空":{"docs":{},"时":{"docs":{},"，":{"docs":{},"算":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"成":{"docs":{},"功":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}},"者":{"docs":{},"相":{"docs":{},"等":{"docs":{},"时":{"docs":{},"，":{"docs":{},"a":{"docs":{},"*":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}},"和":{"4":{"6":{"3":{"docs":{},"岛":{"docs":{},"屿":{"docs":{},"周":{"docs":{},"长":{"docs":{},"一":{"docs":{},"模":{"docs":{},"一":{"docs":{},"样":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358},"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.01775147928994083},"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.015957446808510637},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567},"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.03225806451612903},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.015873015873015872},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.012578616352201259},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.024875621890547265},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.01775147928994083},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.008849557522123894},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.00975609756097561},"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.013157894736842105},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.009216589861751152},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}},"除":{"docs":{},"数":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}},"一":{"docs":{},"个":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}},"数":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}},"包":{"docs":{},"含":{"docs":{},"非":{"docs":{},"空":{"docs":{},"单":{"docs":{},"词":{"docs":{},"列":{"docs":{},"表":{"docs":{},"的":{"docs":{},"字":{"docs":{},"典":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}}}}},"总":{"docs":{},"金":{"docs":{},"额":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}}},"字":{"docs":{},"符":{"docs":{},"规":{"docs":{},"律":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}},"模":{"docs":{},"式":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"2":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.030303030303030304}},",":{"docs":{},"求":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"距":{"docs":{},"离":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"只":{"docs":{},"不":{"docs":{},"过":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"语":{"docs":{},"句":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}}},"节":{"docs":{},"点":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748}}}},"最":{"docs":{},"大":{"docs":{},"问":{"docs":{},"题":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.007009345794392523}}}},"：":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}},"[":{"1":{"docs":{},",":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}}}},"docs":{}},"为":{"docs":{},"n":{"docs":{},"的":{"docs":{},"正":{"docs":{},"整":{"docs":{},"数":{"docs":{},"组":{"docs":{},"合":{"docs":{"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":10.010526315789473}}}}}}}}}}},"当":{"docs":{"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.025}},"被":{"docs":{},"除":{"docs":{},"数":{"docs":{},"大":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{},"除":{"docs":{},"数":{"docs":{},"时":{"docs":{},"(":{"docs":{},"否":{"docs":{},"则":{"docs":{},"的":{"docs":{},"话":{"docs":{},"就":{"docs":{},"为":{"0":{"docs":{},"了":{"docs":{},")":{"docs":{},",":{"docs":{},"我":{"docs":{},"们":{"docs":{},"设":{"docs":{},"置":{"docs":{},"两":{"docs":{},"个":{"docs":{},"变":{"docs":{},"量":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"c":{"docs":{},"s":{"docs":{},"和":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{},"并":{"docs":{},"分":{"docs":{},"别":{"docs":{},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{},"为":{"docs":{},"临":{"docs":{},"时":{"docs":{},"除":{"docs":{},"数":{"docs":{},"(":{"docs":{},"除":{"docs":{},"数":{"docs":{},"后":{"docs":{},"面":{"docs":{},"会":{"docs":{},"变":{"docs":{},"化":{"docs":{},",":{"docs":{},"过":{"docs":{},"一":{"docs":{},"会":{"docs":{},"就":{"docs":{},"知":{"docs":{},"道":{"docs":{},"了":{"docs":{},")":{"docs":{},"和":{"1":{"docs":{},"(":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},")":{"docs":{},",":{"docs":{},"当":{"docs":{},"被":{"docs":{},"除":{"docs":{},"数":{"docs":{},"大":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"c":{"docs":{},"s":{"docs":{},"的":{"docs":{},"二":{"docs":{},"倍":{"docs":{},"时":{"docs":{},"b":{"docs":{},"c":{"docs":{},"s":{"docs":{},">":{"docs":{},"=":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"c":{"docs":{},"s":{"docs":{},"=":{"8":{"docs":{},"*":{"2":{"docs":{},",":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"8":{"docs":{},",":{"docs":{},"所":{"docs":{},"以":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"扩":{"docs":{},"大":{"docs":{},"两":{"docs":{},"倍":{"docs":{},",":{"docs":{},"除":{"docs":{},"数":{"docs":{},"也":{"docs":{},"变":{"docs":{},"为":{"docs":{},"原":{"docs":{},"来":{"docs":{},"两":{"docs":{},"倍":{"1":{"6":{"docs":{},",":{"docs":{},"继":{"docs":{},"续":{"docs":{},"循":{"docs":{},"环":{"docs":{},",":{"docs":{},"被":{"docs":{},"除":{"docs":{},"数":{"4":{"7":{"docs":{},">":{"docs":{},"=":{"1":{"6":{"docs":{},"*":{"2":{"docs":{},",":{"docs":{},"所":{"docs":{},"以":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"r":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}}}}}}}},"docs":{}}},"docs":{}},"docs":{}}}},"docs":{}},"docs":{}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"扫":{"docs":{},"描":{"docs":{},"结":{"docs":{},"束":{"docs":{},"后":{"docs":{},"，":{"docs":{},"s":{"2":{"docs":{},"的":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"就":{"docs":{},"是":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}},"docs":{}}}}}}}},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"数":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358}}}}}},"前":{"docs":{},"数":{"docs":{},"组":{"docs":{},"有":{"docs":{},"序":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}},"柱":{"docs":{},"子":{"docs":{},"高":{"docs":{},"度":{"docs":{},"比":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"都":{"docs":{},"高":{"docs":{},"，":{"docs":{},"则":{"docs":{},"该":{"docs":{},"处":{"docs":{},"不":{"docs":{},"能":{"docs":{},"盛":{"docs":{},"水":{"docs":{},"，":{"docs":{},"跳":{"docs":{},"过":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}}}}},"节":{"docs":{},"点":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}},"插":{"docs":{},"入":{"docs":{},"数":{"docs":{},"字":{"docs":{},"和":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"中":{"docs":{},"某":{"docs":{},"数":{"docs":{},"字":{"docs":{},"相":{"docs":{},"等":{"docs":{},"时":{"docs":{},"，":{"docs":{},"插":{"docs":{},"入":{"docs":{},"到":{"docs":{},"左":{"docs":{},"边":{"docs":{},"还":{"docs":{},"是":{"docs":{},"右":{"docs":{},"边":{"docs":{},"？":{"docs":{},"本":{"docs":{},"题":{"docs":{},"要":{"docs":{},"求":{"docs":{},"插":{"docs":{},"到":{"docs":{},"左":{"docs":{},"边":{"docs":{},"；":{"docs":{"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"对":{"docs":{},"一":{"docs":{},"个":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"走":{"docs":{},"到":{"docs":{},"头":{"docs":{},"时":{"docs":{},"，":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"即":{"docs":{},"是":{"docs":{},"要":{"docs":{},"删":{"docs":{},"除":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"位":{"docs":{},"置":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"删":{"docs":{},"除":{"docs":{},"了":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"后":{"docs":{},"，":{"docs":{},"链":{"docs":{},"表":{"docs":{},"变":{"docs":{},"为":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"时":{"docs":{},"，":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"所":{"docs":{},"指":{"docs":{},"节":{"docs":{},"点":{"docs":{},"和":{"docs":{},"所":{"docs":{},"指":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"下":{"docs":{},"一":{"docs":{},"节":{"docs":{},"点":{"docs":{},"都":{"docs":{},"是":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"奇":{"docs":{},"数":{"docs":{},"时":{"docs":{},"，":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"走":{"docs":{},"到":{"docs":{},"链":{"docs":{},"表":{"docs":{},"尾":{"docs":{},"部":{"docs":{},"时":{"docs":{},"，":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"恰":{"docs":{},"好":{"docs":{},"指":{"docs":{},"向":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"中":{"docs":{},"间":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"[":{"docs":{},"a":{"docs":{},":":{"docs":{},"b":{"docs":{},"]":{"docs":{},"=":{"docs":{},"=":{"docs":{},"s":{"docs":{},"[":{"docs":{},"a":{"docs":{},":":{"docs":{},"b":{"docs":{},"]":{"docs":{},"[":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"是":{"docs":{},"空":{"docs":{},"串":{"docs":{},"时":{"docs":{},"，":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"串":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"根":{"docs":{},"据":{"docs":{},"规":{"docs":{},"则":{"docs":{},",":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}}}}},"线":{"docs":{},"的":{"docs":{},"总":{"docs":{},"数":{"docs":{},"为":{"5":{"docs":{},"条":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"先":{"docs":{},"手":{"docs":{},"先":{"docs":{},"划":{"docs":{},"掉":{"docs":{},"一":{"docs":{},"条":{"docs":{},"线":{"docs":{},"，":{"docs":{},"后":{"docs":{},"手":{"docs":{},"就":{"docs":{},"等":{"docs":{},"于":{"docs":{},"是":{"docs":{},"在":{"4":{"docs":{},"条":{"docs":{},"线":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"先":{"docs":{},"手":{"docs":{},"，":{"docs":{},"自":{"docs":{},"然":{"docs":{},"后":{"docs":{},"手":{"docs":{},"输":{"docs":{},"。":{"docs":{"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}},"明":{"docs":{},"天":{"docs":{},"的":{"docs":{},"价":{"docs":{},"格":{"docs":{},"比":{"docs":{},"今":{"docs":{},"天":{"docs":{},"的":{"docs":{},"价":{"docs":{},"格":{"docs":{},"贵":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"我":{"docs":{},"们":{"docs":{},"今":{"docs":{},"天":{"docs":{},"买":{"docs":{},"，":{"docs":{},"明":{"docs":{},"天":{"docs":{},"卖":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"能":{"docs":{},"够":{"docs":{},"获":{"docs":{},"取":{"docs":{},"最":{"docs":{},"大":{"docs":{},"利":{"docs":{},"润":{"docs":{},"。":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"商":{"docs":{},"。":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}}}},"拿":{"docs":{},"十":{"docs":{},"进":{"docs":{},"制":{"docs":{},"举":{"docs":{},"例":{"docs":{},":":{"2":{"9":{"docs":{},"除":{"docs":{},"以":{"8":{"docs":{},"，":{"8":{"docs":{},"扩":{"docs":{},"大":{"docs":{},"二":{"docs":{},"倍":{"docs":{},"，":{"1":{"6":{"docs":{},"小":{"docs":{},"于":{"2":{"9":{"docs":{},"，":{"docs":{},"再":{"docs":{},"扩":{"docs":{},"大":{"docs":{},"二":{"docs":{},"倍":{"docs":{},"，":{"docs":{},"超":{"docs":{},"过":{"2":{"9":{"docs":{},"，":{"docs":{},"于":{"docs":{},"是":{"2":{"9":{"docs":{},"减":{"docs":{},"去":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"1":{"6":{"docs":{},"(":{"docs":{},"我":{"docs":{},"们":{"docs":{},"保":{"docs":{},"存":{"docs":{},"了":{"docs":{},"的":{"docs":{},")":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"加":{"docs":{},"上":{"2":{"docs":{},"(":{"docs":{},"因":{"docs":{},"为":{"docs":{},"现":{"docs":{},"在":{"docs":{},"我":{"docs":{},"们":{"docs":{},"除":{"docs":{},"的":{"docs":{},"是":{"1":{"6":{"docs":{},",":{"1":{"6":{"docs":{},"是":{"8":{"docs":{},"的":{"2":{"docs":{},"倍":{"docs":{},")":{"docs":{},"。":{"docs":{},"剩":{"docs":{},"余":{"docs":{},"除":{"docs":{},"数":{"docs":{},"为":{"2":{"9":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}},"docs":{}},"docs":{}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}},"docs":{}},"docs":{}}}}},"docs":{}},"docs":{}}}}}}}}}}},"docs":{}},"docs":{}}}},"docs":{}},"docs":{}}}}}}},"docs":{}}},"docs":{}}}},"docs":{}},"docs":{}}}}}}}},"明":{"docs":{},"确":{"docs":{},"一":{"docs":{},"点":{"docs":{},",":{"1":{"0":{"docs":{},"进":{"docs":{},"制":{"docs":{},"数":{"docs":{},"扩":{"docs":{},"大":{"docs":{},"两":{"docs":{},"倍":{"docs":{},",":{"docs":{},"左":{"docs":{},"移":{"docs":{},"一":{"docs":{},"位":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}},"暴":{"docs":{},"力":{"docs":{},"法":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.007407407407407408},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}},"，":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}},"解":{"docs":{},"决":{"docs":{"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}}},"移":{"docs":{},"位":{"docs":{},"法":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}},"动":{"docs":{},"m":{"docs":{},"次":{"docs":{},"最":{"docs":{},"多":{"docs":{},"能":{"docs":{},"够":{"docs":{},"确":{"docs":{},"定":{"docs":{},"多":{"docs":{},"少":{"docs":{},"楼":{"docs":{},"层":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}},"被":{"docs":{},"除":{"docs":{},"数":{"docs":{},"和":{"docs":{},"除":{"docs":{},"数":{"docs":{},"均":{"docs":{},"为":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}}}}}},"重":{"docs":{},"复":{"docs":{},"一":{"docs":{},"次":{"docs":{},"。":{"docs":{},"因":{"docs":{},"此":{"docs":{},"可":{"docs":{},"以":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}},"围":{"docs":{},"绕":{"docs":{},"的":{"docs":{},"区":{"docs":{},"域":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"3":{"0":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}},"间":{"docs":{},"不":{"docs":{},"会":{"docs":{},"存":{"docs":{},"在":{"docs":{},"于":{"docs":{},"边":{"docs":{},"界":{"docs":{},"上":{"docs":{},"，":{"docs":{},"换":{"docs":{},"句":{"docs":{},"话":{"docs":{},"说":{"docs":{},"，":{"docs":{},"任":{"docs":{},"何":{"docs":{},"边":{"docs":{},"界":{"docs":{},"上":{"docs":{},"的":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}}}}}}}}}}},"运":{"docs":{},"算":{"docs":{},"符":{"docs":{},"。":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}},"行":{"docs":{},"你":{"docs":{},"的":{"docs":{},"函":{"docs":{},"数":{"docs":{},"后":{"docs":{},"，":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"变":{"docs":{},"为":{"docs":{},"：":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}}}}}}},"返":{"docs":{},"回":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.012539184952978056},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.024390243902439025},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}},"被":{"docs":{},"除":{"docs":{},"数":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}},"[":{"docs":{},"a":{"docs":{},",":{"docs":{},"b":{"docs":{},"]":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332}}}}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.034482758620689655}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.034482758620689655}}}}}},"的":{"docs":{},"下":{"docs":{},"标":{"docs":{},"值":{"docs":{},"（":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"1":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}},"docs":{}}}}}}}}}},"结":{"docs":{},"点":{"docs":{},"值":{"docs":{},"为":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}},"它":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"深":{"docs":{},"度":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}}},"其":{"docs":{},"自":{"docs":{},"底":{"docs":{},"向":{"docs":{},"上":{"docs":{},"的":{"docs":{},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"为":{"docs":{},"：":{"docs":{"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105}}}}}}}}}}}}}},"锯":{"docs":{},"齿":{"docs":{},"形":{"docs":{},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}}}}}}}}}},":":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993}}},"如":{"docs":{},"下":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"：":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}}}}}}},"镜":{"docs":{},"像":{"docs":{},"树":{"docs":{},"的":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}}}}}}}},"符":{"docs":{},"合":{"docs":{},"要":{"docs":{},"求":{"docs":{},"的":{"docs":{},"最":{"docs":{},"少":{"docs":{},"分":{"docs":{},"割":{"docs":{},"次":{"docs":{},"数":{"docs":{},"。":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}}}}}}}}}}}},"递":{"docs":{},"增":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"最":{"docs":{},"长":{"docs":{},"递":{"docs":{},"增":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}}},"目":{"docs":{},"前":{"docs":{},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},"。":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}},"除":{"docs":{},"以":{"docs":{},"除":{"docs":{},"数":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}},"数":{"docs":{},"不":{"docs":{},"为":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}},"倍":{"docs":{},"增":{"docs":{},"法":{"docs":{"数字运算/两数相除_LeeetCode_29.html":{"ref":"数字运算/两数相除_LeeetCode_29.html","tf":0.004484304932735426}}}}}},"自":{"docs":{},"身":{"docs":{},"以":{"docs":{},"外":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"乘":{"docs":{},"积":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":10.008695652173913}}}}}}}}}}}},"y":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}},":":{"docs":{},"余":{"docs":{},"数":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}},"+":{"docs":{},"x":{"docs":{},"谁":{"docs":{},"大":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}},"余":{"docs":{},"数":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}},"保":{"docs":{},"存":{"docs":{},"商":{"docs":{},"和":{"docs":{},"余":{"docs":{},"数":{"docs":{},"，":{"docs":{},"知":{"docs":{},"道":{"docs":{},"商":{"docs":{},"为":{"0":{"docs":{},"为":{"docs":{},"止":{"docs":{},"，":{"docs":{},"再":{"docs":{},"将":{"docs":{},"余":{"docs":{},"数":{"docs":{},"反":{"docs":{},"转":{"docs":{},"。":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"证":{"docs":{},"所":{"docs":{},"有":{"docs":{},"输":{"docs":{},"入":{"docs":{},"均":{"docs":{},"为":{"docs":{},"非":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}},"是":{"docs":{},"有":{"docs":{},"效":{"docs":{},"的":{"docs":{},"。":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}},"留":{"docs":{},"前":{"docs":{},"面":{"docs":{},"计":{"docs":{},"算":{"docs":{},"过":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}}}}}}}}}}}},"十":{"docs":{},"进":{"docs":{},"制":{"docs":{},"数":{"docs":{},"为":{"docs":{},"：":{"5":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}},"docs":{}}}}}}},"同":{"docs":{},"时":{"docs":{},"算":{"docs":{},"出":{"docs":{},"商":{"docs":{},"和":{"docs":{},"余":{"docs":{},"数":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}},"对":{"docs":{},"a":{"docs":{},"和":{"docs":{},"b":{"docs":{},"进":{"docs":{},"行":{"docs":{},"遍":{"docs":{},"历":{"docs":{},",":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}},"一":{"docs":{},"位":{"docs":{},"置":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"相":{"docs":{},"同":{"docs":{},"字":{"docs":{},"母":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"，":{"docs":{},"加":{"docs":{},"入":{"docs":{},"该":{"docs":{},"字":{"docs":{},"母":{"docs":{},"，":{"docs":{},"否":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"商":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}},"方":{"docs":{},"法":{"docs":{},"非":{"docs":{},"常":{"docs":{},"简":{"docs":{},"单":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"利":{"docs":{},"用":{"docs":{},"辗":{"docs":{},"转":{"docs":{},"相":{"docs":{},"除":{"docs":{},"发":{"docs":{},"，":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}}}}}}}}}}},"检":{"docs":{},"测":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"是":{"docs":{},"否":{"docs":{},"只":{"docs":{},"由":{"docs":{},"字":{"docs":{},"母":{"docs":{},"组":{"docs":{},"成":{"docs":{},"。":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}},"由":{"docs":{},"字":{"docs":{},"母":{"docs":{},"和":{"docs":{},"数":{"docs":{},"字":{"docs":{},"组":{"docs":{},"成":{"docs":{},"。":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}},"：":{"docs":{},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}}}}}}}}}},"用":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}},"列":{"docs":{},"表":{"docs":{},"a":{"docs":{},"=":{"docs":{},"[":{"0":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},",":{"8":{"docs":{},",":{"9":{"docs":{},",":{"docs":{},"’":{"docs":{},"a":{"docs":{},"’":{"docs":{},",":{"docs":{},"’":{"docs":{},"b":{"docs":{},"’":{"docs":{},",":{"docs":{},"’":{"docs":{},"c":{"docs":{},"’":{"docs":{},",":{"docs":{},"’":{"docs":{},"d":{"docs":{},"’":{"docs":{},",":{"docs":{},"’":{"docs":{},"e":{"docs":{},"’":{"docs":{},",":{"docs":{},"’":{"docs":{},"f":{"docs":{},"’":{"docs":{},"]":{"docs":{},"储":{"docs":{},"存":{"docs":{},"转":{"docs":{},"换":{"docs":{},"之":{"docs":{},"后":{"docs":{},"的":{"docs":{},"每":{"docs":{},"一":{"docs":{},"位":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"余":{"docs":{},"数":{"docs":{},"作":{"docs":{},"为":{"docs":{},"指":{"docs":{},"针":{"docs":{},"即":{"docs":{},"可":{"docs":{},"找":{"docs":{},"到":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"符":{"docs":{},"号":{"docs":{},"。":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616}},"循":{"docs":{},"环":{"docs":{},"将":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},"依":{"docs":{},"次":{"docs":{},"添":{"docs":{},"加":{"docs":{},"到":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"单":{"docs":{},"调":{"docs":{},"递":{"docs":{},"增":{"docs":{},"栈":{"docs":{"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517}}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"_":{"docs":{},"j":{"docs":{},"记":{"docs":{},"录":{"docs":{},"第":{"docs":{},"i":{"docs":{},"行":{"docs":{},"为":{"docs":{},"底":{"docs":{},",":{"docs":{},"第":{"docs":{},"j":{"docs":{},"列":{"docs":{},"高":{"docs":{},"度":{"docs":{},"是":{"docs":{},"多":{"docs":{},"少":{"docs":{},".":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"_":{"docs":{},"j":{"docs":{},"记":{"docs":{},"录":{"docs":{},"第":{"docs":{},"i":{"docs":{},"行":{"docs":{},"为":{"docs":{},"底":{"docs":{},",":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"_":{"docs":{},"j":{"docs":{},"记":{"docs":{},"录":{"docs":{},"第":{"docs":{},"i":{"docs":{},"行":{"docs":{},"为":{"docs":{},"底":{"docs":{},",":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}},"于":{"docs":{},"包":{"docs":{},"含":{"docs":{},"右":{"docs":{},"边":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"的":{"docs":{},"累":{"docs":{},"加":{"docs":{},"求":{"docs":{},"和":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}}},"累":{"docs":{},"加":{"docs":{},"求":{"docs":{},"和":{"docs":{},"开":{"docs":{},"始":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"先":{"docs":{},"求":{"docs":{},"出":{"docs":{},"包":{"docs":{},"括":{"docs":{},"空":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"再":{"docs":{},"返":{"docs":{},"回":{"docs":{},"答":{"docs":{},"案":{"docs":{},"之":{"docs":{},"前":{"docs":{},"再":{"docs":{},"减":{"docs":{},"去":{"docs":{},"空":{"docs":{},"序":{"docs":{},"列":{"docs":{},"。":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"系":{"docs":{},"统":{"docs":{},"自":{"docs":{},"带":{"docs":{},"方":{"docs":{},"法":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}},"结":{"docs":{},"果":{"docs":{},"：":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}},"不":{"docs":{},"能":{"docs":{},"为":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}}},"尾":{"docs":{},"的":{"docs":{},"最":{"docs":{},"长":{"docs":{},"上":{"docs":{},"升":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}}}},"转":{"docs":{},"换":{"docs":{},"为":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"为":{"docs":{},"：":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}},"八":{"docs":{},"进":{"docs":{},"制":{"docs":{},"为":{"docs":{},"：":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}},"十":{"docs":{},"六":{"docs":{},"进":{"docs":{},"制":{"docs":{},"为":{"docs":{},"：":{"docs":{"数字运算/10进制转化为其它进制.html":{"ref":"数字运算/10进制转化为其它进制.html","tf":0.013333333333333334}}}}}}}}},"成":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}},"前":{"docs":{},"缀":{"docs":{},"后":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"就":{"docs":{},"十":{"docs":{},"分":{"docs":{},"重":{"docs":{},"要":{"docs":{},"。":{"docs":{},"实":{"docs":{},"际":{"docs":{},"上":{"docs":{},"，":{"docs":{},"二":{"docs":{},"者":{"docs":{},"的":{"docs":{},"转":{"docs":{},"换":{"docs":{},"算":{"docs":{},"法":{"docs":{},"看":{"docs":{},"起":{"docs":{},"来":{"docs":{},"也":{"docs":{},"很":{"docs":{},"像":{"docs":{},"一":{"docs":{},"个":{"docs":{},"逆":{"docs":{},"过":{"docs":{},"程":{"docs":{},"。":{"docs":{},"因":{"docs":{},"此":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"着":{"docs":{},"重":{"docs":{},"讨":{"docs":{},"论":{"docs":{},"中":{"docs":{},"缀":{"docs":{},"转":{"docs":{},"后":{"docs":{},"缀":{"docs":{},"。":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"截":{"docs":{},"止":{"docs":{},"于":{"docs":{},"数":{"docs":{},"字":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}}}}},"化":{"docs":{},"为":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"后":{"docs":{},"再":{"docs":{},"排":{"docs":{},"序":{"docs":{},"：":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}}}}}},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"求":{"docs":{},"和":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"6":{"7":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"、":{"docs":{},"题":{"docs":{},"目":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}}},"分":{"docs":{"二分/":{"ref":"二分/","tf":10.083333333333334}},"法":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}},"：":{"docs":{},"查":{"docs":{},"找":{"docs":{},"距":{"docs":{},"离":{"docs":{},"某":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"最":{"docs":{},"近":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}}}}}}}}}},"首":{"docs":{},"先":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"这":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"是":{"docs":{},"否":{"docs":{},"旋":{"docs":{},"转":{"docs":{},"了":{"docs":{},"，":{"docs":{},"通":{"docs":{},"过":{"docs":{},"比":{"docs":{},"较":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"和":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"小":{"docs":{},"，":{"docs":{},"则":{"docs":{},"没":{"docs":{},"有":{"docs":{},"旋":{"docs":{},"转":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"大":{"docs":{},"，":{"docs":{},"就":{"docs":{},"要":{"docs":{},"进":{"docs":{},"一":{"docs":{},"步":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"定":{"docs":{},"义":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"和":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"分":{"docs":{},"别":{"docs":{},"指":{"docs":{},"向":{"docs":{},"开":{"docs":{},"头":{"docs":{},"和":{"docs":{},"结":{"docs":{},"尾":{"docs":{},"，":{"docs":{},"还":{"docs":{},"要":{"docs":{},"找":{"docs":{},"到":{"docs":{},"中":{"docs":{},"间":{"docs":{},"那":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"和":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"指":{"docs":{},"的":{"docs":{},"数":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"中":{"docs":{},"间":{"docs":{},"的":{"docs":{},"数":{"docs":{},"大":{"docs":{},"，":{"docs":{},"则":{"docs":{},"继":{"docs":{},"续":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"右":{"docs":{},"半":{"docs":{},"段":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"反":{"docs":{},"之":{"docs":{},"查":{"docs":{},"找":{"docs":{},"左":{"docs":{},"半":{"docs":{},"段":{"docs":{},"。":{"docs":{},"终":{"docs":{},"止":{"docs":{},"条":{"docs":{},"件":{"docs":{},"是":{"docs":{},"当":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"小":{"docs":{},"的":{"docs":{},"那":{"docs":{},"个":{"docs":{},"。":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.018518518518518517},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"#":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}},"搜":{"docs":{},"索":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":10.009615384615385}},"有":{"docs":{},"递":{"docs":{},"归":{"docs":{},"和":{"docs":{},"循":{"docs":{},"环":{"docs":{},"两":{"docs":{},"种":{"docs":{},"方":{"docs":{},"式":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616}}}}}}}}}}}}}},"查":{"docs":{},"找":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"7":{"0":{"4":{"docs":{},"简":{"docs":{},"单":{"docs":{},")":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"7":{"0":{"4":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"中":{"docs":{},"第":{"docs":{},"k":{"docs":{},"小":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":10.005524861878452},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":10.005524861878452}}}}}}}}},"元":{"docs":{},"素":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}}}}}},"的":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":10.006802721088436}}}}}}}},"特":{"docs":{},"点":{"docs":{},"：":{"docs":{},"对":{"docs":{},"于":{"docs":{},"任":{"docs":{},"意":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"它":{"docs":{},"的":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"上":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"都":{"docs":{},"小":{"docs":{},"于":{"docs":{},"这":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"它":{"docs":{},"的":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"上":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"都":{"docs":{},"大":{"docs":{},"于":{"docs":{},"这":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"特":{"docs":{},"点":{"docs":{},"，":{"docs":{},"列":{"docs":{},"表":{"docs":{},"的":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"值":{"docs":{},"一":{"docs":{},"定":{"docs":{},"是":{"docs":{},"树":{"docs":{},"的":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"根":{"docs":{},"据":{"docs":{},"这":{"docs":{},"个":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"将":{"docs":{},"列":{"docs":{},"表":{"docs":{},"前":{"docs":{},"n":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"树":{"docs":{"二叉树/":{"ref":"二叉树/","tf":10.083333333333334}},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"深":{"docs":{},"度":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":10.007299270072993}}}}},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":10.004830917874395}}}}}}}},"深":{"docs":{},"度":{"docs":{},"为":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"到":{"docs":{},"最":{"docs":{},"远":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"最":{"docs":{},"长":{"docs":{},"路":{"docs":{},"径":{"docs":{},"上":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"数":{"docs":{},"。":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}},"（":{"docs":{},"通":{"docs":{},"过":{"docs":{},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"实":{"docs":{},"现":{"docs":{},"）":{"docs":{},"(":{"docs":{},"每":{"docs":{},"层":{"docs":{},"节":{"docs":{},"点":{"docs":{},"单":{"docs":{},"独":{"docs":{},"输":{"docs":{},"出":{"docs":{},")":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}}}}}}}}}}}}}}}}}}}}}},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":10.007518796992482},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":5.0131578947368425}}}}}},"锯":{"docs":{},"齿":{"docs":{},"形":{"docs":{},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":3.333333333333333}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}},"很":{"docs":{},"多":{"docs":{},"问":{"docs":{},"题":{"docs":{},"都":{"docs":{},"可":{"docs":{},"以":{"docs":{},"转":{"docs":{},"化":{"docs":{},"为":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"来":{"docs":{},"求":{"docs":{},"解":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}}}}}}}}}}}}}}}}}},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{},"和":{"docs":{},"反":{"docs":{},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}},"所":{"docs":{},"有":{"docs":{},"路":{"docs":{},"径":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"2":{"5":{"7":{"docs":{},"简":{"docs":{},"单":{"docs":{},")":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"2":{"5":{"7":{"docs":{},"简":{"docs":{},"单":{"docs":{"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":10}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}},"镜":{"docs":{},"像":{"docs":{"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":10}},"定":{"docs":{},"义":{"docs":{},"：":{"docs":{},"源":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}}}}}}}}}},"节":{"docs":{},"点":{"docs":{},"表":{"docs":{},"示":{"docs":{},"以":{"docs":{},"及":{"docs":{},"树":{"docs":{},"的":{"docs":{},"创":{"docs":{},"建":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}}}}},"不":{"docs":{},"超":{"docs":{},"过":{"1":{"0":{"0":{"0":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"且":{"docs":{},"节":{"docs":{},"点":{"docs":{},"数":{"docs":{},"值":{"docs":{},"范":{"docs":{},"围":{"docs":{},"是":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}},"中":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"路":{"docs":{},"径":{"docs":{},"和":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":5}}}}}}}}}}}}}}}}},"最":{"docs":{},"大":{"docs":{},"子":{"docs":{},"树":{"docs":{},"和":{"docs":{"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":10.016129032258064}}}}}}},"展":{"docs":{},"开":{"docs":{},"为":{"docs":{},"链":{"docs":{},"表":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":10.005208333333334}}}}}}},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{},"和":{"docs":{},"反":{"docs":{},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":10}}}}}}}}}},"路":{"docs":{},"径":{"docs":{},"等":{"docs":{},"于":{"docs":{},"输":{"docs":{},"入":{"docs":{},"整":{"docs":{},"数":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"路":{"docs":{},"径":{"docs":{"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":10}}}}}}}}}}}}}}}}},"是":{"docs":{},"就":{"docs":{},"在":{"docs":{},"愿":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"上":{"docs":{},"，":{"docs":{},"进":{"docs":{},"行":{"docs":{},"查":{"docs":{},"找":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"起":{"docs":{},"始":{"docs":{},"点":{"docs":{},"，":{"docs":{},"选":{"docs":{},"为":{"docs":{},"左":{"docs":{},"下":{"docs":{},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"右":{"docs":{},"上":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"我":{"docs":{},"们":{"docs":{},"不":{"docs":{},"能":{"docs":{},"选":{"docs":{},"择":{"docs":{},"左":{"docs":{},"上":{"docs":{},"角":{"docs":{},"和":{"docs":{},"右":{"docs":{},"下":{"docs":{},"角":{"docs":{},"为":{"docs":{},"起":{"docs":{},"点":{"docs":{},"，":{"docs":{},"假":{"docs":{},"设":{"docs":{},"左":{"docs":{},"上":{"docs":{},"角":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"为":{"1":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"查":{"docs":{},"找":{"docs":{},"数":{"docs":{},"字":{"docs":{},"为":{"7":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"比":{"docs":{},"较":{"7":{"docs":{},"比":{"1":{"docs":{},"大":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"我":{"docs":{},"们":{"docs":{},"无":{"docs":{},"法":{"docs":{},"缩":{"docs":{},"小":{"docs":{},"查":{"docs":{},"询":{"docs":{},"范":{"docs":{},"围":{"docs":{},"（":{"docs":{},"即":{"docs":{},"不":{"docs":{},"能":{"docs":{},"剔":{"docs":{},"除":{"docs":{},"第":{"docs":{},"一":{"docs":{},"行":{"docs":{},"，":{"docs":{},"也":{"docs":{},"不":{"docs":{},"能":{"docs":{},"剔":{"docs":{},"除":{"docs":{},"第":{"docs":{},"一":{"docs":{},"列":{"docs":{},"）":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}},"docs":{}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"在":{"docs":{},"同":{"docs":{},"一":{"docs":{},"侧":{"docs":{},"，":{"docs":{},"则":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}}}}}}}}}},"者":{"docs":{},"不":{"docs":{},"相":{"docs":{},"等":{"docs":{},"时":{"docs":{},"，":{"docs":{},"a":{"docs":{},"*":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}},"法":{"2":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}},"(":{"docs":{},"推":{"docs":{},"荐":{"docs":{},")":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}},"docs":{},"一":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}},"：":{"docs":{},"将":{"2":{"docs":{},"进":{"docs":{},"制":{"docs":{},"数":{"docs":{},"转":{"docs":{},"为":{"1":{"0":{"docs":{},"进":{"docs":{},"制":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"转":{"docs":{},"化":{"docs":{},"为":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}},"docs":{}},"转":{"docs":{},"化":{"docs":{},"为":{"docs":{},"列":{"docs":{},"表":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}}}},"超":{"docs":{},"时":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}}}}},"简":{"docs":{},"单":{"docs":{},"修":{"docs":{},"改":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}},"二":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044},"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}},"：":{"docs":{},"模":{"docs":{},"仿":{"1":{"0":{"docs":{},"进":{"docs":{},"制":{"docs":{},"，":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"相":{"docs":{},"加":{"docs":{},"，":{"docs":{},"这":{"docs":{},"儿":{"docs":{},"我":{"docs":{},"们":{"docs":{},"同":{"docs":{},"样":{"docs":{},"可":{"docs":{},"以":{"docs":{},"将":{"docs":{},"直":{"docs":{},"接":{"docs":{},"利":{"docs":{},"用":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"将":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"先":{"docs":{},"转":{"docs":{},"化":{"docs":{},"为":{"docs":{},"列":{"docs":{},"表":{"docs":{},"。":{"docs":{"数字运算/二进制求和_LeetCode_67.html":{"ref":"数字运算/二进制求和_LeetCode_67.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}},"不":{"docs":{},"转":{"docs":{},"化":{"docs":{},"为":{"docs":{},"列":{"docs":{},"表":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}}}}}}}},"&":{"docs":{"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.05263157894736842},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827},"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}},"&":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}}}}}}}}},"倒":{"docs":{},"序":{"docs":{},"输":{"docs":{},"出":{"docs":{"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421}}}},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},",":{"docs":{},"统":{"docs":{},"计":{"docs":{},"数":{"docs":{},"量":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}}}}}}}}}}},"打":{"docs":{},"印":{"1":{"docs":{},"~":{"docs":{},"n":{"docs":{},",":{"docs":{},"短":{"docs":{},"路":{"docs":{},"原":{"docs":{},"理":{"docs":{"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":10}}}}}}}}}},"docs":{}},"家":{"docs":{},"劫":{"docs":{},"舍":{"2":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"2":{"1":{"3":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}},"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"9":{"8":{"docs":{},")":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"9":{"8":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"正":{"docs":{},"序":{"docs":{},"输":{"docs":{},"出":{"docs":{"数字运算/打印1~n,短路原理.html":{"ref":"数字运算/打印1~n,短路原理.html","tf":0.02631578947368421}}}}},"常":{"docs":{},"情":{"docs":{},"况":{"docs":{},"：":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}},"解":{"docs":{},"法":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}},"则":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"0":{"docs":{},")":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"0":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}},"*":{"1":{"0":{"docs":{},"*":{"docs":{},"*":{"docs":{},"(":{"docs":{},"i":{"docs":{},"+":{"docs":{},"j":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}}}}}},"docs":{}},"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.025974025974025976},"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.022222222222222223},"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.04477611940298507},"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.009876543209876543},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.01990049751243781},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.034782608695652174},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.023809523809523808},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.012269938650306749},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.006329113924050633},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.013392857142857142},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521},"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.02912621359223301},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}},",":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"1":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"+":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"2":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}}}}},"docs":{}}}}}}}}}},"docs":{}}}},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}},"docs":{}}}}}}}},"p":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}},"docs":{}}}}}}},"s":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}},"docs":{}}}}}}}},"m":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}},"。":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"只":{"docs":{},"能":{"docs":{},"是":{"docs":{},"大":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"1":{"docs":{},"（":{"docs":{},"从":{"0":{"docs":{},"开":{"docs":{},"始":{"docs":{},"计":{"docs":{},"数":{"docs":{},"）":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}},"前":{"docs":{},"必":{"docs":{},"存":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},",":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}},"，":{"docs":{},"前":{"docs":{},"面":{"docs":{},"必":{"docs":{},"然":{"docs":{},"有":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}},"=":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.014598540145985401}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"*":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"该":{"docs":{},"数":{"docs":{},"组":{"docs":{},"所":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"的":{"docs":{},"子":{"docs":{},"集":{"docs":{},"（":{"docs":{},"幂":{"docs":{},"集":{"docs":{},"）":{"docs":{},"。":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}},"/":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}},"一":{"docs":{},"个":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}},"整":{"docs":{},"型":{"docs":{},"数":{"docs":{},"组":{"docs":{},"里":{"docs":{},"除":{"docs":{},"了":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"之":{"docs":{},"外":{"docs":{},"，":{"docs":{},"其":{"docs":{},"他":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"都":{"docs":{},"出":{"docs":{},"现":{"docs":{},"了":{"docs":{},"两":{"docs":{},"次":{"docs":{},"。":{"docs":{},"请":{"docs":{},"写":{"docs":{},"程":{"docs":{},"序":{"docs":{},"找":{"docs":{},"出":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988}},"要":{"docs":{},"求":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"。":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"直":{"docs":{},"观":{"docs":{},"的":{"docs":{},"解":{"docs":{},"决":{"docs":{},"方":{"docs":{},"案":{"docs":{},"是":{"docs":{},"使":{"docs":{},"用":{"docs":{},"计":{"docs":{},"数":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"两":{"docs":{},"趟":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"算":{"docs":{},"法":{"docs":{},"。":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}}}},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}}}},"环":{"docs":{},"形":{"docs":{},"单":{"docs":{},"向":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"和":{"docs":{},"报":{"docs":{},"数":{"docs":{},"的":{"docs":{},"值":{"docs":{},"m":{"docs":{"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"能":{"docs":{},"的":{"docs":{},"答":{"docs":{},"案":{"docs":{},"是":{"docs":{},"：":{"docs":{},"[":{"0":{"docs":{},",":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}},"docs":{}}}}}}}}},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"每":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}}}}}}}}},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"位":{"docs":{},"于":{"docs":{},"一":{"docs":{},"个":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"累":{"docs":{},"加":{"docs":{},"，":{"docs":{},"关":{"docs":{},"键":{"docs":{},"技":{"docs":{},"巧":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}},"这":{"docs":{},"儿":{"docs":{},"是":{"docs":{},"个":{"docs":{},"关":{"docs":{},"键":{"docs":{},"技":{"docs":{},"巧":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}}}}}}}}}}}}}}}},"部":{"docs":{},"分":{"docs":{},"算":{"docs":{},"完":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"再":{"docs":{},"放":{"docs":{},"进":{"docs":{},"去":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"继":{"docs":{},"续":{"docs":{},"后":{"docs":{},"面":{"docs":{},"的":{"docs":{},"计":{"docs":{},"算":{"docs":{},"（":{"docs":{},"链":{"docs":{},"表":{"docs":{},"也":{"docs":{},"许":{"docs":{},"可":{"docs":{},"以":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"，":{"docs":{},"代":{"docs":{},"价":{"docs":{},"也":{"docs":{},"是":{"docs":{},"不":{"docs":{},"菲":{"docs":{},"）":{"docs":{},"。":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"种":{"docs":{},"最":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"思":{"docs":{},"路":{"docs":{},"就":{"docs":{},"是":{"docs":{},"将":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"的":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"去":{"docs":{},"除":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"在":{"docs":{},"使":{"docs":{},"用":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"啦":{"docs":{},"。":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"解":{"docs":{},"决":{"docs":{},"办":{"docs":{},"法":{"docs":{},"是":{"docs":{},"我":{"docs":{},"们":{"docs":{},"重":{"docs":{},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"，":{"docs":{},"给":{"docs":{},"他":{"docs":{},"添":{"docs":{},"加":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"元":{"docs":{},"素":{"docs":{},"方":{"docs":{},"法":{"docs":{},"。":{"docs":{},"我":{"docs":{},"这":{"docs":{},"里":{"docs":{},"使":{"docs":{},"用":{"docs":{},"了":{"docs":{},"另":{"docs":{},"外":{"docs":{},"的":{"docs":{},"一":{"docs":{},"种":{"docs":{},"解":{"docs":{},"决":{"docs":{},"思":{"docs":{},"路":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"在":{"docs":{},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"中":{"docs":{},"再":{"docs":{},"添":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"方":{"docs":{},"法":{"docs":{},"类":{"docs":{},"似":{"docs":{},"于":{"docs":{},"最":{"docs":{},"大":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"和":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}}}}}}}}}},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"法":{"docs":{"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}}}},"是":{"docs":{},"变":{"docs":{},"为":{"docs":{},"一":{"docs":{},"维":{"docs":{},"列":{"docs":{},"表":{"docs":{},"，":{"docs":{},"进":{"docs":{},"行":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}}}}}}}}}}}}}},"位":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}},"般":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"元":{"docs":{},"素":{"docs":{},"个":{"docs":{},"数":{"docs":{},"都":{"docs":{},"比":{"docs":{},"数":{"docs":{},"组":{"docs":{},"元":{"docs":{},"素":{"docs":{},"个":{"docs":{},"数":{"docs":{},"多":{"docs":{},"一":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}},"旦":{"docs":{},"遇":{"docs":{},"到":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}},"条":{"docs":{},"包":{"docs":{},"含":{"docs":{},"字":{"docs":{},"母":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}}}},"张":{"docs":{},"纸":{"docs":{},"上":{"docs":{},"，":{"docs":{},"画":{"docs":{},"若":{"docs":{},"干":{"docs":{},"条":{"docs":{},"线":{"docs":{},"，":{"docs":{},"双":{"docs":{},"方":{"docs":{},"一":{"docs":{},"人":{"docs":{},"划":{"docs":{},"一":{"docs":{},"次":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"划":{"docs":{},"掉":{"1":{"docs":{},"~":{"3":{"docs":{},"条":{"docs":{},"线":{"docs":{},"。":{"docs":{},"可":{"docs":{},"以":{"docs":{},"选":{"docs":{},"择":{"docs":{},"画":{"1":{"docs":{},"条":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"划":{"2":{"docs":{},"条":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"3":{"docs":{},"条":{"docs":{},"。":{"docs":{},"具":{"docs":{},"体":{"docs":{},"划":{"docs":{},"去":{"docs":{},"几":{"docs":{},"条":{"docs":{},"线":{"docs":{},"完":{"docs":{},"全":{"docs":{},"看":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"策":{"docs":{},"略":{"docs":{},"。":{"docs":{},"谁":{"docs":{},"划":{"docs":{},"掉":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"条":{"docs":{},"线":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"赢":{"docs":{},"家":{"docs":{},"。":{"docs":{"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"致":{"docs":{},"，":{"docs":{},"则":{"docs":{},"在":{"docs":{},"网":{"docs":{},"格":{"docs":{},"中":{"docs":{},"存":{"docs":{},"在":{"docs":{},"此":{"docs":{},"单":{"docs":{},"词":{"docs":{},"。":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}},"边":{"docs":{},"占":{"docs":{},"一":{"docs":{},"半":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"而":{"docs":{},"且":{"docs":{},"，":{"docs":{},"还":{"docs":{},"是":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"，":{"docs":{},"很":{"docs":{},"像":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"，":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},"为":{"docs":{},"两":{"docs":{},"堆":{"docs":{},"顶":{"docs":{},"平":{"docs":{},"均":{"docs":{},"值":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"举":{"docs":{},"例":{"docs":{},"：":{"docs":{},"{":{"2":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},",":{"6":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},"}":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.025974025974025976},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"来":{"docs":{},"说":{"docs":{},"：":{"1":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}},"docs":{}}}}},"一":{"docs":{},"个":{"docs":{},"例":{"docs":{},"子":{"docs":{},"，":{"docs":{},"若":{"docs":{},"给":{"docs":{},"定":{"docs":{},"数":{"docs":{},"组":{"docs":{},"为":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}}}}}}}}},"其":{"docs":{},"中":{"docs":{"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549}},"a":{"docs":{},"b":{"docs":{},"是":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.020833333333333332}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"用":{"docs":{},"来":{"docs":{},"预":{"docs":{},"处":{"docs":{},"理":{"docs":{},"：":{"docs":{},"将":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"倒":{"docs":{},"序":{"docs":{},"压":{"docs":{},"进":{"docs":{},"栈":{"docs":{},"中":{"docs":{},"。":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}},"他":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}}}}}}}}}},"状":{"docs":{},"态":{"docs":{},"与":{"docs":{},"前":{"2":{"docs":{},"的":{"docs":{},"状":{"docs":{},"态":{"docs":{},"一":{"docs":{},"致":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}},"docs":{}}}}}},"大":{"docs":{},"家":{"docs":{},"首":{"docs":{},"先":{"docs":{},"想":{"docs":{},"到":{"docs":{},"的":{"docs":{},"是":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"法":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"（":{"docs":{},"n":{"docs":{},"^":{"2":{"docs":{},"）":{"docs":{},"。":{"docs":{},"接":{"docs":{},"着":{"docs":{},"大":{"docs":{},"家":{"docs":{},"又":{"docs":{},"会":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"用":{"docs":{},"哈":{"docs":{},"希":{"docs":{},"表":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"不":{"docs":{},"是":{"docs":{},"o":{"docs":{},"（":{"1":{"docs":{},"）":{"docs":{},"。":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"于":{"0":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"走":{"docs":{},"n":{"docs":{},"步":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}},"docs":{}},"根":{"docs":{},"堆":{"docs":{"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}}}},"应":{"docs":{},"该":{"docs":{},"怎":{"docs":{},"么":{"docs":{},"做":{"docs":{},"才":{"docs":{},"能":{"docs":{},"即":{"docs":{},"满":{"docs":{},"足":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"（":{"docs":{},"n":{"docs":{},"）":{"docs":{},"又":{"docs":{},"满":{"docs":{},"足":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"（":{"1":{"docs":{},"）":{"docs":{},"的":{"docs":{},"要":{"docs":{},"求":{"docs":{},"呢":{"docs":{},"？":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"样":{"docs":{},"：":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}}}}}}},"现":{"docs":{},"在":{"docs":{},"好":{"docs":{},"了":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"已":{"docs":{},"经":{"docs":{},"知":{"docs":{},"道":{"docs":{},"了":{"docs":{},"如":{"docs":{},"何":{"docs":{},"找":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"我":{"docs":{},"们":{"docs":{},"如":{"docs":{},"何":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"两":{"docs":{},"个":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"呢":{"docs":{},"？":{"docs":{},"如":{"docs":{},"果":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"将":{"docs":{},"原":{"docs":{},"始":{"docs":{},"数":{"docs":{},"组":{"docs":{},"分":{"docs":{},"成":{"docs":{},"两":{"docs":{},"个":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"每":{"docs":{},"个":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"包":{"docs":{},"含":{"docs":{},"一":{"docs":{},"个":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"而":{"docs":{},"其":{"docs":{},"他":{"docs":{},"数":{"docs":{},"字":{"docs":{},"都":{"docs":{},"成":{"docs":{},"对":{"docs":{},"出":{"docs":{},"现":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"上":{"docs":{},"述":{"docs":{},"方":{"docs":{},"法":{"docs":{},"找":{"docs":{},"到":{"docs":{},"那":{"docs":{},"个":{"docs":{},"孤":{"docs":{},"苦":{"docs":{},"伶":{"docs":{},"仃":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"考":{"docs":{},"虑":{"docs":{},"网":{"docs":{},"格":{"docs":{},"中":{"docs":{},"有":{"docs":{},"障":{"docs":{},"碍":{"docs":{},"物":{"docs":{},"。":{"docs":{},"那":{"docs":{},"么":{"docs":{},"从":{"docs":{},"左":{"docs":{},"上":{"docs":{},"角":{"docs":{},"到":{"docs":{},"右":{"docs":{},"下":{"docs":{},"角":{"docs":{},"将":{"docs":{},"会":{"docs":{},"有":{"docs":{},"多":{"docs":{},"少":{"docs":{},"条":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"？":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"你":{"docs":{},"作":{"docs":{},"为":{"docs":{},"先":{"docs":{},"手":{"docs":{},"，":{"docs":{},"在":{"docs":{},"线":{"docs":{},"条":{"docs":{},"总":{"docs":{},"数":{"docs":{},"为":{"docs":{},"多":{"docs":{},"少":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"你":{"docs":{},"必":{"docs":{},"赢":{"docs":{},"呢":{"docs":{},"，":{"docs":{},"又":{"docs":{},"在":{"docs":{},"多":{"docs":{},"少":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"必":{"docs":{},"输":{"docs":{},"呢":{"docs":{},"？":{"docs":{"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"有":{"docs":{},"矩":{"docs":{},"阵":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}},"一":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}}}}},"将":{"docs":{},"序":{"docs":{},"列":{"docs":{},"等":{"docs":{},"分":{"docs":{},"为":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"份":{"docs":{},"，":{"docs":{},"则":{"docs":{},"最":{"docs":{},"大":{"docs":{},"子":{"docs":{},"列":{"docs":{},"只":{"docs":{},"可":{"docs":{},"能":{"docs":{},"出":{"docs":{},"现":{"docs":{},"在":{"docs":{},"三":{"docs":{},"个":{"docs":{},"地":{"docs":{},"方":{"docs":{},"：":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"题":{"docs":{},"目":{"docs":{"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}},"描":{"docs":{},"述":{"docs":{"数字运算/数组中只出现一次的数_两个.html":{"ref":"数字运算/数组中只出现一次的数_两个.html","tf":0.012987012987012988},"回溯/字符串全排列.html":{"ref":"回溯/字符串全排列.html","tf":0.047619047619047616},"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}}},"：":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}},"保":{"docs":{},"证":{"docs":{},"输":{"docs":{},"入":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"没":{"docs":{},"有":{"docs":{},"的":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"数":{"docs":{},"据":{"docs":{},"范":{"docs":{},"围":{"docs":{},"：":{"docs":{"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421}}}}}}}}}}}}}}}}}}}}}}}},"解":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}},"栈":{"docs":{"栈/":{"ref":"栈/","tf":10.083333333333334}},"中":{"docs":{},"运":{"docs":{},"算":{"docs":{},"符":{"docs":{},"逐":{"docs":{},"个":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"并":{"docs":{},"输":{"docs":{},"出":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"遇":{"docs":{},"到":{"docs":{},"开":{"docs":{},"括":{"docs":{},"号":{"docs":{},"'":{"docs":{},"(":{"docs":{},"'":{"docs":{},";":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}},"顶":{"docs":{},"为":{"docs":{},"'":{"docs":{},"(":{"docs":{},"'":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}},"元":{"docs":{},"素":{"docs":{},"出":{"docs":{},"栈":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}},"的":{"docs":{},"最":{"docs":{},"底":{"docs":{},"部":{"docs":{},"，":{"docs":{},"叫":{"docs":{},"做":{"docs":{},"栈":{"docs":{},"底":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}},",":{"0":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.018518518518518517}}},"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":0.029411764705882353},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.013888888888888888},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}},"最":{"docs":{},"后":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"也":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}}}},"返":{"docs":{},"回":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}}}}}}},"则":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},"最":{"docs":{},"小":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}},"docs":{}},"]":{"docs":{},"最":{"docs":{},"小":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}}}}}}}},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"左":{"docs":{},"边":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}}}}}},"x":{"docs":{},")":{"docs":{"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.013986013986013986}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"=":{"3":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}},"docs":{}}}}}}}}},"前":{"0":{"docs":{},"个":{"docs":{},"构":{"docs":{},"成":{"docs":{},"的":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"‘":{"docs":{},"’":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}}}}}}}}},"docs":{}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}},"。":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.018691588785046728},"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.024390243902439025},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.016853932584269662},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259},"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.019867549668874173},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609},"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}},"每":{"docs":{},"个":{"docs":{},"运":{"docs":{},"算":{"docs":{},"对":{"docs":{},"象":{"docs":{},"可":{"docs":{},"以":{"docs":{},"是":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"是":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"逆":{"docs":{},"波":{"docs":{},"兰":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"。":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}},"如":{"docs":{},"果":{"docs":{},"在":{"docs":{},"若":{"docs":{},"干":{"docs":{},"次":{"docs":{},"旋":{"docs":{},"转":{"docs":{},"操":{"docs":{},"作":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"a":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}}}}}}}}}}}},"你":{"docs":{},"忽":{"docs":{},"略":{"docs":{},"了":{"docs":{},"这":{"docs":{},"一":{"docs":{},"点":{"docs":{},"，":{"docs":{},"你":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"可":{"docs":{},"能":{"docs":{},"会":{"docs":{},"产":{"docs":{},"生":{"docs":{},"循":{"docs":{},"环":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"使":{"docs":{},"用":{"docs":{},"大":{"docs":{},"小":{"docs":{},"为":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"因":{"docs":{},"此":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}},"它":{"docs":{},"不":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"回":{"docs":{},"文":{"docs":{},"数":{"docs":{},"。":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.015625}}}}}}}}}}}}},"在":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"内":{"docs":{},"画":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}},"而":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}}},"计":{"docs":{},"算":{"docs":{},"这":{"docs":{},"个":{"docs":{},"岛":{"docs":{},"屿":{"docs":{},"的":{"docs":{},"周":{"docs":{},"长":{"docs":{},"。":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}}}}}}}}}},"中":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"转":{"docs":{},"换":{"docs":{},"成":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"和":{"docs":{},"中":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"转":{"docs":{},"换":{"docs":{},"成":{"docs":{},"后":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"十":{"docs":{},"分":{"docs":{},"类":{"docs":{},"似":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"将":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"方":{"docs":{},"向":{"docs":{},"由":{"docs":{},"前":{"docs":{},"往":{"docs":{},"后":{"docs":{},"变":{"docs":{},"成":{"docs":{},"由":{"docs":{},"后":{"docs":{},"往":{"docs":{},"前":{"docs":{},"，":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"是":{"docs":{},"不":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"。":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}}}}}}}},"三":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"它":{"docs":{},"们":{"docs":{},"的":{"docs":{},"和":{"docs":{},"与":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}}},"数":{"docs":{},"字":{"docs":{},"可":{"docs":{},"以":{"docs":{},"无":{"docs":{},"限":{"docs":{},"制":{"docs":{},"重":{"docs":{},"复":{"docs":{},"被":{"docs":{},"选":{"docs":{},"取":{"docs":{},"。":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}}}}}}}}}}}}},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"在":{"docs":{},"每":{"docs":{},"个":{"docs":{},"组":{"docs":{},"合":{"docs":{},"中":{"docs":{},"只":{"docs":{},"能":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"次":{"docs":{},"。":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}},"相":{"docs":{},"交":{"docs":{},"节":{"docs":{},"点":{"docs":{},"前":{"docs":{},"有":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.016194331983805668}}}}}}}}},"因":{"docs":{},"此":{"docs":{},"返":{"docs":{},"回":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}},"并":{"docs":{},"且":{"docs":{},"下":{"docs":{},"标":{"docs":{},"为":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}}},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"三":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}}}}}}}},"除":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}}},"间":{"docs":{},"是":{"docs":{},"我":{"docs":{},"选":{"docs":{},"定":{"docs":{},"扔":{"docs":{},"的":{"docs":{},"楼":{"docs":{},"层":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}},"所":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"的":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}},"以":{"docs":{},"使":{"docs":{},"数":{"docs":{},"字":{"docs":{},"和":{"docs":{},"为":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}}}}}}}},"搜":{"docs":{},"索":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"再":{"docs":{},"以":{"docs":{},"此":{"docs":{},"字":{"docs":{},"符":{"docs":{},"为":{"docs":{},"起":{"docs":{},"点":{"docs":{},"进":{"docs":{},"行":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}},"位":{"docs":{},"数":{"docs":{},"是":{"docs":{},"有":{"docs":{},"序":{"docs":{},"列":{"docs":{},"表":{"docs":{},"中":{"docs":{},"间":{"docs":{},"的":{"docs":{},"数":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"列":{"docs":{},"表":{"docs":{},"长":{"docs":{},"度":{"docs":{},"是":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"，":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},"则":{"docs":{},"是":{"docs":{},"中":{"docs":{},"间":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"的":{"docs":{},"平":{"docs":{},"均":{"docs":{},"值":{"docs":{},"。":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"人":{"docs":{},"类":{"docs":{},"最":{"docs":{},"熟":{"docs":{},"悉":{"docs":{},"的":{"docs":{},"一":{"docs":{},"种":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"1":{"docs":{},"+":{"2":{"docs":{},"，":{"docs":{},"(":{"1":{"docs":{},"+":{"2":{"docs":{},")":{"docs":{},"*":{"3":{"docs":{},"，":{"3":{"docs":{},"+":{"4":{"docs":{},"*":{"2":{"docs":{},"+":{"4":{"docs":{},"等":{"docs":{},"等":{"docs":{},"都":{"docs":{},"是":{"docs":{},"中":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"示":{"docs":{},"法":{"docs":{},"。":{"docs":{},"对":{"docs":{},"于":{"docs":{},"人":{"docs":{},"们":{"docs":{},"来":{"docs":{},"说":{"docs":{},"，":{"docs":{},"也":{"docs":{},"是":{"docs":{},"最":{"docs":{},"直":{"docs":{},"观":{"docs":{},"的":{"docs":{},"一":{"docs":{},"种":{"docs":{},"求":{"docs":{},"值":{"docs":{},"方":{"docs":{},"式":{"docs":{},"，":{"docs":{},"先":{"docs":{},"算":{"docs":{},"括":{"docs":{},"号":{"docs":{},"里":{"docs":{},"的":{"docs":{},"，":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}},"docs":{}}},"docs":{}}}},"docs":{}}},"docs":{}}}}}}}}}}}},"代":{"docs":{},"码":{"1":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}},"2":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746},"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}},"（":{"docs":{},"堆":{"docs":{},"排":{"docs":{},"序":{"docs":{},"）":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}}}},"大":{"docs":{},"神":{"docs":{},"版":{"docs":{},"）":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}}}},"(":{"docs":{},"理":{"docs":{},"解":{"docs":{},"版":{"docs":{},")":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}}}},"非":{"docs":{},"递":{"docs":{},"归":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}}}},"，":{"docs":{},"用":{"docs":{},"字":{"docs":{},"典":{"docs":{},"来":{"docs":{},"计":{"docs":{},"算":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}}}}},"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374},"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}},"表":{"docs":{},"可":{"docs":{},"以":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"零":{"docs":{},"个":{"docs":{},"或":{"docs":{},"多":{"docs":{},"个":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"那":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},",":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}}}}},"出":{"docs":{},"栈":{"docs":{},"至":{"docs":{},"输":{"docs":{},"出":{"docs":{},"串":{"docs":{},"中":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}},"现":{"docs":{},"在":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}},"次":{"docs":{},"数":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762}},"超":{"docs":{},"过":{"docs":{},"一":{"docs":{},"半":{"docs":{},"的":{"docs":{},"数":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}},"数":{"docs":{},"组":{"1":{"docs":{},"/":{"3":{"docs":{},"长":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}},"docs":{}}},"docs":{}}}}}}}},"于":{"docs":{},"对":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"分":{"docs":{},"析":{"docs":{},"的":{"docs":{},"目":{"docs":{},"的":{"docs":{},"，":{"docs":{},"输":{"docs":{},"出":{"docs":{},"数":{"docs":{},"组":{"docs":{},"不":{"docs":{},"被":{"docs":{},"视":{"docs":{},"为":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"。":{"docs":{},"）":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"则":{"docs":{},"中":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"得":{"docs":{},"名":{"docs":{},"于":{"docs":{},"它":{"docs":{},"是":{"docs":{},"由":{"docs":{},"相":{"docs":{},"应":{"docs":{},"的":{"docs":{},"语":{"docs":{},"法":{"docs":{},"树":{"docs":{},"的":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"。":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"位":{"docs":{},"数":{"docs":{},"是":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.010638297872340425}}}}}},"是":{"docs":{},"抛":{"docs":{},"出":{"docs":{},"异":{"docs":{},"常":{"docs":{},"。":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}},"f":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"找":{"docs":{},"不":{"docs":{},"到":{"docs":{},"了":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}},"说":{"docs":{},"明":{"docs":{},"q":{"docs":{},",":{"docs":{},"p":{"docs":{},"都":{"docs":{},"在":{"docs":{},"左":{"docs":{},"边":{"docs":{},"，":{"docs":{},"反":{"docs":{},"之":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}}}}}}}}}}}}}},"当":{"docs":{},"前":{"docs":{},"为":{"docs":{},"*":{"docs":{},"时":{"docs":{},",":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}},"d":{"docs":{},"p":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}},"不":{"docs":{},"交":{"docs":{},"换":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}},"后":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}},"又":{"docs":{},"叫":{"docs":{},"做":{"docs":{},"逆":{"docs":{},"波":{"docs":{},"兰":{"docs":{},"式":{"docs":{},"。":{"docs":{},"它":{"docs":{},"是":{"docs":{},"由":{"docs":{},"相":{"docs":{},"应":{"docs":{},"的":{"docs":{},"语":{"docs":{},"法":{"docs":{},"树":{"docs":{},"的":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"。":{"docs":{},"如":{"docs":{},"上":{"docs":{},"图":{"docs":{},"的":{"docs":{},"后":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"为":{"docs":{},"：":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"继":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}},"，":{"docs":{},"下":{"docs":{},"面":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{},"就":{"docs":{},"不":{"docs":{},"执":{"docs":{},"行":{"docs":{},"了":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}}}}}}}}},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}},"为":{"docs":{},"切":{"docs":{},"入":{"docs":{},"点":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}}}}}},"在":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}},"介":{"docs":{},"绍":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"，":{"docs":{},"后":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"之":{"docs":{},"前":{"docs":{},"，":{"docs":{},"我":{"docs":{},"想":{"docs":{},"先":{"docs":{},"通":{"docs":{},"过":{"docs":{},"我":{"docs":{},"们":{"docs":{},"最":{"docs":{},"熟":{"docs":{},"悉":{"docs":{},"的":{"docs":{},"中":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"画":{"docs":{},"出":{"docs":{},"一":{"docs":{},"棵":{"docs":{},"语":{"docs":{},"法":{"docs":{},"树":{"docs":{},"来":{"docs":{},"直":{"docs":{},"观":{"docs":{},"认":{"docs":{},"识":{"docs":{},"前":{"docs":{},"后":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"。":{"docs":{},"以":{"docs":{},"a":{"docs":{},"+":{"docs":{},"b":{"docs":{},"(":{"docs":{},"c":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"未":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"第":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}}}}}}}}}},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333}}}}}}}},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"能":{"docs":{},"容":{"docs":{},"下":{"docs":{},"的":{"docs":{},"雨":{"docs":{},"水":{"docs":{},"量":{"docs":{},"等":{"docs":{},"于":{"docs":{},"它":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"(":{"docs":{},"并":{"docs":{},"不":{"docs":{},"要":{"docs":{},"求":{"docs":{},"最":{"docs":{},"近":{"docs":{},"的":{"docs":{},"最":{"docs":{},"高":{"docs":{},")":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"最":{"docs":{},"大":{"docs":{},"高":{"docs":{},"度":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"减":{"docs":{},"去":{"docs":{},"它":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},".":{"docs":{},"比":{"docs":{},"如":{"docs":{},"下":{"docs":{},"图":{"docs":{},"所":{"docs":{},"示":{"docs":{},",":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"(":{"0":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}},"docs":{}}}}},"由":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}},"这":{"docs":{},"进":{"docs":{},"行":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"结":{"docs":{},"果":{"docs":{},"更":{"docs":{},"新":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}},"给":{"docs":{},"其":{"docs":{},"他":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"赋":{"docs":{},"值":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}},"里":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"就":{"docs":{},"是":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},",":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}}},"原":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"上":{"docs":{},"进":{"docs":{},"行":{"docs":{},"查":{"docs":{},"找":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}}}}}}}},"节":{"docs":{},"点":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}},"返":{"docs":{},"回":{"docs":{},"结":{"docs":{},"果":{"docs":{},"后":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"仍":{"docs":{},"须":{"docs":{},"保":{"docs":{},"持":{"docs":{},"原":{"docs":{},"有":{"docs":{},"的":{"docs":{},"结":{"docs":{},"构":{"docs":{},"。":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}}}}}},"遍":{"docs":{},"历":{"docs":{},"列":{"docs":{},"表":{"docs":{},"时":{"docs":{},"，":{"docs":{},"将":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"中":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.02}}}}}}}},"序":{"docs":{},"列":{"docs":{},"中":{"docs":{},"找":{"docs":{},"出":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}}}}}},"左":{"docs":{},"边":{"docs":{},"和":{"docs":{},"上":{"docs":{},"边":{"docs":{},"各":{"docs":{},"加":{"docs":{},"一":{"docs":{},"条":{"docs":{},"边":{"docs":{},"界":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.007575757575757576}},"（":{"docs":{},"简":{"docs":{},"写":{"docs":{},"）":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}}}}}}}}}}}}},"上":{"docs":{},"一":{"docs":{},"个":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"上":{"docs":{},"进":{"docs":{},"行":{"docs":{},"优":{"docs":{},"化":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}}}}},"图":{"docs":{},"中":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"到":{"docs":{},"以":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}}}}}},"第":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.013245033112582781}}},"倒":{"docs":{},"叙":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"前":{"docs":{},"一":{"docs":{},"位":{"docs":{},"比":{"docs":{},"后":{"docs":{},"一":{"docs":{},"位":{"docs":{},"高":{"docs":{},"分":{"docs":{},"并":{"docs":{},"且":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"糖":{"docs":{},"果":{"docs":{},"小":{"docs":{},"于":{"docs":{},"或":{"docs":{},"等":{"docs":{},"于":{"docs":{},"后":{"docs":{},"一":{"docs":{},"位":{"docs":{},"，":{"docs":{},"就":{"docs":{},"给":{"docs":{},"前":{"docs":{},"一":{"docs":{},"位":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"比":{"docs":{},"后":{"docs":{},"一":{"docs":{},"位":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"多":{"docs":{},"一":{"docs":{},"个":{"docs":{},"糖":{"docs":{},"果":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"前":{"docs":{},"面":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"大":{"docs":{},"于":{"docs":{},"后":{"docs":{},"面":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"则":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"组":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"逆":{"docs":{},"序":{"docs":{},"对":{"docs":{},"。":{"docs":{},"输":{"docs":{},"入":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},",":{"docs":{},"求":{"docs":{},"出":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"逆":{"docs":{},"序":{"docs":{},"对":{"docs":{},"的":{"docs":{},"总":{"docs":{},"数":{"docs":{},"p":{"docs":{},"。":{"docs":{},"并":{"docs":{},"将":{"docs":{},"p":{"docs":{},"对":{"1":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"7":{"docs":{},"取":{"docs":{},"模":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"输":{"docs":{},"出":{"docs":{},"。":{"docs":{"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"找":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"合":{"docs":{},"法":{"docs":{},"节":{"docs":{},"点":{"docs":{},"后":{"docs":{},"需":{"docs":{},"要":{"docs":{},"去":{"docs":{},"探":{"docs":{},"知":{"docs":{},"其":{"docs":{},"附":{"docs":{},"近":{"docs":{},"的":{"docs":{},"合":{"docs":{},"法":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"这":{"docs":{},"一":{"docs":{},"个":{"docs":{},"区":{"docs":{},"域":{"docs":{},"内":{"docs":{},"符":{"docs":{},"合":{"docs":{},"合":{"docs":{},"法":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"都":{"docs":{},"被":{"docs":{},"找":{"docs":{},"到":{"docs":{},"。":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"将":{"docs":{},"'":{"docs":{},"(":{"docs":{},"'":{"docs":{},"改":{"docs":{},"为":{"docs":{},"'":{"docs":{},")":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},")":{"docs":{},"'":{"docs":{},"改":{"docs":{},"为":{"docs":{},"'":{"docs":{},"(":{"docs":{},"'":{"docs":{},",":{"docs":{},"注":{"docs":{},"意":{"docs":{},"其":{"docs":{},"中":{"docs":{},"一":{"docs":{},"个":{"docs":{},"判":{"docs":{},"断":{"docs":{},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"需":{"docs":{},"要":{"docs":{},"由":{"docs":{},">":{"docs":{},"=":{"docs":{},"变":{"docs":{},"成":{"docs":{},">":{"docs":{},".":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"压":{"docs":{},"栈":{"docs":{},";":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349}}}}},"添":{"docs":{},"加":{"docs":{},"到":{"docs":{},"输":{"docs":{},"出":{"docs":{},"串":{"docs":{},"中":{"docs":{},";":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}},"奇":{"docs":{},"数":{"docs":{},"放":{"docs":{},"在":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"的":{"docs":{},"前":{"docs":{},"面":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":10.014925373134329}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"放":{"docs":{},"到":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"的":{"docs":{},"前":{"docs":{},"面":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358}}}}}}}}}}}},"中":{"docs":{},"的":{"docs":{},"值":{"docs":{},"替":{"docs":{},"换":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}},"在":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}},"它":{"docs":{},"们":{"docs":{},"合":{"docs":{},"并":{"docs":{},"为":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}}}},"两":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"链":{"docs":{},"表":{"docs":{},"合":{"docs":{},"并":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"的":{"docs":{},"有":{"docs":{},"序":{"docs":{},"链":{"docs":{},"表":{"docs":{},"并":{"docs":{},"返":{"docs":{},"回":{"docs":{},"。":{"docs":{},"新":{"docs":{},"链":{"docs":{},"表":{"docs":{},"是":{"docs":{},"通":{"docs":{},"过":{"docs":{},"拼":{"docs":{},"接":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"组":{"docs":{},"成":{"docs":{},"的":{"docs":{},"。":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"翻":{"docs":{},"转":{"docs":{},"部":{"docs":{},"分":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}},"一":{"docs":{},"个":{"docs":{},"按":{"docs":{},"照":{"docs":{},"升":{"docs":{},"序":{"docs":{},"排":{"docs":{},"列":{"docs":{},"的":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"转":{"docs":{},"换":{"docs":{},"为":{"docs":{},"一":{"docs":{},"棵":{"docs":{},"高":{"docs":{},"度":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"。":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"转":{"docs":{},"换":{"docs":{},"为":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"]":{"docs":{},"(":{"docs":{},"h":{"docs":{},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":5}}}}}}}}}}}}}}}}}}}}}},"其":{"docs":{},"展":{"docs":{},"开":{"docs":{},"为":{"docs":{},"：":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}}}}}}},"计":{"docs":{},"算":{"docs":{},"好":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"赋":{"docs":{},"给":{"docs":{},"上":{"docs":{},"一":{"docs":{},"行":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"添":{"docs":{},"加":{"docs":{},"入":{"docs":{},"d":{"docs":{},"p":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}},"排":{"docs":{},"序":{"docs":{},"好":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"拼":{"docs":{},"接":{"docs":{},"成":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}}}}}}},"所":{"docs":{},"有":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"节":{"docs":{},"点":{"docs":{},"加":{"docs":{},"入":{"docs":{},"队":{"docs":{},"列":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}}}}}}},"或":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.006349206349206349},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}},"者":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}},"扫":{"docs":{},"描":{"docs":{},"到":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{},"比":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},"高":{"docs":{},")":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"并":{"docs":{},"加":{"docs":{},"到":{"docs":{},"输":{"docs":{},"出":{"docs":{},"串":{"docs":{},"中":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}},"既":{"docs":{},"然":{"docs":{},"中":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"对":{"docs":{},"于":{"docs":{},"计":{"docs":{},"算":{"docs":{},"机":{"docs":{},"的":{"docs":{},"运":{"docs":{},"算":{"docs":{},"并":{"docs":{},"不":{"docs":{},"便":{"docs":{},"利":{"docs":{},"，":{"docs":{},"而":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"后":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"的":{"docs":{},"计":{"docs":{},"算":{"docs":{},"相":{"docs":{},"对":{"docs":{},"简":{"docs":{},"单":{"docs":{},"方":{"docs":{},"便":{"docs":{},"。":{"docs":{},"因":{"docs":{},"此":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"一":{"docs":{},"种":{"docs":{},"途":{"docs":{},"径":{"docs":{},"将":{"docs":{},"中":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"则":{"docs":{},"数":{"docs":{},"组":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"值":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"而":{"docs":{},"从":{"docs":{},"左":{"docs":{},"到":{"docs":{},"右":{"docs":{},"，":{"docs":{},"剩":{"docs":{},"下":{"docs":{},"数":{"docs":{},"组":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"左":{"docs":{},"侧":{"docs":{},"值":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"小":{"docs":{},"于":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"值":{"docs":{},"，":{"docs":{},"而":{"docs":{},"其":{"docs":{},"余":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"元":{"docs":{},"素":{"docs":{},"则":{"docs":{},"大":{"docs":{},"于":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"例":{"docs":{},"如":{"docs":{},"[":{"5":{"docs":{},",":{"7":{"docs":{},",":{"6":{"docs":{},",":{"9":{"docs":{},",":{"1":{"1":{"docs":{},",":{"1":{"0":{"docs":{},",":{"8":{"docs":{},"]":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"8":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"而":{"docs":{},"从":{"docs":{},"数":{"docs":{},"组":{"docs":{},"左":{"docs":{},"侧":{"docs":{},"到":{"5":{"docs":{},"~":{"6":{"docs":{},"三":{"docs":{},"个":{"docs":{},"数":{"docs":{},"比":{"8":{"docs":{},"小":{"docs":{},"，":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"而":{"docs":{},"剩":{"docs":{},"下":{"docs":{},"的":{"9":{"docs":{},"~":{"1":{"0":{"docs":{},"应":{"docs":{},"该":{"docs":{},"就":{"docs":{},"是":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"应":{"docs":{},"该":{"docs":{},"满":{"docs":{},"足":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"都":{"docs":{},"比":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"大":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"满":{"docs":{},"足":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"再":{"docs":{},"把":{"docs":{},"[":{"5":{"docs":{},",":{"7":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},"和":{"docs":{},"[":{"9":{"docs":{},",":{"1":{"1":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{},"两":{"docs":{},"个":{"docs":{},"部":{"docs":{},"分":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"元":{"docs":{},"素":{"docs":{},"重":{"docs":{},"复":{"docs":{},"进":{"docs":{},"行":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"知":{"docs":{},"道":{"docs":{},"结":{"docs":{},"束":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{}}}}}}}}}}}}}}},"docs":{}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"有":{"docs":{},"效":{"docs":{},"的":{"docs":{},"运":{"docs":{},"算":{"docs":{},"符":{"docs":{},"包":{"docs":{},"括":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}},"括":{"docs":{},"号":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"2":{"0":{"docs":{},")":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"2":{"0":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"需":{"docs":{},"满":{"docs":{},"足":{"docs":{},"：":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}}}}}}},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"平":{"docs":{},"方":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"9":{"7":{"7":{"docs":{},")":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"9":{"7":{"7":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}},"矩":{"docs":{},"阵":{"docs":{},"中":{"docs":{},"第":{"docs":{},"k":{"docs":{},"小":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":10.01123595505618},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"3":{"7":{"8":{"docs":{"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}},"足":{"docs":{},"够":{"docs":{},"的":{"docs":{},"空":{"docs":{},"间":{"docs":{},"（":{"docs":{},"空":{"docs":{},"间":{"docs":{},"大":{"docs":{},"小":{"docs":{},"大":{"docs":{},"于":{"docs":{},"或":{"docs":{},"等":{"docs":{},"于":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}},"一":{"docs":{},"群":{"docs":{},"牛":{"docs":{},"站":{"docs":{},"成":{"docs":{},"一":{"docs":{},"排":{"docs":{},"，":{"docs":{},"每":{"docs":{},"头":{"docs":{},"牛":{"docs":{},"都":{"docs":{},"是":{"docs":{},"面":{"docs":{},"朝":{"docs":{},"右":{"docs":{},"的":{"docs":{},"，":{"docs":{},"每":{"docs":{},"头":{"docs":{},"牛":{"docs":{},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"到":{"docs":{},"他":{"docs":{},"右":{"docs":{},"边":{"docs":{},"身":{"docs":{},"高":{"docs":{},"比":{"docs":{},"他":{"docs":{},"小":{"docs":{},"的":{"docs":{},"牛":{"docs":{},"。":{"docs":{},"给":{"docs":{},"出":{"docs":{},"每":{"docs":{},"头":{"docs":{},"牛":{"docs":{},"的":{"docs":{},"身":{"docs":{},"高":{"docs":{},"，":{"docs":{},"要":{"docs":{},"求":{"docs":{},"每":{"docs":{},"头":{"docs":{},"牛":{"docs":{},"能":{"docs":{},"看":{"docs":{},"到":{"docs":{},"的":{"docs":{},"牛":{"docs":{},"的":{"docs":{},"总":{"docs":{},"数":{"docs":{},"。":{"docs":{"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"了":{"docs":{},"差":{"docs":{},"异":{"docs":{},"，":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}},"毛":{"docs":{},"病":{"docs":{},"吧":{"docs":{},"，":{"docs":{},"不":{"docs":{},"带":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}},"两":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"一":{"docs":{},"是":{"docs":{},"要":{"docs":{},"找":{"docs":{},"的":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"（":{"docs":{},"a":{"docs":{},",":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}}}}}}}}}}}}}}},"方":{"docs":{},"法":{"docs":{},"可":{"docs":{},"以":{"docs":{},"爬":{"docs":{},"到":{"docs":{},"楼":{"docs":{},"顶":{"docs":{},"。":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}}}}}}}}}}}},"个":{"docs":{},"最":{"docs":{},"长":{"docs":{},"递":{"docs":{},"增":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"是":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}}}}}}}}}}}}}}},"最":{"docs":{},"大":{"docs":{},"乘":{"docs":{},"积":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}}},"三":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"可":{"docs":{},"以":{"docs":{},"爬":{"docs":{},"到":{"docs":{},"楼":{"docs":{},"顶":{"docs":{},"。":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}}}}}}}}}}}}}},"根":{"docs":{},"据":{"docs":{},"逆":{"docs":{},"波":{"docs":{},"兰":{"docs":{},"表":{"docs":{},"示":{"docs":{},"法":{"docs":{},"，":{"docs":{},"求":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}},"一":{"docs":{},"棵":{"docs":{},"树":{"docs":{},"的":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"与":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"构":{"docs":{},"造":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"。":{"docs":{"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}},"递":{"docs":{},"推":{"docs":{},"公":{"docs":{},"式":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}},"匹":{"docs":{},"配":{"docs":{},"规":{"docs":{},"则":{"docs":{},"，":{"docs":{},"比":{"docs":{},"较":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"串":{"docs":{},"*":{"docs":{},"的":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}}}},"每":{"docs":{},"次":{"docs":{},"取":{"docs":{},"出":{"docs":{},"来":{"docs":{},"的":{"docs":{},"都":{"docs":{},"是":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"运":{"docs":{},"算":{"docs":{},"符":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}},"迭":{"docs":{},"代":{"docs":{},"中":{"docs":{},"，":{"docs":{},"插":{"docs":{},"入":{"docs":{},"排":{"docs":{},"序":{"docs":{},"只":{"docs":{},"从":{"docs":{},"输":{"docs":{},"入":{"docs":{},"数":{"docs":{},"据":{"docs":{},"中":{"docs":{},"移":{"docs":{},"除":{"docs":{},"一":{"docs":{},"个":{"docs":{},"待":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"它":{"docs":{},"在":{"docs":{},"序":{"docs":{},"列":{"docs":{},"中":{"docs":{},"适":{"docs":{},"当":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"并":{"docs":{},"将":{"docs":{},"其":{"docs":{},"插":{"docs":{},"入":{"docs":{},"。":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"时":{"docs":{},"，":{"docs":{},"从":{"docs":{},"输":{"docs":{},"入":{"docs":{},"数":{"docs":{},"据":{"docs":{},"中":{"docs":{},"移":{"docs":{},"除":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"（":{"docs":{},"用":{"docs":{},"红":{"docs":{},"色":{"docs":{},"表":{"docs":{},"示":{"docs":{},"）":{"docs":{},"，":{"docs":{},"并":{"docs":{},"原":{"docs":{},"地":{"docs":{},"将":{"docs":{},"其":{"docs":{},"插":{"docs":{},"入":{"docs":{},"到":{"docs":{},"已":{"docs":{},"排":{"docs":{},"好":{"docs":{},"序":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"。":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"移":{"docs":{},"动":{"docs":{},"，":{"docs":{},"你":{"docs":{},"可":{"docs":{},"以":{"docs":{},"取":{"docs":{},"一":{"docs":{},"个":{"docs":{},"鸡":{"docs":{},"蛋":{"docs":{},"（":{"docs":{},"如":{"docs":{},"果":{"docs":{},"你":{"docs":{},"有":{"docs":{},"完":{"docs":{},"整":{"docs":{},"的":{"docs":{},"鸡":{"docs":{},"蛋":{"docs":{},"）":{"docs":{},"并":{"docs":{},"把":{"docs":{},"它":{"docs":{},"从":{"docs":{},"任":{"docs":{},"一":{"docs":{},"楼":{"docs":{},"层":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"你":{"docs":{},"可":{"docs":{},"以":{"docs":{},"爬":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}}}}}},"都":{"docs":{},"插":{"docs":{},"入":{"docs":{},"到":{"docs":{},"最":{"docs":{},"小":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"，":{"docs":{},"将":{"docs":{},"最":{"docs":{},"小":{"docs":{},"堆":{"docs":{},"里":{"docs":{},"面":{"docs":{},"的":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}}}}}}}}}},"插":{"docs":{},"入":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"后":{"docs":{},"，":{"docs":{},"就":{"docs":{},"把":{"docs":{},"堆":{"docs":{},"里":{"docs":{},"面":{"docs":{},"的":{"docs":{},"大":{"docs":{},"元":{"docs":{},"素":{"docs":{},"丢":{"docs":{},"出":{"docs":{},"去":{"docs":{},"，":{"docs":{},"因":{"docs":{},"此":{"docs":{},"堆":{"docs":{},"里":{"docs":{},"面":{"docs":{},"剩":{"docs":{},"下":{"docs":{},"的":{"docs":{},"都":{"docs":{},"是":{"docs":{},"小":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"维":{"docs":{},"护":{"docs":{},"堆":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"为":{"docs":{},"k":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"弹":{"docs":{},"出":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"就":{"docs":{},"计":{"docs":{},"算":{"docs":{},"比":{"docs":{},"当":{"docs":{},"前":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"元":{"docs":{},"素":{"docs":{},"小":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"有":{"docs":{},"多":{"docs":{},"少":{"docs":{},"个":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}}}}}}}}},"行":{"docs":{},"中":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"从":{"docs":{},"左":{"docs":{},"到":{"docs":{},"右":{"docs":{},"按":{"docs":{},"升":{"docs":{},"序":{"docs":{},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}}}}}}}}}}}}}},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"大":{"docs":{},"于":{"docs":{},"前":{"docs":{},"一":{"docs":{},"行":{"docs":{},"的":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"。":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}}}}},"元":{"docs":{},"素":{"docs":{},"从":{"docs":{},"左":{"docs":{},"到":{"docs":{},"右":{"docs":{},"升":{"docs":{},"序":{"docs":{},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}}}}}}}}}}},"列":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"从":{"docs":{},"上":{"docs":{},"到":{"docs":{},"下":{"docs":{},"升":{"docs":{},"序":{"docs":{},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}}}}}}}}}}},"层":{"docs":{},"节":{"docs":{},"点":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}}},"个":{"docs":{},"蛋":{"docs":{},"的":{"docs":{},"功":{"docs":{},"能":{"docs":{},"都":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"一":{"docs":{},"个":{"docs":{},"蛋":{"docs":{},"碎":{"docs":{},"了":{"docs":{},"，":{"docs":{},"你":{"docs":{},"就":{"docs":{},"不":{"docs":{},"能":{"docs":{},"再":{"docs":{},"把":{"docs":{},"它":{"docs":{},"掉":{"docs":{},"下":{"docs":{},"去":{"docs":{},"。":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"孩":{"docs":{},"子":{"docs":{},"至":{"docs":{},"少":{"docs":{},"分":{"docs":{},"配":{"docs":{},"到":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}}}}}}}},"值":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}}},"人":{"docs":{},"每":{"docs":{},"步":{"docs":{},"最":{"docs":{},"多":{"docs":{},"划":{"docs":{},"三":{"docs":{},"条":{"docs":{},"线":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"线":{"docs":{},"的":{"docs":{},"总":{"docs":{},"是":{"docs":{},"至":{"docs":{},"少":{"docs":{},"为":{"4":{"docs":{},"条":{"docs":{},"。":{"docs":{},"当":{"docs":{},"线":{"docs":{},"的":{"docs":{},"总":{"docs":{},"数":{"docs":{},"为":{"4":{"docs":{},"条":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"不":{"docs":{},"管":{"docs":{},"先":{"docs":{},"手":{"docs":{},"划":{"docs":{},"几":{"docs":{},"条":{"docs":{},"线":{"docs":{},"，":{"docs":{},"后":{"docs":{},"手":{"docs":{},"都":{"docs":{},"有":{"docs":{},"应":{"docs":{},"对":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"先":{"docs":{},"手":{"docs":{},"必":{"docs":{},"输":{"docs":{},"。":{"docs":{"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"波":{"docs":{},"兰":{"docs":{},"式":{"docs":{},"、":{"docs":{},"逆":{"docs":{},"波":{"docs":{},"兰":{"docs":{},"式":{"docs":{},"与":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"求":{"docs":{},"值":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}},"然":{"docs":{},"后":{"docs":{},"算":{"docs":{},"乘":{"docs":{},"除":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"算":{"docs":{},"加":{"docs":{},"减":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"，":{"docs":{},"计":{"docs":{},"算":{"docs":{},"机":{"docs":{},"处":{"docs":{},"理":{"docs":{},"中":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"却":{"docs":{},"并":{"docs":{},"不":{"docs":{},"方":{"docs":{},"便":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"没":{"docs":{},"有":{"docs":{},"一":{"docs":{},"种":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"可":{"docs":{},"以":{"docs":{},"方":{"docs":{},"便":{"docs":{},"从":{"docs":{},"一":{"docs":{},"个":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"中":{"docs":{},"间":{"docs":{},"抽":{"docs":{},"出":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}}}},"取":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"3":{"docs":{},"个":{"docs":{},"数":{"docs":{},"相":{"docs":{},"乘":{"docs":{},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"（":{"docs":{},"负":{"docs":{},"数":{"docs":{},"）":{"docs":{},"和":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"相":{"docs":{},"乘":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}},"每":{"docs":{},"次":{"docs":{},"进":{"docs":{},"行":{"docs":{},"四":{"docs":{},"遍":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}}}}},"判":{"docs":{},"断":{"docs":{},"这":{"docs":{},"个":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}},"同":{"docs":{},"时":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"返":{"docs":{},"回":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"公":{"docs":{},"共":{"docs":{},"节":{"docs":{},"点":{"docs":{},".":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}}}}}},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"观":{"docs":{},"察":{"docs":{},"可":{"docs":{},"以":{"docs":{},"发":{"docs":{},"现":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"，":{"docs":{},"数":{"docs":{},"据":{"docs":{},"总":{"docs":{},"数":{"docs":{},"是":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"大":{"docs":{},"顶":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"和":{"docs":{},"小":{"docs":{},"顶":{"docs":{},"堆":{"docs":{},"，":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"由":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"求":{"docs":{},"出":{"docs":{},"结":{"docs":{},"果":{"docs":{},"十":{"docs":{},"分":{"docs":{},"方":{"docs":{},"便":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"实":{"docs":{},"现":{"docs":{},"：":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}},"有":{"docs":{},"下":{"docs":{},"面":{"docs":{},"两":{"docs":{},"种":{"docs":{},"思":{"docs":{},"路":{"docs":{},"：":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}},"于":{"docs":{},"返":{"docs":{},"回":{"docs":{},"类":{"docs":{},"型":{"docs":{},"是":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"小":{"docs":{},"数":{"docs":{},"部":{"docs":{},"分":{"docs":{},"将":{"docs":{},"被":{"docs":{},"舍":{"docs":{},"去":{"docs":{},"。":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}}}}}}}},"结":{"docs":{},"果":{"docs":{},"只":{"docs":{},"保":{"docs":{},"留":{"docs":{},"整":{"docs":{},"数":{"docs":{},"的":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"小":{"docs":{},"数":{"docs":{},"部":{"docs":{},"分":{"docs":{},"将":{"docs":{},"被":{"docs":{},"舍":{"docs":{},"去":{"docs":{},"。":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"该":{"docs":{},"列":{"docs":{},"表":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"中":{"docs":{},"间":{"docs":{},"结":{"docs":{},"点":{"docs":{},"，":{"docs":{},"值":{"docs":{},"分":{"docs":{},"别":{"docs":{},"为":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}},"不":{"docs":{},"可":{"docs":{},"以":{"docs":{},"在":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"的":{"docs":{},"房":{"docs":{},"屋":{"docs":{},"闯":{"docs":{},"入":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"在":{"docs":{},"当":{"docs":{},"前":{"docs":{},"位":{"docs":{},"置":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}},"有":{"docs":{},"正":{"docs":{},"负":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"每":{"docs":{},"次":{"docs":{},"相":{"docs":{},"乘":{"docs":{},"完":{"docs":{},"毕":{"docs":{},"后":{"docs":{},"，":{"docs":{},"应":{"docs":{},"该":{"docs":{},"保":{"docs":{},"留":{"docs":{},"最":{"docs":{},"大":{"docs":{},"和":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"最":{"docs":{},"大":{"docs":{},"正":{"docs":{},"数":{"docs":{},"，":{"docs":{},"最":{"docs":{},"小":{"docs":{},"负":{"docs":{},"数":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"岛":{"docs":{},"屿":{"docs":{},"内":{"docs":{},"没":{"docs":{},"有":{"docs":{},"湖":{"docs":{},",":{"docs":{},"所":{"docs":{},"以":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"求":{"docs":{},"出":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}},"函":{"docs":{},"数":{"docs":{},"f":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},"=":{"docs":{},"x":{"docs":{},"^":{"2":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"docs":{}}}}}}}}}},"定":{"docs":{},"义":{"docs":{},"知":{"docs":{},"d":{"docs":{},"p":{"docs":{},"数":{"docs":{},"组":{"docs":{},"必":{"docs":{},"然":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"递":{"docs":{},"增":{"docs":{},"数":{"docs":{},"组":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}}},"算":{"docs":{},"法":{"docs":{},"：":{"docs":{},"中":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"转":{"docs":{},"换":{"docs":{},"成":{"docs":{},"后":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}},"继":{"docs":{},"续":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"到":{"docs":{},"b":{"docs":{},"c":{"docs":{},"'":{"docs":{},",":{"docs":{},"计":{"docs":{},"算":{"docs":{},"b":{"docs":{},"c":{"docs":{},"'":{"docs":{},"=":{"docs":{},"b":{"docs":{},"'":{"docs":{},",":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"变":{"docs":{},"成":{"docs":{},":":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}},"起":{"docs":{},"来":{"docs":{},"就":{"docs":{},"像":{"docs":{},"一":{"docs":{},"对":{"docs":{},"逆":{"docs":{},"过":{"docs":{},"程":{"docs":{},"，":{"docs":{},"实":{"docs":{},"际":{"docs":{},"上":{"docs":{},"并":{"docs":{},"不":{"docs":{},"是":{"docs":{},"这":{"docs":{},"样":{"docs":{},"子":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"字":{"docs":{},"符":{"docs":{},"读":{"docs":{},"取":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"都":{"docs":{},"是":{"docs":{},"从":{"docs":{},"左":{"docs":{},"往":{"docs":{},"右":{"docs":{},"的":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"，":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"往":{"docs":{},"往":{"docs":{},"需":{"docs":{},"要":{"docs":{},"用":{"docs":{},"两":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"来":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"始":{"docs":{},"点":{"docs":{},"颠":{"docs":{},"倒":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374}}}}}}},"进":{"docs":{},"行":{"docs":{},"相":{"docs":{},"应":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"并":{"docs":{},"将":{"docs":{},"结":{"docs":{},"果":{"docs":{},"压":{"docs":{},"进":{"docs":{},"s":{"2":{"docs":{},"(":{"docs":{},"s":{"2":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"出":{"2":{"docs":{},"个":{"docs":{},"进":{"1":{"docs":{},"个":{"docs":{},")":{"docs":{},",":{"docs":{},"当":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"结":{"docs":{},"束":{"docs":{},"后":{"docs":{},"，":{"docs":{},"s":{"2":{"docs":{},"的":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"就":{"docs":{},"是":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"后":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"和":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"看":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}},"奇":{"docs":{},"数":{"docs":{},"、":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"划":{"docs":{},"分":{"docs":{"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333}}}}}}}}},"一":{"docs":{},"次":{"docs":{},"分":{"docs":{},"割":{"docs":{},"就":{"docs":{},"可":{"docs":{},"将":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}}}}}}}},"阶":{"docs":{},"：":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516},"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044},"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715},"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428}}},":":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}},"逆":{"docs":{},"波":{"docs":{},"兰":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":10.003174603174603}},"求":{"docs":{},"值":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}},"序":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}},"对":{"docs":{},"个":{"docs":{},"数":{"docs":{"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":10}}}}}}},"里":{"docs":{},"加":{"docs":{},"上":{"docs":{},"了":{"docs":{},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{},"这":{"docs":{},"一":{"docs":{},"限":{"docs":{},"制":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"转":{"docs":{},"换":{"docs":{},"就":{"docs":{},"变":{"docs":{},"得":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"了":{"docs":{},"。":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}}}}}}}},"重":{"docs":{},"复":{"docs":{},"此":{"docs":{},"步":{"docs":{},"骤":{"docs":{},"，":{"docs":{},"直":{"docs":{},"至":{"docs":{},"所":{"docs":{},"有":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},"处":{"docs":{},"理":{"docs":{},"完":{"docs":{},"毕":{"docs":{},"。":{"docs":{},"如":{"docs":{"栈/逆波兰表达式.html":{"ref":"栈/逆波兰表达式.html","tf":0.0031746031746031746}}}}}}}}}}}}}}}}}}},"直":{"docs":{},"到":{"docs":{},"所":{"docs":{},"有":{"docs":{},"输":{"docs":{},"入":{"docs":{},"数":{"docs":{},"据":{"docs":{},"插":{"docs":{},"入":{"docs":{},"完":{"docs":{},"为":{"docs":{},"止":{"docs":{},"。":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}}}}}}}}}}}}}}}},"了":{"docs":{},"一":{"docs":{},"次":{"docs":{},"。":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}},"叠":{"docs":{},",":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}},"优":{"docs":{},"化":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761},"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}},"秀":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}},"先":{"docs":{},"队":{"docs":{},"列":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}},"（":{"docs":{},"一":{"docs":{},"次":{"docs":{},"性":{"docs":{},"加":{"docs":{},"入":{"docs":{},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"）":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}}}}}},"每":{"docs":{},"次":{"docs":{},"只":{"docs":{},"加":{"docs":{},"入":{"docs":{},"各":{"docs":{},"队":{"docs":{},"列":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"比":{"docs":{},"较":{"docs":{},"）":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}}}}},"左":{"docs":{},"括":{"docs":{},"号":{"docs":{},"必":{"docs":{},"须":{"docs":{},"以":{"docs":{},"正":{"docs":{},"确":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"闭":{"docs":{},"合":{"docs":{},"。":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}}}}}}}},"用":{"docs":{},"相":{"docs":{},"同":{"docs":{},"类":{"docs":{},"型":{"docs":{},"的":{"docs":{},"右":{"docs":{},"括":{"docs":{},"号":{"docs":{},"闭":{"docs":{},"合":{"docs":{},"。":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}}},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"不":{"docs":{},"可":{"docs":{},"能":{"docs":{},"盛":{"docs":{},"水":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"跳":{"docs":{},"过":{"docs":{},"，":{"docs":{},"不":{"docs":{},"遍":{"docs":{},"历":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}},"界":{"docs":{},"不":{"docs":{},"能":{"docs":{},"装":{"docs":{},"水":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}}},"都":{"docs":{},"有":{"docs":{},"数":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}},"移":{"docs":{},"动":{"docs":{},"。":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}},"边":{"docs":{},"有":{"docs":{},"序":{"docs":{},"，":{"docs":{},"去":{"docs":{},"左":{"docs":{},"边":{"docs":{},"找":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"是":{"0":{"docs":{},"，":{"docs":{},"右":{"docs":{},"边":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"是":{"docs":{},"n":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}}}}}}},"docs":{}}}}}},"是":{"docs":{},"碎":{"docs":{},"的":{"docs":{},"那":{"docs":{},"段":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}},"旋":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}},"子":{"docs":{},"树":{"docs":{},"节":{"docs":{},"点":{"docs":{},"小":{"docs":{},"于":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}}}}}}},"包":{"docs":{},"右":{"docs":{},"不":{"docs":{},"包":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}}}},"没":{"docs":{},"有":{"docs":{},"括":{"docs":{},"号":{"docs":{},",":{"docs":{},"也":{"docs":{},"叫":{"docs":{},"做":{"docs":{},"括":{"docs":{},"号":{"docs":{},"匹":{"docs":{},"配":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}}}}}}}}},"就":{"docs":{},"新":{"docs":{},"建":{"docs":{},"{":{"docs":{},"}":{"docs":{},"，":{"docs":{},"有":{"docs":{},"就":{"docs":{},"利":{"docs":{},"用":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"{":{"docs":{},"}":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}},"旋":{"docs":{},"转":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}},"重":{"docs":{},"复":{"docs":{},"出":{"docs":{},"现":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}}}}}},"交":{"docs":{},"易":{"docs":{},"完":{"docs":{},"成":{"docs":{},",":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}},"发":{"docs":{},"生":{"docs":{},"交":{"docs":{},"换":{"docs":{},"，":{"docs":{},"排":{"docs":{},"序":{"docs":{},"结":{"docs":{},"束":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}}}}},"清":{"docs":{},"楚":{"docs":{},"易":{"docs":{},"懂":{"docs":{"栈/有效的括号_LeetCode_20.html":{"ref":"栈/有效的括号_LeetCode_20.html","tf":0.007042253521126761}}}}}},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"1":{"docs":{},"(":{"docs":{},"原":{"docs":{},"地":{"docs":{},"修":{"docs":{},"改":{"docs":{},")":{"docs":{},"：":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}},"2":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}},"（":{"docs":{},"非":{"docs":{},"原":{"docs":{},"地":{"docs":{},"修":{"docs":{},"改":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"m":{"docs":{},"*":{"docs":{},"n":{"docs":{},"）":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}}}}}}}}},"3":{"docs":{},"（":{"docs":{},"非":{"docs":{},"原":{"docs":{},"地":{"docs":{},"修":{"docs":{},"改":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"2":{"docs":{},"*":{"docs":{},"m":{"docs":{},"）":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}},"docs":{}}}}}}}}}}}}}},"4":{"docs":{},"（":{"docs":{},"非":{"docs":{},"原":{"docs":{},"地":{"docs":{},"修":{"docs":{},"改":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"m":{"docs":{},"）":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}}}}}}}},"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294},"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676},"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.014388489208633094},"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/":{"ref":"动态规划/","tf":10.083333333333334},"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.006134969325153374},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.007407407407407408},"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.011682242990654205},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.013245033112582781}},"题":{"docs":{},"目":{"docs":{},"，":{"docs":{},"好":{"docs":{},"比":{"docs":{},"数":{"docs":{},"学":{"docs":{},"数":{"docs":{},"列":{"docs":{},"题":{"docs":{},"，":{"docs":{},"由":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"推":{"docs":{},"导":{"docs":{},"后":{"docs":{},"面":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}},"之":{"docs":{},"二":{"docs":{},"分":{"docs":{},"替":{"docs":{},"换":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}},"思":{"docs":{},"路":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}},"替":{"docs":{},"换":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}},"的":{"docs":{},"思":{"docs":{},"路":{"docs":{},"：":{"docs":{},"将":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}},"方":{"docs":{},"程":{"docs":{},"：":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}}}}}}}},",":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}},"：":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}},"，":{"docs":{},"一":{"docs":{},"般":{"docs":{},"都":{"docs":{},"要":{"docs":{},"设":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"变":{"docs":{},"量":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}},"处":{"docs":{},"理":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"对":{"docs":{},"(":{"docs":{},")":{"docs":{},"情":{"docs":{},"况":{"docs":{},",":{"docs":{},"不":{"docs":{},"加":{"docs":{},"判":{"docs":{},"断":{"docs":{},",":{"docs":{},"结":{"docs":{},"果":{"docs":{},"为":{"4":{"docs":{},"，":{"docs":{},"当":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"对":{"docs":{},"括":{"docs":{},"号":{"docs":{},"时":{"docs":{},"，":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"向":{"docs":{},"前":{"docs":{},"扩":{"docs":{},"展":{"docs":{},"了":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"独":{"docs":{},"立":{"docs":{},"的":{"docs":{},"括":{"docs":{},"号":{"docs":{},"对":{"docs":{},"的":{"docs":{},"情":{"docs":{},"形":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}}}}}}}}}}}},"最":{"docs":{},"长":{"docs":{},"有":{"docs":{},"效":{"docs":{},"括":{"docs":{},"号":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"3":{"2":{"docs":{},")":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"3":{"2":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}},"子":{"docs":{},"串":{"docs":{},"为":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.011299435028248588}}}}}}}}},"子":{"docs":{},"串":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}},"公":{"docs":{},"共":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"（":{"docs":{},"腾":{"docs":{},"讯":{"docs":{},"）":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":10.01388888888889}}}}}}}},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":10.0125}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"动态规划/最长公共字符串.html":{"ref":"动态规划/最长公共字符串.html","tf":10}}}}}}},"连":{"docs":{},"续":{"docs":{},"递":{"docs":{},"增":{"docs":{},"序":{"docs":{},"列":{"docs":{"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"6":{"7":{"4":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":10},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"是":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.022988505747126436},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.022727272727272728}}}}}}}}},"上":{"docs":{},"升":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":5}}}}}}}}}}}}}}},"的":{"docs":{},"上":{"docs":{},"升":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"是":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}},"重":{"docs":{},"复":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"7":{"1":{"8":{"docs":{},")":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"7":{"1":{"8":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}},"递":{"docs":{},"增":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"6":{"7":{"3":{"docs":{},")":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"6":{"7":{"3":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}},"长":{"docs":{},"度":{"docs":{},"是":{"1":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"存":{"docs":{},"在":{"5":{"docs":{},"个":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"1":{"docs":{},"，":{"docs":{},"因":{"docs":{},"此":{"docs":{},"输":{"docs":{},"出":{"5":{"docs":{},"。":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}}}},"docs":{}}}}}}},"docs":{}}}}}}}}}},"docs":{}}}}}}},"docs":{}}}}}}}}}}},"接":{"docs":{},"近":{"docs":{},"。":{"docs":{},"返":{"docs":{},"回":{"docs":{},"这":{"docs":{},"三":{"docs":{},"个":{"docs":{},"数":{"docs":{},"的":{"docs":{},"和":{"docs":{},"。":{"docs":{},"假":{"docs":{},"定":{"docs":{},"每":{"docs":{},"组":{"docs":{},"输":{"docs":{},"入":{"docs":{},"只":{"docs":{},"存":{"docs":{},"在":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"答":{"docs":{},"案":{"docs":{},"。":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"三":{"docs":{},"个":{"docs":{},"数":{"docs":{},"的":{"docs":{},"和":{"docs":{},"为":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}}}}}},"数":{"docs":{},"之":{"docs":{},"和":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":10.007936507936508}}}}}}}}},"小":{"docs":{},"距":{"docs":{},"离":{"docs":{},"法":{"docs":{},"，":{"docs":{},"数":{"docs":{},"学":{"docs":{},"运":{"docs":{},"算":{"docs":{},"法":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285}}}}}}}}}}},"路":{"docs":{},"径":{"docs":{},"和":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":5},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":5}}}}}}}}}}}}},"的":{"docs":{},"那":{"docs":{},"个":{"docs":{},"序":{"docs":{},"列":{"docs":{},"尾":{"docs":{},"数":{"docs":{},".":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}},"k":{"docs":{},"个":{"docs":{},"数":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":10.009803921568627}}}}}},"编":{"docs":{},"辑":{"docs":{},"距":{"docs":{},"离":{"docs":{"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":10.005917159763314},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":10.005917159763314}}}}}},"堆":{"docs":{},"元":{"docs":{},"素":{"docs":{},"个":{"docs":{},"数":{"docs":{},"大":{"docs":{},"于":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}},"大":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"区":{"docs":{},"域":{"docs":{},"包":{"docs":{},"含":{"docs":{},"选":{"docs":{},"定":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"的":{"docs":{},"区":{"docs":{},"域":{"docs":{},"。":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}},"在":{"docs":{},"不":{"docs":{},"包":{"docs":{},"含":{"docs":{},"选":{"docs":{},"定":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"的":{"docs":{},"右":{"docs":{},"半":{"docs":{},"区":{"docs":{},"域":{"docs":{},"当":{"docs":{},"中":{"docs":{},"。":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}},"左":{"docs":{},"半":{"docs":{},"区":{"docs":{},"域":{"docs":{},"当":{"docs":{},"中":{"docs":{},"。":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"8":{"5":{"docs":{},")":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"8":{"5":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}}},"结":{"docs":{},"果":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}},"子":{"docs":{},"序":{"docs":{},"和":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":5}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"5":{"3":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}}}},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":5}}}}}}}}}}}}},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"是":{"docs":{},"所":{"docs":{},"有":{"docs":{},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"序":{"docs":{},"中":{"docs":{},"元":{"docs":{},"素":{"docs":{},"和":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"，":{"docs":{},"例":{"docs":{},"如":{"docs":{},"给":{"docs":{},"定":{"docs":{},"序":{"docs":{},"列":{"docs":{},"{":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"前":{"docs":{},"缀":{"docs":{},"和":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}},"数":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":2.5}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}}}},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"思":{"docs":{},"路":{"docs":{},"就":{"docs":{},"是":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"暴":{"docs":{},"力":{"docs":{},"法":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"分":{"docs":{},"别":{"docs":{},"在":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}}},"优":{"docs":{},"方":{"docs":{},"法":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}},"左":{"docs":{},"边":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"移":{"docs":{},"动":{"docs":{},"到":{"docs":{},"最":{"docs":{},"右":{"docs":{},"边":{"docs":{},"。":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}}}}}}}}}}}},"终":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"的":{"docs":{},"值":{"docs":{},"为":{"8":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"docs":{}}}}}}},"都":{"docs":{},"会":{"docs":{},"被":{"docs":{},"填":{"docs":{},"充":{"docs":{},"为":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}},"后":{"docs":{},"生":{"docs":{},"存":{"docs":{},"下":{"docs":{},"来":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":0.034482758620689655}}}}}}}}},"不":{"docs":{},"能":{"docs":{},"返":{"docs":{},"回":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},",":{"docs":{},"因":{"docs":{},"为":{"docs":{},"【":{"1":{"docs":{},"，":{"1":{"docs":{},"，":{"2":{"docs":{},"，":{"3":{"docs":{},"】":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}}}},"要":{"docs":{},"全":{"docs":{},"部":{"docs":{},"走":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"，":{"docs":{},"看":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"加":{"docs":{},"和":{"docs":{},"中":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"。":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}}}},"前":{"docs":{},"面":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"一":{"docs":{},"般":{"docs":{},"为":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}}}}}}}}},"多":{"docs":{},"能":{"docs":{},"够":{"docs":{},"确":{"docs":{},"定":{"docs":{},"的":{"docs":{},"楼":{"docs":{},"层":{"docs":{},"数":{"docs":{},"为":{"docs":{},"l":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}},"差":{"docs":{},"情":{"docs":{},"况":{"docs":{},"是":{"1":{"docs":{},"个":{"docs":{},"鸡":{"docs":{},"蛋":{"docs":{},"走":{"docs":{},"n":{"docs":{},"步":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}},"docs":{}}}}},"正":{"docs":{},"确":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}}}}}}},"类":{"docs":{},"似":{"docs":{},"(":{"docs":{},")":{"docs":{},"(":{"docs":{},")":{"docs":{},"、":{"docs":{},"(":{"docs":{},")":{"docs":{},"(":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"栈/最长有效括号_LeetCode_32.html":{"ref":"栈/最长有效括号_LeetCode_32.html","tf":0.005649717514124294}}}}}}}}}}}}}},"型":{"docs":{},"的":{"docs":{},"对":{"docs":{},"象":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{"双指针/":{"ref":"双指针/","tf":10.083333333333334},"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.02197802197802198}},"法":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856}},"（":{"docs":{},"指":{"docs":{},"针":{"docs":{},"对":{"docs":{},"撞":{"docs":{},"法":{"docs":{},"）":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805}}}}}}}}}}}},"重":{"docs":{},"循":{"docs":{},"环":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"^":{"2":{"docs":{},")":{"docs":{},"，":{"docs":{"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517}}}}},"docs":{}}}}}}}}}}}}}}}}}},"至":{"docs":{},"少":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"双指针/将奇数放在偶数的前面.html":{"ref":"双指针/将奇数放在偶数的前面.html","tf":0.014925373134328358}}}}}},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"并":{"docs":{},"且":{"docs":{},"所":{"docs":{},"有":{"docs":{},"字":{"docs":{},"符":{"docs":{},"都":{"docs":{},"是":{"docs":{},"字":{"docs":{},"母":{"docs":{},"或":{"docs":{},"数":{"docs":{},"字":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}},"先":{"docs":{},"定":{"docs":{},"义":{"docs":{},"好":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{},"后":{"docs":{},"面":{"docs":{},"再":{"docs":{},"相":{"docs":{},"应":{"docs":{},"位":{"docs":{},"置":{"docs":{},"修":{"docs":{},"改":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"里":{"docs":{},"面":{"docs":{},"的":{"docs":{},"值":{"docs":{},",":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"r":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"将":{"docs":{},"数":{"docs":{},"组":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":0.017857142857142856}}}}}}}}}},"遍":{"docs":{},"历":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"找":{"docs":{},"到":{"docs":{},"第":{"docs":{},"k":{"docs":{},"小":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"利":{"docs":{},"用":{"docs":{},"二":{"docs":{},"分":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"进":{"docs":{},"行":{"docs":{},"处":{"docs":{},"理":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"写":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"f":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}}}},"排":{"docs":{},"好":{"docs":{},"序":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}}}},"序":{"docs":{},"，":{"docs":{},"后":{"docs":{},"去":{"docs":{},"重":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.00980392156862745}}}}}}}},"计":{"docs":{},"算":{"docs":{},"出":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"高":{"docs":{},"度":{"docs":{},"矩":{"docs":{},"阵":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}}}}},"从":{"docs":{},"左":{"docs":{},"到":{"docs":{},"右":{"docs":{},"的":{"docs":{},"相":{"docs":{},"乘":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"，":{"docs":{},"再":{"docs":{},"计":{"docs":{},"算":{"docs":{},"从":{"docs":{},"右":{"docs":{},"到":{"docs":{},"左":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"；":{"docs":{},"再":{"docs":{},"将":{"docs":{},"两":{"docs":{},"组":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"相":{"docs":{},"比":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"判":{"docs":{},"断":{"docs":{},"有":{"docs":{},"没":{"docs":{},"有":{"docs":{},"环":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}},"让":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"走":{"docs":{},"n":{"docs":{},"步":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}},",":{"docs":{},"第":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},"步":{"docs":{},"时":{"docs":{},"候":{"docs":{},",":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"也":{"docs":{},"开":{"docs":{},"始":{"docs":{},"走":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"取":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{},"作":{"docs":{},"为":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"将":{"docs":{},"数":{"docs":{},"组":{"docs":{},"分":{"docs":{},"成":{"docs":{},"左":{"docs":{},"右":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"对":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"部":{"docs":{},"分":{"docs":{},"采":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"进":{"docs":{},"行":{"docs":{},"建":{"docs":{},"立":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"手":{"docs":{},"都":{"docs":{},"可":{"docs":{},"以":{"docs":{},"划":{"docs":{},"掉":{"2":{"docs":{},"条":{"docs":{},"线":{"docs":{},"和":{"3":{"docs":{},"条":{"docs":{},"线":{"docs":{},"来":{"docs":{},"让":{"docs":{},"后":{"docs":{},"手":{"docs":{},"落":{"docs":{},"入":{"docs":{},"“":{"4":{"docs":{},"”":{"docs":{},"的":{"docs":{},"陷":{"docs":{},"阱":{"docs":{},"。":{"docs":{"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903}}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}},"docs":{}}}}}}},"正":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"后":{"docs":{},"一":{"docs":{},"位":{"docs":{},"比":{"docs":{},"前":{"docs":{},"一":{"docs":{},"位":{"docs":{},"高":{"docs":{},"分":{"docs":{},"，":{"docs":{},"就":{"docs":{},"给":{"docs":{},"比":{"docs":{},"前":{"docs":{},"一":{"docs":{},"位":{"docs":{},"多":{"1":{"docs":{},"的":{"docs":{},"糖":{"docs":{},"果":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"给":{"1":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}},"已":{"docs":{},"经":{"docs":{},"排":{"docs":{},"好":{"docs":{},"序":{"docs":{},"了":{"docs":{},"，":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}}},"知":{"docs":{},"升":{"docs":{},"序":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{},"a":{"docs":{},"【":{"docs":{},"l":{"docs":{},"】":{"docs":{},",":{"docs":{},"b":{"docs":{},"【":{"docs":{},"m":{"docs":{},"】":{"docs":{},",":{"docs":{},"c":{"docs":{},"【":{"docs":{},"n":{"docs":{},"】":{"docs":{},",":{"docs":{},"请":{"docs":{},"在":{"docs":{},"三":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"总":{"docs":{},"各":{"docs":{},"找":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"组":{"docs":{},"成":{"docs":{},"的":{"docs":{},"三":{"docs":{},"元":{"docs":{},"组":{"docs":{},"的":{"docs":{},"距":{"docs":{},"离":{"docs":{},"最":{"docs":{},"小":{"docs":{},"，":{"docs":{},"三":{"docs":{},"元":{"docs":{},"组":{"docs":{},"距":{"docs":{},"离":{"docs":{},"的":{"docs":{},"定":{"docs":{},"义":{"docs":{},"为":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"三数/求最小三元组距离.html":{"ref":"三数/求最小三元组距离.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"找":{"docs":{},"到":{"docs":{},"离":{"0":{"docs":{},"最":{"docs":{},"近":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"向":{"docs":{},"两":{"docs":{},"边":{"docs":{},"遍":{"docs":{},"历":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}}}}}}}},"docs":{}},"最":{"docs":{},"高":{"docs":{},"点":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}},",":{"docs":{},"然":{"docs":{},"后":{"docs":{},"从":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"到":{"docs":{},"中":{"docs":{},"间":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}},"该":{"docs":{},"树":{"docs":{},"中":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"定":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"。":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}},"所":{"docs":{},"有":{"docs":{},"被":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"岛":{"docs":{},"屿":{"docs":{},"面":{"docs":{},"积":{"docs":{},"。":{"docs":{},"(":{"docs":{},"如":{"docs":{},"果":{"docs":{},"没":{"docs":{},"有":{"docs":{},"岛":{"docs":{},"屿":{"docs":{},"，":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{},"面":{"docs":{},"积":{"docs":{},"为":{"0":{"docs":{},"。":{"docs":{},")":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"出":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"2":{"docs":{},"个":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":10}}}}}}}}}},"docs":{},"第":{"docs":{},"k":{"docs":{},"大":{"docs":{},"的":{"docs":{},"数":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}}}}},"唯":{"docs":{},"一":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":10.014492753623188}}}}}}}}},"前":{"docs":{},"k":{"docs":{},"大":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":10}}}}},"出":{"docs":{},"现":{"docs":{},"次":{"docs":{},"数":{"docs":{},"为":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":5}},"（":{"docs":{},"异":{"docs":{},"或":{"docs":{},"法":{"docs":{},"）":{"docs":{"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827}}}}}}}}}}}}}}}}}}},"值":{"docs":{},"中":{"docs":{},"前":{"docs":{},"k":{"docs":{},"大":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}}}}}},"异":{"docs":{},"或":{"docs":{},"结":{"docs":{},"果":{"docs":{},"中":{"docs":{},"其":{"docs":{},"中":{"docs":{},"一":{"docs":{},"位":{"docs":{},"为":{"1":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{"数组/找出数组中出现次数为奇数次的数 异或法.html":{"ref":"数组/找出数组中出现次数为奇数次的数 异或法.html","tf":0.017241379310344827}}}}}},"docs":{}}}}}}}}}}},"路":{"docs":{},"径":{"docs":{},"和":{"docs":{},"等":{"docs":{},"于":{"docs":{},"给":{"docs":{},"定":{"docs":{},"数":{"docs":{},"值":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"总":{"docs":{},"数":{"docs":{},"。":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}}}}}}}}}}}}}},"最":{"docs":{},"高":{"docs":{},"点":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"从":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"到":{"docs":{},"中":{"docs":{},"间":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0051813471502590676},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0051813471502590676}}}}}}}}}}}}}}}}}}},"提":{"docs":{},"示":{"docs":{},"：":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005},"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}},"普":{"docs":{},"通":{"docs":{},"法":{"docs":{},"查":{"docs":{},"找":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}}},"（":{"docs":{},"如":{"docs":{},"果":{"docs":{},"存":{"docs":{},"在":{"docs":{},"该":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"就":{"docs":{},"输":{"docs":{},"出":{"docs":{},"该":{"docs":{},"元":{"docs":{},"素":{"docs":{},"位":{"docs":{},"置":{"docs":{},"）":{"docs":{},"（":{"docs":{},"此":{"docs":{},"处":{"docs":{},"查":{"docs":{},"找":{"0":{"docs":{},"元":{"docs":{},"素":{"docs":{},"）":{"docs":{"双指针/有序数组的平方_LeetCode_977.html":{"ref":"双指针/有序数组的平方_LeetCode_977.html","tf":0.005}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"注":{"docs":{},"意":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"个":{"docs":{},"列":{"docs":{},"表":{"docs":{},"相":{"docs":{},"交":{"docs":{},"则":{"docs":{},"不":{"docs":{},"能":{"docs":{},"为":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834}}}}}}}}}}}}}}}}},"即":{"docs":{},"按":{"docs":{},"从":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"所":{"docs":{},"在":{"docs":{},"层":{"docs":{},"到":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"所":{"docs":{},"在":{"docs":{},"的":{"docs":{},"层":{"docs":{},"，":{"docs":{},"逐":{"docs":{},"层":{"docs":{},"从":{"docs":{},"左":{"docs":{},"向":{"docs":{},"右":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"）":{"docs":{"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"当":{"docs":{},"前":{"docs":{},"行":{"docs":{},"）":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}},"起":{"docs":{},"始":{"docs":{},"点":{"docs":{},"在":{"docs":{},"下":{"docs":{},"图":{"docs":{},"中":{"docs":{},"标":{"docs":{},"记":{"docs":{},"为":{"docs":{},"“":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"”":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}}}}}}}}}}}}}}},"股":{"docs":{},"票":{"docs":{},"价":{"docs":{},"格":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}},"ⅱ":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"6":{"8":{"0":{"docs":{},")":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}},"判":{"docs":{},"断":{"docs":{},"回":{"docs":{},"文":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}}}}}},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"换":{"docs":{},"位":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"字符串/判断是不是换位字符串.html":{"ref":"字符串/判断是不是换位字符串.html","tf":10.025}}}}}}}}},"否":{"docs":{},"是":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"1":{"0":{"docs":{"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}},"s":{"1":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"s":{"2":{"docs":{},"的":{"docs":{},"子":{"docs":{},"串":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514}}}}}},"docs":{}}}}}},"docs":{}},"一":{"docs":{},"个":{"docs":{},"串":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"串":{"docs":{},"的":{"docs":{},"子":{"docs":{},"串":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":10.013513513513514},"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}}}}}}}}}},"s":{"1":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"串":{"docs":{},"s":{"2":{"docs":{},"的":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}}}}}}},"docs":{}}}}}}}}}},"docs":{}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"子":{"docs":{},"串":{"docs":{},"，":{"docs":{},"如":{"docs":{"字符串/判断一个串是不是另一个串的子串.html":{"ref":"字符串/判断一个串是不是另一个串的子串.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}}}},"序":{"docs":{},"列":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":10.017241379310345}}}}}}}}}}}}}}}}},"整":{"docs":{},"数":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"回":{"docs":{},"文":{"docs":{},"数":{"docs":{},"。":{"docs":{},"回":{"docs":{},"文":{"docs":{},"数":{"docs":{},"是":{"docs":{},"指":{"docs":{},"正":{"docs":{},"序":{"docs":{},"（":{"docs":{},"从":{"docs":{},"左":{"docs":{},"向":{"docs":{},"右":{"docs":{},"）":{"docs":{},"和":{"docs":{},"倒":{"docs":{},"序":{"docs":{},"（":{"docs":{},"从":{"docs":{},"右":{"docs":{},"向":{"docs":{},"左":{"docs":{},"）":{"docs":{},"读":{"docs":{},"都":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"。":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"回":{"docs":{},"文":{"docs":{},"的":{"docs":{},"，":{"docs":{},"很":{"docs":{},"自":{"docs":{},"然":{"docs":{},"的":{"docs":{},"想":{"docs":{},"法":{"docs":{},"就":{"docs":{},"是":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"从":{"docs":{},"前":{"docs":{},"往":{"docs":{},"后":{"docs":{},"走":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"从":{"docs":{},"后":{"docs":{},"往":{"docs":{},"前":{"docs":{},"走":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"元":{"docs":{},"素":{"docs":{},"值":{"docs":{},"是":{"docs":{},"否":{"docs":{},"相":{"docs":{},"同":{"docs":{},"，":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.017857142857142856}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"的":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":10}}}}},"续":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"是":{"docs":{},",":{"docs":{},"返":{"docs":{},"回":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"【":{"1":{"docs":{},"，":{"3":{"docs":{},"，":{"2":{"docs":{},"，":{"5":{"docs":{},"，":{"7":{"docs":{},"，":{"6":{"docs":{},"，":{"4":{"docs":{},"】":{"docs":{},"就":{"docs":{},"是":{"docs":{},"一":{"docs":{},"棵":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"的":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"序":{"docs":{},"列":{"docs":{},"。":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"地":{"docs":{},"址":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"那":{"docs":{},"两":{"docs":{},"个":{"1":{"docs":{},"实":{"docs":{},"际":{"docs":{},"上":{"docs":{},"不":{"docs":{},"是":{"docs":{},"同":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"地":{"docs":{},"址":{"docs":{},"不":{"docs":{},"同":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"判":{"docs":{},"断":{"docs":{},"地":{"docs":{},"址":{"docs":{},"就":{"docs":{},"行":{"docs":{},"了":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"两":{"docs":{},"棵":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"是":{"docs":{},"否":{"docs":{},"相":{"docs":{},"等":{"docs":{"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":10.008403361344538}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"的":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}}}}}}}}}}}}},"x":{"docs":{},"+":{"docs":{},"i":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}},"原":{"docs":{},"生":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}},"写":{"docs":{},"法":{"docs":{},"，":{"docs":{},"通":{"docs":{},"过":{"docs":{},"率":{"9":{"9":{"docs":{},".":{"9":{"9":{"docs":{},"%":{"docs":{},"，":{"docs":{},"超":{"docs":{},"时":{"docs":{},"，":{"docs":{},"其":{"docs":{},"它":{"docs":{},"语":{"docs":{},"言":{"docs":{},"可":{"docs":{},"通":{"docs":{},"过":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099}}}}}}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}}}}},"始":{"docs":{},"数":{"docs":{},"组":{"docs":{},"右":{"docs":{},"边":{"docs":{},"添":{"docs":{},"加":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.018518518518518517}}}}}}}}}}}}}}}}}}},"据":{"docs":{},"：":{"1":{"docs":{},"，":{"2":{"docs":{},"，":{"4":{"docs":{},"，":{"3":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"链":{"docs":{},"表":{"docs":{},"拼":{"docs":{},"接":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}},"因":{"docs":{},"：":{"3":{"4":{"2":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}},"docs":{}},"docs":{}},"docs":{}}},"文":{"docs":{},"：":{"docs":{},"你":{"docs":{},"可":{"docs":{},"以":{"docs":{},"假":{"docs":{},"设":{"docs":{},"网":{"docs":{},"格":{"docs":{},"的":{"docs":{},"四":{"docs":{},"个":{"docs":{},"边":{"docs":{},"均":{"docs":{},"被":{"docs":{},"水":{"docs":{},"包":{"docs":{},"围":{"docs":{},"。":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}},"递":{"docs":{},"归":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.02197802197802198},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216},"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012},"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}},"二":{"docs":{},"分":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"查":{"docs":{},"找":{"docs":{},"第":{"docs":{},"二":{"docs":{},"版":{"docs":{},"本":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616}}}}}}}}}}}},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},",":{"docs":{},"所":{"docs":{},"有":{"docs":{},"调":{"docs":{},"用":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"必":{"docs":{},"须":{"docs":{},"写":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.019230769230769232}}}}}}}}}}}}}}}}}}}}}}}}},"实":{"docs":{},"现":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616}}}}}},"：":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}},"版":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}},"本":{"docs":{},"稍":{"docs":{},"微":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"一":{"docs":{},"些":{"docs":{},"，":{"docs":{},"其":{"docs":{},"关":{"docs":{},"键":{"docs":{},"在":{"docs":{},"于":{"docs":{},"反":{"docs":{},"向":{"docs":{},"工":{"docs":{},"作":{"docs":{},"。":{"docs":{},"假":{"docs":{},"设":{"docs":{},"列":{"docs":{},"表":{"docs":{},"的":{"docs":{},"其":{"docs":{},"余":{"docs":{},"部":{"docs":{},"分":{"docs":{},"已":{"docs":{},"经":{"docs":{},"被":{"docs":{},"反":{"docs":{},"转":{"docs":{},"，":{"docs":{},"现":{"docs":{},"在":{"docs":{},"我":{"docs":{},"该":{"docs":{},"如":{"docs":{},"何":{"docs":{},"反":{"docs":{},"转":{"docs":{},"它":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"部":{"docs":{},"分":{"docs":{},"？":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"法":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}},"(":{"docs":{},"没":{"docs":{},"有":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},")":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}},"（":{"docs":{},"有":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},"）":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}},"简":{"docs":{},"单":{"docs":{},"修":{"docs":{},"改":{"2":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}},"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"出":{"docs":{},"口":{"docs":{},"，":{"docs":{},"一":{"docs":{},"是":{"docs":{},"没":{"docs":{},"有":{"docs":{},"找":{"docs":{},"到":{"docs":{},"a":{"docs":{},"或":{"docs":{},"者":{"docs":{},"b":{"docs":{},"，":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"；":{"docs":{},"二":{"docs":{},"是":{"docs":{},"只":{"docs":{},"要":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"a":{"docs":{},"或":{"docs":{},"者":{"docs":{},"b":{"docs":{},"，":{"docs":{},"就":{"docs":{},"立":{"docs":{},"刻":{"docs":{},"返":{"docs":{},"回":{"docs":{},"。":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"、":{"docs":{},"回":{"docs":{},"溯":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}}},"验":{"docs":{},"证":{"docs":{},"回":{"docs":{},"文":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"2":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"6":{"8":{"0":{"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}},"docs":{"双指针/验证回文字符串2_LeetCode_680.html":{"ref":"双指针/验证回文字符串2_LeetCode_680.html","tf":0.01098901098901099},"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":10.005291005291005}}}}},"串":{"docs":{},"、":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.023255813953488372}}}}}}}},"构":{"docs":{},"成":{"docs":{},"三":{"docs":{},"角":{"docs":{},"形":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{"双指针/构成三角形的个数.html":{"ref":"双指针/构成三角形的个数.html","tf":10}}}}}}}},"的":{"docs":{},"。":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}},"组":{"docs":{},"合":{"docs":{},"。":{"docs":{},"你":{"docs":{},"可":{"docs":{},"以":{"docs":{},"假":{"docs":{},"设":{"docs":{},"二":{"docs":{},"维":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"的":{"docs":{},"四":{"docs":{},"个":{"docs":{},"边":{"docs":{},"缘":{"docs":{},"都":{"docs":{},"被":{"docs":{},"水":{"docs":{},"包":{"docs":{},"围":{"docs":{},"着":{"docs":{},"。":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"元":{"docs":{},"音":{"docs":{},"字":{"docs":{},"母":{"docs":{},"不":{"docs":{},"包":{"docs":{},"含":{"docs":{},"字":{"docs":{},"母":{"docs":{},"\"":{"docs":{},"y":{"docs":{},"\"":{"docs":{},"。":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385}}}}}}}}}}}}}},"素":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"按":{"docs":{},"照":{"0":{"docs":{},"、":{"1":{"docs":{},"、":{"2":{"docs":{},"的":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"重":{"docs":{},"写":{"docs":{},"当":{"docs":{},"前":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}},"反":{"docs":{},"转":{"docs":{},"字":{"docs":{},"符":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}},"串":{"docs":{},"中":{"docs":{},"的":{"docs":{},"元":{"docs":{},"音":{"docs":{},"字":{"docs":{},"母":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"3":{"4":{"5":{"docs":{},")":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"3":{"4":{"5":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"单":{"docs":{},"词":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":5.009090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":5.009090909090909}}}}}}}}},"一":{"docs":{},"半":{"docs":{},"数":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.015625}}}},"个":{"docs":{},"单":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}},"链":{"docs":{},"表":{"2":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":10}}},"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":10.003759398496241},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}},"从":{"docs":{},"位":{"docs":{},"置":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}}}},"编":{"docs":{},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"以":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"作":{"docs":{},"为":{"docs":{},"输":{"docs":{},"入":{"docs":{},"，":{"docs":{},"反":{"docs":{},"转":{"docs":{},"该":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"中":{"docs":{},"的":{"docs":{},"元":{"docs":{},"音":{"docs":{},"字":{"docs":{},"母":{"docs":{},"。":{"docs":{},"交":{"docs":{},"换":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"的":{"docs":{},"元":{"docs":{},"音":{"docs":{},"字":{"docs":{},"母":{"docs":{"双指针/反转字符串中的元音字母_LeetCode_345.html":{"ref":"双指针/反转字符串中的元音字母_LeetCode_345.html","tf":0.015384615384615385}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"其":{"docs":{},"作":{"docs":{},"用":{"docs":{},"是":{"docs":{},"将":{"docs":{},"输":{"docs":{},"入":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"反":{"docs":{},"转":{"docs":{},"过":{"docs":{},"来":{"docs":{},"。":{"docs":{},"输":{"docs":{},"入":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"以":{"docs":{},"字":{"docs":{},"符":{"docs":{},"数":{"docs":{},"组":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"来":{"docs":{},"查":{"docs":{},"找":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"最":{"docs":{},"长":{"docs":{},"公":{"docs":{},"共":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"。":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}},"判":{"docs":{},"断":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"于":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"。":{"docs":{},"若":{"docs":{},"存":{"docs":{},"在":{"docs":{},"返":{"docs":{},"回":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}}}}}}},"高":{"docs":{},"效":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"来":{"docs":{},"判":{"docs":{},"断":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}},"搜":{"docs":{},"索":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}}}}}}}}}},"程":{"docs":{},"序":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"两":{"docs":{},"个":{"docs":{},"单":{"docs":{},"链":{"docs":{},"表":{"docs":{},"相":{"docs":{},"交":{"docs":{},"的":{"docs":{},"起":{"docs":{},"始":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}}}}}}},"辑":{"docs":{},"距":{"docs":{},"离":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"7":{"2":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"平":{"docs":{},"方":{"docs":{},"数":{"docs":{},"之":{"docs":{},"和":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"6":{"3":{"3":{"docs":{},")":{"docs":{"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":0.014925373134328358}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"6":{"3":{"3":{"docs":{"双指针/平方数之和_LeetCode_633.html":{"ref":"双指针/平方数之和_LeetCode_633.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"衡":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"是":{"docs":{},"递":{"docs":{},"增":{"docs":{},"的":{"docs":{},"，":{"docs":{},"列":{"docs":{},"表":{"docs":{},"中":{"docs":{},"间":{"docs":{},"点":{"docs":{},"是":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.017391304347826087}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"1":{"0":{"docs":{},")":{"docs":{"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}},"【":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},"】":{"docs":{},"【":{"1":{"docs":{},"，":{"2":{"docs":{},"】":{"docs":{},"【":{"3":{"docs":{},"】":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684}}}},"docs":{}}}},"docs":{}}},"docs":{}}}},"docs":{}}},"2":{"docs":{},",":{"5":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"】":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}},"docs":{}}},"docs":{}}},"docs":{}},"】":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}},"docs":{}},"，":{"2":{"docs":{},"，":{"3":{"docs":{},"，":{"3":{"docs":{},"】":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.011560693641618497}}}},"docs":{}},"】":{"docs":{},"，":{"docs":{},"大":{"docs":{},"顶":{"docs":{},"堆":{"docs":{},"【":{"1":{"docs":{},"】":{"docs":{},"，":{"docs":{},"小":{"docs":{},"顶":{"docs":{},"堆":{"docs":{},"【":{"2":{"docs":{},"，":{"3":{"docs":{},"】":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},"在":{"docs":{},"小":{"docs":{},"顶":{"docs":{},"堆":{"docs":{},"【":{"2":{"docs":{},"，":{"3":{"docs":{},"】":{"docs":{},"，":{"docs":{},"且":{"docs":{},"是":{"docs":{},"堆":{"docs":{},"顶":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}},"docs":{}}}}}}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"】":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}},"docs":{}}},"docs":{}}},"docs":{}},"】":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}},"docs":{}}},"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.020833333333333332}},"n":{"docs":{},"】":{"docs":{},"=":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}}},"但":{"docs":{},"是":{"docs":{},"本":{"docs":{},"题":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},"后":{"docs":{},"面":{"docs":{},"留":{"docs":{},"的":{"docs":{},"空":{"docs":{},"间":{"docs":{},"足":{"docs":{},"够":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"在":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},"尾":{"docs":{},"部":{"docs":{},"进":{"docs":{},"行":{"docs":{},"添":{"docs":{},"加":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"重":{"docs":{},"新":{"docs":{},"开":{"docs":{},"辟":{"docs":{},"数":{"docs":{},"组":{"docs":{},"进":{"docs":{},"行":{"docs":{},"归":{"docs":{},"并":{"docs":{},"。":{"docs":{},"因":{"docs":{},"此":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"能":{"docs":{},"从":{"docs":{},"后":{"docs":{},"向":{"docs":{},"前":{"docs":{},"归":{"docs":{},"并":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},"归":{"docs":{},"并":{"docs":{},"到":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},"上":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"从":{"docs":{},"前":{"docs":{},"往":{"docs":{},"后":{"docs":{},"归":{"docs":{},"并":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"需":{"docs":{},"要":{"docs":{},"不":{"docs":{},"断":{"docs":{},"调":{"docs":{},"整":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"防":{"docs":{},"止":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},"中":{"docs":{},"未":{"docs":{},"归":{"docs":{},"并":{"docs":{},"的":{"docs":{},"值":{"docs":{},"被":{"docs":{},"覆":{"docs":{},"盖":{"docs":{},"丢":{"docs":{},"失":{"docs":{},"，":{"docs":{},"相":{"docs":{},"当":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"。":{"docs":{},"而":{"docs":{},"我":{"docs":{},"们":{"docs":{},"从":{"docs":{},"后":{"docs":{},"往":{"docs":{},"前":{"docs":{},"归":{"docs":{},"并":{"docs":{},"，":{"docs":{},"就":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"这":{"docs":{},"么":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"了":{"docs":{},"。":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}},"正":{"docs":{},"常":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"不":{"docs":{},"一":{"docs":{},"定":{"docs":{},"比":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"高":{"docs":{},"度":{"docs":{},"小":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"因":{"docs":{},"为":{"docs":{},"这":{"docs":{},"个":{"docs":{},"矮":{"docs":{},"高":{"docs":{},"度":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"加":{"docs":{},"入":{"docs":{},"，":{"docs":{},"限":{"docs":{},"制":{"docs":{},"了":{"docs":{},"我":{"docs":{},"们":{"docs":{},"之":{"docs":{},"前":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"。":{"docs":{},"那":{"docs":{},"么":{"docs":{},"之":{"docs":{},"前":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"对":{"docs":{},"于":{"docs":{},"以":{"docs":{},"后":{"docs":{},"的":{"docs":{},"统":{"docs":{},"计":{"docs":{},"就":{"docs":{},"没":{"docs":{},"什":{"docs":{},"么":{"docs":{},"用":{"docs":{},"了":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"把":{"docs":{},"矮":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"添":{"docs":{},"加":{"docs":{},"进":{"docs":{},"来":{"docs":{},"之":{"docs":{},"前":{"docs":{},"，":{"docs":{},"先":{"docs":{},"计":{"docs":{},"算":{"docs":{},"高":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"答":{"docs":{},"案":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"删":{"docs":{},"除":{"docs":{},"高":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"。":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"为":{"docs":{},"了":{"docs":{},"统":{"docs":{},"一":{"docs":{},"减":{"6":{"5":{"docs":{},"来":{"docs":{},"计":{"docs":{},"算":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}}}}},"docs":{}},"docs":{}}}}}}},"它":{"docs":{},"不":{"docs":{},"是":{"docs":{},"数":{"docs":{},"字":{"docs":{},"或":{"docs":{},"正":{"docs":{},"、":{"docs":{},"负":{"docs":{},"号":{"docs":{},"。":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}}}}}}},"连":{"docs":{},"续":{"docs":{},"的":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"5":{"docs":{},"和":{"7":{"docs":{},"在":{"docs":{},"原":{"docs":{},"数":{"docs":{},"组":{"docs":{},"里":{"docs":{},"被":{"4":{"docs":{},"隔":{"docs":{},"开":{"docs":{},"。":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}}}}},"docs":{}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}},"最":{"docs":{},"多":{"docs":{},"只":{"docs":{},"能":{"docs":{},"是":{"2":{"docs":{},"个":{"docs":{},"，":{"docs":{},"证":{"docs":{},"明":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}}}}}},"docs":{}}}}}}},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}},"：":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}},"队":{"docs":{},"列":{"docs":{},"，":{"docs":{},"将":{"docs":{},"所":{"docs":{},"有":{"docs":{},"起":{"docs":{},"始":{"docs":{},"点":{"docs":{},"加":{"docs":{},"入":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}}}}}}}},"值":{"docs":{"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":0.03333333333333333}},"d":{"docs":{},"p":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}},"docs":{}}}}},"状":{"docs":{},"态":{"docs":{},"：":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}}}}},"合":{"docs":{},"并":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}},"两":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":10.005917159763314}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"8":{"8":{"docs":{},")":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609}}}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"8":{"8":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}}}}}}}}},"_":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":5}}}}}}}}}}}}}}}}},"到":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}},"区":{"docs":{},"间":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"5":{"6":{"docs":{},")":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"5":{"6":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}}},"k":{"docs":{},"个":{"docs":{},"排":{"docs":{},"序":{"docs":{},"链":{"docs":{},"表":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":10.004048582995951}}}}}}}}}},"成":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}}}}}}}},"添":{"docs":{},"加":{"docs":{},"的":{"docs":{},"新":{"docs":{},"值":{"docs":{},"的":{"docs":{},"首":{"docs":{},"下":{"docs":{},"标":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}}}}}},"与":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"单":{"docs":{},"词":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":2.504950495049505}}}}}}},"访":{"docs":{},"问":{"docs":{},"标":{"docs":{},"志":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"循":{"docs":{},"环":{"docs":{},"跳":{"docs":{},"出":{"docs":{},"后":{"docs":{},",":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.011834319526627219},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.011834319526627219}}}}}}}}}}}}},"非":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"是":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}},"白":{"docs":{},"字":{"docs":{},"符":{"docs":{},"为":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}}}}},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":10}}}}}}}}}},"指":{"docs":{},"针":{"docs":{},"从":{"docs":{},"列":{"docs":{},"表":{"docs":{},"的":{"docs":{},"开":{"docs":{},"头":{"docs":{},"向":{"docs":{},"前":{"docs":{},"移":{"docs":{},"动":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}}},"轮":{"docs":{},"循":{"docs":{},"环":{"docs":{},"合":{"docs":{},"并":{"docs":{},"完":{"docs":{},"后":{"docs":{},"，":{"docs":{},"由":{"docs":{},"于":{"docs":{},"可":{"docs":{},"能":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},"指":{"docs":{},"针":{"docs":{},"未":{"docs":{},"走":{"docs":{},"完":{"docs":{},"(":{"docs":{},"n":{"docs":{},">":{"docs":{},"=":{"0":{"docs":{},":":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},"还":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"比":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},"最":{"docs":{},"小":{"docs":{},"元":{"docs":{},"素":{"docs":{},"小":{"docs":{},")":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"将":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},"剩":{"docs":{},"余":{"docs":{},"首":{"docs":{},"部":{"docs":{},"覆":{"docs":{},"盖":{"docs":{},"至":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},"首":{"docs":{},"部":{"docs":{},"。":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},"指":{"docs":{},"针":{"docs":{},"未":{"docs":{},"走":{"docs":{},"完":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"做":{"docs":{},"任":{"docs":{},"何":{"docs":{},"多":{"docs":{},"余":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"覆":{"docs":{},"盖":{"docs":{},"前":{"docs":{},"后":{"docs":{},"相":{"docs":{},"同":{"docs":{},"。":{"docs":{"双指针/合并两个有序数组_LeetCode_88.html":{"ref":"双指针/合并两个有序数组_LeetCode_88.html","tf":0.005917159763313609},"数组/合并两个有序数组.html":{"ref":"数组/合并两个有序数组.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"次":{"docs":{},"相":{"docs":{},"遇":{"docs":{},"，":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"在":{"docs":{},"环":{"docs":{},"内":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"比":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"快":{"docs":{},"一":{"docs":{},"倍":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"，":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"比":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"多":{"docs":{},"走":{"docs":{},"一":{"docs":{},"倍":{"docs":{},"路":{"docs":{},"程":{"docs":{},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{},"满":{"docs":{},"指":{"docs":{},"针":{"docs":{},"走":{"docs":{},"过":{"docs":{},"的":{"docs":{},"路":{"docs":{},"程":{"docs":{},"就":{"docs":{},"是":{"docs":{},"这":{"docs":{},"一":{"docs":{},"倍":{"docs":{},"路":{"docs":{},"程":{"docs":{},"，":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"走":{"docs":{},"的":{"docs":{},"两":{"docs":{},"倍":{"docs":{},"路":{"docs":{},"程":{"docs":{},"是":{"docs":{},"这":{"docs":{},"样":{"docs":{},"来":{"docs":{},"的":{"docs":{},"，":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"的":{"docs":{},"一":{"docs":{},"倍":{"docs":{},"路":{"docs":{},"程":{"docs":{},"，":{"docs":{},"加":{"docs":{},"上":{"docs":{},"圆":{"docs":{},"圈":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"（":{"docs":{},"从":{"docs":{},"相":{"docs":{},"遇":{"docs":{},"点":{"docs":{},"出":{"docs":{},"发":{"docs":{},"，":{"docs":{},"沿":{"docs":{},"着":{"docs":{},"环":{"docs":{},"走":{"docs":{},"，":{"docs":{},"再":{"docs":{},"次":{"docs":{},"回":{"docs":{},"到":{"docs":{},"相":{"docs":{},"遇":{"docs":{},"点":{"docs":{},"）":{"docs":{},"。":{"docs":{},"现":{"docs":{},"在":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"都":{"docs":{},"剪":{"docs":{},"掉":{"docs":{},"，":{"docs":{},"入":{"docs":{},"环":{"docs":{},"点":{"docs":{},"到":{"docs":{},"相":{"docs":{},"遇":{"docs":{},"点":{"docs":{},"的":{"docs":{},"路":{"docs":{},"程":{"docs":{},"，":{"docs":{},"两":{"docs":{},"边":{"docs":{},"剩":{"docs":{},"下":{"docs":{},"的":{"docs":{},"路":{"docs":{},"程":{"docs":{},"长":{"docs":{},"度":{"docs":{},"相":{"docs":{},"同":{"docs":{},"（":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"到":{"docs":{},"入":{"docs":{},"环":{"docs":{},"点":{"docs":{},"，":{"docs":{},"和":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"从":{"docs":{},"入":{"docs":{},"环":{"docs":{},"点":{"docs":{},"逆":{"docs":{},"时":{"docs":{},"针":{"docs":{},"回":{"docs":{},"到":{"docs":{},"相":{"docs":{},"遇":{"docs":{},"点":{"docs":{},"）":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"从":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"出":{"docs":{},"发":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"从":{"docs":{},"相":{"docs":{},"遇":{"docs":{},"点":{"docs":{},"出":{"docs":{},"发":{"docs":{},"，":{"docs":{},"走":{"docs":{},"到":{"docs":{},"入":{"docs":{},"环":{"docs":{},"点":{"docs":{},"的":{"docs":{},"路":{"docs":{},"程":{"docs":{},"长":{"docs":{},"度":{"docs":{},"相":{"docs":{},"同":{"docs":{},"。":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"趟":{"docs":{},"冒":{"docs":{},"泡":{"docs":{},"：":{"2":{"docs":{},"，":{"4":{"docs":{},"，":{"3":{"docs":{},"，":{"1":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"j":{"docs":{},"列":{"docs":{},"右":{"docs":{},"边":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"小":{"docs":{},"于":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"_":{"docs":{},"j":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}}}}}},"左":{"docs":{},"边":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"小":{"docs":{},"于":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"_":{"docs":{},"j":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"个":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}},"有":{"docs":{},"序":{"docs":{},"列":{"docs":{},"表":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}}}}}}},"种":{"docs":{},"就":{"docs":{},"是":{"docs":{},"判":{"docs":{},"断":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"或":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"若":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"深":{"docs":{},"度":{"docs":{},"，":{"docs":{},"反":{"docs":{},"之":{"docs":{},"返":{"docs":{},"回":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"深":{"docs":{},"度":{"docs":{},"，":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"趟":{"docs":{},"冒":{"docs":{},"泡":{"docs":{},"：":{"4":{"docs":{},"，":{"3":{"docs":{},"，":{"2":{"docs":{},"，":{"1":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"三":{"docs":{},"趟":{"docs":{},"冒":{"docs":{},"泡":{"docs":{},"：":{"4":{"docs":{},"，":{"3":{"docs":{},"，":{"2":{"docs":{},"，":{"1":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"个":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"只":{"docs":{},"得":{"docs":{},"到":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}}}}}}}}},"就":{"docs":{},"说":{"docs":{},"明":{"docs":{},"是":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"靠":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"传":{"docs":{},"没":{"docs":{},"传":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"和":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"决":{"docs":{},"定":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"地":{"docs":{},"反":{"docs":{},"转":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"排":{"docs":{},"序":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"而":{"docs":{},"[":{"7":{"docs":{},",":{"1":{"0":{"docs":{},"，":{"8":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},"则":{"docs":{},"不":{"docs":{},"是":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}},"走":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},"步":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}},"检":{"docs":{},"验":{"docs":{},"是":{"docs":{},"否":{"docs":{},"走":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"路":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"额":{"docs":{},"外":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"标":{"docs":{},"志":{"docs":{},"数":{"docs":{},"组":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}}}}}}}}}}},"像":{"docs":{},"爬":{"docs":{},"楼":{"docs":{},"梯":{"docs":{},"，":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"要":{"docs":{},"爬":{"docs":{},"到":{"1":{"0":{"docs":{},"楼":{"docs":{},"，":{"docs":{},"先":{"docs":{},"看":{"docs":{},"能":{"docs":{},"不":{"docs":{},"能":{"docs":{},"爬":{"docs":{},"到":{"1":{"docs":{},"楼":{"docs":{},"，":{"2":{"docs":{},"楼":{"docs":{},"等":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}},"docs":{}}}},"docs":{}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"只":{"docs":{},"存":{"docs":{},"一":{"docs":{},"行":{"docs":{},"的":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}}}},"循":{"docs":{},"环":{"docs":{},"实":{"docs":{},"现":{"docs":{},"二":{"docs":{},"分":{"docs":{},"搜":{"docs":{},"索":{"docs":{"二分/二分搜索.html":{"ref":"二分/二分搜索.html","tf":0.009615384615384616}}}}}}}},"这":{"docs":{},"么":{"docs":{},"多":{"docs":{},"次":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}}},"结":{"docs":{},"束":{"docs":{},"后":{"docs":{},"b":{"docs":{},"o":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}},"docs":{}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"+":{"1":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}},"docs":{}}}}}},"条":{"docs":{},"件":{"docs":{},"为":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}}}}}},"版":{"docs":{},"本":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}}},"\\":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.022099447513812154},"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.014598540145985401},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.02631578947368421},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.022988505747126436},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.03389830508474576},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.02877697841726619},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.023148148148148147},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.037037037037037035},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.027777777777777776},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.022099447513812154},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.041666666666666664},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.027972027972027972},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012},"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.07142857142857142},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.06097560975609756},"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.0125}}},"≤":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.014184397163120567},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.02247191011235955},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.021739130434782608},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0392156862745098},"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.01652892561983471}}},"个":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}}}}}},"大":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{},"请":{"docs":{},"注":{"docs":{},"意":{"docs":{},"，":{"docs":{},"你":{"docs":{},"需":{"docs":{},"要":{"docs":{},"找":{"docs":{},"的":{"docs":{},"是":{"docs":{},"数":{"docs":{},"组":{"docs":{},"排":{"docs":{},"序":{"docs":{},"后":{"docs":{},"的":{"docs":{},"第":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"第":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}}}}}}}}}},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}}},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"分":{"docs":{},"别":{"docs":{},"是":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.013392857142857142}}}}}}}}}}},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"原":{"docs":{},"地":{"docs":{},"对":{"docs":{},"它":{"docs":{},"们":{"docs":{},"进":{"docs":{},"行":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"相":{"docs":{},"同":{"docs":{},"颜":{"docs":{},"色":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"，":{"docs":{},"并":{"docs":{},"按":{"docs":{},"照":{"docs":{},"红":{"docs":{},"色":{"docs":{},"、":{"docs":{},"白":{"docs":{},"色":{"docs":{},"、":{"docs":{},"蓝":{"docs":{},"色":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"矩":{"docs":{},"阵":{"docs":{},"（":{"docs":{},"m":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"（":{"docs":{},"升":{"docs":{},"序":{"docs":{},"）":{"docs":{},"整":{"docs":{},"型":{"docs":{},"数":{"docs":{},"组":{"docs":{"二分/二分查找_LeetCode_704.html":{"ref":"二分/二分查找_LeetCode_704.html","tf":0.007194244604316547}}}}}}}}}}}}},"是":{"docs":{},"一":{"docs":{},"支":{"docs":{},"给":{"docs":{},"定":{"docs":{},"股":{"docs":{},"票":{"docs":{},"第":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}}}}}}},"整":{"docs":{},"数":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}}}}},"单":{"docs":{},"位":{"docs":{},"的":{"docs":{},"雨":{"docs":{},"水":{"docs":{},"（":{"docs":{},"蓝":{"docs":{},"色":{"docs":{},"部":{"docs":{},"分":{"docs":{},"表":{"docs":{},"示":{"docs":{},"雨":{"docs":{},"水":{"docs":{},"）":{"docs":{},"。":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}},"。":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}},"非":{"docs":{},"负":{"docs":{},"整":{"docs":{},"数":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}},"表":{"docs":{},"示":{"docs":{},"每":{"docs":{},"个":{"docs":{},"宽":{"docs":{},"度":{"docs":{},"为":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}},"，":{"docs":{},"用":{"docs":{},"来":{"docs":{},"表":{"docs":{},"示":{"docs":{},"柱":{"docs":{},"状":{"docs":{},"图":{"docs":{},"中":{"docs":{},"各":{"docs":{},"个":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"。":{"docs":{},"每":{"docs":{},"个":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"彼":{"docs":{},"此":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"，":{"docs":{},"且":{"docs":{},"宽":{"docs":{},"度":{"docs":{},"为":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}}}},"正":{"docs":{},"整":{"docs":{},"数":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"和":{"docs":{},"一":{"docs":{},"个":{"docs":{},"正":{"docs":{},"整":{"docs":{},"数":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}}}}}}}}}}}},"方":{"docs":{},"体":{"docs":{},"叠":{"docs":{},"放":{"docs":{},"在":{"docs":{},"对":{"docs":{},"应":{"docs":{},"单":{"docs":{},"元":{"docs":{},"格":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}}}}}}}}}}}},"排":{"docs":{},"序":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"合":{"docs":{},"并":{"docs":{},"后":{"docs":{},"的":{"docs":{},"排":{"docs":{},"序":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{},"请":{"docs":{},"分":{"docs":{},"析":{"docs":{},"和":{"docs":{},"描":{"docs":{},"述":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"。":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"节":{"docs":{},"点":{"docs":{},"（":{"docs":{},"最":{"docs":{},"详":{"docs":{},"细":{"docs":{},"解":{"docs":{},"决":{"docs":{},"方":{"docs":{},"案":{"docs":{},"！":{"docs":{},"！":{"docs":{},"！":{"docs":{},"）":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"。":{"docs":{},"其":{"docs":{},"实":{"docs":{},"就":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"链":{"docs":{},"表":{"docs":{},"首":{"docs":{},"先":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"。":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834}}},"；":{"docs":{},"在":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834}}}},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"返":{"docs":{},"回":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},"。":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}},"一":{"docs":{},"组":{"docs":{},"进":{"docs":{},"行":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"，":{"docs":{},"请":{"docs":{},"你":{"docs":{},"返":{"docs":{},"回":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"后":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}},"结":{"docs":{},"点":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"重":{"docs":{},"新":{"docs":{},"链":{"docs":{},"接":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"所":{"docs":{},"引":{"docs":{},"用":{"docs":{},"的":{"docs":{},"结":{"docs":{},"点":{"docs":{},"的":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}}}}}}}}},"分":{"docs":{},"开":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"通":{"docs":{},"过":{"docs":{},"同":{"docs":{},"时":{"docs":{},"移":{"docs":{},"动":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"向":{"docs":{},"前":{"docs":{},"来":{"docs":{},"保":{"docs":{},"持":{"docs":{},"这":{"docs":{},"个":{"docs":{},"恒":{"docs":{},"定":{"docs":{},"的":{"docs":{},"间":{"docs":{},"隔":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"到":{"docs":{},"达":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{},"。":{"docs":{},"此":{"docs":{},"时":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"将":{"docs":{},"指":{"docs":{},"向":{"docs":{},"从":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{},"数":{"docs":{},"起":{"docs":{},"的":{"docs":{},"第":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"组":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"链":{"docs":{},"表":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"2":{"5":{"docs":{},")":{"docs":{"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125}}}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"2":{"5":{"docs":{"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":5}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}},"鸡":{"docs":{},"蛋":{"docs":{},"，":{"docs":{},"并":{"docs":{},"可":{"docs":{},"以":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"栋":{"docs":{},"从":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}},",":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}},"台":{"docs":{},"阶":{"docs":{},"。":{"docs":{},"你":{"docs":{},"有":{"docs":{},"多":{"docs":{},"少":{"docs":{},"种":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"可":{"docs":{},"以":{"docs":{},"爬":{"docs":{},"到":{"docs":{},"楼":{"docs":{},"顶":{"docs":{},"呢":{"docs":{},"？":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}}}}}}}}}}}}}}}}}}}}}}},"孩":{"docs":{},"子":{"docs":{},"站":{"docs":{},"成":{"docs":{},"了":{"docs":{},"一":{"docs":{},"条":{"docs":{},"直":{"docs":{},"线":{"docs":{},"，":{"docs":{},"老":{"docs":{},"师":{"docs":{},"会":{"docs":{},"根":{"docs":{},"据":{"docs":{},"每":{"docs":{},"个":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"的":{"docs":{},"表":{"docs":{},"现":{"docs":{},"，":{"docs":{},"预":{"docs":{},"先":{"docs":{},"给":{"docs":{},"他":{"docs":{},"们":{"docs":{},"评":{"docs":{},"分":{"docs":{},"。":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"糖":{"docs":{},"果":{"docs":{},"。":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}}}},"黄":{"docs":{},"色":{"docs":{},"的":{"docs":{},"边":{"docs":{},"：":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}}}},"数":{"docs":{},"的":{"docs":{},"组":{"docs":{},"合":{"docs":{},"。":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}}}}}},"必":{"docs":{},"须":{"docs":{},"这":{"docs":{},"样":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"能":{"docs":{},"直":{"docs":{},"接":{"docs":{},"在":{"docs":{},"i":{"docs":{},"f":{"docs":{},"语":{"docs":{},"句":{"docs":{},"返":{"docs":{},"回":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}}}}}}}}}}}}}}}},"小":{"docs":{},"于":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}},"为":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}},"总":{"docs":{},"是":{"docs":{},"有":{"docs":{},"效":{"docs":{},"的":{"docs":{},"，":{"1":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}},"docs":{},"且":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}}}}},"合":{"docs":{},"理":{"docs":{},"的":{"docs":{},"，":{"docs":{},"且":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}}},"体":{"docs":{},"来":{"docs":{},"讲":{"docs":{},"，":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"树":{"docs":{},"的":{"docs":{},"构":{"docs":{},"造":{"docs":{},"过":{"docs":{},"程":{"docs":{},"，":{"docs":{},"通":{"docs":{},"过":{"docs":{},"不":{"docs":{},"断":{"docs":{},"插":{"docs":{},"入":{"docs":{},"新":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"来":{"docs":{},"丰":{"docs":{},"富":{"docs":{},"这":{"docs":{},"棵":{"2":{"6":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"。":{"docs":{},"强":{"docs":{},"调":{"docs":{},"注":{"docs":{},"意":{"docs":{},"这":{"docs":{},"里":{"docs":{},"是":{"2":{"6":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"英":{"docs":{},"文":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"中":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"母":{"docs":{},"都":{"docs":{},"只":{"docs":{},"能":{"docs":{},"是":{"docs":{},"a":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"来":{"docs":{},"查":{"docs":{},"找":{"docs":{},"其":{"docs":{},"中":{"docs":{},"第":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.0055248618784530384}}}}}}},"表":{"docs":{},"示":{"docs":{},"链":{"docs":{},"表":{"docs":{},"尾":{"docs":{},"连":{"docs":{},"接":{"docs":{},"到":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"（":{"docs":{},"索":{"docs":{},"引":{"docs":{},"从":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}}}}}}}}}}}},"。":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}},"计":{"docs":{},"算":{"docs":{},"树":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"数":{"docs":{"二分/二叉搜索树中第K小的元素.html":{"ref":"二分/二叉搜索树中第K小的元素.html","tf":0.011049723756906077},"二叉树/求树的节点数量.html":{"ref":"二叉树/求树的节点数量.html","tf":0.034482758620689655},"二叉树/二叉搜索树中第K小的元素.html":{"ref":"二叉树/二叉搜索树中第K小的元素.html","tf":0.011049723756906077}}}}}}},"并":{"docs":{},"返":{"docs":{},"回":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}},"一":{"docs":{},"行":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"就":{"docs":{},"用":{"docs":{},"一":{"docs":{},"次":{"docs":{},"单":{"docs":{},"调":{"docs":{},"栈":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}},"完":{"docs":{},"一":{"docs":{},"行":{"docs":{},"中":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"就":{"docs":{},"应":{"docs":{},"用":{"docs":{},"单":{"docs":{},"调":{"docs":{},"栈":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"节":{"docs":{},"点":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"扫":{"docs":{},"描":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"【":{"0":{"docs":{},"】":{"docs":{"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}},"docs":{}}}}},"跨":{"docs":{},"越":{"docs":{},"了":{"docs":{},"中":{"docs":{},"间":{"docs":{},"的":{"docs":{},"序":{"docs":{},"列":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}},"寻":{"docs":{},"找":{"docs":{},"两":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":10.00531914893617}}}}}}}}}}}},"旋":{"docs":{},"转":{"docs":{},"排":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":3.333333333333333},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"1":{"5":{"3":{"docs":{},"中":{"docs":{},"等":{"docs":{},")":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"（":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}}}}},"_":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"5":{"4":{"docs":{"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}},"选":{"docs":{},"择":{"docs":{},"排":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"5":{"3":{"docs":{},"中":{"docs":{},"等":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":10}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}},"插":{"docs":{},"入":{"docs":{},"点":{"docs":{},"使":{"docs":{},"用":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"，":{"docs":{},"但":{"docs":{},"与":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"某":{"docs":{},"数":{"docs":{},"字":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"是":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"一":{"docs":{},"些":{"docs":{},"边":{"docs":{},"界":{"docs":{},"条":{"docs":{},"件":{"docs":{},"：":{"docs":{"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"出":{"docs":{},"队":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"（":{"docs":{},"符":{"docs":{},"合":{"docs":{},"条":{"docs":{},"件":{"docs":{},"的":{"docs":{},"）":{"docs":{},"最":{"docs":{},"近":{"docs":{},"节":{"docs":{},"点":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}}}}}}}}}}}}}},"请":{"docs":{},"你":{"docs":{},"找":{"docs":{},"出":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"要":{"docs":{},"求":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{"二分/寻找两个有序数组的中位数.html":{"ref":"二分/寻找两个有序数组的中位数.html","tf":0.005319148936170213}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"返":{"docs":{},"回":{"docs":{},"最":{"docs":{},"终":{"docs":{},"形":{"docs":{},"体":{"docs":{},"的":{"docs":{},"表":{"docs":{},"面":{"docs":{},"积":{"docs":{},"。":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}}}}}}}}}}}}},"找":{"docs":{},"出":{"docs":{},"其":{"docs":{},"中":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358}}}}}}}}}}}},"注":{"docs":{},"意":{"docs":{},"，":{"docs":{},"你":{"docs":{},"的":{"docs":{},"答":{"docs":{},"案":{"docs":{},"必":{"docs":{},"须":{"docs":{},"是":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}}}}}},"它":{"docs":{},"是":{"docs":{},"排":{"docs":{},"序":{"docs":{},"后":{"docs":{},"的":{"docs":{},"第":{"docs":{},"k":{"docs":{},"小":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"第":{"docs":{},"k":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"要":{"docs":{},"使":{"docs":{},"用":{"docs":{},"除":{"docs":{},"法":{"docs":{},"，":{"docs":{},"且":{"docs":{},"在":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}}}}}}}}},"尝":{"docs":{},"试":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}}},"编":{"docs":{},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"使":{"docs":{},"其":{"docs":{},"可":{"docs":{},"以":{"docs":{},"删":{"docs":{},"除":{"docs":{},"某":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"（":{"docs":{},"非":{"docs":{},"末":{"docs":{},"尾":{"docs":{},"）":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"你":{"docs":{},"将":{"docs":{},"只":{"docs":{},"被":{"docs":{},"给":{"docs":{},"定":{"docs":{},"要":{"docs":{},"求":{"docs":{},"被":{"docs":{},"删":{"docs":{},"除":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"判":{"docs":{},"断":{"docs":{},"一":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"回":{"docs":{},"文":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428}}}}}}}}}}}}}}}}},"冒":{"docs":{},"泡":{"docs":{},"排":{"docs":{},"序":{"docs":{},"有":{"docs":{},"错":{"docs":{"二分/找出数组中第K大的数.html":{"ref":"二分/找出数组中第K大的数.html","tf":0.0070921985815602835}}}},"是":{"docs":{},"稳":{"docs":{},"定":{"docs":{},"的":{"docs":{"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":0.05555555555555555}}}}}}}}}},"相":{"docs":{},"同":{"docs":{},"元":{"docs":{},"素":{"docs":{},"异":{"docs":{},"或":{"docs":{},"等":{"docs":{},"于":{"0":{"docs":{},"，":{"0":{"docs":{},"与":{"docs":{},"任":{"docs":{},"何":{"docs":{},"元":{"docs":{},"素":{"docs":{},"异":{"docs":{},"或":{"docs":{},"为":{"docs":{},"该":{"docs":{},"元":{"docs":{},"素":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}},"交":{"docs":{},"链":{"docs":{},"表":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":3.333333333333333}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}}},"邻":{"docs":{},"的":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"中":{"docs":{},"，":{"docs":{},"评":{"docs":{},"分":{"docs":{},"高":{"docs":{},"的":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"必":{"docs":{},"须":{"docs":{},"获":{"docs":{},"得":{"docs":{},"更":{"docs":{},"多":{"docs":{},"的":{"docs":{},"糖":{"docs":{},"果":{"docs":{},"。":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}}}}}}}}},"连":{"docs":{},"的":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}},"累":{"docs":{},"加":{"docs":{},"求":{"docs":{},"和":{"docs":{},"就":{"docs":{},"去":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"累":{"docs":{},"加":{"docs":{},"求":{"docs":{},"和":{"docs":{"二分/找出数组中唯一重复的元素.html":{"ref":"二分/找出数组中唯一重复的元素.html","tf":0.014492753623188406}}}}}}}}}}}}}}},"通":{"docs":{},"过":{"docs":{},"分":{"docs":{},"析":{"docs":{},"，":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"前":{"docs":{},"三":{"docs":{},"个":{"docs":{},"数":{"docs":{},"比":{"docs":{},"数":{"docs":{},"值":{"docs":{},"中":{"docs":{},"其":{"docs":{},"其":{"docs":{},"它":{"docs":{},"数":{"docs":{},"都":{"docs":{},"大":{"docs":{},"，":{"docs":{},"因":{"docs":{},"此":{"docs":{},"可":{"docs":{},"以":{"docs":{},"采":{"docs":{},"用":{"docs":{},"类":{"docs":{},"似":{"docs":{},"求":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"来":{"docs":{},"求":{"docs":{},"前":{"docs":{},"三":{"docs":{},"名":{"docs":{},"。":{"docs":{},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{},"前":{"docs":{},"三":{"docs":{},"名":{"docs":{},"为":{"docs":{},"最":{"docs":{},"小":{"docs":{},"整":{"docs":{},"数":{"docs":{},"：":{"docs":{},"r":{"1":{"docs":{},",":{"docs":{},"r":{"2":{"docs":{},",":{"docs":{},"r":{"3":{"docs":{},"。":{"docs":{"二分/找出数组中前k大.html":{"ref":"二分/找出数组中前k大.html","tf":0.015873015873015872}}}},"docs":{}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"知":{"docs":{},"道":{"docs":{},"，":{"docs":{},"旋":{"docs":{},"转":{"docs":{},"数":{"docs":{},"组":{"docs":{},"可":{"docs":{},"以":{"docs":{},"划":{"docs":{},"分":{"docs":{},"为":{"docs":{},"两":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"都":{"docs":{},"大":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{},"后":{"docs":{},"面":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"不":{"docs":{},"断":{"docs":{},"缩":{"docs":{},"小":{"docs":{},"查":{"docs":{},"找":{"docs":{},"范":{"docs":{},"围":{"docs":{},"。":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"选":{"docs":{},"择":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"特":{"docs":{},"性":{"docs":{},"知":{"docs":{},"道":{"docs":{},"，":{"docs":{},"数":{"docs":{},"组":{"docs":{},"元":{"docs":{},"素":{"docs":{},"先":{"docs":{},"是":{"docs":{},"递":{"docs":{},"增":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"突":{"docs":{},"然":{"docs":{},"下":{"docs":{},"降":{"docs":{},"到":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"再":{"docs":{},"递":{"docs":{},"增":{"docs":{},"。":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"使":{"docs":{},"用":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"类":{"docs":{},"中":{"docs":{},"定":{"docs":{},"义":{"docs":{},"三":{"docs":{},"个":{"docs":{},"属":{"docs":{},"性":{"docs":{},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"为":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"本":{"docs":{},"身":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"还":{"docs":{},"有":{"docs":{},"l":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"左":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"和":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"右":{"docs":{},"孩":{"docs":{},"子":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"配":{"docs":{},"符":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"4":{"4":{"docs":{},")":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"4":{"4":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}},"分":{"docs":{},"别":{"docs":{},"表":{"docs":{},"示":{"docs":{},"红":{"docs":{},"色":{"docs":{},"、":{"docs":{},"白":{"docs":{},"色":{"docs":{},"和":{"docs":{},"蓝":{"docs":{},"色":{"docs":{},"。":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}}}}}}}}}}}}},"治":{"docs":{},"法":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0049382716049382715},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}},"（":{"docs":{},"未":{"docs":{},"完":{"docs":{},"成":{"docs":{},"）":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}}},"析":{"docs":{"二叉树/二叉树最大子树和.html":{"ref":"二叉树/二叉树最大子树和.html","tf":0.016129032258064516},"二叉树/判断两棵二叉树是否相等.html":{"ref":"二叉树/判断两棵二叉树是否相等.html","tf":0.008403361344537815},"二叉树/从中序和后序遍历构造二叉树.html":{"ref":"二叉树/从中序和后序遍历构造二叉树.html","tf":0.013888888888888888},"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}},"割":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":3.333333333333333},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":3.342592592592592}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":5}}}}}}}}}}}}},"成":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}},"一":{"docs":{},"些":{"docs":{},"子":{"docs":{},"串":{"docs":{},"，":{"docs":{},"使":{"docs":{},"每":{"docs":{},"个":{"docs":{},"子":{"docs":{},"串":{"docs":{},"都":{"docs":{},"是":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{},"。":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"讨":{"docs":{},"论":{"docs":{},"，":{"docs":{},"偷":{"docs":{},"第":{"docs":{},"一":{"docs":{},"家":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"家":{"docs":{},"就":{"docs":{},"不":{"docs":{},"能":{"docs":{},"偷":{"docs":{},"，":{"docs":{},"不":{"docs":{},"偷":{"docs":{},"第":{"docs":{},"一":{"docs":{},"家":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"家":{"docs":{},"可":{"docs":{},"以":{"docs":{},"选":{"docs":{},"择":{"docs":{},"偷":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"选":{"docs":{},"择":{"docs":{},"不":{"docs":{},"偷":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"取":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"发":{"docs":{},"糖":{"docs":{},"果":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"3":{"5":{"docs":{},")":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"3":{"5":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"颜":{"docs":{},"色":{"docs":{},"分":{"docs":{},"类":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":10}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"7":{"5":{"docs":{},")":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"首":{"docs":{},"先":{"docs":{},"，":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"计":{"docs":{},"算":{"docs":{},"出":{"0":{"docs":{},"、":{"1":{"docs":{"二分/颜色分类.html":{"ref":"二分/颜色分类.html","tf":0.016129032258064516}}},"docs":{}}},"docs":{}}}}}},"要":{"docs":{},"想":{"docs":{},"找":{"docs":{},"到":{"docs":{},"第":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}},"明":{"docs":{},"确":{"docs":{},"，":{"docs":{},"是":{"docs":{},"小":{"docs":{},"于":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"用":{"docs":{},"单":{"docs":{},"调":{"docs":{},"递":{"docs":{},"减":{"docs":{},"栈":{"docs":{},"。":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}},"要":{"docs":{},"说":{"docs":{},"明":{"docs":{},"的":{"docs":{},"是":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}}}},"把":{"docs":{},"链":{"docs":{},"表":{"docs":{},"分":{"docs":{},"割":{"docs":{},"为":{"docs":{},"两":{"docs":{},"个":{"docs":{},"子":{"docs":{},"链":{"docs":{},"表":{"docs":{},"（":{"docs":{},"采":{"docs":{},"用":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"找":{"docs":{},"到":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{},"）":{"docs":{},"，":{"docs":{},"递":{"docs":{},"归":{"docs":{},"该":{"docs":{},"分":{"docs":{},"割":{"docs":{},"过":{"docs":{},"程":{"docs":{},"，":{"docs":{},"直":{"docs":{},"至":{"docs":{},"子":{"docs":{},"链":{"docs":{},"表":{"docs":{},"只":{"docs":{},"包":{"docs":{},"含":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"为":{"docs":{},"止":{"docs":{},"；":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"将":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"中":{"docs":{},"的":{"docs":{},"每":{"docs":{},"个":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"将":{"docs":{},"添":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"哑":{"docs":{},"结":{"docs":{},"点":{"docs":{},"作":{"docs":{},"为":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"，":{"docs":{},"该":{"docs":{},"结":{"docs":{},"点":{"docs":{},"位":{"docs":{},"于":{"docs":{},"列":{"docs":{},"表":{"docs":{},"头":{"docs":{},"部":{"docs":{},"。":{"docs":{},"哑":{"docs":{},"结":{"docs":{},"点":{"docs":{},"用":{"docs":{},"来":{"docs":{},"简":{"docs":{},"化":{"docs":{},"某":{"docs":{},"些":{"docs":{},"极":{"docs":{},"端":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"例":{"docs":{},"如":{"docs":{},"列":{"docs":{},"表":{"docs":{},"中":{"docs":{},"只":{"docs":{},"含":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{},"，":{"docs":{},"或":{"docs":{},"需":{"docs":{},"要":{"docs":{},"删":{"docs":{},"除":{"docs":{},"列":{"docs":{},"表":{"docs":{},"的":{"docs":{},"头":{"docs":{},"部":{"docs":{},"。":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"现":{"docs":{},"将":{"docs":{},"数":{"docs":{},"字":{"docs":{},"转":{"docs":{},"化":{"docs":{},"为":{"docs":{},"字":{"docs":{},"符":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}}}},"对":{"docs":{},"边":{"docs":{},"界":{"docs":{},"上":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"'":{"docs":{},"o":{"docs":{},"'":{"docs":{},"做":{"docs":{},"深":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"，":{"docs":{},"将":{"docs":{},"与":{"docs":{},"其":{"docs":{},"相":{"docs":{},"连":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"'":{"docs":{},"o":{"docs":{},"'":{"docs":{},"改":{"docs":{},"为":{"docs":{},"'":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"尾":{"docs":{},"连":{"docs":{},"接":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}},"相":{"docs":{},"连":{"docs":{},"法":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.008097165991902834}},":":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}},"快":{"docs":{},"速":{"docs":{},"排":{"docs":{},"序":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}},"解":{"docs":{},"决":{"docs":{},"奇":{"docs":{},"偶":{"docs":{},"问":{"docs":{},"题":{"docs":{"二分/快速排序解决奇偶问题.html":{"ref":"二分/快速排序解决奇偶问题.html","tf":10}}}}}}}}}}},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}},"，":{"docs":{},"写":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}},"两":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}},"不":{"docs":{},"过":{"docs":{},"最":{"docs":{},"后":{"docs":{},"要":{"docs":{},"分":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"、":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"讨":{"docs":{},"论":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}},"查":{"docs":{},"找":{"docs":{},"距":{"docs":{},"离":{"docs":{},"某":{"docs":{},"个":{"docs":{},"值":{"docs":{},"最":{"docs":{},"近":{"docs":{},"的":{"docs":{},"下":{"docs":{},"标":{"docs":{"二分/查找距离某个值最近的下标.html":{"ref":"二分/查找距离某个值最近的下标.html","tf":10}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"n":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/查找链表倒数第N个节点.html":{"ref":"链表/查找链表倒数第N个节点.html","tf":10}}}}}}}}}}}}},")":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0182648401826484},"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}},"。":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839},"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"ref":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","tf":0.014925373134328358}}}},"否":{"docs":{},"则":{"docs":{},"右":{"docs":{},"边":{"docs":{},"一":{"docs":{},"定":{"docs":{},"是":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},",":{"docs":{},"但":{"docs":{},"是":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"这":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"可":{"docs":{},"能":{"docs":{},"会":{"docs":{},"是":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"下":{"docs":{},"次":{"docs":{},"还":{"docs":{},"要":{"docs":{},"继":{"docs":{},"续":{"docs":{},"搜":{"docs":{},"索":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"有":{"docs":{},"环":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403}}}},"，":{"docs":{},"鸡":{"docs":{},"蛋":{"docs":{},"从":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}},"等":{"docs":{},"价":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}},"于":{"docs":{},"前":{"docs":{},"面":{"docs":{},"一":{"docs":{},"堆":{"0":{"docs":{},"，":{"docs":{},"后":{"docs":{},"面":{"docs":{},"一":{"docs":{},"堆":{"1":{"docs":{},"，":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"1":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}},"docs":{}}}}}}},"于":{"3":{"docs":{},"，":{"docs":{},"当":{"docs":{},"求":{"1":{"0":{"docs":{},"，":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"'":{"1":{"0":{"docs":{},"'":{"docs":{},"]":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"1":{"0":{"docs":{},">":{"4":{"docs":{},",":{"docs":{},"则":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"'":{"1":{"0":{"docs":{},"'":{"docs":{},"]":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}},"docs":{}},"docs":{}}}}}}}},"docs":{}}},"docs":{}},"docs":{}}}}}}},"docs":{}},"docs":{}}}}}}},"docs":{}},"docs":{}}}}},"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}},"最":{"docs":{},"大":{"docs":{},"堆":{"docs":{},"元":{"docs":{},"素":{"docs":{},"个":{"docs":{},"数":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}},"肯":{"docs":{},"定":{"docs":{},"不":{"docs":{},"是":{"docs":{},"最":{"docs":{},"小":{"docs":{},"；":{"docs":{"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"ref":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","tf":0.006172839506172839}}}}}}}}},"插":{"docs":{},"入":{"docs":{},"数":{"docs":{},"字":{"docs":{},"在":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"左":{"docs":{},"边":{"docs":{},"，":{"docs":{},"或":{"docs":{},"在":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"右":{"docs":{},"边":{"docs":{},"；":{"docs":{"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}}}}}}},"法":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}},"排":{"docs":{},"序":{"docs":{},"是":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"的":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"只":{"docs":{},"移":{"docs":{},"动":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"可":{"docs":{},"以":{"docs":{},"形":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"输":{"docs":{},"出":{"docs":{},"列":{"docs":{},"表":{"docs":{},"。":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"动":{"docs":{},"画":{"docs":{},"演":{"docs":{},"示":{"docs":{},"如":{"docs":{},"上":{"docs":{},"。":{"docs":{},"从":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"该":{"docs":{},"链":{"docs":{},"表":{"docs":{},"可":{"docs":{},"以":{"docs":{},"被":{"docs":{},"认":{"docs":{},"为":{"docs":{},"已":{"docs":{},"经":{"docs":{},"部":{"docs":{},"分":{"docs":{},"排":{"docs":{},"序":{"docs":{},"（":{"docs":{},"用":{"docs":{},"黑":{"docs":{},"色":{"docs":{},"表":{"docs":{},"示":{"docs":{},"）":{"docs":{},"。":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"算":{"docs":{},"法":{"docs":{},"：":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}}}}}}},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}}}},"搜":{"docs":{},"索":{"docs":{},"插":{"docs":{},"入":{"docs":{},"位":{"docs":{},"置":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"3":{"5":{"docs":{},")":{"docs":{"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":0.014705882352941176}}}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"3":{"5":{"docs":{"二分/搜索插入位置_LeetCode_35.html":{"ref":"二分/搜索插入位置_LeetCode_35.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"存":{"docs":{},"在":{"docs":{},"这":{"docs":{},"个":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"，":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{},"它":{"docs":{},"的":{"docs":{},"索":{"docs":{},"引":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"旋":{"docs":{},"转":{"docs":{},"排":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":10.006493506493506},"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":3.3445692883895126}}}}}}}},"二":{"docs":{},"维":{"docs":{},"矩":{"docs":{},"阵":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":3.339583333333333}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":5}}}}}}}}}}}}}},"，":{"docs":{},"若":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"出":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"与":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}},"函":{"docs":{},"数":{"docs":{},"。":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"应":{"docs":{},"该":{"docs":{},"返":{"docs":{},"回":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"下":{"docs":{},"标":{"docs":{},"值":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}}}}}}}}}}},"实":{"docs":{},"现":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":2.5031347962382444}},"一":{"docs":{},"个":{"docs":{"字符串/实现 Trie 前缀树 Leetcode 208.html":{"ref":"字符串/实现 Trie 前缀树 Leetcode 208.html","tf":0.003134796238244514}}}},"思":{"docs":{},"路":{"docs":{},"：":{"docs":{},"给":{"docs":{},"定":{"docs":{},"四":{"docs":{},"个":{"docs":{},"边":{"docs":{},"界":{"docs":{},"，":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}}}}}}}}}}}}}}},"上":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"建":{"docs":{},"立":{"docs":{},"一":{"docs":{},"个":{"2":{"6":{"docs":{},"大":{"docs":{},"小":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"以":{"docs":{},"容":{"docs":{},"纳":{"docs":{},"不":{"docs":{},"同":{"docs":{},"字":{"docs":{},"母":{"docs":{},"结":{"docs":{},"尾":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{},"每":{"docs":{},"当":{"docs":{},"我":{"docs":{},"们":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"的":{"docs":{},"字":{"docs":{},"母":{"docs":{},"时":{"docs":{},"，":{"docs":{"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}},"是":{"1":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}},"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}},"非":{"docs":{},"负":{"docs":{},"整":{"docs":{},"数":{"docs":{},"。":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}},"数":{"docs":{},"。":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}}},"以":{"docs":{},"i":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}},"一":{"docs":{},"个":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"不":{"docs":{},"是":{"docs":{},"子":{"docs":{},"串":{"docs":{},"。":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}}}}}}}}}},"正":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"它":{"docs":{},"的":{"docs":{},"值":{"docs":{},"小":{"docs":{},"于":{"docs":{},"或":{"docs":{},"等":{"docs":{},"于":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{"链表/K 个一组翻转链表_LeetCode_25.html":{"ref":"链表/K 个一组翻转链表_LeetCode_25.html","tf":0.0125}}}}}}}}}}}}}}}}},"。":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}}}}}}}},"否":{"docs":{},"r":{"docs":{},"e":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}}}},"大":{"docs":{},"于":{"docs":{},"k":{"docs":{},"，":{"docs":{},"大":{"docs":{},"于":{"docs":{},"的":{"docs":{},"话":{"docs":{},"就":{"docs":{},"将":{"docs":{},"首":{"docs":{},"元":{"docs":{},"素":{"docs":{},"去":{"docs":{},"掉":{"docs":{},"，":{"docs":{},"循":{"docs":{},"环":{"docs":{},"结":{"docs":{},"束":{"docs":{},"后":{"docs":{},"我":{"docs":{},"们":{"docs":{},"返":{"docs":{},"回":{"docs":{},"堆":{"docs":{},"中":{"docs":{},"的":{"docs":{},"首":{"docs":{},"元":{"docs":{},"素":{"docs":{},"即":{"docs":{},"为":{"docs":{},"所":{"docs":{},"求":{"docs":{},":":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.02247191011235955}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"队":{"docs":{},"首":{"docs":{},"元":{"docs":{},"素":{"docs":{},"（":{"1":{"docs":{},"）":{"docs":{},"，":{"docs":{},"接":{"docs":{},"着":{"docs":{},"判":{"docs":{},"断":{"docs":{},"这":{"docs":{},"个":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"作":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"其":{"docs":{},"后":{"docs":{},"是":{"docs":{},"否":{"docs":{},"还":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"将":{"docs":{},"元":{"docs":{},"素":{"docs":{},"加":{"docs":{},"入":{"docs":{},"队":{"docs":{},"列":{"docs":{},"。":{"docs":{},"同":{"docs":{},"时":{"docs":{},"将":{"docs":{},"结":{"docs":{},"果":{"docs":{},"加":{"docs":{},"入":{"docs":{},"到":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"中":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"被":{"docs":{},"空":{"docs":{},"格":{"docs":{},"拆":{"docs":{},"分":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"或":{"docs":{},"多":{"docs":{},"个":{"docs":{},"在":{"docs":{},"字":{"docs":{},"典":{"docs":{},"中":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"单":{"docs":{},"词":{"docs":{},"。":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}}}}}}}}}}}}}}}}}},"该":{"docs":{},"条":{"docs":{},"件":{"docs":{},"下":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}}}}}}}}}}}}}}}}},"多":{"docs":{},"少":{"docs":{},"。":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}},"由":{"docs":{},"四":{"docs":{},"个":{"docs":{},"方":{"docs":{},"向":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"。":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}}}},"牛":{"docs":{},"顿":{"docs":{},"法":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.016129032258064516}},"*":{"docs":{},"*":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}}}}}},"而":{"6":{"docs":{},"条":{"docs":{"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903}}}},"docs":{},"b":{"docs":{},"=":{"docs":{},"y":{"0":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"docs":{}}}},"且":{"docs":{},"这":{"docs":{},"儿":{"docs":{},"的":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"，":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"都":{"docs":{},"是":{"docs":{},"经":{"docs":{},"过":{"docs":{},"递":{"docs":{},"归":{"docs":{},"后":{"docs":{},"的":{"docs":{},"伪":{"docs":{},"根":{"docs":{},"结":{"docs":{},"点":{"docs":{},"。":{"docs":{},"自":{"docs":{},"然":{"docs":{},"就":{"docs":{},"是":{"docs":{},"q":{"docs":{},"，":{"docs":{},"p":{"docs":{},"的":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"是":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}},"记":{"docs":{},"（":{"docs":{},"x":{"0":{"docs":{},"+":{"docs":{},"a":{"docs":{},"/":{"docs":{},"x":{"0":{"docs":{},"）":{"docs":{},"/":{"2":{"docs":{},"=":{"docs":{},"x":{"docs":{},"'":{"docs":{},",":{"docs":{},"继":{"docs":{},"续":{"docs":{},"求":{"docs":{},"过":{"docs":{},"点":{"docs":{},"（":{"docs":{},"x":{"docs":{},"'":{"docs":{},",":{"docs":{},"f":{"docs":{},"(":{"docs":{},"x":{"docs":{},"'":{"docs":{},")":{"docs":{},"）":{"docs":{},"的":{"docs":{},"切":{"docs":{},"线":{"docs":{},"与":{"docs":{},"x":{"docs":{},"轴":{"docs":{},"的":{"docs":{},"交":{"docs":{},"点":{"docs":{},"的":{"docs":{},"横":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"x":{"docs":{},"'":{"docs":{},"'":{"docs":{},"，":{"docs":{},"很":{"docs":{},"明":{"docs":{},"显":{"docs":{},"x":{"docs":{},"'":{"docs":{},"'":{"docs":{},"比":{"docs":{},"x":{"docs":{},"'":{"docs":{},"更":{"docs":{},"靠":{"docs":{},"近":{"docs":{},"函":{"docs":{},"数":{"docs":{},"f":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},"=":{"docs":{},"x":{"docs":{},"^":{"2":{"docs":{"二分/x的平方根_LeetCode_69_简单.html":{"ref":"二分/x的平方根_LeetCode_69_简单.html","tf":0.008064516129032258}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}},"docs":{}}},"录":{"docs":{},"本":{"docs":{},"轮":{"docs":{},"答":{"docs":{},"案":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}}}}}},"`":{"docs":{},"/":{"docs":{},"/":{"docs":{},"因":{"docs":{},"为":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},"中":{"docs":{},"都":{"docs":{},"是":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"可":{"docs":{},"以":{"docs":{},"稍":{"docs":{},"微":{"docs":{},"变":{"docs":{},"一":{"docs":{},"下":{"docs":{},"，":{"docs":{},"不":{"docs":{},"是":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"k":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"而":{"docs":{},"是":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"k":{"docs":{"二分/数字在排序数组中出现的次数.html":{"ref":"二分/数字在排序数组中出现的次数.html","tf":0.01818181818181818}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"`":{"docs":{},"`":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}}}}}},"s":{"docs":{},"q":{"docs":{},"l":{"docs":{"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218}}}}}}}},"三":{"docs":{},"数":{"docs":{"三数/":{"ref":"三数/","tf":10.083333333333334}},"之":{"docs":{},"和":{"docs":{},"（":{"docs":{},"腾":{"docs":{},"讯":{"docs":{},"）":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":10.010416666666666}}}}}}}}},"个":{"docs":{},"数":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"乘":{"docs":{},"积":{"docs":{"三数/三个数的最大乘积 LeetCode 628.html":{"ref":"三数/三个数的最大乘积 LeetCode 628.html","tf":3.352201257861635},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":0.018867924528301886}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"ref":"逻辑思维/三个数的最大乘积 LeetCode 628.html","tf":5}}}}}}}}}}}}}}}}},"维":{"docs":{},"形":{"docs":{},"体":{"docs":{},"的":{"docs":{},"表":{"docs":{},"面":{"docs":{},"积":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"8":{"9":{"2":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}},"与":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}},"固":{"docs":{},"定":{"docs":{},"i":{"docs":{},"，":{"docs":{},"调":{"docs":{},"整":{"docs":{},"j":{"docs":{},"和":{"docs":{},"k":{"docs":{"三数/最接近的三数之和.html":{"ref":"三数/最接近的三数之和.html","tf":0.007936507936507936}}}}}}}}}}},"]":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666},"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015},"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.014084507042253521},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.016666666666666666},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"二叉树/二叉树的层次遍历 II.html":{"ref":"二叉树/二叉树的层次遍历 II.html","tf":0.013157894736842105},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"ref":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","tf":0.011494252873563218},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666},"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521},"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.012048192771084338},"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.0196078431372549},"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176},"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}},",":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.011111111111111112},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0091324200913242},"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}}},"满":{"docs":{},"足":{"docs":{},"要":{"docs":{},"求":{"docs":{},"的":{"docs":{},"三":{"docs":{},"元":{"docs":{},"组":{"docs":{},"集":{"docs":{},"合":{"docs":{},"为":{"docs":{},"：":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}}}}}}}}}},"目":{"docs":{},"标":{"docs":{},"状":{"docs":{},"态":{"docs":{},",":{"docs":{},"进":{"docs":{},"行":{"docs":{},"操":{"docs":{},"作":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"特":{"docs":{},"性":{"docs":{},"：":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}},"？":{"docs":{},"找":{"docs":{},"出":{"docs":{},"所":{"docs":{},"有":{"docs":{},"满":{"docs":{},"足":{"docs":{},"条":{"docs":{},"件":{"docs":{},"且":{"docs":{},"不":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"三":{"docs":{},"元":{"docs":{},"组":{"docs":{},"。":{"docs":{"三数/三数之和 腾讯.html":{"ref":"三数/三数之和 腾讯.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}},"区":{"docs":{},"间":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.01639344262295082}},"搜":{"docs":{},"索":{"docs":{"区间搜索/":{"ref":"区间搜索/","tf":10.083333333333334}}}}}},"上":{"docs":{},"面":{"docs":{},"是":{"docs":{},"由":{"docs":{},"数":{"docs":{},"组":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}},"代":{"docs":{},"码":{"docs":{},"的":{"1":{"7":{"docs":{},"，":{"1":{"8":{"docs":{},"行":{"docs":{},"的":{"docs":{},"输":{"docs":{},"出":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}},"一":{"docs":{},"行":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}},"。":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}},"、":{"docs":{},"下":{"docs":{},"、":{"docs":{},"左":{"docs":{},"、":{"docs":{},"右":{"docs":{},"。":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}}}},"单":{"docs":{},"调":{"docs":{},"栈":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/":{"ref":"单调栈/","tf":10.083333333333334},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358},"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":0.037037037037037035},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}},":":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}},"原":{"docs":{},"理":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":10}}}},"应":{"docs":{},"用":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"性":{"docs":{},"质":{"docs":{},"的":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"之":{"docs":{},"处":{"docs":{},"在":{"docs":{},"于":{"docs":{},"栈":{"docs":{},"内":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"都":{"docs":{},"保":{"docs":{},"持":{"docs":{},"一":{"docs":{},"个":{"docs":{},"单":{"docs":{},"调":{"docs":{},"性":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"递":{"docs":{},"增":{"docs":{},"栈":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}},":":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}},"从":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"到":{"docs":{},"栈":{"docs":{},"底":{"docs":{},"严":{"docs":{},"格":{"docs":{},"单":{"docs":{},"调":{"docs":{},"递":{"docs":{},"增":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}}}}},"，":{"docs":{},"原":{"docs":{},"始":{"docs":{},"数":{"docs":{},"组":{"docs":{},"右":{"docs":{},"边":{"docs":{},"添":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"，":{"docs":{},"是":{"docs":{},"为":{"docs":{},"了":{"docs":{},"让":{"docs":{},"栈":{"docs":{},"内":{"docs":{},"元":{"docs":{},"素":{"docs":{},"全":{"docs":{},"部":{"docs":{},"出":{"docs":{},"栈":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"减":{"docs":{},"栈":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}},":":{"docs":{},"从":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"到":{"docs":{},"栈":{"docs":{},"底":{"docs":{},"严":{"docs":{},"格":{"docs":{},"单":{"docs":{},"调":{"docs":{},"递":{"docs":{},"减":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}}}}},"伪":{"docs":{},"代":{"docs":{},"码":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}},"（":{"docs":{},"简":{"docs":{},"写":{"docs":{},"）":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}},"，":{"docs":{},"原":{"docs":{},"始":{"docs":{},"数":{"docs":{},"组":{"docs":{},"右":{"docs":{},"边":{"docs":{},"添":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"，":{"docs":{},"是":{"docs":{},"为":{"docs":{},"了":{"docs":{},"让":{"docs":{},"栈":{"docs":{},"内":{"docs":{},"元":{"docs":{},"素":{"docs":{},"全":{"docs":{},"部":{"docs":{},"出":{"docs":{},"栈":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"词":{"docs":{},"的":{"docs":{},"反":{"docs":{},"转":{"docs":{"字符串/单词的反转.html":{"ref":"字符串/单词的反转.html","tf":10.03125}}}}},"拆":{"docs":{},"分":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":5}}}}}}}}}}}},"必":{"docs":{},"须":{"docs":{},"按":{"docs":{},"照":{"docs":{},"字":{"docs":{},"母":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"，":{"docs":{},"通":{"docs":{},"过":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"的":{"docs":{},"单":{"docs":{},"元":{"docs":{},"格":{"docs":{},"内":{"docs":{},"的":{"docs":{},"字":{"docs":{},"母":{"docs":{},"构":{"docs":{},"成":{"docs":{},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{},"“":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"”":{"docs":{},"单":{"docs":{},"元":{"docs":{},"格":{"docs":{},"是":{"docs":{},"那":{"docs":{},"些":{"docs":{},"水":{"docs":{},"平":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"或":{"docs":{},"垂":{"docs":{},"直":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"的":{"docs":{},"单":{"docs":{},"元":{"docs":{},"格":{"docs":{},"。":{"docs":{},"同":{"docs":{},"一":{"docs":{},"个":{"docs":{},"单":{"docs":{},"元":{"docs":{},"格":{"docs":{},"内":{"docs":{},"的":{"docs":{},"字":{"docs":{},"母":{"docs":{},"不":{"docs":{},"允":{"docs":{},"许":{"docs":{},"被":{"docs":{},"重":{"docs":{},"复":{"docs":{},"使":{"docs":{},"用":{"docs":{},"。":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"搜":{"docs":{},"索":{"docs":{"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":2.5}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"7":{"9":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":5}}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"接":{"docs":{},"雨":{"docs":{},"水":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"4":{"2":{"docs":{},")":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":5}},"e":{"docs":{},"_":{"4":{"2":{"docs":{"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}}}},"测":{"docs":{},"试":{"docs":{},"用":{"docs":{},"例":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}},"表":{"docs":{},"示":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"图":{"docs":{},"，":{"docs":{},"在":{"docs":{},"这":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"接":{"docs":{"区间搜索/接雨水 LeetCode 42.html":{"ref":"区间搜索/接雨水 LeetCode 42.html","tf":0.0025906735751295338},"单调栈/接雨水_LeetCode_42.html":{"ref":"单调栈/接雨水_LeetCode_42.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}},"，":{"docs":{},"形":{"docs":{},"成":{"docs":{},"的":{"docs":{},"序":{"docs":{},"列":{"docs":{},"称":{"docs":{},"为":{"docs":{},"斐":{"docs":{},"波":{"docs":{},"那":{"docs":{},"契":{"docs":{},"数":{"docs":{},"列":{"docs":{},"。":{"docs":{},"该":{"docs":{},"数":{"docs":{},"列":{"docs":{},"由":{"docs":{"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"【":{"docs":{},":":{"docs":{},"i":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}}}}},"可":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"零":{"docs":{},"个":{"docs":{},"或":{"docs":{},"多":{"docs":{},"个":{"docs":{},"（":{"docs":{},"'":{"docs":{},"*":{"docs":{},"'":{"docs":{},"）":{"docs":{},"任":{"docs":{},"意":{"docs":{},"字":{"docs":{},"符":{"docs":{},"（":{"docs":{},"'":{"docs":{},".":{"docs":{},"'":{"docs":{},"）":{"docs":{},"。":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}}}}}}}},"零":{"docs":{},"个":{"docs":{},"或":{"docs":{},"多":{"docs":{},"个":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}},"水":{"docs":{},"域":{"docs":{},"。":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}},"陆":{"docs":{},"地":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}}},"为":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0234375},"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.024291497975708502},"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}},"原":{"docs":{},"始":{"docs":{},"数":{"docs":{},"组":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}},"中":{"docs":{},"心":{"docs":{},"，":{"docs":{},"向":{"docs":{},"左":{"docs":{},"找":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"小":{"docs":{},"于":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}},"了":{"docs":{},"表":{"docs":{},"示":{"docs":{},"给":{"docs":{},"定":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"的":{"docs":{},"环":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"使":{"docs":{},"用":{"docs":{},"整":{"docs":{},"数":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403},"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}}}}}}}}}}}},"更":{"docs":{},"好":{"docs":{},"的":{"docs":{},"处":{"docs":{},"理":{"docs":{},"删":{"docs":{},"除":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},"情":{"docs":{},"况":{"docs":{},",":{"docs":{},"我":{"docs":{},"们":{"docs":{},"一":{"docs":{},"般":{"docs":{},"都":{"docs":{},"会":{"docs":{},"设":{"docs":{},"置":{"docs":{},"虚":{"docs":{},"拟":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}}}}}}}}}}}}}}},"避":{"docs":{},"免":{"docs":{},"循":{"docs":{},"环":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"还":{"docs":{},"要":{"docs":{},"将":{"docs":{},"本":{"docs":{},"轮":{"docs":{},"深":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"中":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"过":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"变":{"docs":{},"一":{"docs":{},"下":{"docs":{},"，":{"docs":{},"等":{"docs":{},"递":{"docs":{},"归":{"docs":{},"回":{"docs":{},"来":{"docs":{},"之":{"docs":{},"后":{"docs":{},"再":{"docs":{},"变":{"docs":{},"回":{"docs":{},"来":{"docs":{},"。":{"docs":{},"实":{"docs":{},"现":{"docs":{},"这":{"docs":{},"个":{"docs":{},"特":{"docs":{},"性":{"docs":{},"最":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"就":{"docs":{},"是":{"docs":{},"异":{"docs":{},"或":{"docs":{},"上":{"docs":{},"一":{"docs":{},"个":{"docs":{},"特":{"docs":{},"定":{"docs":{},"数":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"再":{"docs":{},"异":{"docs":{},"或":{"docs":{},"回":{"docs":{},"来":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"同":{"docs":{},"节":{"docs":{},"点":{"docs":{},"且":{"docs":{},"均":{"docs":{},"存":{"docs":{},"在":{"docs":{},"于":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"中":{"docs":{},"。":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135}}}}}}}}}}}}}}}}}}},"右":{"docs":{},"下":{"docs":{},"角":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"的":{"docs":{},"边":{"docs":{},"长":{"docs":{},"应":{"docs":{},"该":{"docs":{},"为":{"docs":{},"多":{"docs":{},"少":{"docs":{},"呢":{"docs":{},"？":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}}}}}}}}}}}}}},"什":{"docs":{},"么":{"docs":{},"是":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}},"例":{"docs":{},"：":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}},"数":{"docs":{},"组":{"docs":{},"长":{"docs":{},"度":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}}}},"空":{"docs":{},"串":{"docs":{},"时":{"docs":{},"，":{"docs":{},"无":{"docs":{},"论":{"docs":{},"a":{"docs":{},"多":{"docs":{},"少":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"公":{"docs":{},"共":{"docs":{},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"长":{"docs":{},"度":{"docs":{},"都":{"docs":{},"为":{"0":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}},"docs":{}}}}}}}}}}}}}}}}}},"b":{"docs":{},"多":{"docs":{},"少":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"公":{"docs":{},"共":{"docs":{},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"长":{"docs":{},"度":{"docs":{},"都":{"docs":{},"为":{"0":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}},"入":{"docs":{},"栈":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}},"、":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"叫":{"docs":{},"做":{"docs":{},"栈":{"docs":{},"顶":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}}}},"刚":{"docs":{},"才":{"docs":{},"那":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}}}}}}}},"性":{"docs":{},"质":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}},"柱":{"docs":{},"状":{"docs":{},"图":{"docs":{},"中":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"8":{"4":{"docs":{},")":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"8":{"4":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}},"特":{"docs":{},"例":{"docs":{},"：":{"docs":{"单调栈/单调栈原理.html":{"ref":"单调栈/单调栈原理.html","tf":0.015625}}}},"殊":{"docs":{},"处":{"docs":{},"理":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}},"以":{"docs":{"字符串/判断一个序列是不是另一个字符串的子序列.html":{"ref":"字符串/判断一个序列是不是另一个字符串的子序列.html","tf":0.017241379310344827}},"上":{"docs":{},"是":{"docs":{},"柱":{"docs":{},"状":{"docs":{},"图":{"docs":{},"的":{"docs":{},"示":{"docs":{},"例":{"docs":{},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{},"每":{"docs":{},"个":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"的":{"docs":{},"宽":{"docs":{},"度":{"docs":{},"为":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}}},"此":{"docs":{},"类":{"docs":{},"推":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}},"及":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.013392857142857142}}},"数":{"docs":{},"组":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"1":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"为":{"docs":{},"结":{"docs":{},"尾":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}}}}}}}}}}},"2":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"为":{"docs":{},"结":{"docs":{},"尾":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}}}}}}}}}}},"docs":{}}}}}},"图":{"docs":{},"中":{"docs":{},"阴":{"docs":{},"影":{"docs":{},"部":{"docs":{},"分":{"docs":{},"为":{"docs":{},"所":{"docs":{},"能":{"docs":{},"勾":{"docs":{},"勒":{"docs":{},"出":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"面":{"docs":{},"积":{"docs":{},"，":{"docs":{},"其":{"docs":{},"面":{"docs":{},"积":{"docs":{},"为":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}}}}}},"垂":{"docs":{},"直":{"docs":{},"线":{"docs":{},"代":{"docs":{},"表":{"docs":{},"输":{"docs":{},"入":{"docs":{},"数":{"docs":{},"组":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}}}}}}},"高":{"docs":{},"度":{"docs":{},"为":{"0":{"docs":{},"的":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"，":{"docs":{},"即":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"ref":"单调栈/柱状图中最大的矩形_LeetCode_84.html","tf":0.0024691358024691358}}}},"docs":{}}}}}}}}}}}}}}},"docs":{}},"差":{"docs":{},"不":{"docs":{},"超":{"docs":{},"过":{"docs":{},"一":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"是":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"前K个高频元素.html":{"ref":"前K个高频元素.html","tf":0.008264462809917356}}}}}}},"小":{"docs":{},"牛":{"docs":{},"向":{"docs":{},"右":{"docs":{},"看":{"docs":{},"_":{"docs":{},"p":{"docs":{},"o":{"docs":{},"j":{"docs":{},"_":{"3":{"2":{"5":{"0":{"docs":{"单调栈/小牛向右看_POJ_3250.html":{"ref":"单调栈/小牛向右看_POJ_3250.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"写":{"docs":{},"字":{"docs":{},"母":{"docs":{},"要":{"docs":{},"减":{"6":{"5":{"docs":{},"再":{"docs":{},"减":{"6":{"docs":{"字符串/第一个只出现一次的字符.html":{"ref":"字符串/第一个只出现一次的字符.html","tf":0.010638297872340425}}},"docs":{}}}},"docs":{}},"docs":{}}}}}}},"参":{"docs":{},"考":{"docs":{},"接":{"docs":{},"雨":{"docs":{},"水":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}},"柱":{"docs":{},"状":{"docs":{},"图":{"docs":{},"中":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"8":{"4":{"docs":{},")":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}},"正":{"docs":{},"则":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"0":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}},"照":{"docs":{},"这":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}},"未":{"docs":{},"写":{"docs":{},"代":{"docs":{},"码":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}},"本":{"docs":{},"来":{"docs":{},"是":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}},"身":{"docs":{},"。":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}},"题":{"docs":{},"中":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"高":{"docs":{},"度":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"是":{"docs":{},"指":{"docs":{},"一":{"docs":{},"个":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"每":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"ref":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}}}},"棵":{"docs":{},"高":{"docs":{},"度":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"定":{"docs":{},"义":{"docs":{},"为":{"docs":{},"：":{"docs":{"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"ref":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","tf":0.012195121951219513}}}}}}}}}}}}}}},"路":{"docs":{},"径":{"docs":{},"被":{"docs":{},"定":{"docs":{},"义":{"docs":{},"为":{"docs":{},"一":{"docs":{},"条":{"docs":{},"从":{"docs":{},"树":{"docs":{},"中":{"docs":{},"任":{"docs":{},"意":{"docs":{},"节":{"docs":{},"点":{"docs":{},"出":{"docs":{},"发":{"docs":{},"，":{"docs":{},"达":{"docs":{},"到":{"docs":{},"任":{"docs":{},"意":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"序":{"docs":{},"列":{"docs":{},"。":{"docs":{},"该":{"docs":{},"路":{"docs":{},"径":{"docs":{},"至":{"docs":{},"少":{"docs":{},"包":{"docs":{},"含":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"且":{"docs":{},"不":{"docs":{},"一":{"docs":{},"定":{"docs":{},"经":{"docs":{},"过":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"ref":"二叉树/二叉树中的最大路径和 LeetCode 124.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"矩":{"docs":{},"形":{"docs":{},"高":{"docs":{},"度":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"对":{"docs":{},"每":{"docs":{},"一":{"docs":{},"行":{"docs":{},"应":{"docs":{},"用":{"docs":{},"单":{"docs":{},"调":{"docs":{},"栈":{"docs":{"单调栈/最大矩形_LeetCode_85.html":{"ref":"单调栈/最大矩形_LeetCode_85.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}},"阵":{"docs":{"矩阵/":{"ref":"矩阵/","tf":10.083333333333334},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625}},"中":{"docs":{},"，":{"docs":{},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"。":{"docs":{},"该":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"具":{"docs":{},"有":{"docs":{},"如":{"docs":{},"下":{"docs":{},"特":{"docs":{},"性":{"docs":{},"：":{"docs":{"矩阵/搜索二维矩阵 LeetCode 74.html":{"ref":"矩阵/搜索二维矩阵 LeetCode 74.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"只":{"docs":{},"在":{"docs":{},"四":{"docs":{},"个":{"docs":{},"方":{"docs":{},"向":{"docs":{},"上":{"docs":{},"相":{"docs":{},"邻":{"docs":{},":":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}}}}}}}}}},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{},"每":{"docs":{},"行":{"docs":{},"和":{"docs":{},"每":{"docs":{},"列":{"docs":{},"元":{"docs":{},"素":{"docs":{},"均":{"docs":{},"按":{"docs":{},"升":{"docs":{},"序":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"中":{"docs":{},"第":{"docs":{},"k":{"docs":{},"小":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"矩阵/有序矩阵中第K小的元素.html":{"ref":"矩阵/有序矩阵中第K小的元素.html","tf":0.011235955056179775},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"ref":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"5":{"4":{"2":{"docs":{},")":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}},"指":{"docs":{},"针":{"docs":{},"对":{"docs":{},"撞":{"docs":{},"法":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.010582010582010581},"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.0125}}}}},"改":{"docs":{},"为":{"docs":{},"指":{"docs":{},"向":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{},"由":{"docs":{},"于":{"docs":{},"节":{"docs":{},"点":{"docs":{},"没":{"docs":{},"有":{"docs":{},"引":{"docs":{},"用":{"docs":{},"其":{"docs":{},"上":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"因":{"docs":{},"此":{"docs":{},"必":{"docs":{},"须":{"docs":{},"事":{"docs":{},"先":{"docs":{},"存":{"docs":{},"储":{"docs":{},"其":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{},"在":{"docs":{},"更":{"docs":{},"改":{"docs":{},"引":{"docs":{},"用":{"docs":{},"之":{"docs":{},"前":{"docs":{},"，":{"docs":{},"还":{"docs":{},"需":{"docs":{},"要":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"来":{"docs":{},"存":{"docs":{},"储":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"不":{"docs":{},"要":{"docs":{},"忘":{"docs":{},"记":{"docs":{},"在":{"docs":{},"最":{"docs":{},"后":{"docs":{},"返":{"docs":{},"回":{"docs":{},"新":{"docs":{},"的":{"docs":{},"头":{"docs":{},"引":{"docs":{},"用":{"docs":{},"！":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"指":{"docs":{},"向":{"docs":{},"该":{"docs":{},"结":{"docs":{},"点":{"docs":{},"的":{"docs":{},"下":{"docs":{},"下":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{},"。":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}}},"向":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.014492753623188406}}},"水":{"docs":{},"域":{"docs":{},"在":{"docs":{},"岛":{"docs":{},"屿":{"docs":{},"内":{"docs":{},"部":{"docs":{},"且":{"docs":{},"不":{"docs":{},"和":{"docs":{},"岛":{"docs":{},"屿":{"docs":{},"周":{"docs":{},"围":{"docs":{},"的":{"docs":{},"水":{"docs":{},"相":{"docs":{},"连":{"docs":{},"）":{"docs":{},"。":{"docs":{},"格":{"docs":{},"子":{"docs":{},"是":{"docs":{},"边":{"docs":{},"长":{"docs":{},"为":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"简":{"docs":{},"洁":{"docs":{},"方":{"docs":{},"式":{"docs":{"字符串/验证回文字符串.html":{"ref":"字符串/验证回文字符串.html","tf":0.005291005291005291}}}}},"化":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}},"‘":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"’":{"docs":{},"，":{"docs":{},"这":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"它":{"docs":{},"没":{"docs":{},"有":{"docs":{},"对":{"docs":{},"应":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"典":{"docs":{},"，":{"docs":{},"而":{"docs":{},"是":{"docs":{},"存":{"docs":{},"储":{"docs":{},"了":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"和":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"组":{"docs":{},"成":{"docs":{},"的":{"docs":{},"。":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506}}},"二":{"docs":{},"维":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"内":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"只":{"docs":{},"包":{"docs":{},"含":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}}}}}}},"矩":{"docs":{},"阵":{"docs":{},"，":{"docs":{},"找":{"docs":{},"出":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"到":{"docs":{},"最":{"docs":{},"近":{"docs":{},"的":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}}}}}}}}}}},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"返":{"docs":{},"回":{"docs":{},"由":{"docs":{},"这":{"docs":{},"些":{"docs":{},"元":{"docs":{},"组":{"docs":{},"组":{"docs":{},"成":{"docs":{},"的":{"docs":{},"列":{"docs":{},"表":{"docs":{"字符串/最长公共前缀 腾讯.html":{"ref":"字符串/最长公共前缀 腾讯.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}},"合":{"docs":{},"成":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"是":{"1":{"0":{"docs":{},"~":{"2":{"6":{"docs":{},"，":{"docs":{},"则":{"docs":{},"d":{"docs":{},"p":{"docs":{},"【":{"docs":{},"n":{"docs":{},"】":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.008130081300813009}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":0.014084507042253521}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"回溯/组合 LeetCode 77.html":{"ref":"回溯/组合 LeetCode 77.html","tf":5}}}}}}}}}},"总":{"docs":{},"和":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":3.3431372549019605}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":0.006024096385542169}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"回溯/组合总和 LeetCode 39.html":{"ref":"回溯/组合总和 LeetCode 39.html","tf":5}}}}}}}}}}}}}},"设":{"docs":{},"计":{"docs":{},"一":{"docs":{},"个":{"docs":{},"支":{"docs":{},"持":{"docs":{},"以":{"docs":{},"下":{"docs":{},"两":{"docs":{},"种":{"docs":{},"操":{"docs":{},"作":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"：":{"docs":{"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"ref":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","tf":0.0049504950495049506},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}}},"算":{"docs":{},"法":{"docs":{},"来":{"docs":{},"计":{"docs":{},"算":{"docs":{},"你":{"docs":{},"所":{"docs":{},"能":{"docs":{},"获":{"docs":{},"取":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"利":{"docs":{},"润":{"docs":{},"。":{"docs":{},"你":{"docs":{},"可":{"docs":{},"以":{"docs":{},"尽":{"docs":{},"可":{"docs":{},"能":{"docs":{},"地":{"docs":{},"完":{"docs":{},"成":{"docs":{},"更":{"docs":{},"多":{"docs":{},"的":{"docs":{},"交":{"docs":{},"易":{"docs":{},"（":{"docs":{},"多":{"docs":{},"次":{"docs":{},"买":{"docs":{},"卖":{"docs":{},"一":{"docs":{},"支":{"docs":{},"股":{"docs":{},"票":{"docs":{},"）":{"docs":{},"。":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"置":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"为":{"docs":{},"尾":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}},"虚":{"docs":{},"拟":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}},"，":{"docs":{},"删":{"docs":{},"除":{"docs":{},"有":{"docs":{},"序":{"docs":{},"列":{"docs":{},"表":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"最":{"docs":{},"后":{"docs":{},"要":{"docs":{},"保":{"docs":{},"留":{"docs":{},"一":{"docs":{},"个":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"全":{"docs":{},"部":{"docs":{},"删":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"码":{"docs":{},"表":{"docs":{},"中":{"docs":{},"的":{"docs":{},"可":{"docs":{},"打":{"docs":{},"印":{"docs":{},"字":{"docs":{},"符":{"docs":{},"。":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827}}}}}}}}}}}},"自":{"docs":{},"己":{"docs":{},"写":{"docs":{"字符串/字符串的反转.html":{"ref":"字符串/字符串的反转.html","tf":0.017241379310344827},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}},"反":{"docs":{},"转":{"docs":{},"判":{"docs":{},"断":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}}}}}},"手":{"docs":{},"写":{"docs":{},"代":{"docs":{},"码":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}},"底":{"docs":{},"向":{"docs":{},"上":{"docs":{},"的":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}}}}}}}}}},"写":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009}}},"定":{"docs":{},"义":{"docs":{},"排":{"docs":{},"序":{"docs":{},"算":{"docs":{},"法":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}}}}}}}},"$":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"$":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125}}}}}}}}}}}},"s":{"1":{"docs":{},"[":{"docs":{},"某":{"docs":{},",":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125}}}}}},"docs":{}},"的":{"docs":{},"最":{"docs":{},"长":{"docs":{},"公":{"docs":{},"共":{"docs":{},"子":{"docs":{},"串":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125}}}}}}}}}}}},"n":{"1":{"docs":{},"→":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"→":{"docs":{},"n":{"docs":{},"k":{"docs":{},"−":{"1":{"docs":{},"→":{"docs":{},"n":{"docs":{},"k":{"docs":{},"→":{"docs":{},"n":{"docs":{},"k":{"docs":{},"+":{"1":{"docs":{},"←":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"←":{"docs":{},"n":{"docs":{},"m":{"docs":{},"$":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}}},"docs":{},"_":{"docs":{},"{":{"docs":{},"k":{"docs":{},"}":{"docs":{},"n":{"docs":{},"k":{"docs":{},"$":{"docs":{},"。":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}},"{":{"docs":{},"k":{"docs":{},"+":{"1":{"docs":{},"}":{"docs":{},"n":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}},"k":{"docs":{},"+":{"1":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}},"docs":{}}}}}},"docs":{}}},"m":{"docs":{},"}":{"docs":{},"n":{"docs":{},"m":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}},"到":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}},"已":{"docs":{},"经":{"docs":{},"被":{"docs":{},"反":{"docs":{},"转":{"docs":{},"，":{"docs":{},"而":{"docs":{},"我":{"docs":{},"们":{"docs":{},"正":{"docs":{},"处":{"docs":{},"于":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}},"c":{"docs":{},"_":{"docs":{},"{":{"docs":{},"m":{"docs":{},"+":{"docs":{},"n":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}},"某":{"docs":{"字符串/两个字符串的最长公共子串.html":{"ref":"字符串/两个字符串的最长公共子串.html","tf":0.0078125}}},"’":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}},"之":{"docs":{},"所":{"docs":{},"以":{"docs":{},"用":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"是":{"docs":{},"因":{"docs":{},"为":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"这":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"‘":{"0":{"0":{"1":{"2":{"docs":{},"a":{"4":{"2":{"docs":{},"’":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"外":{"docs":{},"其":{"docs":{},"余":{"docs":{},"各":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"。":{"docs":{"数组/除自身以外数组的乘积.html":{"ref":"数组/除自身以外数组的乘积.html","tf":0.008695652173913044}}}}}}}}}}},"，":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"都":{"docs":{},"不":{"docs":{},"会":{"docs":{},"以":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}}}}}}}}}},"和":{"docs":{},"等":{"docs":{},"于":{"docs":{},"目":{"docs":{},"标":{"docs":{},"数":{"docs":{"数组/两数之和 II - 输入有序数组.html":{"ref":"数组/两数之和 II - 输入有序数组.html","tf":0.004878048780487805},"矩阵/两数之和 II - 输入有序数组.html":{"ref":"矩阵/两数之和 II - 输入有序数组.html","tf":0.00625}}}}}}}},"间":{"docs":{},"。":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}},"它":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"负":{"docs":{},"号":{"docs":{},"。":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}}}}},"可":{"docs":{},"以":{"docs":{},"解":{"docs":{},"码":{"docs":{},"为":{"docs":{"动态规划/解码方法_LeetCode_91.html":{"ref":"动态规划/解码方法_LeetCode_91.html","tf":0.016260162601626018}}}}}}},"的":{"docs":{},"周":{"docs":{},"长":{"docs":{},"是":{"docs":{},"下":{"docs":{},"面":{"docs":{},"图":{"docs":{},"片":{"docs":{},"中":{"docs":{},"的":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}}}}}}}}}},"忍":{"docs":{},"不":{"docs":{},"住":{"docs":{},"想":{"docs":{},"吐":{"docs":{},"槽":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"，":{"docs":{},"日":{"docs":{},"你":{"docs":{},"妈":{"docs":{},"，":{"docs":{},"题":{"docs":{},"目":{"docs":{},"说":{"docs":{},"明":{"docs":{},"不":{"docs":{},"完":{"docs":{},"善":{"docs":{},"，":{"docs":{},"操":{"docs":{},"你":{"docs":{},"大":{"docs":{},"爷":{"docs":{},"的":{"docs":{},"！":{"docs":{},"！":{"docs":{},"！":{"docs":{},"！":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"草":{"docs":{},"泥":{"docs":{},"马":{"docs":{},"，":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}}}}}}}}}},"超":{"docs":{},"过":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}},"时":{"docs":{},"算":{"docs":{},"法":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}}}}}},"跳":{"docs":{},"过":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"是":{"docs":{},"‘":{"docs":{},"+":{"docs":{"字符串/字符串转换整数 atoi.html":{"ref":"字符串/字符串转换整数 atoi.html","tf":0.009345794392523364}}}}}}}}}}}}}}}}}}}}}}},"子":{"docs":{},"串":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":0.007874015748031496}}},"数":{"docs":{},"组":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338},"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}},"问":{"docs":{},"题":{"docs":{},"无":{"docs":{},"解":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}}}},"序":{"docs":{},"列":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.009345794392523364}}}},"集":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":3.3437499999999996}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":5}}}}}}}}}}}},"无":{"docs":{},"重":{"docs":{},"复":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"最":{"docs":{},"长":{"docs":{},"子":{"docs":{},"串":{"docs":{"字符串/无重复字符的最长子串.html":{"ref":"字符串/无重复字符的最长子串.html","tf":10.007874015748031}}}}}}}}}}},"论":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}},"法":{"docs":{},"匹":{"docs":{},"配":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.00819672131147541}}}}}},"旋":{"docs":{},"转":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"_":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"7":{"9":{"6":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"（":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"7":{"9":{"6":{"docs":{},"）":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":10.004424778761061}}}},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"大":{"docs":{},"，":{"docs":{},"就":{"docs":{},"要":{"docs":{},"进":{"docs":{},"一":{"docs":{},"步":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"定":{"docs":{},"义":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"和":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"分":{"docs":{},"别":{"docs":{},"指":{"docs":{},"向":{"docs":{},"开":{"docs":{},"头":{"docs":{},"和":{"docs":{},"结":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"完":{"docs":{},"毕":{"docs":{},"，":{"docs":{},"断":{"docs":{},"开":{"docs":{},"换":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}}}}},"链":{"docs":{},"表":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}}}}}}}}}},"_":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":5}}}}}}}}}}}}}}},"能":{"docs":{},"变":{"docs":{},"成":{"docs":{},"b":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"返":{"docs":{},"回":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"。":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}}}}}}}}}}}}}},"若":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}},"从":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}},"走":{"docs":{},"了":{"docs":{},"n":{"docs":{},"步":{"docs":{},"后":{"docs":{},"为":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"，":{"docs":{},"则":{"docs":{},"表":{"docs":{},"明":{"docs":{},"删":{"docs":{},"除":{"docs":{},"的":{"docs":{},"为":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}}}}}}}}}}}}}}},"长":{"docs":{},"度":{"docs":{},"不":{"docs":{},"超":{"docs":{},"过":{"docs":{"字符串/旋转字符串 LeetCode 796.html":{"ref":"字符串/旋转字符串 LeetCode 796.html","tf":0.006289308176100629}}}}},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":10.012048192771084},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":10.012048192771084}}}}}}},"长":{"docs":{},"的":{"docs":{},"公":{"docs":{},"共":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"是":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}}}}}}}}}},"为":{"1":{"docs":{},"。":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}}},"3":{"docs":{},"。":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}}},"docs":{}},"是":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"k":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}},"]":{"docs":{},"[":{"docs":{},"m":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"先":{"docs":{},"走":{"docs":{},"|":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},")":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}}}},"%":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453},"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"动态规划/不同的子序列_LeetCode_940.html":{"ref":"动态规划/不同的子序列_LeetCode_940.html","tf":0.013392857142857142},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}},"=":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}},"均":{"docs":{},"不":{"docs":{},"以":{"docs":{},"零":{"docs":{},"开":{"docs":{},"头":{"docs":{},"，":{"docs":{},"除":{"docs":{},"非":{"docs":{},"是":{"docs":{},"数":{"docs":{},"字":{"docs":{"字符串/字符串相乘 LeetCode 43.html":{"ref":"字符串/字符串相乘 LeetCode 43.html","tf":0.004975124378109453}}}}}}}}}}}}}},"需":{"docs":{},"要":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.013824884792626729}},"逆":{"docs":{},"置":{"docs":{},"的":{"docs":{},"子":{"docs":{},"串":{"docs":{},"的":{"docs":{},"头":{"docs":{},"尾":{"docs":{},"序":{"docs":{},"号":{"docs":{"字符串/反转字符串中的单词 III.html":{"ref":"字符串/反转字符串中的单词 III.html","tf":0.00909090909090909},"数组/反转字符串中的单词 III.html":{"ref":"数组/反转字符串中的单词 III.html","tf":0.00909090909090909}}}}}}}}}}}},"注":{"docs":{},"意":{"docs":{},"的":{"docs":{},"是":{"docs":{},"出":{"docs":{},"现":{"docs":{},"次":{"docs":{},"数":{"docs":{},"超":{"docs":{},"过":{"1":{"docs":{},"/":{"3":{"docs":{},"数":{"docs":{},"组":{"docs":{},"长":{"docs":{},"的":{"docs":{},"数":{"docs":{},"，":{"docs":{},"也":{"docs":{},"许":{"docs":{},"会":{"docs":{},"有":{"docs":{},"多":{"docs":{},"个":{"docs":{},"，":{"docs":{},"例":{"docs":{},"子":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}},"存":{"docs":{},"在":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{"字符串/存在重复元素.html":{"ref":"字符串/存在重复元素.html","tf":10.017241379310345}}}}}}},"储":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"无":{"docs":{},"序":{"docs":{},"区":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/对链表进行插入排序_LeetCode_147.html":{"ref":"链表/对链表进行插入排序_LeetCode_147.html","tf":0.00909090909090909}}}}}}}}}}}},"库":{"docs":{},"，":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}},"都":{"docs":{},"不":{"docs":{},"包":{"docs":{},"含":{"docs":{},"任":{"docs":{},"何":{"docs":{},"前":{"docs":{},"导":{"docs":{},"零":{"docs":{},"。":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}}}}}}},"会":{"docs":{},"被":{"docs":{},"填":{"docs":{},"充":{"docs":{},"为":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}},"只":{"docs":{},"包":{"docs":{},"含":{"docs":{},"数":{"docs":{},"字":{"docs":{"字符串/字符串相加_LeetCode_415.html":{"ref":"字符串/字符串相加_LeetCode_415.html","tf":0.007575757575757576}}}}}}},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"转":{"docs":{},"移":{"docs":{},"到":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}}}}}}}},"可":{"docs":{},"以":{"docs":{},"。":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}},"右":{"docs":{},"边":{"docs":{},"有":{"docs":{},"序":{"docs":{},"，":{"docs":{},"去":{"docs":{},"右":{"docs":{},"边":{"docs":{},"找":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}}}}}}}},"是":{"docs":{},"没":{"docs":{},"碎":{"docs":{},"的":{"docs":{},"那":{"docs":{},"段":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}},"旋":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}},"子":{"docs":{},"树":{"docs":{},"节":{"docs":{},"点":{"docs":{},"大":{"docs":{},"于":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}}}}}}}},"思":{"docs":{},"路":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}},"：":{"docs":{},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{},"法":{"docs":{},"。":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}},":":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}},"一":{"docs":{},"：":{"docs":{},"数":{"docs":{},"组":{"docs":{},"排":{"docs":{},"序":{"docs":{},"后":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"符":{"docs":{},"合":{"docs":{},"条":{"docs":{},"件":{"docs":{},"的":{"docs":{},"数":{"docs":{},"存":{"docs":{},"在":{"docs":{},"，":{"docs":{},"则":{"docs":{},"一":{"docs":{},"定":{"docs":{},"是":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"间":{"docs":{},"那":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{},"（":{"docs":{},"比":{"docs":{},"如":{"docs":{},"：":{"1":{"docs":{},"，":{"2":{"docs":{},"，":{"2":{"docs":{},"，":{"2":{"docs":{},"，":{"3":{"docs":{},"；":{"docs":{},"或":{"2":{"docs":{},"，":{"2":{"docs":{},"，":{"2":{"docs":{},"，":{"3":{"docs":{},"，":{"4":{"docs":{},"；":{"docs":{},"或":{"2":{"docs":{},"，":{"3":{"docs":{},"，":{"4":{"docs":{},"，":{"4":{"docs":{},"，":{"4":{"docs":{},"等":{"docs":{},"等":{"docs":{},"）":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"级":{"docs":{},"别":{"docs":{},"。":{"docs":{"数组/搜索旋转排序数组.html":{"ref":"数组/搜索旋转排序数组.html","tf":0.006493506493506494}}}}},"|":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875},"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.15517241379310345}},"|":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556},"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.00946372239747634},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.01607717041800643},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.01607717041800643}}}},"丨":{"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}},"去":{"docs":{},"重":{"docs":{},"代":{"docs":{},"码":{"1":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}},"2":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}},"3":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":0.004651162790697674}}},"docs":{"数组/搜索旋转排序数组 II LeetCode 81.html":{"ref":"数组/搜索旋转排序数组 II LeetCode 81.html","tf":0.0056179775280898875}}}},",":{"docs":{},"如":{"docs":{},"【":{"1":{"docs":{},"，":{"1":{"docs":{},"，":{"7":{"docs":{},"】":{"docs":{"回溯/组合总和 II LeetCode 40.html":{"ref":"回溯/组合总和 II LeetCode 40.html","tf":0.0196078431372549}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"~":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.01327433628318584}}},"向":{"docs":{},"右":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.018404907975460124},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.015151515151515152}},"旋":{"docs":{},"转":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.022123893805309734},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.03208556149732621}}}}},"下":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.009202453987730062},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.015151515151515152}}}},"尽":{"docs":{},"可":{"docs":{},"能":{"docs":{},"想":{"docs":{},"出":{"docs":{},"更":{"docs":{},"多":{"docs":{},"的":{"docs":{},"解":{"docs":{},"决":{"docs":{},"方":{"docs":{},"案":{"docs":{},"，":{"docs":{},"至":{"docs":{},"少":{"docs":{},"有":{"docs":{},"三":{"docs":{},"种":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"可":{"docs":{},"以":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"管":{"docs":{"数组/最长连续递增序列_LeetCode_674.html":{"ref":"数组/最长连续递增序列_LeetCode_674.html","tf":0.011494252873563218},"动态规划/最长连续递增序列_LeetCode_674.html":{"ref":"动态规划/最长连续递增序列_LeetCode_674.html","tf":0.011363636363636364}}}},"步":{"docs":{},":":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.022123893805309734},"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.03208556149732621}}},"，":{"docs":{},"而":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"将":{"docs":{},"从":{"docs":{},"列":{"docs":{},"表":{"docs":{},"的":{"docs":{},"开":{"docs":{},"头":{"docs":{},"出":{"docs":{},"发":{"docs":{},"。":{"docs":{},"现":{"docs":{},"在":{"docs":{},"，":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"被":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}}}}}}}}}}}}}}},"向":{"docs":{},"右":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}},"就":{"docs":{},"一":{"docs":{},"定":{"docs":{},"能":{"docs":{},"到":{"docs":{},"达":{"docs":{},"终":{"docs":{},"点":{"docs":{},"。":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}}}}},"空":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.008620689655172414},"动态规划/最长公共子序列.html":{"ref":"动态规划/最长公共子序列.html","tf":0.025}},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}},"解":{"docs":{},"决":{"docs":{},"此":{"docs":{},"题":{"docs":{},"？":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428}}}}}}},"优":{"docs":{},"化":{"docs":{},"为":{"2":{"docs":{},"m":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}},"docs":{}}}}}}}}},"翻":{"docs":{},"转":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.01327433628318584}},"法":{"docs":{},"，":{"docs":{},"经":{"docs":{},"过":{"docs":{},"三":{"docs":{},"次":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"：":{"docs":{"数组/旋转数组.html":{"ref":"数组/旋转数组.html","tf":0.004424778761061947}}}}}}}}}}}}},"尾":{"docs":{},"，":{"docs":{},"还":{"docs":{},"要":{"docs":{},"找":{"docs":{},"到":{"docs":{},"中":{"docs":{},"间":{"docs":{},"那":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"和":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"指":{"docs":{},"的":{"docs":{},"数":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"中":{"docs":{},"间":{"docs":{},"的":{"docs":{},"数":{"docs":{},"大":{"docs":{},"，":{"docs":{},"则":{"docs":{},"继":{"docs":{},"续":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"右":{"docs":{},"半":{"docs":{},"段":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"反":{"docs":{},"之":{"docs":{},"查":{"docs":{},"找":{"docs":{},"左":{"docs":{},"半":{"docs":{},"#":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"段":{"docs":{},"。":{"docs":{},"终":{"docs":{},"止":{"docs":{},"条":{"docs":{},"件":{"docs":{},"是":{"docs":{},"当":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"小":{"docs":{},"的":{"docs":{},"那":{"docs":{},"个":{"docs":{},"。":{"docs":{"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"ref":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}}},"删":{"docs":{},"除":{"docs":{},"排":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"重":{"docs":{},"复":{"docs":{},"项":{"docs":{"数组/删除排序数组中的重复项.html":{"ref":"数组/删除排序数组中的重复项.html","tf":10.029411764705882}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"的":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":3.333333333333333},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":2.505780346820809}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"链表/删除排序链表中的重复元素 LeetCode 83.html":{"ref":"链表/删除排序链表中的重复元素 LeetCode 83.html","tf":0.02631578947368421}}}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{"链表/旋转链表 LeetCode 61.html":{"ref":"链表/旋转链表 LeetCode 61.html","tf":0.0053475935828877}},"k":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":10}}}}}},"n":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"9":{"docs":{},")":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}},"中":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":3.342592592592592}}}}}}}},"该":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}},"成":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.009216589861751152}}}}},"哈":{"docs":{},"希":{"docs":{},"法":{"docs":{},",":{"docs":{},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{},"法":{"docs":{"数组/求数组中两个元素的最小距离.html":{"ref":"数组/求数组中两个元素的最小距离.html","tf":0.008771929824561403}}}}}}}}}},"回":{"docs":{},"文":{"docs":{},"数":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":5}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":10}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"2":{"3":{"4":{"docs":{},")":{"docs":{"链表/回文链表.html":{"ref":"链表/回文链表.html","tf":0.008928571428571428}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}},"溯":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704},"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"回溯/":{"ref":"回溯/","tf":10.083333333333334},"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541},"回溯/和为n的正整数组合.html":{"ref":"回溯/和为n的正整数组合.html","tf":0.010526315789473684}},"法":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}},"算":{"docs":{},"法":{"docs":{},":":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}},"到":{"docs":{},"题":{"docs":{},"目":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}},"奇":{"docs":{},"偶":{"docs":{},"情":{"docs":{},"况":{"docs":{},"都":{"docs":{},"考":{"docs":{},"虑":{"docs":{"数组/回文数 LeetCode 9.html":{"ref":"数组/回文数 LeetCode 9.html","tf":0.0078125}}}}}}}},"数":{"docs":{},"个":{"docs":{},",":{"docs":{},"又":{"docs":{},"因":{"docs":{},"为":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"一":{"docs":{},"次":{"docs":{},"跳":{"docs":{},"两":{"docs":{},"个":{"docs":{},",":{"docs":{},"所":{"docs":{},"以":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"跳":{"docs":{},"到":{"3":{"docs":{},",":{"docs":{},"第":{"docs":{},"二":{"docs":{},"次":{"docs":{},"跳":{"docs":{},"到":{"5":{"docs":{},",":{"docs":{},"所":{"docs":{},"以":{"docs":{},"当":{"docs":{},"元":{"docs":{},"素":{"docs":{},"个":{"docs":{},"数":{"docs":{},"为":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"时":{"docs":{},"候":{"docs":{},",":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"为":{"docs":{},"空":{"docs":{},",":{"docs":{},"返":{"docs":{},"回":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}},"取":{"docs":{},"出":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"位":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}}}},"来":{"docs":{},"，":{"docs":{},"放":{"docs":{},"到":{"docs":{},"最":{"docs":{},"大":{"docs":{},"堆":{"docs":{},"中":{"docs":{},"去":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"能":{"docs":{},"保":{"docs":{},"证":{"docs":{},"最":{"docs":{},"小":{"docs":{},"堆":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"都":{"docs":{},"比":{"docs":{},"最":{"docs":{},"大":{"docs":{},"堆":{"docs":{},"的":{"docs":{},"（":{"docs":{},"最":{"docs":{},"大":{"docs":{},"元":{"docs":{},"素":{"docs":{},"）":{"docs":{},"堆":{"docs":{},"顶":{"docs":{},"大":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}},"堆":{"docs":{},"，":{"docs":{},"都":{"docs":{},"比":{"docs":{},"最":{"docs":{},"大":{"docs":{},"堆":{"docs":{},"的":{"docs":{},"堆":{"docs":{},"顶":{"docs":{},"大":{"docs":{"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"答":{"docs":{},"案":{"docs":{},"：":{"1":{"docs":{"数组/异或操作.html":{"ref":"数组/异或操作.html","tf":0.006802721088435374}}},"docs":{}}}},"使":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"先":{"docs":{},"确":{"docs":{},"定":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"环":{"docs":{},"，":{"docs":{},"有":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"将":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"指":{"docs":{},"向":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"，":{"docs":{},"和":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"指":{"docs":{},"针":{"docs":{},"以":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"速":{"docs":{},"度":{"docs":{},"移":{"docs":{},"动":{"docs":{},"，":{"docs":{},"当":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"=":{"docs":{},"=":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"时":{"docs":{},"则":{"docs":{},"找":{"docs":{},"到":{"docs":{},"了":{"docs":{},"环":{"docs":{},"的":{"docs":{},"入":{"docs":{},"口":{"docs":{},"。":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":0.004608294930875576}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"，":{"docs":{},"先":{"docs":{},"在":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}},"连":{"docs":{},"续":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{"数组/最大子序和LeetCode 53.html":{"ref":"数组/最大子序和LeetCode 53.html","tf":0.007194244604316547},"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.004672897196261682}}}}}}},"≥":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"法":{"docs":{"数组/长度最小的子数组.html":{"ref":"数组/长度最小的子数组.html","tf":0.012048192771084338},"矩阵/长度最小的子数组.html":{"ref":"矩阵/长度最小的子数组.html","tf":0.012048192771084338}}}}}}},"略":{"docs":{},"显":{"docs":{},"复":{"docs":{},"杂":{"docs":{"数组/合并区间_LeetCode_56.html":{"ref":"数组/合并区间_LeetCode_56.html","tf":0.00819672131147541}}}}}},"调":{"docs":{},"整":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"在":{"docs":{},"前":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"在":{"docs":{},"后":{"docs":{},"，":{"docs":{},"保":{"docs":{},"持":{"docs":{},"相":{"docs":{},"对":{"docs":{},"顺":{"docs":{},"序":{"docs":{"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"ref":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","tf":10}}}}}}}}}}}}}}}}}}}}}},"剑":{"docs":{},"指":{"docs":{},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"（":{"docs":{},"四":{"docs":{},"十":{"docs":{},"）":{"docs":{},"：":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{"数组/找出数组中2个出现一次的数.html":{"ref":"数组/找出数组中2个出现一次的数.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621}}},"}":{"docs":{"矩阵/搜索二维矩阵 II LeetCode 240.html":{"ref":"矩阵/搜索二维矩阵 II LeetCode 240.html","tf":0.00625},"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.016666666666666666},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0228310502283105},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.00964630225080386}},"，":{"docs":{},"其":{"docs":{},"最":{"docs":{},"大":{"docs":{},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"为":{"docs":{},"{":{"1":{"1":{"docs":{},",":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}},"docs":{}},"docs":{}}}}}}}}}}}},";":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}},"网":{"docs":{},"格":{"docs":{},"，":{"docs":{},"请":{"docs":{},"找":{"docs":{},"出":{"docs":{},"一":{"docs":{},"条":{"docs":{},"从":{"docs":{},"左":{"docs":{},"上":{"docs":{},"角":{"docs":{},"到":{"docs":{},"右":{"docs":{},"下":{"docs":{},"角":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"路":{"docs":{},"径":{"docs":{},"上":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"总":{"docs":{},"和":{"docs":{},"为":{"docs":{},"最":{"docs":{},"小":{"docs":{},"。":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736},"动态规划/最小路径和 LeetCode 64.html":{"ref":"动态规划/最小路径和 LeetCode 64.html","tf":0.0031545741324921135}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"左":{"docs":{},"上":{"docs":{},"角":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}},"正":{"docs":{},"中":{"docs":{},"间":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"障":{"docs":{},"碍":{"docs":{},"物":{"docs":{},"。":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}}}}}}}}},"中":{"docs":{},"的":{"docs":{},"障":{"docs":{},"碍":{"docs":{},"物":{"docs":{},"和":{"docs":{},"空":{"docs":{},"位":{"docs":{},"置":{"docs":{},"分":{"docs":{},"别":{"docs":{},"用":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}}}}}}}},"格":{"docs":{},"子":{"docs":{},"水":{"docs":{},"平":{"docs":{},"和":{"docs":{},"垂":{"docs":{},"直":{"docs":{},"方":{"docs":{},"向":{"docs":{},"相":{"docs":{},"连":{"docs":{},"（":{"docs":{},"对":{"docs":{},"角":{"docs":{},"线":{"docs":{},"方":{"docs":{},"向":{"docs":{},"不":{"docs":{},"相":{"docs":{},"连":{"docs":{},"）":{"docs":{},"。":{"docs":{},"整":{"docs":{},"个":{"docs":{},"网":{"docs":{},"格":{"docs":{},"被":{"docs":{},"水":{"docs":{},"完":{"docs":{},"全":{"docs":{},"包":{"docs":{},"围":{"docs":{},"，":{"docs":{},"但":{"docs":{},"其":{"docs":{},"中":{"docs":{},"恰":{"docs":{},"好":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"岛":{"docs":{},"屿":{"docs":{},"（":{"docs":{},"或":{"docs":{},"者":{"docs":{},"说":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"或":{"docs":{},"多":{"docs":{},"个":{"docs":{},"表":{"docs":{},"示":{"docs":{},"陆":{"docs":{},"地":{"docs":{},"的":{"docs":{},"格":{"docs":{},"子":{"docs":{},"相":{"docs":{},"连":{"docs":{},"组":{"docs":{},"成":{"docs":{},"的":{"docs":{},"岛":{"docs":{},"屿":{"docs":{},"）":{"docs":{},"。":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"非":{"docs":{},"原":{"docs":{},"地":{"docs":{},"修":{"docs":{},"改":{"docs":{},"，":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{"矩阵/最小路径和 LeetCode 64.html":{"ref":"矩阵/最小路径和 LeetCode 64.html","tf":0.0035971223021582736}}}}}}}}}}},"递":{"docs":{},"归":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}}},"空":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}},"列":{"docs":{},"）":{"docs":{},"，":{"docs":{},"请":{"docs":{},"按":{"docs":{},"照":{"docs":{},"顺":{"docs":{},"时":{"docs":{},"针":{"docs":{},"螺":{"docs":{},"旋":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"中":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}}}}}}}}}}}}}}}}}}}}}}}},"表":{"docs":{},"归":{"docs":{},"并":{"docs":{},"，":{"docs":{},"作":{"docs":{},"为":{"docs":{},"参":{"docs":{},"考":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}}}}},"螺":{"docs":{},"旋":{"docs":{},"矩":{"docs":{},"阵":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":10.005555555555556},"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":3.3378995433789953}}}}}},"行":{"docs":{},",":{"docs":{"矩阵/螺旋矩阵.html":{"ref":"矩阵/螺旋矩阵.html","tf":0.005555555555555556}}}},"到":{"docs":{"矩阵/螺旋矩阵 II LeetCode 53.html":{"ref":"矩阵/螺旋矩阵 II LeetCode 53.html","tf":0.0045662100456621},"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}},"达":{"docs":{},"边":{"docs":{},"界":{"docs":{},"外":{"docs":{},"或":{"docs":{},"访":{"docs":{},"问":{"docs":{},"到":{"docs":{},"为":{"0":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"0":{"docs":{},",":{"docs":{},"否":{"docs":{},"则":{"docs":{},"先":{"docs":{},"把":{"docs":{},"该":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"1":{"docs":{},"置":{"docs":{},"为":{"0":{"docs":{},"(":{"docs":{},"作":{"docs":{},"为":{"docs":{},"访":{"docs":{},"问":{"docs":{},"过":{"docs":{},"的":{"docs":{},"标":{"docs":{},"记":{"docs":{},",":{"docs":{},"相":{"docs":{},"当":{"docs":{},"于":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"数":{"docs":{},"组":{"docs":{},")":{"docs":{},",":{"docs":{},"随":{"docs":{},"后":{"docs":{},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"访":{"docs":{},"问":{"docs":{},"四":{"docs":{},"个":{"docs":{},"方":{"docs":{},"向":{"docs":{},".":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684}}}}}}}}}},"访":{"docs":{},"问":{"docs":{},"四":{"docs":{},"个":{"docs":{},"方":{"docs":{},"向":{"docs":{},",":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{"链表/":{"ref":"链表/","tf":10.083333333333334},"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":2.5}},"归":{"docs":{},"并":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}},"排":{"docs":{},"序":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":10.005}}}}}},"逆":{"docs":{},"序":{"docs":{},"输":{"docs":{},"出":{"docs":{},"（":{"docs":{},"不":{"docs":{},"带":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},"）":{"docs":{"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":10.043478260869565}}}}}}}}}}}}},"中":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"都":{"docs":{},"是":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"的":{"docs":{},"。":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}}}}}}}}}}}}},"至":{"docs":{},"少":{"docs":{},"包":{"docs":{},"含":{"docs":{},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"链表/删除链表中的节点 LeetCode 237.html":{"ref":"链表/删除链表中的节点 LeetCode 237.html","tf":0.009259259259259259}}}}}}}}}}},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{"链表/反转链表2.html":{"ref":"链表/反转链表2.html","tf":0.007246376811594203}}}}},"_":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":3.333333333333333}}}}}}}}}}},"（":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}}}}}}}},"的":{"docs":{},"中":{"docs":{},"间":{"docs":{},"结":{"docs":{},"点":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":3.333333333333333}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}},"写":{"docs":{},"成":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"错":{"docs":{},"了":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}}},"创":{"docs":{},"建":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"指":{"docs":{},"向":{"docs":{},"排":{"docs":{},"序":{"docs":{},"好":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"；":{"docs":{},"对":{"docs":{},"分":{"docs":{},"割":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"子":{"docs":{},"链":{"docs":{},"表":{"docs":{},"逐":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"对":{"docs":{},"比":{"docs":{},"，":{"docs":{},"值":{"docs":{},"小":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"插":{"docs":{},"入":{"docs":{},"到":{"docs":{},"新":{"docs":{},"链":{"docs":{},"表":{"docs":{},"后":{"docs":{},"面":{"docs":{},"；":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"日":{"docs":{},"期":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}},"归":{"docs":{},"并":{"docs":{},"排":{"docs":{},"序":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}},"采":{"docs":{},"用":{"docs":{},"分":{"docs":{},"治":{"docs":{},"思":{"docs":{},"想":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"使":{"docs":{},"其":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"成":{"docs":{},"为":{"docs":{},"有":{"docs":{},"序":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"再":{"docs":{},"对":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"进":{"docs":{},"行":{"docs":{},"归":{"docs":{},"并":{"docs":{},"。":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"现":{"docs":{},"在":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"个":{"docs":{},"列":{"docs":{},"表":{"docs":{},"已":{"docs":{},"经":{"docs":{},"是":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"了":{"docs":{"链表/链表归并排序.html":{"ref":"链表/链表归并排序.html","tf":0.005}}}}}}}}}}}}}}}}}}}},"改":{"docs":{},"为":{"docs":{},"：":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}}}}}}}}}}}}},"新":{"docs":{},"建":{"docs":{},"立":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{},"建":{"docs":{},"立":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"1":{"docs":{},"和":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"2":{"docs":{},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"指":{"docs":{},"向":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"通":{"docs":{},"过":{"docs":{},"比":{"docs":{},"较":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"，":{"docs":{},"小":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"添":{"docs":{},"加":{"docs":{},"到":{"docs":{},"新":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"分":{"docs":{},"别":{"docs":{},"判":{"docs":{},"断":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"1":{"docs":{},"和":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"2":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"各":{"docs":{},"自":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"末":{"docs":{},"尾":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"是":{"docs":{},"，":{"docs":{},"将":{"docs":{},"剩":{"docs":{},"余":{"docs":{},"元":{"docs":{},"素":{"docs":{},"添":{"docs":{},"加":{"docs":{},"到":{"docs":{},"新":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"末":{"docs":{},"尾":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"链表/合并两个有序链表 LeetCode 21.html":{"ref":"链表/合并两个有序链表 LeetCode 21.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"会":{"docs":{},"从":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}},"很":{"docs":{},"有":{"docs":{},"趣":{"docs":{},"，":{"docs":{},"前":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"项":{"docs":{},"比":{"docs":{},"较":{"docs":{},"结":{"docs":{},"果":{"docs":{},"都":{"docs":{},"相":{"docs":{},"同":{"docs":{},"（":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}}}}}},"多":{"docs":{},"人":{"docs":{},"很":{"docs":{},"难":{"docs":{},"理":{"docs":{},"解":{"docs":{},"为":{"docs":{},"什":{"docs":{},"么":{"docs":{},"上":{"docs":{},"面":{"docs":{},"这":{"docs":{},"种":{"docs":{},"写":{"docs":{},"法":{"docs":{},"是":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"，":{"docs":{},"其":{"docs":{},"实":{"docs":{},"我":{"docs":{},"们":{"docs":{},"将":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"和":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"的":{"docs":{},"过":{"docs":{},"程":{"docs":{},"合":{"docs":{},"到":{"docs":{},"了":{"docs":{},"一":{"docs":{},"块":{"docs":{},"，":{"docs":{},"我":{"docs":{},"在":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"一":{"docs":{},"些":{"docs":{},"问":{"docs":{},"题":{"docs":{},"中":{"docs":{},"也":{"docs":{},"没":{"docs":{},"说":{"docs":{},"明":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"在":{"docs":{},"此":{"docs":{},"解":{"docs":{},"释":{"docs":{},"一":{"docs":{},"下":{"docs":{},"。":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"排":{"docs":{},"序":{"docs":{},"时":{"docs":{},"，":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}},"，":{"docs":{},"取":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"间":{"docs":{},"那":{"docs":{},"个":{"docs":{},"数":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762}}}}}}}}}}}},"列":{"docs":{},"组":{"docs":{},"合":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}},"比":{"docs":{},"较":{"docs":{},"首":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"依":{"docs":{},"次":{"docs":{},"加":{"docs":{},"入":{"docs":{},"优":{"docs":{},"先":{"docs":{},"队":{"docs":{},"列":{"docs":{},"（":{"docs":{},"或":{"docs":{},"者":{"docs":{},"一":{"docs":{},"个":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"我":{"docs":{},"这":{"docs":{},"里":{"docs":{},"使":{"docs":{},"用":{"docs":{},"堆":{"docs":{},"）":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"如":{"2":{"docs":{},"，":{"1":{"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}}},"docs":{}}},"docs":{},"，":{"docs":{},"m":{"docs":{},"=":{"3":{"docs":{},",":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}},"docs":{}}}}}},"随":{"docs":{},"机":{"docs":{},"瞎":{"docs":{},"排":{"docs":{},"，":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}}},"后":{"docs":{},"，":{"docs":{},"在":{"docs":{},"第":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}},"）":{"docs":{},"，":{"docs":{},"于":{"docs":{},"是":{"docs":{"链表/合并K个排序链表.html":{"ref":"链表/合并K个排序链表.html","tf":0.004048582995951417}}}}},"。":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788},"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}},"环":{"docs":{},"形":{"docs":{},"链":{"docs":{},"表":{"docs":{"链表/环形链表 II LeetCode 142.html":{"ref":"链表/环形链表 II LeetCode 142.html","tf":3.3379416282642085}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":5}}}}}}}}}}}},"单":{"docs":{},"链":{"docs":{},"表":{"docs":{},"约":{"docs":{},"瑟":{"docs":{},"夫":{"docs":{},"问":{"docs":{},"题":{"docs":{"链表/环形单链表约瑟夫问题.html":{"ref":"链表/环形单链表约瑟夫问题.html","tf":10.03448275862069}}}}}}}}}}}},"置":{"docs":{},"空":{"docs":{},"法":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403}}}}},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"将":{"docs":{},"值":{"docs":{},"置":{"docs":{},"空":{"docs":{"链表/环形链表 LeetCode 141.html":{"ref":"链表/环形链表 LeetCode 141.html","tf":0.008771929824561403}}}}}}}}}},"时":{"docs":{},"会":{"docs":{},"相":{"docs":{},"交":{"docs":{},"于":{"4":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}},"docs":{}}}}}},"法":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"记":{"docs":{},"录":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}}}}}}}}}}}},"还":{"docs":{},"可":{"docs":{},"以":{"docs":{},"先":{"docs":{},"逆":{"docs":{},"序":{"docs":{},"，":{"docs":{},"后":{"docs":{},"输":{"docs":{},"出":{"docs":{},"，":{"docs":{},"逆":{"docs":{},"序":{"docs":{},"有":{"docs":{},"多":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"就":{"docs":{},"低":{"docs":{},"逆":{"docs":{},"序":{"docs":{},"，":{"docs":{},"递":{"docs":{},"归":{"docs":{},"逆":{"docs":{},"序":{"docs":{"链表/链表逆序输出 不带头结点.html":{"ref":"链表/链表逆序输出 不带头结点.html","tf":0.043478260869565216}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"有":{"docs":{},"个":{"docs":{},"办":{"docs":{},"法":{"docs":{},"就":{"docs":{},"是":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"统":{"docs":{},"计":{"docs":{},"结":{"docs":{},"果":{"docs":{},"集":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"空":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644}}}}}}}}}}}}}}}}}}}}},"着":{"docs":{},"而":{"docs":{},"需":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"思":{"docs":{},"想":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"单":{"docs":{},"条":{"docs":{},"线":{"docs":{},"走":{"docs":{},"通":{"docs":{},"，":{"docs":{},"其":{"docs":{},"它":{"docs":{},"的":{"docs":{},"就":{"docs":{},"交":{"docs":{},"给":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"算":{"docs":{},"法":{"docs":{},"本":{"docs":{},"身":{"docs":{},"去":{"docs":{},"工":{"docs":{},"作":{"docs":{"动态规划/分割回文串 LeetCode 131.html":{"ref":"动态规划/分割回文串 LeetCode 131.html","tf":0.015151515151515152},"回溯/分割回文串 LeetCode 131.html":{"ref":"回溯/分割回文串 LeetCode 131.html","tf":0.015151515151515152}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"能":{"docs":{},"用":{"docs":{},"摩":{"docs":{},"尔":{"docs":{},"投":{"docs":{},"票":{"docs":{},"法":{"docs":{},"吗":{"docs":{},"？":{"docs":{},"答":{"docs":{},"案":{"docs":{},"当":{"docs":{},"然":{"docs":{},"是":{"docs":{},"要":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"需":{"docs":{},"要":{"docs":{},"变":{"docs":{},"通":{"docs":{},"一":{"docs":{},"下":{"docs":{},"。":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}}}}}}}}}}}},"内":{"docs":{},"存":{"docs":{},"。":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}},"备":{"docs":{},"用":{"docs":{},"法":{"docs":{},"（":{"docs":{},"未":{"docs":{},"实":{"docs":{},"现":{"docs":{},"）":{"docs":{},":":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}},"并":{"docs":{},"且":{"docs":{},"让":{"docs":{},"到":{"docs":{},"达":{"docs":{},"末":{"docs":{},"尾":{"docs":{},"的":{"docs":{},"指":{"docs":{},"针":{"docs":{},"指":{"docs":{},"向":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},".":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}}}}}}}},"程":{"docs":{},"序":{"docs":{},"尽":{"docs":{},"量":{"docs":{},"满":{"docs":{},"足":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}}}}},"集":{"docs":{},"合":{"docs":{},"法":{"docs":{"链表/相交链表 LeetCode 160.html":{"ref":"链表/相交链表 LeetCode 160.html","tf":0.004048582995951417}}}}},"ø":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.007518796992481203}},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"想":{"docs":{},"要":{"docs":{},"把":{"docs":{},"它":{"docs":{},"改":{"docs":{},"成":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}},"←":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.011278195488721804}}},"→":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.011278195488721804}}},"古":{"docs":{},"老":{"docs":{},"办":{"docs":{},"法":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}},"头":{"docs":{},"插":{"docs":{},"法":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.007518796992481203}}}}},"把":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.013824884792626729}},"遍":{"docs":{},"历":{"docs":{},"到":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"插":{"docs":{},"入":{"docs":{},"到":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},"后":{"docs":{},"面":{"docs":{},"去":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}}}}}}}}}}}}}}},"迭":{"docs":{},"代":{"docs":{"二叉树/二叉树展开为链表.html":{"ref":"二叉树/二叉树展开为链表.html","tf":0.005208333333333333}},"法":{"docs":{"链表/反转链表.html":{"ref":"链表/反转链表.html","tf":0.0037593984962406013}}}}},"您":{"docs":{},"可":{"docs":{},"以":{"docs":{},"假":{"docs":{},"设":{"docs":{},"除":{"docs":{},"了":{"docs":{},"数":{"docs":{},"字":{"docs":{"链表/两数相加-链表 LeetCode 2.html":{"ref":"链表/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669},"逻辑思维/两数相加.html":{"ref":"逻辑思维/两数相加.html","tf":0.009900990099009901},"逻辑思维/两数相加-链表 LeetCode 2.html":{"ref":"逻辑思维/两数相加-链表 LeetCode 2.html","tf":0.009708737864077669}}}}}}}}}}},"退":{"docs":{},"出":{"docs":{},"循":{"docs":{},"环":{"docs":{},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"为":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"指":{"docs":{},"向":{"docs":{},"最":{"docs":{},"后":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}},"是":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"刚":{"docs":{},"好":{"docs":{},"指":{"docs":{},"向":{"docs":{},"最":{"docs":{},"后":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"此":{"docs":{},"时":{"docs":{},",":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"指":{"docs":{},"向":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},",":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"能":{"docs":{},"删":{"docs":{},"除":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"n":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{"链表/删除链表的倒数第K个节点.html":{"ref":"链表/删除链表的倒数第K个节点.html","tf":0.0047169811320754715}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"延":{"docs":{},"伸":{"docs":{},"一":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}}},"二":{"docs":{"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"ref":"链表/删除排序链表中的重复元素 II LeetCode 82.html","tf":0.005780346820809248}}}}},"偶":{"docs":{},"数":{"docs":{},"个":{"docs":{},",":{"docs":{"链表/链表的中间结点 LeetCode 876.html":{"ref":"链表/链表的中间结点 LeetCode 876.html","tf":0.006578947368421052}}}}}},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"是":{"docs":{},"指":{"docs":{},"没":{"docs":{},"有":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"二叉树/二叉树的最大深度.html":{"ref":"二叉树/二叉树的最大深度.html","tf":0.0072992700729927005},"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547},"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.005376344086021506}}}}}}}}}}}}}}}}},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}},"简":{"docs":{},"写":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}},"（":{"docs":{},"每":{"docs":{},"层":{"docs":{},"单":{"docs":{},"独":{"docs":{},"输":{"docs":{},"出":{"docs":{},"）":{"docs":{"二叉树/二叉树的层次遍历.html":{"ref":"二叉树/二叉树的层次遍历.html","tf":0.007518796992481203}}}}}}}}}}}}},"楼":{"docs":{},"的":{"docs":{},"建":{"docs":{},"筑":{"docs":{},"。":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}},"路":{"docs":{},"径":{"docs":{},"总":{"docs":{},"和":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":3.333333333333333},"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":3.3405275779376495},"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":3.337962962962963}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"二叉树/路径总和 LeetCode 112.html":{"ref":"二叉树/路径总和 LeetCode 112.html","tf":0.00847457627118644}}}}}}}}}}}},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"从":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"也":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"在":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"结":{"docs":{},"束":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"路":{"docs":{},"径":{"docs":{},"方":{"docs":{},"向":{"docs":{},"必":{"docs":{},"须":{"docs":{},"是":{"docs":{},"向":{"docs":{},"下":{"docs":{},"的":{"docs":{},"（":{"docs":{},"只":{"docs":{},"能":{"docs":{},"从":{"docs":{},"父":{"docs":{},"节":{"docs":{},"点":{"docs":{},"到":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"）":{"docs":{},"。":{"docs":{"二叉树/路径总和 III LeetCode 437.html":{"ref":"二叉树/路径总和 III LeetCode 437.html","tf":0.004629629629629629}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"全":{"docs":{},"局":{"docs":{},"变":{"docs":{},"量":{"docs":{},"可":{"docs":{},"以":{"docs":{},"这":{"docs":{},"么":{"docs":{},"设":{"docs":{"二叉树/路径总和 II LeetCode 113.html":{"ref":"二叉树/路径总和 II LeetCode 113.html","tf":0.007194244604316547}},"置":{"docs":{"回溯/子集 LeetCode 78.html":{"ref":"回溯/子集 LeetCode 78.html","tf":0.00819672131147541}}}}}}}}}}},"排":{"docs":{},"列":{"docs":{"回溯/全排列 II LeetCode 47.html":{"ref":"回溯/全排列 II LeetCode 47.html","tf":2.5046511627906978}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":5}}}}}}}}}},"是":{"docs":{},"交":{"docs":{},"换":{"docs":{},"x":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{},"x":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{"回溯/全排列 LeetCode 46.html":{"ref":"回溯/全排列 LeetCode 46.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}},"百":{"docs":{},"度":{"docs":{},"百":{"docs":{},"科":{"docs":{},"中":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"的":{"docs":{},"定":{"docs":{},"义":{"docs":{},"为":{"docs":{},"：":{"docs":{},"“":{"docs":{},"对":{"docs":{},"于":{"docs":{},"有":{"docs":{},"根":{"docs":{},"树":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.004830917874396135},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}},"节":{"docs":{},"点":{"docs":{"二叉树/二叉树的最近公共祖先.html":{"ref":"二叉树/二叉树的最近公共祖先.html","tf":0.00966183574879227},"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.013605442176870748}}}},"祖":{"docs":{},"先":{"docs":{},"在":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{"二叉树/二叉搜索树的最近公共祖先.html":{"ref":"二叉树/二叉搜索树的最近公共祖先.html","tf":0.006802721088435374}}}}}}}},"下":{"docs":{},"午":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}},"面":{"docs":{},"一":{"docs":{},"行":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}},"的":{"docs":{},"调":{"docs":{},"整":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"最":{"docs":{},"小":{"docs":{},"最":{"docs":{},"大":{"docs":{},"堆":{"docs":{},"元":{"docs":{},"素":{"docs":{},"相":{"docs":{},"差":{"docs":{},"最":{"docs":{},"多":{"docs":{},"为":{"1":{"docs":{},"，":{"docs":{},"而":{"docs":{},"且":{"docs":{},"永":{"docs":{},"远":{"docs":{},"是":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.005291005291005291},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.005405405405405406}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"作":{"docs":{},"者":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}},"文":{"docs":{},"件":{"docs":{},"名":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}},"：":{"2":{"0":{"1":{"9":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}},"docs":{}},"docs":{}},"docs":{}},"docs":{"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"ref":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","tf":0.007936507936507936}},"g":{"docs":{},"w":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{},".":{"docs":{},"p":{"docs":{},"i":{"docs":{"二叉树/二叉树序列化和反序列化.html":{"ref":"二叉树/二叉树序列化和反序列化.html","tf":0.004784688995215311}}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}}}}}},"docs":{}}}},"子":{"docs":{},"集":{"docs":{},"（":{"docs":{},"最":{"docs":{},"详":{"docs":{},"细":{"docs":{},"的":{"docs":{},"解":{"docs":{},"法":{"docs":{},"！":{"docs":{},"！":{"docs":{},"！":{"docs":{},"）":{"docs":{},"的":{"docs":{},"扩":{"docs":{},"展":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"用":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"解":{"docs":{},"法":{"docs":{},"会":{"docs":{},"出":{"docs":{},"现":{"docs":{},"这":{"docs":{},"样":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},"会":{"docs":{},"出":{"docs":{},"现":{"docs":{},"两":{"docs":{},"次":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"按":{"docs":{},"照":{"docs":{},"这":{"docs":{},"个":{"docs":{},"思":{"docs":{},"路":{"docs":{},"分":{"docs":{},"析":{"docs":{},"一":{"docs":{},"下":{"docs":{},"[":{"7":{"docs":{},",":{"1":{"0":{"docs":{},",":{"8":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},"为":{"docs":{},"什":{"docs":{},"么":{"docs":{},"不":{"docs":{},"是":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"9":{"docs":{},"为":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"从":{"docs":{},"数":{"docs":{},"组":{"docs":{},"左":{"docs":{},"侧":{"docs":{},"找":{"docs":{},"到":{"docs":{},"比":{"8":{"docs":{},"小":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"组":{"docs":{},"，":{"docs":{},"该":{"docs":{},"元":{"docs":{},"素":{"docs":{},"组":{"docs":{},"的":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"是":{"7":{"docs":{},"，":{"docs":{},"因":{"docs":{},"此":{"docs":{},"，":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"应":{"docs":{},"该":{"docs":{},"是":{"7":{"docs":{},"，":{"docs":{},"而":{"docs":{},"剩":{"docs":{},"下":{"docs":{},"的":{"docs":{},"[":{"1":{"0":{"docs":{},",":{"8":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},"应":{"docs":{},"该":{"docs":{},"是":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"应":{"docs":{},"该":{"docs":{},"满":{"docs":{},"足":{"docs":{},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"是":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"都":{"docs":{},"比":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"9":{"docs":{},"大":{"docs":{},"，":{"docs":{},"然":{"docs":{},"而":{"8":{"docs":{},"比":{"9":{"docs":{},"小":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"不":{"docs":{},"满":{"docs":{},"足":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}}}}}}}},"docs":{}}},"docs":{}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}}}}}}}}}}},"碰":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"题":{"docs":{},"目":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"排":{"docs":{},"序":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"所":{"docs":{},"谓":{"docs":{},"排":{"docs":{},"序":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"指":{"docs":{},"的":{"docs":{},"是":{"docs":{},"对":{"docs":{},"于":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"中":{"docs":{},"的":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"比":{"docs":{},"左":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"数":{"docs":{},"值":{"docs":{},"大":{"docs":{},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"比":{"docs":{},"右":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"数":{"docs":{},"值":{"docs":{},"小":{"docs":{},"，":{"docs":{},"例":{"docs":{},"如":{"docs":{},"[":{"5":{"docs":{},",":{"7":{"docs":{},",":{"6":{"docs":{},",":{"9":{"docs":{},",":{"1":{"1":{"docs":{},",":{"1":{"0":{"docs":{},",":{"8":{"docs":{},"]":{"docs":{"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"ref":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","tf":0.01}}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"显":{"docs":{},"式":{"docs":{},"回":{"docs":{},"溯":{"docs":{"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}}}}}},"隐":{"docs":{},"式":{"docs":{},"回":{"docs":{},"溯":{"docs":{"二叉树/二叉树路径等于输入整数的所有路径.html":{"ref":"二叉树/二叉树路径等于输入整数的所有路径.html","tf":0.006993006993006993},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"ref":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","tf":0.010752688172043012}}}}}},"镜":{"docs":{},"像":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{"二叉树/二叉树的镜像.html":{"ref":"二叉树/二叉树的镜像.html","tf":0.011904761904761904}}}}}}},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"每":{"docs":{},"次":{"docs":{},"只":{"docs":{},"能":{"docs":{},"向":{"docs":{},"下":{"docs":{},"或":{"docs":{},"者":{"docs":{},"向":{"docs":{},"右":{"docs":{},"移":{"docs":{},"动":{"docs":{},"一":{"docs":{},"步":{"docs":{},"。":{"docs":{},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"试":{"docs":{},"图":{"docs":{},"达":{"docs":{},"到":{"docs":{},"网":{"docs":{},"格":{"docs":{},"的":{"docs":{},"右":{"docs":{},"下":{"docs":{},"角":{"docs":{},"（":{"docs":{},"在":{"docs":{},"下":{"docs":{},"图":{"docs":{},"中":{"docs":{},"标":{"docs":{},"记":{"docs":{},"为":{"docs":{},"“":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{},"”":{"docs":{},"）":{"docs":{},"。":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687},"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"条":{"docs":{},"路":{"docs":{},"径":{"docs":{},"可":{"docs":{},"以":{"docs":{},"到":{"docs":{},"达":{"docs":{},"右":{"docs":{},"下":{"docs":{},"角":{"docs":{},"。":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}}}}},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"：":{"docs":{"动态规划/不同路径2_LeetCode_63.html":{"ref":"动态规划/不同路径2_LeetCode_63.html","tf":0.003787878787878788}}}}}}}},"垂":{"docs":{},"直":{"docs":{},"线":{"docs":{},"，":{"docs":{},"垂":{"docs":{},"直":{"docs":{},"线":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}}}},"问":{"docs":{},"总":{"docs":{},"共":{"docs":{},"有":{"docs":{},"多":{"docs":{},"少":{"docs":{},"条":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"？":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}}}}}}},"题":{"docs":{},"解":{"docs":{},"决":{"docs":{},"思":{"docs":{},"路":{"docs":{},"：":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}}}}}}}},"阶":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.06896551724137931}},"层":{"docs":{},"函":{"docs":{},"数":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}},"计":{"docs":{},"算":{"docs":{},"函":{"docs":{},"数":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}},"递":{"docs":{},"归":{"docs":{},"计":{"docs":{},"算":{"docs":{},"函":{"docs":{},"数":{"docs":{"动态规划/不同路径 LeetCode 62.html":{"ref":"动态规划/不同路径 LeetCode 62.html","tf":0.003067484662576687}}}}}}}}},"你":{"docs":{},"才":{"docs":{},"能":{"docs":{},"到":{"docs":{},"达":{"docs":{},"楼":{"docs":{},"顶":{"docs":{},"。":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":0.006896551724137931}}}}}}}}}}},"加":{"docs":{},"入":{"docs":{},"s":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"动态规划/分割回文串 II LeetCode 132.html":{"ref":"动态规划/分割回文串 II LeetCode 132.html","tf":0.009259259259259259}}}}}}}}},"拆":{"docs":{},"分":{"docs":{},"时":{"docs":{},"可":{"docs":{},"以":{"docs":{},"重":{"docs":{},"复":{"docs":{},"使":{"docs":{},"用":{"docs":{},"字":{"docs":{},"典":{"docs":{},"中":{"docs":{},"的":{"docs":{},"单":{"docs":{},"词":{"docs":{},"。":{"docs":{"动态规划/单词拆分 LeetCode 139.html":{"ref":"动态规划/单词拆分 LeetCode 139.html","tf":0.003703703703703704}}}}}}}}}}}}}}}}}},"任":{"docs":{},"何":{"docs":{},"从":{"docs":{},"高":{"docs":{},"于":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}},"不":{"docs":{},"在":{"docs":{},"边":{"docs":{},"界":{"docs":{},"上":{"docs":{},"，":{"docs":{},"或":{"docs":{},"不":{"docs":{},"与":{"docs":{},"边":{"docs":{},"界":{"docs":{},"上":{"docs":{},"的":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}},"共":{"docs":{},"有":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}},"扔":{"docs":{},"下":{"docs":{},"（":{"docs":{},"满":{"docs":{},"足":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}},"楼":{"docs":{},"层":{"docs":{},"或":{"docs":{},"比":{"docs":{},"它":{"docs":{},"低":{"docs":{},"的":{"docs":{},"楼":{"docs":{},"层":{"docs":{},"落":{"docs":{},"下":{"docs":{},"的":{"docs":{},"鸡":{"docs":{},"蛋":{"docs":{},"都":{"docs":{},"不":{"docs":{},"会":{"docs":{},"破":{"docs":{},"。":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}},"掉":{"docs":{},"落":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"它":{"docs":{},"碎":{"docs":{},"了":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"知":{"docs":{},"道":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}},"直":{"docs":{},"接":{"docs":{},"原":{"docs":{},"地":{"docs":{},"更":{"docs":{},"新":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}},"那":{"docs":{},"么":{"docs":{"动态规划/最大正方形 LeetCode 221.html":{"ref":"动态规划/最大正方形 LeetCode 221.html","tf":0.004608294930875576}},"我":{"docs":{},"选":{"docs":{},"定":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"扔":{"docs":{},"的":{"docs":{},"楼":{"docs":{},"层":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"我":{"docs":{},"要":{"docs":{},"么":{"docs":{},"碎":{"docs":{},"，":{"docs":{},"要":{"docs":{},"么":{"docs":{},"不":{"docs":{},"碎":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}}}},"题":{"docs":{},"目":{"docs":{},"要":{"docs":{},"求":{"docs":{},"的":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"这":{"docs":{},"个":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}},"这":{"docs":{},"样":{"docs":{},"下":{"docs":{},"来":{"docs":{},"，":{"docs":{},"老":{"docs":{},"师":{"docs":{},"至":{"docs":{},"少":{"docs":{},"需":{"docs":{},"要":{"docs":{},"准":{"docs":{},"备":{"docs":{},"多":{"docs":{},"少":{"docs":{},"颗":{"docs":{},"糖":{"docs":{},"果":{"docs":{},"呢":{"docs":{},"？":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}}}}}}}}}}}}}}}}}}}}}}}},"鸡":{"docs":{},"蛋":{"docs":{},"从":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}},"完":{"docs":{},"全":{"docs":{},"够":{"docs":{},"用":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}},"掉":{"docs":{},"落":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":0.0056179775280898875}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"动态规划/鸡蛋掉落 Leetcode 887.html":{"ref":"动态规划/鸡蛋掉落 Leetcode 887.html","tf":5}}}}}}}}}}}}}},"么":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"'":{"4":{"docs":{},"'":{"docs":{},"]":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}},"docs":{}}}}}},"依":{"docs":{},"次":{"docs":{},"判":{"docs":{},"断":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"将":{"docs":{},"其":{"docs":{},"插":{"docs":{},"入":{"docs":{},"d":{"docs":{},"p":{"docs":{},"数":{"docs":{},"组":{"docs":{},"相":{"docs":{},"应":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},":":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}}}}}}}}}},"吗":{"docs":{},"?":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}},"替":{"docs":{},"换":{"docs":{},"思":{"docs":{},"路":{"docs":{"动态规划/最长上升子序列 LeetCode 300.html":{"ref":"动态规划/最长上升子序列 LeetCode 300.html","tf":0.004739336492890996}}}},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.005917159763313609},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.005917159763313609}}}}}},"为":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.018433179723502304},"逻辑思维/最小编辑距离.html":{"ref":"逻辑思维/最小编辑距离.html","tf":0.023668639053254437},"回溯/最小编辑距离.html":{"ref":"回溯/最小编辑距离.html","tf":0.023668639053254437}}},"成":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}}},"斐":{"docs":{},"波":{"docs":{},"拉":{"docs":{},"契":{"docs":{},"数":{"docs":{},"列":{"docs":{},"第":{"docs":{},"n":{"docs":{},"项":{"docs":{"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":10}}}}}}}}},"那":{"docs":{},"契":{"docs":{},"数":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"5":{"0":{"9":{"docs":{},")":{"docs":{"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"，":{"docs":{},"通":{"docs":{},"常":{"docs":{},"用":{"docs":{"动态规划/斐波拉契数列第n项.html":{"ref":"动态规划/斐波拉契数列第n项.html","tf":0.0196078431372549}}}}}}}}}}},"完":{"docs":{},"全":{"docs":{},"背":{"docs":{},"包":{"docs":{},"问":{"docs":{},"题":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}}}}}},"金":{"docs":{},"额":{"docs":{},"不":{"docs":{},"可":{"docs":{},"达":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}}}}},"零":{"docs":{},"钱":{"docs":{},"兑":{"docs":{},"换":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"3":{"2":{"2":{"docs":{},")":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":0.004545454545454545}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"3":{"2":{"2":{"docs":{"动态规划/零钱兑换_LeetCode_322.html":{"ref":"动态规划/零钱兑换_LeetCode_322.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"偷":{"docs":{},"窃":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.018072289156626505}},"到":{"docs":{},"的":{"docs":{},"最":{"docs":{},"高":{"docs":{},"金":{"docs":{},"额":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338},"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.009259259259259259}}}}}}}}}},"即":{"docs":{},"为":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.018072289156626505}}},"输":{"docs":{},"出":{"docs":{},"p":{"docs":{},"%":{"1":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"7":{"docs":{"逻辑思维/逆序对个数.html":{"ref":"逻辑思维/逆序对个数.html","tf":0.02631578947368421}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}},"号":{"docs":{},"房":{"docs":{},"屋":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.030120481927710843}},"（":{"docs":{},"金":{"docs":{},"额":{"docs":{"动态规划/打家劫舍2_LeetCode_213.html":{"ref":"动态规划/打家劫舍2_LeetCode_213.html","tf":0.037037037037037035}}}}}},"间":{"docs":{},"可":{"docs":{},"盗":{"docs":{},"窃":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"为":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.018072289156626505}}}}}}}}},"自":{"docs":{},"身":{"docs":{},"的":{"docs":{},"值":{"docs":{},"为":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}}}}}}}},"房":{"docs":{},"屋":{"docs":{},"可":{"docs":{},"盗":{"docs":{},"窃":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"加":{"docs":{},"上":{"docs":{},"当":{"docs":{},"前":{"docs":{},"房":{"docs":{},"屋":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"二":{"docs":{},"者":{"docs":{},"之":{"docs":{},"间":{"docs":{},"取":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"要":{"docs":{},"么":{"docs":{},"就":{"docs":{},"是":{"docs":{"动态规划/打家劫舍_LeetCode_198.html":{"ref":"动态规划/打家劫舍_LeetCode_198.html","tf":0.012048192771084338}}}}}}}}}}}}}}}},"考":{"docs":{},"虑":{"docs":{},"到":{"docs":{},"存":{"docs":{},"在":{"docs":{},"序":{"docs":{},"列":{"docs":{},"全":{"docs":{},"为":{"docs":{},"负":{"docs":{},"数":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{},"为":{"docs":{},"负":{"docs":{},"无":{"docs":{},"穷":{"docs":{},"而":{"docs":{},"非":{"0":{"docs":{"动态规划/最大子序和_LeetCode_53.html":{"ref":"动态规划/最大子序和_LeetCode_53.html","tf":0.002336448598130841}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}},"“":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"”":{"docs":{},"需":{"docs":{},"要":{"docs":{},"连":{"docs":{},"续":{"docs":{},"的":{"docs":{},"一":{"docs":{},"段":{"docs":{},"，":{"docs":{},"并":{"docs":{},"不":{"docs":{},"是":{"docs":{},"“":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"”":{"docs":{},"。":{"docs":{"动态规划/最长重复子数组_LeetCode_718.html":{"ref":"动态规划/最长重复子数组_LeetCode_718.html","tf":0.004310344827586207}}}}}}}}}}}}}}}}}}}}}}}},"匹":{"docs":{},"配":{"0":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}},"docs":{},"串":{"docs":{},"为":{"docs":{},"空":{"docs":{},"串":{"docs":{},"时":{"docs":{},"，":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"1":{"docs":{},"个":{"docs":{},"以":{"docs":{},"上":{"docs":{},"字":{"docs":{},"符":{"docs":{},"时":{"docs":{},"，":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"不":{"docs":{},"成":{"docs":{},"功":{"docs":{},"，":{"docs":{},"即":{"docs":{},"第":{"docs":{},"一":{"docs":{},"列":{"docs":{},"从":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"开":{"docs":{},"始":{"docs":{},"为":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"，":{"docs":{},"由":{"docs":{},"于":{"docs":{},"创":{"docs":{},"建":{"docs":{},"d":{"docs":{},"p":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}},"：":{"docs":{},"p":{"docs":{},"串":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}},"任":{"docs":{},"意":{"docs":{},"单":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}},"多":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"（":{"docs":{},">":{"docs":{},"=":{"1":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"）":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}},"docs":{}}}}}}}},"零":{"docs":{},"个":{"docs":{},"或":{"docs":{},"多":{"docs":{},"个":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"那":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}}},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"多":{"docs":{},"字":{"docs":{},"符":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705}}}}}}}}}}},"沿":{"docs":{},"着":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"串":{"docs":{},"和":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"构":{"docs":{},"成":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"的":{"docs":{},"对":{"docs":{},"角":{"docs":{},"线":{"docs":{},"传":{"docs":{},"递":{"docs":{},"状":{"docs":{},"态":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}}}}}},"状":{"docs":{},"态":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"的":{"docs":{},"首":{"docs":{},"行":{"docs":{},"与":{"docs":{},"首":{"docs":{},"列":{"docs":{},"对":{"docs":{},"应":{"docs":{},"于":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"与":{"docs":{},"空":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"符":{"docs":{"动态规划/正则表达式匹配_LeetCode_10.html":{"ref":"动态规划/正则表达式匹配_LeetCode_10.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}}}}}},"?":{"docs":{"动态规划/通配符匹配_LeetCode_44.html":{"ref":"动态规划/通配符匹配_LeetCode_44.html","tf":0.004098360655737705},"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762}}},"乘":{"docs":{},"积":{"docs":{},"最":{"docs":{},"大":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":3.333333333333333}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":5}}}}}}}}}}}}}}}}},"另":{"docs":{},"外":{"docs":{},"一":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"保":{"docs":{},"存":{"docs":{},"前":{"docs":{},"面":{"docs":{},"走":{"docs":{},"过":{"docs":{},"的":{"docs":{},"路":{"docs":{},"，":{"docs":{},"里":{"docs":{},"面":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"这":{"docs":{},"是":{"docs":{},"乘":{"docs":{},"法":{"docs":{},"，":{"docs":{},"乘":{"docs":{},"法":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"会":{"docs":{},"出":{"docs":{},"现":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"，":{"docs":{},"是":{"docs":{},"由":{"docs":{},"两":{"docs":{},"个":{"docs":{},"负":{"docs":{},"数":{"docs":{},"乘":{"docs":{},"起":{"docs":{},"来":{"docs":{},"的":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"负":{"docs":{},"数":{"docs":{},"是":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{"动态规划/乘积最大子序列 LeetCode 152.html":{"ref":"动态规划/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"ref":"逻辑思维/乘积最大子序列 LeetCode 152.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"建":{"docs":{},"立":{"docs":{},"数":{"docs":{},"组":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{},"来":{"docs":{},"存":{"docs":{},"储":{"docs":{"动态规划/编辑距离_LeetCode_72.html":{"ref":"动态规划/编辑距离_LeetCode_72.html","tf":0.004608294930875576}}}}}}}}}}}}}}},"做":{"docs":{},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"目":{"docs":{},"之":{"docs":{},"前":{"docs":{},"，":{"docs":{},"建":{"docs":{},"议":{"docs":{},"先":{"docs":{},"去":{"docs":{},"看":{"docs":{},"看":{"3":{"0":{"0":{"docs":{},"号":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"本":{"docs":{},"题":{"docs":{},"在":{"3":{"0":{"0":{"docs":{},"号":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"基":{"docs":{},"础":{"docs":{},"上":{"docs":{},"做":{"docs":{},"了":{"docs":{},"一":{"docs":{},"些":{"docs":{},"改":{"docs":{},"变":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"多":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"来":{"docs":{},"记":{"docs":{},"录":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"的":{"docs":{},"组":{"docs":{},"合":{"docs":{},"数":{"docs":{"动态规划/最长递增子序列的个数_LeetCode_673.html":{"ref":"动态规划/最长递增子序列的个数_LeetCode_673.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"逻":{"docs":{},"辑":{"docs":{},"思":{"docs":{},"维":{"docs":{"逻辑思维/":{"ref":"逻辑思维/","tf":10.083333333333334}}}}}},"看":{"docs":{},"到":{"docs":{},"这":{"docs":{},"里":{"docs":{},"，":{"docs":{},"恭":{"docs":{},"喜":{"docs":{},"你":{"docs":{},"掌":{"docs":{},"握":{"docs":{},"了":{"docs":{},"必":{"docs":{},"胜":{"docs":{},"法":{"docs":{},"则":{"docs":{},"，":{"docs":{},"下":{"docs":{},"次":{"docs":{},"各":{"docs":{},"位":{"docs":{},"盆":{"docs":{},"宇":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"这":{"docs":{},"个":{"docs":{},"游":{"docs":{},"戏":{"docs":{},"跟":{"docs":{},"别":{"docs":{},"人":{"docs":{},"打":{"docs":{},"赌":{"docs":{},"了":{"docs":{},"。":{"docs":{"逻辑思维/Nim Game.html":{"ref":"逻辑思维/Nim Game.html","tf":0.03225806451612903}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"爬":{"docs":{},"楼":{"docs":{},"梯":{"docs":{"逻辑思维/爬楼梯.html":{"ref":"逻辑思维/爬楼梯.html","tf":10.006896551724138}}}}},"买":{"docs":{},"卖":{"docs":{},"股":{"docs":{},"票":{"docs":{},"的":{"docs":{},"最":{"docs":{},"佳":{"docs":{},"时":{"docs":{},"机":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":3.3399558498896242}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":5}}}}}}}}}}}}}}}}}}},"天":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}},"的":{"docs":{},"价":{"docs":{},"格":{"docs":{},"。":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.009009009009009009},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}},"（":{"docs":{},"股":{"docs":{},"票":{"docs":{},"价":{"docs":{},"格":{"docs":{"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"ref":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","tf":0.018018018018018018},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.033112582781456956}}}}}}},"和":{"docs":{},"第":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}},"接":{"docs":{},"连":{"docs":{},"购":{"docs":{},"买":{"docs":{},"股":{"docs":{},"票":{"docs":{},"，":{"docs":{},"之":{"docs":{},"后":{"docs":{},"再":{"docs":{},"将":{"docs":{},"它":{"docs":{},"们":{"docs":{},"卖":{"docs":{},"出":{"docs":{},"。":{"docs":{"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"ref":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","tf":0.006622516556291391}}}}}}}}}}}}}}}}}}},"串":{"docs":{},"中":{"docs":{},"的":{"docs":{},"元":{"docs":{},"音":{"docs":{},"字":{"docs":{},"母":{"docs":{},"几":{"docs":{},"篇":{"docs":{},"文":{"docs":{},"章":{"docs":{},"中":{"docs":{},"的":{"docs":{},"解":{"docs":{},"题":{"docs":{},"思":{"docs":{},"路":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"通":{"docs":{},"过":{"docs":{},"设":{"docs":{},"置":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"指":{"docs":{},"向":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"头":{"docs":{},"l":{"docs":{},"和":{"docs":{},"尾":{"docs":{},"r":{"docs":{},"，":{"docs":{},"计":{"docs":{},"算":{"docs":{},"容":{"docs":{},"器":{"docs":{},"可":{"docs":{},"以":{"docs":{},"容":{"docs":{},"纳":{"docs":{},"多":{"docs":{},"少":{"docs":{},"水":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"。":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"盛":{"docs":{},"最":{"docs":{},"多":{"docs":{},"水":{"docs":{},"的":{"docs":{},"容":{"docs":{},"器":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":10.011627906976743}}}}}}}}},"轴":{"docs":{},"共":{"docs":{},"同":{"docs":{},"构":{"docs":{},"成":{"docs":{},"的":{"docs":{},"容":{"docs":{},"器":{"docs":{},"可":{"docs":{},"以":{"docs":{},"容":{"docs":{},"纳":{"docs":{},"最":{"docs":{},"多":{"docs":{},"的":{"docs":{},"水":{"docs":{},"。":{"docs":{"逻辑思维/盛最多水的容器.html":{"ref":"逻辑思维/盛最多水的容器.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}},"综":{"docs":{},"上":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"不":{"docs":{},"可":{"docs":{},"能":{"docs":{},"存":{"docs":{},"在":{"2":{"docs":{},"个":{"docs":{},"以":{"docs":{},"上":{"docs":{},"的":{"docs":{},"数":{"docs":{},"它":{"docs":{},"们":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"大":{"docs":{},"于":{"docs":{},"n":{"docs":{},"/":{"3":{"docs":{},"。":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"证":{"docs":{},"明":{"docs":{"逻辑思维/摩尔投票算法.html":{"ref":"逻辑思维/摩尔投票算法.html","tf":0.004761904761904762},"回溯/摩尔投票算法.html":{"ref":"回溯/摩尔投票算法.html","tf":0.005681818181818182}}}},"老":{"docs":{},"师":{"docs":{},"想":{"docs":{},"给":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"们":{"docs":{},"分":{"docs":{},"发":{"docs":{},"糖":{"docs":{},"果":{"docs":{},"，":{"docs":{},"有":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}}}}}}}}}}}}}},"颗":{"docs":{},"糖":{"docs":{},"果":{"docs":{},"。":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.014084507042253521}}},"，":{"docs":{},"这":{"docs":{},"已":{"docs":{},"满":{"docs":{},"足":{"docs":{},"上":{"docs":{},"述":{"docs":{},"两":{"docs":{},"个":{"docs":{},"条":{"docs":{},"件":{"docs":{},"。":{"docs":{"逻辑思维/分发糖果_LeetCode_135.html":{"ref":"逻辑思维/分发糖果_LeetCode_135.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}},"北":{"docs":{},"面":{"docs":{},"(":{"docs":{},"或":{"docs":{},"南":{"docs":{},"面":{"docs":{},")":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}}}}}},"岛":{"docs":{},"屿":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}},"中":{"docs":{},"没":{"docs":{},"有":{"docs":{},"“":{"docs":{},"湖":{"docs":{},"”":{"docs":{},"（":{"docs":{},"“":{"docs":{},"湖":{"docs":{},"”":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}}}}}}}}},"周":{"docs":{},"长":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"4":{"6":{"3":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}},"的":{"docs":{},"周":{"docs":{},"长":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}},"个":{"docs":{},"数":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":5.010526315789473}}}},"最":{"docs":{},"大":{"docs":{},"面":{"docs":{},"积":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"6":{"9":{"5":{"docs":{},")":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"6":{"9":{"5":{"docs":{"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":10}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}},"西":{"docs":{},"面":{"docs":{},"(":{"docs":{},"或":{"docs":{},"东":{"docs":{},"面":{"docs":{},")":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"再":{"docs":{},"乘":{"2":{"docs":{},"即":{"docs":{},"可":{"docs":{"逻辑思维/岛屿周长_LeetCode_463.html":{"ref":"逻辑思维/岛屿周长_LeetCode_463.html","tf":0.007692307692307693}}}}},"docs":{}}}}}}}}}}}}},"减":{"docs":{},"去":{"docs":{},"面":{"docs":{},"贴":{"docs":{},"在":{"docs":{},"一":{"docs":{},"起":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}}}}}}}}}},"为":{"docs":{},"空":{"docs":{},"串":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"都":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"了":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}},"面":{"docs":{},"积":{"docs":{},".":{"docs":{"逻辑思维/三维形体的表面积_LeetCode_892.html":{"ref":"逻辑思维/三维形体的表面积_LeetCode_892.html","tf":0.009708737864077669}}}}},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{"回溯/子集 II LeetCode 90.html":{"ref":"回溯/子集 II LeetCode 90.html","tf":0.010416666666666666}}}}},"@":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.006430868167202572}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},":":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}},"走":{"docs":{},"不":{"docs":{},"通":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"要":{"docs":{},"把":{"docs":{},"这":{"docs":{},"条":{"docs":{},"路":{"docs":{},"删":{"docs":{},"除":{"docs":{},"掉":{"docs":{},"。":{"docs":{},"回":{"docs":{},"到":{"docs":{},"原":{"docs":{},"来":{"docs":{},"的":{"docs":{},"模":{"docs":{},"样":{"docs":{"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"ref":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}}}}}}}}}},"地":{"docs":{},"址":{"docs":{},"格":{"docs":{},"式":{"docs":{},"。":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}}}}}}},"复":{"docs":{},"原":{"docs":{},"i":{"docs":{},"p":{"docs":{},"地":{"docs":{},"址":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":0.008333333333333333}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"9":{"3":{"docs":{"回溯/复原IP地址_LeetCode_93.html":{"ref":"回溯/复原IP地址_LeetCode_93.html","tf":10}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}},"深":{"docs":{},"度":{"docs":{},"搜":{"docs":{},"索":{"docs":{"深度搜索/":{"ref":"深度搜索/","tf":10.083333333333334},"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}},"优":{"docs":{},"先":{"docs":{},"遍":{"docs":{},"历":{"docs":{},",":{"docs":{"深度搜索/岛屿的个数 LeetCode_200.html":{"ref":"深度搜索/岛屿的个数 LeetCode_200.html","tf":0.010526315789473684},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"ref":"深度搜索/岛屿的最大面积_LeetCode_695.html","tf":0.006944444444444444}}}}}}}}},"围":{"docs":{},"绕":{"docs":{},"的":{"docs":{},"区":{"docs":{},"域":{"docs":{},"，":{"docs":{},"并":{"docs":{},"将":{"docs":{},"这":{"docs":{},"些":{"docs":{},"区":{"docs":{},"域":{"docs":{},"里":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}},"填":{"docs":{},"充":{"docs":{},"。":{"docs":{"深度搜索/被围绕的区域 LeetCode 130.html":{"ref":"深度搜索/被围绕的区域 LeetCode 130.html","tf":0.007575757575757576}}}}},"广":{"docs":{},"度":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"，":{"docs":{},"入":{"docs":{},"队":{"docs":{},"可":{"docs":{},"以":{"docs":{},"将":{"docs":{},"所":{"docs":{},"有":{"0":{"docs":{},"都":{"docs":{},"先":{"docs":{},"入":{"docs":{},"队":{"docs":{},"，":{"docs":{},"作":{"docs":{},"为":{"docs":{},"队":{"docs":{},"头":{"docs":{},"节":{"docs":{},"点":{"docs":{"广度搜索/01矩阵_LeetCode_542.html":{"ref":"广度搜索/01矩阵_LeetCode_542.html","tf":0.00684931506849315}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"树":{"docs":{},"的":{"docs":{},"创":{"docs":{},"建":{"docs":{},",":{"docs":{},"创":{"docs":{},"建":{"docs":{},"一":{"docs":{},"个":{"docs":{},"树":{"docs":{},"的":{"docs":{},"类":{"docs":{},"，":{"docs":{},"并":{"docs":{},"给":{"docs":{},"一":{"docs":{},"个":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"一":{"docs":{},"开":{"docs":{},"始":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"随":{"docs":{},"后":{"docs":{},"添":{"docs":{},"加":{"docs":{},"节":{"docs":{},"点":{"docs":{"广度搜索/给二叉树插入节点.html":{"ref":"广度搜索/给二叉树插入节点.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"堆":{"docs":{},"排":{"docs":{},"序":{"docs":{"堆排序/":{"ref":"堆排序/","tf":10.083333333333334}},"（":{"docs":{},"大":{"docs":{},"根":{"docs":{},"堆":{"docs":{},"）":{"docs":{"堆排序/最小的K个数.html":{"ref":"堆排序/最小的K个数.html","tf":0.00980392156862745}}}}}}}}}},"范":{"docs":{},"围":{"docs":{},"内":{"docs":{},"，":{"docs":{},"你":{"docs":{},"将":{"docs":{},"如":{"docs":{},"何":{"docs":{},"优":{"docs":{},"化":{"docs":{},"你":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"？":{"docs":{"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"ref":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","tf":0.010582010582010581},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"ref":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","tf":0.010810810810810811}}}}}}}}}}}}}}}}}},"length":17378},"corpusTokens":["!=","!='#':","\"","\"\"","\"\"\"","\"\"\"\"\"\"","\"\"\"为树添加节点\"\"\"","\"\"\"树类\"\"\"","\"\"\"每一行都用二分法计算，但是，如果匹配成功啦，不是返回的下标，而是true","\"\"\"节点类\"\"\"","\"\"。","\"(\":","\"(()\"","\"()\"","\"()()\"","\"()[]{}\"","\"([)]\"","\"(]\"","\")","\")\":","\")()())\"","\"*\"","\"*\",","\"*\":","\"*\"]","\"*a*b\"","\"+\",","\"+\":","\"+\"]","\",","\",1)[0]","\".*\"","\"/\",","\"/\":","\"/\"]","\"1","\"1\"","\"1\",","\"100\"","\"1010\",","\"10101\"","\"1011\"","\"11\",","\"12\"","\"123\",","\"13\",","\"17\",","\"2\",","\"226\"","\"255.255.111.35\"]","\"25525511135\"","\"3\"","\"3\",","\"4193","\"42\"","\"456\"","\"5\",","\"56088\"","\"6\"","\"6\",","\"9\",","\":","\"?a\"","\"a","\"a\"","\"a\",","\"a*\"","\"a*c?b\"","\"aa\"","\"aaa\"。","\"aab\"","\"aab\"。","\"ab\"","\"ab\",","\"ab\"（1","\"aba\"","\"aba\"。","\"abc\"。","\"abc\"，所以其长度为","\"abca\"","\"abcabcbb\"","\"abcb\",","\"abcced\",","\"ac\",","\"acdcb\"","\"adceb\"","\"and\",","\"appl","\"applepenapple\"","\"applepenapple\",","\"b\",","\"b\"，所以其长度为","\"ba\",","\"bbbbb\"","\"bbf\"","\"bc\",","\"bz\"","\"c\",","\"c*a*b\"","\"cat\"]","\"catsandog\",","\"cb\"","\"code\"]","\"dce\".","\"dog\",","\"end\"","\"execution\"","\"fl\"","\"hello\"","\"holle\"","\"horse\",","\"intention\",","\"l\"（12）。","\"leet","\"leetcode\"","\"leetcode\",","\"leotcede\"","\"let'","\"mis*is*p*.\"","\"mississippi\"","\"pen\"]","\"pwwkew\"","\"race","\"ros\"","\"s'tel","\"sand\",","\"see\",","\"thi","\"this\";","\"this2009\";","\"vf\"","\"wke\"，所以其长度为","\"word","\"{[]}\"","#","#!/usr/bin/python","####","#dfs遍历，s为待处理字段，tmp存储所有ip小段","#n为待转换的十进制数，x为想转为的进制，取值为2","#print(stack)","#self._subsets(nums,","#s没有剩余，说明找到一个合法ip，否则返回","#target在左边","#如果左右子树都不为空，加入队列继续判断","#如果某一趟不冒泡了没有发生交换过程），就代表排好序了，","#如果树是空的，则对根节点赋值","#对已有的节点进行层次遍历","#左边是有序的","#弹出队列的第一个元素","#截断s，并将本次截取内容写入tmp","#数字超出范围","#第一次insert，最后一个'e'存在结束'end'","#记录下第二、第三个数的下标位置","#递归出口，凑够4段","#遍历取s的头，长度从1到3","#除","#除去0开头，且长度大于1情况","#（因为最大堆是最小堆，一泡屎一趴尿，拉扯大的。）","$c_{m+n","$mat[i][j]$","$n1→...→nk−1→nk→nk+1←...←nm$","$n_{k}nk$。","$n{k+1}n","$n{k+1}nk+1","$n{m}nm","$s1[某,","$到","$已经被反转，而我们正处于","$的最长公共子串的长度","%","%=","&","&&","&board,","'","'#'","'#',","'#'])","''","'''","''.join(filter(str.isalnum,","''.join(filter(str.isalnum,s)).lower()","''.join(list(filter(str.isalnum,s)))","''.join(list(reversed(x)))","''.join(map(str,res[i:]))","''.join(nums)","''.join(res)","''.join(res[i:])","''.join(s)","'':","'('","'(':","'('，')'，'{'，'}'，'['，']'","')","')'","')':","'*'","'*':","'+str_x","',","','","','')","'.'","'.join(each[::","'.join(i[::","'.join(s[::","'0'","'0':","'0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。==你可以假设网格的四个边均被水包围。==","'0123456789+","'1'","'1':","'1'（陆地）和","'2'","'3'","':","'?'","'[':","']':","'__main__':","'a'","'a',","'a'。因此，字符串","'aaad'和’'daaa'是换位字符串","'aabcsssdfddf'","'abc","'abc'","'abc',则s1不是s2的子序列,","'abc',则s1是s2的子序列","'abc',则s1是s2的子序列,","'abcd'","'abcde',","'abcde'，在移动一次之后结果就是'bcdea'","'abcdfd'","'abced'","'abd',则s1不是s2的子序列,","'ad'","'b'","'b'。","'bool':","'c'","'c')","'c',","'cdeab'","'dgcadabcdcdde')","'dgcadde')","'e')","'e',","'end'","'end':","'float':","'fs'","'fsffsf'","'h'","'i'","'i',","'int')","'int':","'list[int]')","'list[int]',","'list[list[int]]':","'list[str]')","'n'","'o'","'o',","'o'（字母","'r')","'ssd'","'str')","'str':","'t')","'treenode')","'treenode',","'treenode':","'u')","'u',","'u']","'w',","'x'","'x')","'x'。","'x'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。","'z'","'{':","'}':","'。然后遍历矩阵，将矩阵中所有'o'改为'x',将矩阵中所有'","'变为'o'","(","((10","((2","((9","((m","(++l","(0","(10**9","(12","(13","(2","(2**31","(22","(4","(5","(6","(67451234,","(a","(a[i","(abs(a[i]","(atoi)","(b[i","(bottom)right","(dfsfind(board,","(dividend","(divisor","(dp[","(grid","(high","(i","(i+1)+1]","(i+1)]","(i,","(i,j)","(i.val,","(i>=0","(i>>pos)&1","(index","(int","(i，j","(i，j)","(l+r)","(l1","(l1.val","(l2","(l2.val","(left)bottom","(left+right)","(left+right)//2","(len","(len(nums1)+len(nums2))//2","(m+n","(matrix","(matrix.empty()","(matrix.empty())","(matrix[i][j]","(mid","(min(height[stack[","(num1_len","(nums1","(nums1[num_len]","(nums[nums_len]","(obj.most_common(k))","(p)","(p[inp","(p[inp]==s[ins]","(r+x/r)/2","(res[num_len]","(right)top","(right+1)","(right_i","(s)","(s[i","(s_len+1)","(tmp","(tmp.next.val,","(tmp[num]","(top)left","(true)","(−231)","(代表土地)","(删除","(前缀树)(leetcod","(前缀树)_leetcod","(前缀树)，包含","(动态规划1)：时间复杂为o(nm)和空间复杂度为o(nm)。典型的动态规划问题，假设当前已经开始计算s[i][j]，那么s[i][j]只可能从s[i","(动态规划1)：时间复杂为o(nm)和空间复杂度为o(nm)。典型的动态规划问题，假设当前已经开始计算si，那么si只可能从si","(动态规划2)：时间复杂度为o(nm)，空间复杂度为o(m)，此方法需要2m额外空间。当我们求s[i][j]时，s[i","(动态规划2)：时间复杂度为o(nm)，空间复杂度为o(m)，此方法需要2m额外空间。当我们求si时，s[i","(动态规划3)：时间复杂度为o(nm)，空间复杂度为o(m)，需要m大小的额外空间，注意此方法和方法三的区别，方法三需要2m大小的额外空间，此方法只需要m大小的额外空间，在方法三中我们保存当前行s[i]中的元素，假设我们当前计算s[i][j]，我们只需要知道s[i][j","(动态规划3)：时间复杂度为o(nm)，空间复杂度为o(m)，需要m大小的额外空间，注意此方法和方法三的区别，方法三需要2m大小的额外空间，此方法只需要m大小的额外空间，在方法三中我们保存当前行s[i]中的元素，假设我们当前计算si，我们只需要知道si的值即可，不需要保存s[i]行中的元素。每次计算si时，我们需要更新up[j]的值。","(如何从5亿个数中找出中位数)","(子数组)","(字符串拼接比较哦)","(将","(序列化形式：[3,4,5])","(序列化形式：[4,5,6])","(扫描到的s[i]是开括号'(')","(扫描到的s[i]是操作数data)","(扫描到的s[i]是操作符op)","(扫描到的s[i]是闭括号')')","(扫描结束而栈中还有操作符)","(找0时候用的是二分法查找，因为0应该在中间附近，二分法查找更快)","(插入","(数字拼接后最大)","(栈不为空，或者栈顶元素大于等于入栈元素):","(栈为空","(栈为空，或者入栈元素a[i]大于栈顶元素stack[","(每次减去一个除数，统计可以减去多少个除数)","(水平或垂直)","(测评系统对该结点序列化表述是","(这儿也可以再使用一个矩阵，存放访问标志)，但是空间消耗太大。","(金额","(除数倍增法)",")",")。","*","*(amount+1)","*(num1_len+num2_len)","*(p_len+1)","*(s_len+1)","*,","*/","*10**(i+j","*=","*m","*nums*，返回该数组所有可能的子集（幂集）。","*。","*出现的位置只能是大于等于1（从0开始计数）","*前必存在一个字符,","*，前面必然有个字符","+","+,","+1","+=","+=1","+ab","+ab'*ef,继续+ab'，依此类推。","+abc'ef",",",",0",",board):",",nums[i]=3",",x)",",则nums[mid+1]最小",",则nums[mid]最小",",则最小值在数组左边",",前0个构成的子序列个数，‘’",",最后个元素也不需要float('inf')",",返回true",".","...",".assets\\1553930053874.png)",".assets\\20180703120635594.png)",".assets\\2018070312065295.png)","/","/**","//","//2","//=2","//也可以这么判断，","//这两个数应该插入的位置，然后相减即可。","0","0)","0)。找出其中的两条线，使得它们与","0,","0,a","0,bottom","0,int(sqrt(c))+1","0,len(li)","0,len(s)","0,right","0.1)","0.5和k+0.5","00","00000","00011","00100","00:03:01","00:03:12","00:10:51","00:11:08","00:14:08","00:19:11","00:22:07","00:29:08","00:32:08","00:35:08","00:35:58","00:37:43","00:43:01","00:43:19","00:53:08","00:54:33","01","01:07:02","01矩阵_leetcode_542","03","03:18:01","04","06","07","07:03:40","08","09:03:16","09:04:55","09:07:54","09:10:11","09:17:38","09:50:29","09:55:01","0:","0:return","0;","0]","0b101","0o5","0x5","0x5555","0x5555)>","0xaaaa","0、","0。","0和一个数异或，等于该数","0）。从各自的表头开始算起，链表","0，而","1","1(因为这是下标表示，所以减一)。归并结果保存位置从","1)","1)!","1)!(n","1))","1))!/(m","1)*h","1)*h,mid_area)","1)*heights[tmp])","1),","1),(grid,grid,grid,grid))","1),self.supereggdrop(k,n","1)/math.factorial(n","1):","1);","1)]","1)。","1)开始(因为这是下标表示，所以减一)。归并起点和归并结果的位置都是从右向左前进。","1)，如下图所示：","1*math.e**","1+","1+gridi或者si+gridi计算得到，也就是si","1,","1,0)","1,0,2,3,6,7]","1,0,3,10]","1,0,3,5,9,12],","1,1)","1,2,1,","1,2,1]","1,2,3,4,5,6,7,0","1,2,3,6,7]","1,4,1","1,board)","1,dp[i])","1,grid)","1,high_id,","1,i","1,i+1,i,i),(j,j,j","1,inp","1,inp):","1,j)","1,j+1),(grid,grid,grid,grid))","1,j,board)","1,j,grid)","1,j,word)","1,len(matrix[0])","1,len(p)","1,n","1,s_len)]","1,si)+gridi。我们需要一个o(nm)额外空间保存已经计算的si的值，我们只需要访问一遍数组即可。因此时间复杂度为o(nm)，空间复杂度为o(n*m)。我们需要特殊处理矩阵中第一行和第一列。因为第一行没有si","1,word)","1,否则头指针变为mid","1,否则尾指针变为mid","1,时，如果能进来那么上面的if语句已经判断了b字符","1,结果为1就是奇数个1，结果为0就是偶数个1；","1.","1..if","1.2(next).next","1.5","1.next","1.中缀表达式","1.从左往右扫描中缀表达式串s，对于每一个操作数或操作符，执行以下操作;","1.从左至右扫描表达式，如果一个操作符后面跟着两个操作数时，则计算，然后将结果作为操作数替换(这个操作符和两个操作数)，","1.分治法解决","1.大顶堆中最大的数值小于等于小顶堆中的最小数，也就是小于小顶堆的堆顶","1.性质","1.最基础的应用就是给定一组数，针对每个数，寻找它和它右边第一个比它大的数之间有多少个数。（小牛向右看）","1.题目","1.题目描述","1/2","10","10)","10,","10,9,20,null,null,15,7]","10,null,5]，它可以表示下面这个高度平衡二叉搜索树：","100","100,3,99]","100,3]","1000,","1000000,1000000]","10000]之间。","10000。","1000]。","100]","100。","101","101,","101010101010101","1010101010101010","102","103","103)","104","105","106","107","108","108)","109","10:03:02","10:06:44","10:07:11","10:09:32","10:09:53","10:13:18","10:18:02","10:27:00","10:27:06","10:27:18","10:29:23","10:34:50","10^9","10进制转化为其它进制","11","11\",","11)))","11,","110","11000","11010","111","11110","112","112)","113","113)","114","115","116","117","118","119","11:14:36","11:15:42","11:53:59","12","12,","120","121","121)","122","122)","122，而每个字母的index=int(word)","123","12345674).","124","124)","125","125:","126","127","128","129","12:02:18","12:06:47","12:07:40","12:10:32","12:20:50","12:26:00","12:30:39","12:56:07","13","13,","130","130)","131","131)","132","132)","132))","139","139)","13:01:19","13:03:16","13:05:53","13:23:45","13:57:34","13],","13。","14","14,","141)","141.md","142","142)","14:21:16","14:58:19","15","15,","152","152)","153","153）","15:25:09","15:40:32","15:57:57","15:58:03","15]","15],","15）=","15）=max（8","15，","16","16,","160","160)","167:","169)","169.md","16:05:32","16:16:11","16:37:38","16:41:04","16:49:42","16:53:32","16:55:54","16=13，第二次循环时因为此时的13小于8的二倍(tmp_c","17","17)","17,","179","179)","17:09:14","17:18:27","17:27:36","17:34:24","17:39:12","17:45:39","17:48:11","17:49:08","17:49:54","17:54:09","17:58:36","17:59:57","18","18:03:09","18:03:38","18:07:42","18:18:52","18:23:38","18:26:31","18:29:48","18:33:33","18:35:10","18]","19","19:","19:00:46","19:05:38","19:08:15","19:25:32","19:30:37","19:31","19:37:17","19:56:09","19],","1:","1:#","1:return","1;","1;（3）如果nums[mid]比头元素小，并且目标值在尾巴元素和中间元素之间，那么头指针就变为mid","1=0","1]","1]!=right[0]:","1]!=word2[j","1])","1])+grid[i][j]","1])+grid[i][j]。我们需要一个o(nm)额外空间保存已经计算的s[i][j]的值，我们只需要访问一遍数组即可。因此时间复杂度为o(nm)，空间复杂度为o(n*m)。我们需要特殊处理矩阵中第一行和第一列。因为第一行没有s[i","1]),","1]):","1]*2","1]*2+1","1]*nums[","1]+","1]+(word1[i","1]+1","1]+1)","1]+1,","1]+1,dp[i","1]+1步","1]+2","1]+array[i],","1]+c1,dp[i","1]+c2)","1]+grid[i][j]计算得到，也就是s[i][j]","1]+nums[i])","1],","1],dp[i","1],dp[i][j","1],mat[i","1],none)","1],s2[","1],而不是word1[i],是因为这是对于字符串而言的，而不是矩阵","1].lower():","1].split()[::","1]:","1]:continu","1]==\"1\":","1]=='.'):","1]=='?'):","1]==s[ins]","1]==word2[j","1]>right[0]:","1][","1][0]","1][0],arr[i][0]),max(res[","1][1]","1][1],","1][1],arr[i][1])]","1][col","1][i]","1][j","1][j]","1][j])","1][j])+1","1][j]+","1][j]+1)","1][j]+1,dp[i][j","1][j]+1步(增加word1和删除word2一个效果)","1][j]+c0,dp[i][j","1][j]+grid[i][j]或者s[i][j","1][j],","1][j],s[i][j","1][j]:","1][j]元素。","1][j]元素，只有s[i][j","1][m","1]]","1]],height[i])","1]]:","1]]>=heights[i]:","1]。","1]。本题中，如果除法结果溢出，则返回","1]。请根据这个假设，如果反转后整数溢出那么就返回","1]元素。第一列没有s[i][j","1]元素，只有s[i","1]时，dp[b]=dp[a]+1","1]的值即可，不需要保存s[i]行中的元素。每次计算s[i][j]时，我们需要更新up[j]的值。","1]行中的元素保存在up数组中，数组的大小为m。我们把s[i]保存在now数组中，当s[i]行的元素计算完毕以后，我们交换up和now数组。因为需要up数组和now数组，且数组的大小都为m，所以我们需要2*m大小的额外空间。","1]行中的元素，我们把s[i","1]，数组中非负部分","1}$","1→3→1→1→1","1、2、1","1、nums[mid]","1、子序列：不要求连续子序列，只要保证元素前后顺序一致即可；","1、思路","1、找到链表长度的一半，用追赶法，一个指针一次走两步，一个指针一次走一步","1、替换","1。","1。与当前大多数不同，得分为0，所以设置当前大多数","1。与当前大多数相同，得分","1。当前大多数是1，得分置1","1。然后我们进行while循环，先遍历上边，将所有元素加入结果res，然后上边下移一位，","1。然后我们进行while循环，先遍历上边，将所有元素加入结果res，然后上边下移一位，如果此时上边大于下边，说明此时已经遍历完成了，直接break。同理对于下边，左边，右边，依次进行相对应的操作，这样就会使得坐标很有规律，并且不易出错，参见代码如下：","1】","1】!=","1】+dp【n","1】和b【:j","1】的最长公共子串的长度","1个元素切分为左右子树。然后对切分的左右子树根据左右子树的最后一个节点进行左右切割。","1个字符出现的最近位置。即0","1元素。","1元素，只有si元素。第一列没有si元素，只有si","1即可，总之就还是二分法的应用，仔细推敲，分析就可以弄懂！","1操作，就会是0；","1整个子序列出现在左半部分","1的二进制数一定会是当前位变为0，其他位全是1，这样n与n","1的非空二维数组","1还是left=right=mid+1","1这样初始化，因为我们希望在[l:r]中进行寻找操作。计算sum=nums[i]+nums[l]+nums[r]和target的差是多少，并且我们要记录下来，最后取最小的差对应的sum作为结果。当l","1）+array[i]","1）的时候买入，在第","1），然后偷窃","1，","1，2，1，","1，2，3，4，5，6","1，dpi","1，dpi)","1，j","1，j)","1，不管数组如何变化，它总归还是一个有序数组，只是变成了两个升序数组的组合，所以可以使用二分法；","1，则在该链表中没有环。","1，取出来的时候乘以","1，因为return","1，因此dp的默认写法：","1，左边left是0，右边right是n","1，得分为0，当前大多数","1，得分为2，当前大多数","1，得分置1","1，给定的高度为","1，输出[","1，返回输出数组","1：","1；","2","2)","2),","2).","2)/math.factorial(m","2):","2**31)","2*2....后面继续判断,不赘述了)同时扩大二倍(左移)，并将返回值加上tmp_res，除数减去tmp_res。","2*dp[i","2+1】，都要在dp位置上加1","2,","2,0","2,0,","2,1,","2,4]","2,i=3，这一次来的数是i=3，则这次的最大，应该就是它自己，不需要乘以前面的最大或者最小","2,null,1],","2.","2.0","2.1","2.1找出只出现一次的元素","2.2","2.2不使用额外空间，交换元素","2.3","2.3互换二进制的奇偶位","2.3找出出现两次的数","2.4异或来判断一个二进制数中1的数量是奇数还是偶数","2.5","2.82842...,","2.if","2.两个堆中元素相差为0，或者为1,不能>1","2.代码","2.分析","2.前缀缀表达式","2.动态规划解决","2.由1.知，要多遍扫描表达式，并且需要将3个字符替换成1个，比较繁锁，我们可以用一个栈s2来实现计算，扫描从右往左进行，","2.给定一序列，寻找某一子序列，使得子序列中的最小值乘以子序列的长度最大。（柱状图中的最大矩形）","20","2019","208","208)","20:01:32","20:14:17","20:15:26","20:15:27","20:15:29","20:15:30","20:15:34","20:15:35","20:15:36","20:15:37","20:15:38","20:15:39","20:15:51","20:16:28","20:16:41","20:16:50","20:16:52","20:16:53","20:16:57","20:16:58","20:16:59","20:17:00","20:17:01","20:17:02","20:17:03","20:17:23","20:17:24","20:17:25","20:23:54","20:25:06","20:39:29","20:52:57","20],","20，返回","21","21)","21,","210","211)","211)(前缀树","2147483648","218","21:27:17","21:34:54","21>12","22","221","221)","229","229)","22:00:38","22:15:10","22:15:34","22:34:13","22:35:37","22:36:00","22:37:13","22:38:38","22:38:51","22:39:21","22:40:10","22:41:23","22:41:57","22:43:23","22:44:13","22:45:08","22:47:03","22:47:36","22:48:02","22:48:34","22:48:59","22:49:16","22:49:59","22:50:18","22:51:38","22:52:26","22:54:05","22],","22，","23","23,","231","231)","237","23:03:10","23:26:44","23:27:21","23:28:39","23:34:40","23:37:56","23:41:03","23:41:34","23:46:56","23:53:56","23:56:30","24","240","240)","24],","25","25,","255:","255;","26","26),","26,","27","28","29","295)","2:","2]","2]):","2]*(amount+1)","2]*nums[","2]+nums[i],dp[i","2],","2]:return","2][","2]行的元素我们就不再需要，我们只需要s[i","2]，mid","2d","2n。当","2}^{m","2、1、2","2、上升：这里的“上升”是“严格上升”，类似于","2、删除","2、否则，nums[mid]","2、将后一半数组转置","2。","2。与当前大多数不同，得分","2】","2】,s【n","2整个子序列出现在右半部分","2的幂(leetcod","2的幂_leetcode_231","2）","2）,","2）=1","2）=max（3","2）或者","2），然后偷窃","2，","2，1，1】头去重","2，1，1，1】尾去重","2，双指针，指向头尾，拿着target和数组中间元素nums[mid]比较，分三种情况判断：（1）若相等则直接mid就是答案；（2）如果nums[mid]比头元素大与等于，并且目标值在它和头元素之间，则尾指针变为mid","2：","3","3)","3)/2","3)。","3+2)","3,","3,0,1,","3,0,5,9],","3,2,3,11]","3,3,2,null,11,3,","3,4,","3,9,","3.","3.1二分法","3.1代码1","3.1代码1（奇数放到偶数前）","3.1代码1（累加求和）","3.1哈希法","3.1异或解决","3.1递归版","3.2代码2","3.2代码2（为了保证代码的整齐性，可以简单封装一下）","3.2代码2（异或）","3.2代码2（用while循环）","3.2字典法","3.2常规解决","3.2跌代版","3.3代码3","3.3代码3（将整除3的放在前面）","3.3代码3（归并的最后一次）","3.3字典法","3.4代码4（未完成）","3.4切片法","3.if","3.代码","3.代码1","3.分治法解决非连续","3.给定一序列，寻找某一子序列，使得子序列中的最小值乘以子序列所有元素和最大。题目","30","30,","300","300)","30]","31","32","321","3250","33","33：搜索旋转排列数组（最详细的解法！！！）问题的延伸。如果使用之前的方法解决这个问题，会出现错误，例如","34","34,","344:","345:","35","36","36]。我们的策略就是从前向后遍历数组中的非负数部分，并且反向遍历数组中的负数部分。","37","38","39","39)","3:","3>22:","3>2:","3]","3])","3sum","3x3","3、删除","3、判断链表是否是回文链","3。","3。和等于","3整个子序列跨越中间边界","3）=max（6","3）。","3）的时候买入，在第","3，","3，3）=3","3，如果全部没有找到目标值相匹配的元素，或者数组长度为空，就返回","3：","4","4)","4):","4*(个数)","4,","4,1,1","4,13}，最大连续子序列和即为20。","4.while","4.中缀表达式转换成后缀表达式","4.动态规划解决非连续","4.复杂度分析","40","40)","41","4193","42","42\"","43","43)","437)","44","45","46","46)","465","47","47）","48","49","49。","4:","4>2:","4]","4],","4]，","4sum","4。","4，我们返回第二个结点。","5","5))","5,","5,4],","5,9]","5,同时没有破坏1.next","5.if","5.中缀表达式转换成前缀表达式","50","50]","50。","51","5100.","52","53","53)","54","55","56","57","58","59","5:","5],","5。因为根据定义最近公共祖先节点可以为节点本身。","5）的时候卖出,","5，3","5，返回","6","6)","6),","6,","6,5,4,3,2,1","6.返回第1.步","60","61","61)","62","62)","628","63","64","64)","65","65=38，而数组中具体记录的内容是该字母出现的次数，最终遍历一遍字符串，找出第一个数组内容为1的字母就可以了，时间复杂度为o(n)","65]","65，比如g=103","66","67","68","69","6]","6],","6]，数组中负数部分","6。","6。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的‘1’。","6）的时候卖出,","6）的时候卖出，最大利润","7","7)","7,","7.","7.while","70","71","72","73","74","74)","75","76","77","77)","78","78)","79","79)(经典回溯，深度优先)","7]","7],","7]。","7条","7，8）=8","8","8,","80","807","81","81)","82","82)","83","83)","84","85","86","87","876","876)","88","887","887)","89","89)","8],","9","9)","9)，接着偷窃","9,","9.","90","90)","90个数31个1，31个2，其余数字随便，也就是接近边界时，最多才两个满足条件：1，2","90，a","91","91283472332\"","92","93","94","95","9534330","96","96不是字母","97","97]","98","987\"","99","99%","9999,","9999]之间","99就是上面的特殊情况","99的糖果数应该为8的糖果数+1","9:","9],","9。",":","::",":rtype:",":type",";","=","=0,","=0;i","=1","=3","==","=='","==''","=='.':","=='2'and","=='?':","==0)","==0:","==0:return","==1,bag)","====================================================","=========================================================================","===>dp[0]","==if","==len(s1)","==none:","==注意：==因为左边和右边对于接雨水没有用，所以第一个元素的左边我们不需要加float('inf')","=[0]*(m+2)","=[0]*len(nums)","=[]","=len(grid[0])","=len(self.min_h):","=nums[i]:","=true",">",">'",">'.join(a)",">'.join(x))",">0",">1",">11",">2",">2。",">2我们此时只需要head.next.next=head，也就是先建立一个双向连接",">2然后再head.next=none，返回node即可",">3",">3\"]",">4",">4,",">5",">5\",",">5,",">5.",">5;",">6",">7",">=",">=len(board[0])",">>",">>=",">>>>>>>'a",">bottom",">left",">len(board[0])",">next来获得新链表的头结点。",">null",">null,",">right",">top",">【1,2,3】",">【1，7】，但是先保证数组有序，所以在这之前先sort",">【2，3】,head一直都指着链表的第一个元素","?","@param","@return:","[","[!note]","[!tip]","[\"+\",","[\"1","[\"1\",\"0\",\"0\",\"1\",\"0\"]","[\"1\",\"0\",\"1\",\"0\",\"0\"],","[\"1\",\"0\",\"1\",\"1\",\"1\"],","[\"1\",\"1\",\"1\",\"1\",\"1\"],","[\"10\",","[\"2\",","[\"255.255.11.135\",","[\"4\",","[\"a\",\"a\",\"b\"]","[\"aa\",\"b\"]","[\"aa\",\"b\"],","[\"apple\",","[\"cats\",","[\"dog\",\"racecar\",\"car\"]","[\"flower\",\"flow\",\"flight\"]","[\"leet\",","['#']","['2']","['a',","['a','b','c','e'],","['a','d','e','e']","['s','f','c','s'],","['}',']',')']:","[(i+1,","[(n","[0,","[0,0,0,0,0,0,0,0,0,0,1,0,0],","[0,0,0,0,0,0,0,1,1,0,0,0,0]]","[0,0,0,0,0,0,0,1,1,1,0,0,0],","[0,0,0]","[0,0,0],","[0,0,1,1,2,2]","[0,0,1,2,2,5,6]","[0,1,0,0,1,1,0,0,1,0,1,0,0],","[0,1,0,0,1,1,0,0,1,1,1,0,0],","[0,1,0,0],","[0,1,0,2,1,0,1,3,2,1,2,1]","[0,1,0],","[0,1,1,0,1,0,0,0,0,0,0,0,0],","[0,1,2,4,5,6,7]","[0,1,3,2]","[0,9,1,2,4],","[0,9,1,2,4]，链表","[0]","[0]*(k+1)","[0]*(len(s)+1)","[0]*(m+2)","[0]*256","[0]*26","[0]*58","[0]*a_len","[0]*len(nums)","[0]*m","[0]+copy.deepcopy(arr[i][:])+[0]","[0]+heights+[0]","[0]+tmp_arr[:]+[0]","[0]。","[1,","[1,0,2]","[1,1,0,0]]","[1,1,1,0],","[1,1,1,2,2,2,3,3]，数组1/3长=2（向下取整），所以1和2都是符合条件的。","[1,1,1,2,2,3],","[1,1,1,3,3,2,2,2]","[1,1,1,3,3,4,3,2,4,2]","[1,1,2]","[1,1,2],","[1,2,1],","[1,2,2,3,3,null,null,4,4]","[1,2,2,3,5,6]","[1,2,2]","[1,2,2],","[1,2,3,0,0,0],","[1,2,3,1]","[1,2,3,2,1]","[1,2,3,4,5,6,7]","[1,2,3,4,5,6]","[1,2,3,4,5]","[1,2,3,4,8,12,11,10,9,5,6,7]","[1,2,3,4]","[1,2,3,6,9,8,7,4,5]","[1,2,3,99,8,7,6,5,4,3,2,1]","[1,2,3]","[1,2,3],","[1,2]","[1,2],","[1,3,1],","[1,3,2],","[1,3,5,4,7]","[1,3,5,6],","[1,3,5,7]","[1,3,5]","[1,3,5],","[1,3,6,7,9,4,10,5,6]","[1,3]","[1,3],","[1,4]","[1,4],","[1,5,1],","[1,5],","[1,5]。由于这两个链表不相交，所以","[1,6].","[1,8,6,2,5,4,8,3,7]","[1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为","[10,","[10,1,2,7,6,1,5],","[10,2]","[10,5,","[10,9,2,5,3,7,101,18]","[12,","[15,7]","[15,7],","[16,","[18,","[1]","[1]*nums_len","[1],","[2,","[2,0,2,1,1,0]","[2,1,1]","[2,1,3],","[2,1,5,6,2,3]","[2,1,5,6,2,3]。","[2,2,1,1,1,2,2]","[2,2,1]","[2,2,2,0,1]","[2,2,2,2,2]","[2,2,2,2,4,5,6,6]","[2,2,2,2],","[2,2,3]","[2,2],","[2,3,","[2,3,1,2,4,3]","[2,3,1],","[2,3,2]","[2,3,32,2,23,2]","[2,3,3],","[2,3,4]","[2,3,5],","[2,3,6,7],","[2,3,7,101]，它的长度是","[2,3]","[2,3],","[2,4],","[2,5,2,1,2],","[2,5,6,0,0,1,2]","[2,5,6,0,0,1,2],","[2,5,6],","[2,6,4],","[2,6,4]，链表","[2,6]","[2,7,9,3,1]","[20,9],","[23,","[24,12,8,6]","[2]","[2],","[3,","[3,1,2],","[3,1,4,null,2],","[3,2,0,","[3,2,1,4,7]","[3,2,1,5,6,4]","[3,2,1]","[3,2,3,1,2,4,5,5,6]","[3,2,3,2,3,2,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1]","[3,2,3]","[3,2,4],","[3,2,4]。在","[3,30,34,5,9]","[3,4,3,4,5]","[3,4,5,1,2]","[3,4,5])。","[3,4],","[3,5,1,6,2,0,8,null,null,7,4]","[3,5,1,6,2,0,8,null,null,7,4],","[3,5]","[3,9,20,null,null,15,7]","[3,9,20,null,null,15,7],","[3,9,20,null,null,15,7]，","[3,99,","[3]","[3],","[4,","[4,1,2,1,2]","[4,1,8,4,5],","[4,1,8,4,5]，链表","[4,1,9]","[4,2,1]","[4,3]","[4,5,1,9],","[4,5,1,9]，它可以表示为:","[4,5,6,7,0,1,2]","[4,5,6,7,0,1,2],","[4,5,9]","[4,5]","[47]:","[48]:","[5,","[5,0,1,8,4,5],","[5,0,1,8,4,5]。在","[5,3,6,2,4,null,null,1],","[5,4,11,2],","[5,6,7,1,2,3,4]","[5,8,4,5]","[5]","[6,2,8,0,4,7,9,null,null,3,5]","[6,2,8,0,4,7,9,null,null,3,5],","[6,7,1,2,3,4,5]","[7,1,2,3,4,5,6]","[7,1,5,3,6,4]","[7,6,4,3,1]","[7],","[9,","[9,10,11,12]","[9,15,7,20,3]","[9,20],","[9,3,15,20,7]","[99,","[[0,0,0,0,0,0,0,0]]","[[0,0,1,0,0,0,0,1,0,0,0,0,0],","[[0,1,0,0],","[[0]*(col)","[[0]*(len2+1)","[[0]*(s2_len+1)","[[0]*(word2_len+1)","[[0]*col","[[0]*m","[[0]*n","[[1,3],[2,6],[8,10],[15,18]]","[[1,4],[4,5]]","[[1,5]]","[[1,6],[8,10],[15,18]]","[[]]","[[false]","[[false]*(m+1)","[[grid[0][0]]*m]*n","[[none]*m","[[num,i]","[[nums[0]]","[]","[])","[],","[],然后一个个添加元素,因为从两边向中间遍历,添加的元素从大到小,如果我们用res.append(...)，则最后需要res.resverse().如果添加元素时候，res.insert(0,...)则每次添加元素,其实内部都有大量操作(当前元素向后移位)。所以我们先定义好res.直接修改相应位置","[]:","[a,b]","[a[0]**2]","[amount+1]","[arr[0]]","[false]*(len_s+1)","[false]*(s_len+1)","[float('inf')]","[grid[0][0]]*m","[height[","[i","[i+1,","[i+1,j+1]","[index,","[min(res[","[new_list[i][1],","[none]*26","[nums.index(dif),","[nums[0]]","[nums[i]],","[proot]","[root.data]","[root.val]","[root]","[s[:i]])","[self.root]","[str(root.val)],","[x","[−231,","\\","]","],","^","^=","_","__init__(self):","__init__(self,","__init__(self,li):","__name__","_atoi","_quick_sort(nums,","_wordbreak(self,","`//因为data中都是整数，所以可以稍微变一下，不是搜索k的两个位置，而是搜索k","```python","```sql","a):","a*2","a+[float('","a+b","a,","a,化简","a.__next__()","a.append(a[i]*nums[i])","a.get('3')","a.next","a.val","a1，a2，...，an，每个数代表坐标中的一个点","a2","a:","a;","a;那么我们的目的就是求得x使得f(x)=0;","a=[0,1,2,3,4,5,6,7,8,9,'a','b','c','d','e','f']","a=[1,","a=[1]","a=[2,3,4,1,","a[0]","a[0]>=0:","a[1:]+a[0]","a[::","a[a_len]","a[head]","a[i","a[i]","a_flag","a_index","a_len","a_len>0","a_len>=0","aaa","abc'","abs(a[i]","abs(b[j]","abs(dividend)","abs(dividend),","abs(divisor)","abs(func(root.left)","abs(sum_1","add","add(self,","add:","addbinary(self,","addnum(1)","addnum(2)","addnum(3)","addnum(int","addnum(self,","address","addstrings(self,","addtwonumbers(self,","addword(\"bad\")","addword(\"dad\")","addword(\"mad\")","addword(self,","addword(word)","ai)","alen","algorithm","amount","amount,","amount:","amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回","an","anagram","and(p[inp","and(p[inp]==s[ins]","ans.append(a)","ans.append(b)","ans.next.next.next","ans.next.next.v","ans.next.v","ans.val","ans，这样：","anything,","app:","apple\"。","apple:{'a':","arr","arr+[float('inf')]","arr,","arr.append(root.val)","arr.append(tmp_arr)","arr:","arr:return","arr[","arr[i","arr[i]","arr[i]=arr[stack[","arr[i][0]:","arr[i][1])","arr[j]","arr_","arr_[j]","arr_[j]>arr_[stack[","array","array):","array:","array[0]","array[i])","array[i]）","arraylist<>();","as'","ascii","ascii码中的90","a与x轴的交点的横坐标(即a的正平方根)。","a，b，c","a，我们求导可以知道，函数上任意一点(x,y)的切线的斜率为2x。","a，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。","b","b)","b):","b,","b.append(b[i]*nums[","b.append(y)","b.next","b.reverse()","b.val:","b/k=（x0+a/x0）/2。","b/k。","b2","b:","b:begin","b;","b=[1]","b[b_len]","b[i]","b[j","b[j]),","b_flag","b_index","b_len","b_len>0","b_len>=0","bag","bag.get(k1))","bag.get(k2))","bag.get)","bag:","bag[cur]","bag[dif]]","bag[head]","bag[i]","bag[ord(i)]","bag[ord(j)]","bag[value]","balanc","ban","bc","bcs,","bcs>=(tmp_c","bcs>=(tmp_cs+tmp_cs):","begin:","best","best_dist","best_sum","bf","bie","biginteg","biginteger）或直接将输入转换为整数来处理。","bin(a+b)[2:]","bin(dec))","binari","binary_search(self,","binary_search(self,li,","binarytreepaths(self,","binode(2)","binode(3)","binode(4)","binode(object):","bitree([1,2,3,4,5])","bitree(object):","black","blen","board","board,","board.size(),","board:","board[0].size()","board[0]:return","board[i][j]","board[i][j]!='o':","board[i][j]!=word[wordstart])","board[i][j]:","board[i][j]='","board[i][j]='o'","board[i][j]='x'","board[i][j]=='","board[i][j]=='o':","bool","bool:","boolean","bottom","breadth_travel(self,","break","break;","buildtree(self,","buy","b。","b），在要遍历的节点（root）的两侧，那么这个节点就是这两个节点的最近公共父节点；","b，a为false，返回a，a为true，就返回b","b，使得","c","c):","c++","c++代码","c,则可以构成三角形，`a","c1","c:","c[k]))","c[k])),请计算最小三元组距离。","c[k]),","ca","ca,","call","canal:","candid","candidates,","candidates,[])","candidates.sort()","candy(self,","car\"","cb","cb,","cdef，扫描到","cd时，会计算c","ch","ch:","cha","char","char[]","charact","class","clen","climb","climbstairs(self,","closest","cmp_to_key","cn.com/problems/binari","cn.com/problems/convert","cn.com/problems/search","cnm","code","code\"。","coding:","coding:utf","coin","coinchange(self,","coins,","coins:","coins[i])","coins[i],","coins[i]>amount:","col","collect","collections.counter(nums)","color","combin","combinationsum(self,","combinationsum2(self,","combine(self,","common","concaten","conflict(self,","connect","consecut","construct","constructtree()","constructtree():","contain","containsduplicate(self,","contest\"","continu","continue;","convers","convert","copi","copyright","count","count)","count+=1","count=0;","counter","counter(nums)","counter(nums).most_common(1)","counter模块","countnodes(self,","cs","cs,","cs,1","cs:","cur","cur.lchild","cur.left","cur.left:","cur.next","cur.next.val:","cur.next:","cur.rchild","cur.right","cur.val","cur.val:","cur:","curr","cycl","c。","c，则","d","d)","d,","d.add(heada)","d:","d:break","d=c',表达式变成：","d=n","d[heada]","data","data):","data,","de","deal(0,","deal(l,","deal(middle+1,","deal(middle,","dec","dec)","decod","deepcopi","deepth","deepth%2==0:","def","definit","deleteduplicates(self,","deletenode(self,","depth","depth,","dequ","deque()","deserializer(self,","detectcycle(self,","df","dfs(self,","dfsfind(board,","dic.keys()","dic:","dic={}","dic[x]+=1","dic[x]=1","dic[x]>n/3]","dict((i,len(i))","dict()","dif","diff","digit","dir","dirs:","distanc","distinct","distinctsubseqii(self,","divid","divide(self,","dividend","dividend,","dividend:","divisor","divisor):","divisor:","divisor。将两数相除，要求不使用乘法、除法和","divmod","divmod(6,3)","divmod(int(i)+int(j)+tmp,","divmod(int(i)+int(j)+tmp,10)","doubl","dp","dp(m,vector(n,0));","dp.append(dp[","dp.append(nums[i])","dp=【1，2，4】","dp[","dp['4']+1=4,所以最后max(dp),答案为5，而不是6","dp[0]","dp[0],","dp[0],dp[1]","dp[0][0]","dp[0][i","dp[0][i+1]","dp[0][i]","dp[0][j","dp[0][j]","dp[1]","dp[1]=3，2","dp[1][1]","dp[2],","dp[2]=4，3","dp[3]","dp[amount]","dp[history[k]]","dp[i","dp[i+1]","dp[i]","dp[i])","dp[i]*2","dp[i]:","dp[i][0]","dp[i][j","dp[i][j]","dp[i][j]=0","dp[i]dp[j]+1:不需要做任何调整","dp[i]表示前i个字母的最少分割次数,默认为i","dp[j","dp[j]","dp[j]+1","dp[j]+1)","dp[j]=","dp[j]==1","dp[k","dp[k]","dp[k][m","dp[k][m]","dp[last[x]]","dp[low]","dp[n","dp[pre","dp[tmp","dp_nums[i]","dpi","dp【n","dp【n】表示n个字符可编码数，","dp和字符串实际位置相差1，所以当前状态p[i]的上上（前2）状态位dp【i","dummi","dummy,","dummy.next","dummy;","dummyhead","dummyhead.next","duplic","e","e):","e:end","each","edg","edit","edocteel","ef为例：","ekat","el","elem","elem):","elem=","element","elif","else:","end","end):","end,","end:","end=\"","end=none):","end]:","enent","enumerate(board):","enumerate(grid):","enumerate(grid[0]):","enumerate(i):","enumerate(numbers):","enumerate(nums):","enumerate(nums)]","enumerate(nums[:len_num","enumerate(s):","enumerate(s,","enumerate(word):","equal","er","evalrpn(self,","example....wow!!!\";","exchang","exchange:","exect","execut","exent","exist(self,","exist(self,board,word):","exist(vector","express","f","f(0)","f(1)","f(26,16)","f(i)=min(f(j)+1)","f(n","f(n)","f(n)。","f(n,x):","fa","fals","false.","false:","false;","false。","fast","fast.next","fast.next.next","fast.next.next:","fast.next:","fast.next不为空","fast:","fast第一次跳到3,第二次跳到5,由于fast.next.next为none,所以退出循环,所以fast.next.v","fen","filter(lambda","find(self,board,word,i,j):","finddup(nums):","findgreatestsumofsubarray(self,","findkthlargest(self,","findkthtotail(self,","findlength(self,","findlengthoflcis(self,","findmax(self,","findmaxsub('abccade',","findmaxsub('abcdcdabccade',","findmaxsub(s1,","findmaxsum(li):","findmedian()","findmedian(self)","findmedian(self,","findmediansortedarrays(self,","findmin(self,","findmin_1(self,","findnumberoflis(self,","findnumsappearonce(self,","findtop([2,3,4,45,5,5])","findtop3(li):","first","first_nod","firstnotrepeatingchar(self,","flag","flatten","flatten(self,","float(\"","float('","float('inf')","float:","for(i=0;","for(int","fpre","fpre.next","fpre.next.next","freq","func('addabas','aabdda')","func(6)","func([2,3,4,5,6])","func(a,2,0,len(a)","func(arr):","func(arr,","func(data,","func(i+1)","func(li)","func(li):","func(li,","func(n","func(n):","func(node):","func(nums):","func(nums,","func(root)","func(root):","func(root.left)","func(root.right)","func(root.right))","func(s,","func(s,0,len(s)","func(s,left+1,right,0)","func(s,left,right","func(s1,","func(s[i:],","func(self,","func(self,board,index,i,j,word):","func(self,head):","func(self,i,j,grid):","func(self,index,","func(self,index,target,x,nums,len_nums):","func(self,root):","func(x,y):","functool","f（0）=6","f（1）=max（f（0）","f（2）=max（f（1）","f（3）=max（f（2）+7，7）=max（1+7，7）=8","f（4）=max（f（3）","f（i）=max（f（i","f（i）：以array[i]为末尾元素的子数组的和的最大值，子数组的元素的相对位置不变","game","gener","generatematrix(int","generatematrix(self,","get2num(nums)","get2num(nums):","get_right(head,","getintersectionnode(self,","getleastnumbers_solution(self,","getnumberofk(self,","gitbook该文件修订时间：","given","global","graph","gray","graycode(self,","greedi","grid","grid)","grid):","grid.length","grid:","grid[","grid[0]","grid[0].length","grid[0]:","grid[0]:return","grid[0][0]","grid[0][0];","grid[0][i]","grid[0][j","grid[0][j]","grid[i","grid[i][0]","grid[i][j","grid[i][j]","grid[i][j]!=1:","grid[i][j]*4","grid[i][j]:","grid[i][j]=='0':","grid[idx][jdx]","group","gw","h","h)","hao","hascycle(self,","hash","hashtabl","haspathsum(self,","head","head):","head,","head,head","head.next","head.next.next","head.next:","head.next:return","head.val","head.val:","head1","head1,","head1.val","head2","head2)","head2):","head2:","head:","head;","head==non","heada","heada,","heada.next","heada:","headb","headb):","headb.next","headb:","heap","heapify(self.max_h)","heapify(self.min_h)","heappop(self.max_h)","heappop(self.min_h)","heappop(self.min_h))","heappush(self.max_h,","heappush(self.min_h,num)","heappush(self.min_h,tmp)","heapq","heapq.heapify(tmp)","heapq.heappop(gw)[2]","heapq.heappop(p)[2]","heapq.heappop(tmp)","heapq.heappush(gw,","heapq.heappush(p,","heapq.heappush(tmp,","height","height:","height[","height[0]","height[:]","height[i]","height[i])","height[i]:","height[i]=height[stack[","height[i]>height[stack[","height[i]>high_num:","height[j]","height[j])","height[j]>left:","height[j]>right:","height[tmp])","heights):","heights:","heights[0]*1","heights[:mid]","heights[i]","heights[i])","heights[i]:","heights[i]>heights[stack[","heights[j]","heights[left_i]","heights[low]>=h:","heights[mid:]","heights[stack[","heights[tmp])","helper(self,","here","here.","hex(dec))","high","high):","high=h:","high_id","high_num","histogram","histori","history.get(s[i","history:","history[k]","history[s[i","hors","https://leetcod","i!='.':","i!=j","i)","i))","i)))","i),(j,","i):","i*maxnum_temp,","i*minnum_temp)","i+1","i+1,","i+1,right)","i,","i,k","i,key","i,num","i.isalnum()]","i.next","i:","i:count+=1","i=0;inumbers.size()/2)","i=1：","i=2：","i=3：","i=4：","i=='","i=='*':","i=='+':","i=='/':","i==0","i==1","i==k","i=len(board)","i=len(grid)","i=n","i>0","i>0:","i>1","i>=0","i>=len(word)","i>>index&1==1:","i[0]","i]","i])","id","idx,i","if(++l","if(i=board.size()","if(index","if(n","if(numbers.empty())","if(sizerow","if(wordstart","ii","ii(leetcod","ii(leetcode940困难)","ii(leetcode_154)","ii(leetcode_213)","ii(leetcode_63)","ii(leetcode_92)","ii_leetcod","iii","iii(leetcod","ii（leetcod","ilen(board)","imag","implement","import","in","inder(root,","inder(root.left,","inder(root.right,","index","index+1,","index,","index,valu","index1","index2","index2。","index2）不是从零开始的。","index2，其中","inent","inf\")","inf')","inf')#包含右边最后一个数的最大序列和","inf')]","initi","initmax","initmax:","inord","inorder(self,","inorder.index(mid_data)","inorder:","inp","inp==","ins==","ins>","insert","insert(self,","insert,","insertionsortlist(self,","instanti","instead.","int","int(a,","int(b,","int(input(\"输入数字：\"))","int(math.factorial(m+n","int(num1[","int(num1[i])","int(num2[","int(num2[j])","int(r)","int(res[i+j+1])","int(stack.pop())","int(str_x)","int)","int,","int:","int[]","int[][]","int[m];","int[m][n];","int[n][n];","int_min","integ","intent","interleav","intersectv","interv","intervals:","intervals:return","introduct","inversepairs(self,","ip","is_after_order(li,","is_inc","isalnum()","isalpha()","isbalanced(self,","isequal(root1,","isequal(root1.left,","isequal(root1.right,","islandperimeter(self,","ismatch(self,","ispalindrome(self,","ispoweroftwo(self,","isvalid(self,","item):","item,","item:","i字符串拼接","j","j!=i:","j)","j))","j),","j+1),","j+1,","j+1]","j,","j0:","j:","j=","j==0","j==1:","j=m","j>0","j>0:","j])","java","jdx,j","jie","judg","judge:","judgesquaresum(self,","jump","justif","k","k%count","k%n","k)","k):","k+0.1)","k+1$","k+1,","k,","k1","k1,","k1:","k1_po","k1_pos)","k2","k2):","k2:","k2_po","k2_pos)","k:","k:]+nums[0:n","k==1:return","k==length:","k>0:","k>=0","k>arr[mid]:","k>len(tinput)","k]","key+1,len_num","key,","key=cmp_to_key(func))","key=lambda","kmp","kthsmallest","kthsmallest(self,","kx0,k=2x0,y0=x0^2","k，返回","l","l++;","l,","l1","l1,","l1.next","l1.val","l1:","l1:return","l1;","l2","l2)","l2):","l2.next","l2:","l2:return","l2;","l;","l=0,","labuladong/","ladder","largest","largestnumber(self,","largestrectanglearea(self,","lass","last","last:","last[x]","last_val","lchild","lchild=none,","leaf","leetcod","leetcode_200","leetcode_437","leetcode刷题优先顺序","leetcode刷题顺序","leetcode刷题（python）","leetcode原题：169.","leetcode原题：229.","left","left)","left**2","left+1","left,","left,right","left.","left.append(height[i])","left.append(left[","left:","left>1","left>=right:","left>right","left[","left[i","left[i]","left[low]>=h:","left_area","left_i","left_i；向右找第一个小于于","left_i？","left_path","left_paths:","leftandmid","leftandmidmax","leftandmidmax:","leftcount","leftli[left]","len","len(a)","len(a)):","len(arr)","len(array)","len(b)","len(b):","len(b)|步,","len(board),len(board[0])","len(c)","len(candidates)","len(dp)","len(grid),","len(grid[0])","len(gw)","len(height)","len(heights)","len(li)","len(lists)","len(matrix)","len(matrix),","len(matrix),len(matrix[0])","len(matrix)==0","len(matrix[0])","len(new_list)","len(num1)","len(num2)","len(num2)+1):","len(numbers)","len(nums)","len(nums))","len(nums)):","len(nums),","len(nums)//2","len(nums)//3:","len(nums)nums[i","len(nums1)","len(obstaclegrid)","len(obstaclegrid)+1","len(obstaclegrid[0])","len(obstaclegrid[0])+1","len(p)","len(prices)","len(prices)==0:","len(ratings)","len(right)","len(right):","len(s)","len(s),len(p)","len(s)0:","len(s):","len(s1)","len(s2)","len(self.max_h)","len(self.min_h)","len(sequence)","len(sequence)==0:","len(set(i))","len(set(nums))","len(ss)","len(stack)","len(strs)","len(tmp)","len(tmp)>k:","len(tmplist)","len(word)","len(word):i]:","len(word)]","len(word1)","len(word1),","len(word2)","len(worddict)","len(x)","len(x)+len(nums)","len1","len2","len_","len_num","len_nums):","length","length)","length):","length,","length,x):","length:","lengthoflis(self,","lengthoflongestsubstring(self,","letter","level","levelorder(self,","levelorderbottom(self,","li","li):","li,","li.pop(0)","li.sort()","li:","li[:]","li[:k]","li[i]","li[i],","li[i]>r2:","li[j+1]:","li[k:]:","li[k:i]:","li[k]","li[k],","li[left]","li[mid]","li[mid]:","li[mid][0]:","li[right]","li[right]:","link","list","list()","list(ans)","list(map(str,","list(map(str,nums))","list(num1)","list(num2)","list(range(10))","list(res)","list(s)","list(set(nums))","list.","list[int]","list[int])","list[int],","list[int]:","list[list[int]]","list[list[int]])","list[list[int]],","list[list[int]]:","list[list[str]]","list[list[str]])","list[listnode]","list[listnode])","list[str]","list[str])","list[str]:","lista","listb","listnod","listnode(","listnode(0)","listnode(element)","listnode(none)","listnode(v","listnode)","listnode,","listnode:","lists):","lists:","lists[0]","lite","log","longest","longestcommonprefix(self,","longestvalidparentheses(self,","low","low,","low>=0","lowestcommonancestor(self,","ltmp","ltree,","ltree.left","m","m!]","m)!","m):","m*n","m+1):","m+n","m,","m,n","m.get(ch)","m:","m=grid[0].length;","m={}","m>=0:","m[value]=index","major","majorityelement(self,","man,","map(lambda","map(self.func,(i+1,","map(self.func,(n,n,n,n),(m,m,m,m),(i","map(str,","mark","mark.add(li[i])","mark:","mat","mat:","mat;","mat[","mat[0][0]","mat[0][j","mat[0][j]","mat[b][i]","mat[i","mat[i+1][j]","mat[i][","mat[i][0]","mat[i][j","mat[i][j+1]","mat[i][j]","mat[i][j])","mat[i][l]","match","match(in","match(ins,inp","match(ins,inp):","match(len(s)","math","math.factorial(n)","matrix","matrix)","matrix,","matrix.length","matrix.length;","matrix.size()","matrix.size(),n","matrix.size();","matrix:","matrix:return","matrix[0].empty())","matrix[0].length;","matrix[0].size()","matrix[0].size(),r","matrix[0]:","matrix[0][j]","matrix[i][0]","matrix[i][j]","matrix[i][j])","matrix[i][j]=='1':","matrix[k][j","matrix[k][j]==\"1\":","max(","max((high","max(0,self.func(root.left))","max(0,self.func(root.right))","max(4,","max([len(x)","max(abs(a[i]","max(bag,key","max(dp)","max(dp[i","max(dp[i],","max(dp[j]","max(func(node.left),func(node.right))+1","max(i,","max(left_area,right_area,mid_area)","max(leftmaxsum,","max(mat[i][j","max(max(a),max(b))","max(max_len,","max(nums)","max(nums[0]*nums[1]*nums[","max(nums[0],","max(nums[0],nums[1])","max(nums[i],nums[i","max(res,","max(res,dp[i][j])","max(res,maxnum)","max(res,width","max(res[","max(res_1,res_2)","max(result,pric","max(right,left))","max(root.val,root.v","max(self.maxdepth(root.left),self.maxdepth(root.right))","max(self.re,root.v","max_area","max_id","max_len","max_len,","max_len:","max_len:max_id]","max_num","max_num+1):","max_num:","max_str","max_str:","max_strid","max_sub_sum","max_sub_sum:","maxarea(self,","maxareaofisland(self,","maxdepth(self,","maxim","maximalrectangle(self,","maximalsquare(self,","maximalsquare(vector>&","maximum","maximumproduct(self,","maxnum","maxnum_temp","maxpathsum(self,","maxproduct(self,","maxprofit(self,","maxroot)","maxroot):","maxroot.data","maxsubarray(nums):","maxsubarray(self,","maxsum","maxsum:","median","medianfinder:","mem","mem:","mem[","mem[0]","mem[0][j]","mem[i","mem[i]","mem[i][0]","mem[i][j","mem[i][j]","memo","memo)","memo):","memo[amount]","merg","merge(a,","merge(li,","merge(self,","mergeklists(self,","merger(head1,","merger_sort(head):","merger_sort(head1)","merger_sort(head2)","mergesort(lists):","mergetwolists(listnod","mergetwolists(self,","mid","mid)*h","mid),","mid**2","mid+1","mid+1,","mid,","mid:","mid]","mid_area","mid_data","middl","middle)","middlenode(self,","midmaxsum","midmaxsum,","min(dp[i","min(dp[j]+1,","min(dp[j],dp[j","min(dpi，min(dpi","min(grid[i","min(grid[i][j],","min(i,","min(left[i],","min(mat[i][j","min(mem[i","min(min_dis,","min(min_len,","min(min_price,price)","min(nums[left],","min(res)","min(res,","min(res,tmp+1)","min(right,left)","min(s[i","min(self.findmin_1(nums,","min(self.mindepth(root.left),self.mindepth(root.right))","min(si","min(up[j],now[j","min(up[j],tmp)","min_di","min_len","min_len:","min_num","min_pric","min_price)","min_price>0:","mincut(self,","mindepth(self,root):","mindis([4,5,6,4,7,4,6,4,7,8,5,6,4,3,10,8],4,8)","mindis(a,","mindis(nums,","mindistance(self,","minimum","minnum","minnum_temp","minpathsum(int[][]","minpathsum(self,","minsubarraylen(self,","mirror(self,","miss","mo","mod","modifi","morethanhalfnum_solution(vector","morri","most_val","most_val[0][0]","move","move.next","move:","multipli","multiply(self,","myatoi(self,","mysqrt(self,","n","n!","n%4","n%x","n)","n))。","n):","n*","n*func(n","n*n","n+1n+1","n,","n,m","n//2","n//x","n/2","n/3","n2","n:","n;","n=","n=0:","n=1","n=2，我们只要向下","n==0:return","n==1:","n=grid.length,","n=len(nums)","n>0:","n>=0","n>=0:","new","new_head","new_head.next","new_list","new_list.sort()","new_list[i][0]","new_list[j][1]]","new_x","newhead","newhead.next","next","nim","nn","nnums[i","nnums[j]:","node","node(data)","node(elem)","node(object):","node(val)","node):","node,","node.","node.left","node.left:","node.next","node.next.next","node.next.v","node.right","node.right:","node.setdefault(char,","node.v","node1","node1.left","node1.right","node2","node2.left=","node2.right","node:","node[\"end\"]","node['end']","node[char]","node，连上原链表的头结点，这样的话就算头结点变动了，我们还可以通过dummi","none","none#","none)","none,","none:","none:return","none我们直接返回head就可以了。","now","now.copy()","now[","now[0]","now[:]","now[j","now[j]","nth","null","null)","null.","null。","null，另一边返回a或者b。那么另一边返回的就是他们的最小公共父节点。","num","num)","num):","num++;","num,","num1","num1,","num1.pop()","num1:","num1[num1_len]","num1_len","num1_len>0","num1_len>=0","num2","num2):","num2.pop()","num2:","num2[num2_len]","num2_len","num2_len)","num2_len>0","num2_len>=0","num2，返回","num:","num=2，那么","num[r]，l++或者r","num[r]，我们就需要将r","num_len","number","numbers)","numbers,","numbers:","numbers[i]+numbers[j]","numbers[numbers.size()/2];","numdecodings(self,","numdupdigitsatmostn(self,","numislands(self,","nums)","nums):","nums,","nums.insert(0,x)","nums.pop()","nums.pop(i)","nums.sort()","nums1","nums1+nums2","nums1,","nums1.extend(nums2)","nums1.pop())","nums1.sort()","nums1:","nums1[","nums1[cur]","nums1[m]","nums1[m]>nums2[n]:","nums1[nums_1_mid]","nums1[~num_len])/2","nums2","nums2)","nums2))","nums2):","nums2.pop())","nums2:","nums2[","nums2[:nums_2_mid])","nums2[n]","nums2[nums_2_mid]:","nums2。","nums2的下标为","nums2，将","nums:","nums[","nums[(i+k)%n]","nums[0]","nums[0],","nums[0],max(nums[0],nums[1])","nums[1:]","nums[1:]:","nums[1])","nums[:]","nums[:i]:","nums[:k]","nums[end]:","nums[i","nums[i]","nums[i])（含义为保留前面累加和与以当前元素为开始，哪种更优），即判断后面subarray是否舍去前面的累计加和，并继续遍历下一元素。","nums[i],","nums[i],nums,x+[nums[i]])","nums[i],x+[nums[i]],nums,len_nums)","nums[i]:","nums[i]==nums[i","nums[i]>=0:","nums[j","nums[j+1]+nums[j]>nums[j]+nums[j+1]:","nums[j+1],nums[j]","nums[j+1]:","nums[j]","nums[j],nums[j+1]","nums[j]:","nums[k:i]:","nums[l+1]","nums[l]","nums[l]:","nums[left]","nums[left],则最小值在数组右边","nums[left],如【2，2，2，1，2】无法区别时，只能求左右最小值，然后返回左右最小值中最小的","nums[left]:","nums[len(nums)//2]","nums[mid+1]","nums[mid]","nums[mid]:","nums[n","nums[r","nums[r]","nums[right]","nums[right])","nums[right]:","nums[right]：例子：[7,","nums[start:","nums[~nums_len])/2","nums_count","nums_count.values():","nums_len","nums_len):","nums_len+1","nums_len+1:","nums，其中","nums，判断","nums，返回该数组所有可能的子集（幂集）。","nxt","n{k}nk。$","n。","n）来保存","n，其格雷编码序列并不唯一。","n，打印其格雷编码序列。格雷编码序列必须以","n，生成一个包含","n，计算","o","o(1)","o(1)。","o(1)（即，常量）内存解决此问题吗？","o(1)，时间复杂度","o(klogn)","o(kn)","o(log","o(log(m","o(n","o(n)","o(n)。","o(n)，空间复杂度为","o(n2)","obj","obj.insert(word)","obj.search(word)","obj.startswith(prefix)","object","obstaclegrid","obstaclegrid:","obstaclegrid[","obstaclegrid[0]:","obstaclegrid[0][0]","obstaclegrid[0][0]==1:","obstaclegrid[0][j]","obstaclegrid[i","obstaclegrid[i][0]","obstaclegrid[i][j]","obstaclegrid[row","oct(dec))","on","op","op:","oper","operator.add,","operator.mul,","operator.sub,","operator.truediv}","ops:","ord('a')]","ord('a')]==none:","order","out[48]:","output","output[i]","o）。","p","p,","p.left","p.left:","p.next","p.right","p.right:","p.val","p.val:","p:","p[i","p[i]","p[inp","p[inp]","p[inp]=='.'):","p[inp]=='?'):","p[j","p_len","pair","pair[tch]","palindrom","panama\"","param_2","param_3","parenthes","partit","partition(list1):","partition(nums,","partition(self,","pascal'","pass","path","path)","path,","path.append(nums[i])","path.append(root.val)","path.pop()","path;","pathsum(self,","pen","permut","permutation(self,","permute(self,","permuteunique(self,","phone","place","plan,","plu","po","pointer","poj","popul","posit","position/solution/t","postord","postorder:","postorder[","postorder[:mid])","postorder[mid:","pow(x,","pre","pre.next","pre.next.val:","pre.next的先序节点","pre.val","pre>0:","pre[j]:上元素","prefix","prefix):","prefix.","prefix:","preorder","price","prices):","prices:","prices[0]","prices[1:]:","prices[i]","print","print(","print(\"false\")","print(\"前三名：\"+str(r1)+\",\"+str(r2)+\",\"+str(r3))","print(\"十进制数为：\",","print(\"没有相等，最近下标为\",left)","print(\"没有相等，最近下标为\",right)","print(\"转换为二进制为：\",","print(\"转换为八进制为：\",","print(\"转换为十六进制为：\",","print('true')","print('不是换位字符串')","print('是换位字符串')","print('最近下标为',0)","print('有相等元素,最近下标为',mid)","print('没有相等，最近下标为',left","print('没有相等，最近下标为',left)","print(111)","print(4444)","print(6666)","print(_)","print(a,","print(a,b)","print(a[i],end='')","print(arr)","print(arr[","print(arr[2])","print(arr_)","print(b)","print(bag)","print(cur.val)","print(dp)","print(dp[i][j])","print(finddup([0,1,2,3,4,5,5,6]))","print(findmaxsum(a))","print(head.val)","print(high_id)","print(high_num)","print(i)","print(i,k)","print(left)","print(left,","print(left,right)","print(li)","print(mat)","print(mat[","print(mat[0][0])","print(max_str,max_len)","print(max_sub_sum)","print(min_dis)","print(n)","print(node.val)","print(nums[j])","print(obj)","print(res)","print(res+1)","print(result)","print(ret.twosum([","print(right)","print(root.data,","print(root.val)","print(s)","print(s.split()[::","print(self.max_h,\"====\",self.min_h)","print(ser)","print(ser1)","print(slow.val)","print(sum)","print(tmp)","print(tmp_res)","print(tmp_res^res)","print(tree.breadth_travel(root))","print(word)","print(x)","pritn(equal)","process","productexceptself(self,","proot):","proot:","public","public:","py2","py3","python","python2","python3","python代码","python先排序，后回溯，可以使用重复元素","python没有大顶堆，所以我们要想实现大顶堆，可以每次放入的数*","python，在里面赋dp的初值","python：自定义排序方法——》冒泡排序","p、q","p、q，最近公共祖先表示为一个结点","p，请你来实现一个支持","q","q)","q,p分布在根结点的两边，则root为最近公共祖先","q.next","q.next，所以是左旋","q.val","q.val，那我们在root.left继续搜索","q:","queen","question","queue","queue.append((i,","queue.append(cur.lchild)","queue.append(cur.rchild)","queue.append(p.left)","queue.append(p.right)","queue.append(root)","queue.append(self.root)","queue.append(tmp.left)","queue.append(tmp.right)","queue.pop(0)","queue.popleft()","queue:","queue_tmp","queue_tmp.append(node.left)","queue_tmp.append(node.right)","queue_tmp.append(p.left)","queue_tmp.append(p.right)","r","r)","r):","r1:","r1:r3=r2,r2=r1,r1=tmp","r2,li[i]","r2,r1,li[i]","r3","r3,r2","r3,r2,r1","r:","r:break","r=m","r=n","rain","random","random.shuffle(li)","rang","range(","range(0,high_id):","range(0,i):","range(0,len(a)):","range(0,p_len):","range(1,","range(1,4):","range(1,amount+1):","range(1,col):","range(1,len(arr)):","range(1,len(num1)+1):","range(1,len(nums)):","range(1,len(res)):","range(1,len(s)+1):","range(1,len1+1):","range(1,len2+1):","range(1,m):","range(1,m+1):","range(1,n","range(1,n):","range(1,n+1))","range(1,n+1):","range(1,n+1)]","range(1,nums_len):","range(1,p_len+1):","range(1,row):","range(1,s1_len+1):","range(1,s2_len+1):","range(1,s_len+1):","range(1,target+1)]","range(2**n):","range(2,","range(2,len(nums)):","range(2,n):","range(a_len):","range(col):","range(count):","range(edge):","range(i)","range(i+1,len(numbers)):","range(i+1,n):","range(index+1,len(s)+1):","range(index,","range(index,len(nums)):","range(index,length):","range(k):","range(k,","range(k,i):","range(k,len(nums)):","range(k,length):","range(l,r+1):res.append(matrix[u][i])","range(len(a)):","range(len(arr)):","range(len(coins)):","range(len(heights)):","range(len(new_list)):","range(len(numbers)","range(len(nums)","range(len(nums)):","range(len(prices)","range(len(s)","range(len(s)):","range(len(s2)):","range(len(stack)):","range(len1+1)]","range(m","range(m):","range(m)]","range(m+2):","range(mid):","range(min_num,","range(n","range(n):","range(n)]","range(n+1)]","range(n+1)】","range(n//2):","range(num1_len","range(num1_len+num2_len):","range(num2_len","range(nums_len","range(nums_len):","range(row):","range(row)]","range(s1_len+1)]","range(s2_len):","range(s_len+1)]","range(start","range(u,d+1):res.append(matrix[i][r])","range(word1_len+1)]","range（m）:","ratings):","ratings:","ratings[i]>ratings[i","ratings[j]>ratings[j+1]","rchild","rchild=none):","re","recov","rectangl","recurs","red","reduc","reduce(lambda","region","regular","remov","removeduplicates(self,","removenthfromend(self,","repeat","res&1","res)","res))","res):","res*r","res+[[nums[0]]","res+left+right","res+tmp","res.add(i)","res.add(matrix[d][i]);","res.add(matrix[i][l]);","res.append(","res.append('","res.append([arr[i][0],arr[i][1]])","res.append(a[i]*b[","res.append(i^(i>>1))","res.append(left[i]*right[i])","res.append(max(self.supereggdrop(k","res.append(move.val)","res.append(nums[l]","res.append(output[i][0])","res.append(p.val)","res.append(res_temp)","res.append(res_tmp)","res.append(root.val)","res.append(str(root.val)","res.append(str(root.val))","res.append(tmp)","res.append(tmp.data)","res.append(word)","res.extend(i)","res.insert(0,","res.pop()","res.remove(i)","res.sort()","res:","res;","res=0,","res=6","res=[]","res=max（f（1），res）=max（3，6）=6","res=max（f（2），res）=max（1，6）=6","res=max（f（2），res）=max（8，6）=8","res=max（f（4），res）=max（","res=max（res，f（i））","res[","res[d][i]","res[i","res[i+j+1]","res[i+j]","res[i]","res[i]!='0':","res[i]*right","res[i][l]","res[ord(i)","res[ord(s[i])","res[s[i]]","res[~num_len])/2","res]","res_1","res_2","res_count","res_count:","res_str","res_temp","res_temp.append(node.val)","res_tmp","res_tmp)","res_tmp.append(node.val)","res_tmp.insert(0,node.val)","reserved，pow","resetarray(nums,","restor","restoreipaddresses(self,","result","result)","result.next","result;","result]","result，并且我们要对nums排序，为什么？为了避免出现这","res加1，最后统计结果看","res：所有子数组的和的最大值","ret","ret.next","return","return[m[target","revers","reverse(self,","reverse=true)","reversebetween(self,","reversekgroup(self,","reverselist(self,","reverseprint(head):","reverseprint(head.next)","reversestring(self,","reversevowels(self,","reversewords(self,","right","right)","right)#","right))","right):","right**2","right+1","right,","right,且left=right+1","right.insert(0,height[j])","right.insert(0,right[0])","right:","right[","right[0]","right[0]:","right[i])","right]对list1","right_area","right_i","right_i，即最大面积为","right_path","right_paths:","right_rev","right_rev*10","right_rev:","rightandmid","rightandmidmax","rightandmidmax:","rightmaxsum)","right，则说明q,p都在右边。","ro","rob(self,","roll","roman","root","root):","root,","root.data","root.keys():#","root.left","root.left,","root.left.right加起来和为sum的情况","root.left:","root.right","root.right,","root.right:","root.val","root.val)","root1","root1.data","root2","root2)","root2):","root2.data:","root2.data，根据这个条件，我们可以用递归进行判断","root2.left)","root2.right)","root:","root=none):","rors","rose","rotat","rotate(self,","rotateright(self,","rotatestring(self,","row","row,","row,col","row;","rtree","rtype:","s","s)","s)).lower()","s):","s,","s,i","s.lower().replace('","s.lstrip().split(\"","s.reverse()","s.split('","s.split()","s1","s1,","s1:","s1[i","s1[index]:","s1[max_id","s1_len","s1_len:","s2","s2)","s2):","s2:","s2[i]","s2[j","s2_len","s2为基准，依次取出s2的字符，判断与s1的字符相等不，相等","s:","s:return","s:商","s[0]","s[::","s[i","s[i:]:","s[i]","s[i].lower()","s[index:i]","s[index:i][::","s[ins]","s[j:i]","s[j:i][::","s[n","s[stack[","s[start:i]","s_filter","s_filter[::","s_len","s_len+1):","same","scrambl","search","search(\".ad\")","search(\"b..\")","search(\"bad\")","search(\"pad\")","search(self,","search(word)","search,","search/solution/","searchinsert(self,","searchmatrix(self,","searchmatrix(vector>&","self._subsets(nums,","self._wordbreak(s,","self.add(i)","self.binary_search(left,","self.binary_search(new_list,","self.binary_search(nums,","self.binary_search(res,","self.binarytreepaths(root.left)","self.binarytreepaths(root.right)","self.buildtree(inorder[:mid],","self.buildtree(inorder[mid+1:],","self.climbstairs(n","self.coinchange(coins,","self.conflict(k,","self.countnodes(root.left)","self.countnodes(root.right)","self.creat_bst(nums,","self.data","self.deserializer(li)","self.dfs(s,","self.dfs(s[i:],","self.dfs(word,self.root)","self.dfs(word[1:],root[ele]):","self.dfs(word[1:],root[i])","self.elem","self.find(board,word,i","self.find(board,word,i+1,j)","self.find(board,word,i,j","self.find(board,word,i,j):","self.find(board,word,i,j+1):","self.find(board,word,idx,jdx):","self.findkthlargest(left,","self.findkthlargest(right,","self.findmax(root.left,","self.findmax(root.right,","self.findmedian(nums1,","self.findmedian(nums1[nums_1_mid:],","self.findmin_1(nums,","self.flatten(root.left)","self.flatten(root.right)","self.func(","self.func(0,","self.func(0,j,board)","self.func(0,k,[],nums)","self.func(0,target,","self.func(0,target,[],candidates,len_nums)","self.func(board,index+1,i","self.func(board,index+1,i+1,j,word)","self.func(board,index+1,i,j","self.func(board,index+1,i,j+1,word):","self.func(board,index,i,j,word):","self.func(coins,","self.func(head)","self.func(i","self.func(i+1,j,board)","self.func(i+1,j,grid)","self.func(i+1,target","self.func(i,0,board)","self.func(i,j","self.func(i,j+1,board)","self.func(i,j+1,grid)","self.func(i,n","self.func(i,target","self.func(idx,jdx,grid)","self.func(li,","self.func(m","self.func(m,","self.func(n,","self.func(node.left,","self.func(node.right,","self.func(nums,","self.func(nums,0,len(nums))","self.func(nums[1:])","self.func(nums[:","self.func(root)","self.func(root,","self.func(root.left,","self.func(root.right,","self.func(s,","self.func(s,0,[],x)","self.func(s,i,x,x)","self.func(x)","self.haspathsum(root.left,sum","self.haspathsum(root.right,sum","self.helper(node.left,","self.helper(node.right,","self.helper(root,","self.inorder(root.left)","self.inorder(root.right)","self.k","self.k)","self.largestrectanglearea(left)","self.largestrectanglearea(right)","self.last","self.lchild","self.left","self.lowestcommonancestor(root.left,","self.lowestcommonancestor(root.right,","self.max_h","self.max_h:","self.max_h[0]*1.","self.max_h[0]+self.min_h[0])/2.","self.maxdepth(root.left)","self.maxdepth(root.right)","self.min_h","self.min_h:","self.min_h[0]*1.","self.mindepth(root.left)","self.mindepth(root.right)","self.mirror(root.left)","self.mirror(root.right)","self.next","self.nod","self.path","self.path.append((i,j))","self.path.pop()","self.pathsum(root.left,","self.pathsum(root.right,","self.r","self.rchild","self.res.append('.'.join(tmplist))","self.res.append(self.track[:])","self.res.append(x[:])","self.res:","self.reverselist(first_node)","self.reverselist(head.next)","self.right","self.root","self.serialize(root.left)","self.serialize(root.right)","self.serializer(root.left)","self.serializer(root.right)","self.sub_search(0,","self.sub_search(mid","self.subsets(nums[1:])","self.subsetswithdup(nums[1:])","self.substr(b,","self.sum_solution(n","self.track","self.track.append(node.val)","self.track.pop()","self.val","self.verifysquenceofbst(sequence[0:i])","self.x","self.x.append(li[:])","self.x.append(x)","self.x.append(x[:])","sell","sequenc","sequence):","sequence[","ser","ser1","serialize(self,","serializer(self,","set","set()","set(worddict),","shortest","sign","simplifi","singlenumber(self,","singli","size","sizerow","sizestr","skipa","skipb","slow","slow.next","slow.next.next","slow:","slow=","slow和fast同时往前走","solut","solution()","solution(object):","solution:","solve(self,","solver","sort","sort(head,","sort(numbers.begin(),numbers.end());","sortcolors(self,","sorted(arr,","sorted(bag.items(),","sorted(intervals,","sortedarraytobst(self,","sortedsquares(self,","sortlist(self,","space","spiral","spiralorder(int[][]","spiralorder(self,","split_list(head)","split_list(head):","split_list函数","sq","sqrt(int","sqrt(x)","sqx:","sqx决定了最后非法循环出去时,left=right=mid","ss):","stack","stack.append(i)","stack.append(int(char))","stack.append(int(i))","stack.append(int(t2/t1))","stack.append(j)","stack.append(nums[i])","stack.append(ops[char](t2,","stack.append(t2","stack.append(t2*t1)","stack.append(t2+t1)","stack.insert(0,ch)","stack.pop(","stack.pop()","stack.pop(0)","stack:","stack[","stack[j]","stack[j]:","stair","start","start):","start+1)","start,","startswith","startswith(self,","stdout","stdout:","stock","str","str(res)","str(root.data)","str(x)","str(y)","str)","str,","str.isalnum();","str.isalpha();","str:","str_all","str_all)","str_x","string","strs:","strs[0]","strstr()","structur","sub","sub_search(self,","subarray","subseq(s1,s2):","subsequ","subset","subsets(self,","subsetswithdup(self,","substr","substr(s1,","substr(self,","such:","sudoku","sum","sum(nums)","sum(res)","sum)","sum),因为这样的话，只会统计以root.left为根的左右子树的和是否满足要求。而忽略了以root.left和root.left.left","sum):","sum,","sum,x+[node.left.val],x)","sum,x+[node.right.val],x)","sum,x,x)","sum:","sum_1","sum_2","sum_2)","sum_al","sum_solution(self,","supereggdrop(self,","surfacearea(self,","surround","swap","sy","symmetr","sys.setrecursionlimit(1000000)","s的，而不是部分字符串。","s，将","s，最多删除一个字符。判断是否能成为回文字符串。","s，计算","t","t1","t1!=t2:","t1)","t1))","t1,t2","t1.next","t2","t2.next","t;","tail","tail.next","take","tar","target","target)","target):","target){","target,nums,x):","target:","target==0:","target。找出","target。该矩阵具有以下特性：","target）都是正整数。","target，如果目标值存在返回下标，否则返回","tch","test.pi","text","threesum(self,nums:","threesumclosest(self,","time","tinput","tinput,","tinput:","tmp","tmp%10","tmp)","tmp+1)","tmp.append(node.left)","tmp.append(node.right)","tmp.left","tmp.next","tmp.next))","tmp.next:","tmp.right","tmp.sort()","tmp//10","tmp:","tmp:左元素，求和后，tmp也为左元素","tmp==","tmp>height[i]:","tmp[(i+count)%n]","tmp[0]","tmp[0])","tmp[i]","tmp[~num])","tmp_1","tmp_2","tmp_arr","tmp_arr.append(tmp)","tmp_c","tmp_cs,","tmp_di","tmp_re","tmpdict","tmpdict[word]","tmpdict[word]:i]:","tmpdict[word]]","tmplist","tmplist)","tmplist):","tokens):","tokens:","top","top.","topk(li,","topkfrequent(self,","tr","trap","trap(self,","travers","tree","tree(li,","tree(nums,","tree(object):","tree.addword(word)","tree.deserializer([1,","tree.inorder(tree.root)","tree.last","tree.nodes[ord(i)","tree.search(word):","tree.serialize(tree.root)","tree.serializer(tree.root)","tree.setdefault(i,{'end':false})","tree.setdefault(i,{})","tree/)(leetcod","tree:","tree['end']","tree['isend']","tree[i]","treedepth(self,","treenod","treenode(mid_data)","treenode(nums[mid])","treenode(res[i])","treenode)","treenode,","treenode:","triangl","trie","trie()","trie();","trie(object):","trie.","trie.insert(\"app\");","trie.insert(\"apple\");","trie.search(\"app\");","trie.search(\"apple\");","trie.startswith(\"app\");","trie:","trienode()","trienode(object):","trie树，即字典树，又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。”","true","true,","true,否则返回","true.","true:","true;","true}},","true}}}}#第二次insert，第二个'p'存在结束'end'","true}}}}}}","true。","true。如果数组中每个元素都不相同，则返回","true，否则返回","tsetnoc\"","tupl","two","twosum(self,","u","u,","u;","u=0,","uniqu","uniquepaths(int","uniquepaths(self,","uniquepathswithobstacles(self,","up","up[","up[0]","up[j","up[j]","updatematrix(self,","utf","v","val","val):","valid","validpalindrome(self,","valu","value)","value]+1,index+1]","vector>","verifysquenceofbst(self,","visit","visited.add((i,","void","water","way","while(num","width","wildcard","window","without","word","word)","word):","word,","word.size())","word.size();","word1","word1,","word1:","word1[i","word1[i]","word1_len","word1_len+1):","word1_len,","word2","word2):","word2:","word2[j","word2[j]","word2_len","word2_len+1):","word2，计算出将","word:","word[0]","word[1:]","word[index]","wordbreak(self,","worddict","worddict)","worddict):","worddict:","worddict])","worddictionary()","worddictionary:","worddict，判定","words\"","words,","words:","wordstart)","wordstart+1)","wordstart+1));","write","x","x%10","x)","x):","x+[nums[i]])","x+[nums[i]],","x+[s[:i]])","x+[str(node.left.val)],","x+[str(node.right.val)],","x+y>y+x:","x+ypython：(内置排序方法)","x+yy+x:","x,","x,i","x,nums):","x,y:x*y,","x.append('.'.join(x))","x.append(li[:])","x.append(node.val)","x.append(path[:])","x.append(s[index:i])","x.append(str(node.val))","x.append(x)","x.append(x[:])","x.pop()","x//10","x:","x:(x[0],[x[1]]))","x:bag[x]","x:x[0])","x:x[0],","x:x[1],","x==right_rev","x==right_rev//10","x>1","x[","x[0]","x[1:]","x[::","x[i],x[index]","x[index],x[i]","x[k],x[i]，部分排列组合是append，pop","xiang","x的平方根leetcode_69简单","x，满足","y","y+x谁大","y:余数","yong","z","zero","zhao","zigzag","zigzaglevelorder(self,","zip(*strs):#zip()函数用于将可迭代对象作为参数，将对象中对应的元素打包成一个个元","z中的一种可能。","z对应的ascii码为65","z对应的ascii码值为97","{","{'()','[]','{}'}","{'3':2,'43':43}","{'a':","{'e':","{'end':","{'end':false}","{'isend':false}","{'l':","{'p':","{'{':'}','[':']','(':')'}","{'{':0,'[':0,'(':0,')':1,'}':1,']':1}","{}","{})","|","||","}","};","}，其最大连续子序列为{11,","~","©","ø","ø，我们想要把它改成","​","‘end’，这种情况，因为它没有对应一个字典，而是存储了false和tru","’","“子数组”需要连续的一段，并不是“子序列”。","ⅱ(leetcode_680)","←","→","−","≤","≥","⌊","⌋","。","。因此","。因此它不是一个回文数。","。在坐标内画","。如果你忽略了这一点，你的链表中可能会产生循环。如果使用大小为","。如果在若干次旋转操作之后，a","。每个运算对象可以是整数，也可以是另一个逆波兰表达式。","。而num[l]","。计算这个岛屿的周长。","【","【1,1,1】【1，2】【3】","【1,2,5,0,0】","【1,2】","【1，2，3】，大顶堆【1】，小顶堆【2，3】，所以中位数在小顶堆【2，3】，且是堆顶","【1，2，3，3】","【3,4,5,0,0】","【3,4】","【n】=","一个","一个二叉树每个节点","一个可能的答案是：[0,","一个字符一个字符累加，关键技巧","一个字符一个字符累加，这儿是个关键技巧","一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。","一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是o(n)，空间复杂度是o(1)。","一个机器人位于一个","一个环形单向链表的头结点head和报数的值m","一个目标值","一个直观的解决方案是使用计数排序的两趟扫描算法。","一位","一张纸上，画若干条线，双方一人划一次，每次划掉1~3条线。可以选择画1条，也可以划2条，也可以3条。具体划去几条线完全看自己的策略。谁划掉最后一条线，就是赢家。","一旦遇到","一是变为一维列表，进行二分查找","一条包含字母","一次遍历法","一种方法类似于最大前缀和","一种最简单的思路就是将nums的重复元素去除，然后在使用之前的方法就可以啦。","一种解决办法是我们重写一个listnode，给他添加val元素方法。我这里使用了另外的一种解决思路，就是在tuple中再添加一个元素。","一致，则在网格中存在此单词。","一般动态规划元素个数都比数组元素个数多一","一边占一半元素，而且，还是有序的，很像二分法，这时，中位数为两堆顶平均值","一部分算完结果，再放进去，然后继续后面的计算（链表也许可以，但是，代价也是不菲）。","三个数的最大乘积","三个数的最大乘积_leetcod","三数","三数之和（腾讯）","三维形体的表面积","三维形体的表面积_leetcode_892","上、下、左、右。","上。","上面一行","上面代码的17，18行的输出","上面是由数组","下午","下面一行","下面的调整，使得最小最大堆元素相差最多为1，而且永远是","不会动递增序列的个数，但是会调整递增序列的值，这儿也可以用二分查找","不会同时为空。","不使用重复元素","不加","不加这个传入为空的判断的话会访问越界","不去重代码","不可使用重复元素","不同的子序列","不同的子序列_leetcode_940","不同路径","不同路径(leetcod","不同路径2_leetcode_63","不同路径_leetcod","不存在","不影响后续计算","不是子数组。","不检验的结果","不然就要判断是否是小写字母","不用动态规划","不用动态规划（...）","不用替换,设置一个标志位，跳过外循环的替换操作","不用第二个循环","不用自己写反转","不知道比较次数的，不能用for循环，用while循环","不能交换位置","不能使用代码库中的排序函数来解决这道题。","不能使用任何标准库的大数类型（比如","不要从你的函数中返回任何结果。","不要写反了","不要忘记写return","不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用","不设置虚拟头结点，删除有序列表，但是最后要保留一个，而不是全部删","不需要旋转","与","两个串长度相等，内容相同，则s1是s2","两个子链表归并完成，且已完成对其排序，返回链表头指针给上层递归。","两个字符串完全匹配才算匹配成功。","两个字符串的最长公共子串","两个有序数组进行合并,就联想到归并排序。我们既可以从前往后归并，也可以从后往前归并。","两个相邻元素间的距离为","两串都为空时，算匹配成功","两数不同，异或，等于其他数","两数之和","两数相加","两数相同，异或，等于0","两数相除(leetcode_29)","两数相除_leeetcode_29","两棵二叉树如果相等，则两棵二叉树有着相同的结构，并且在相同的位置上有相同的值","两次反转","两种双指针方法","两者相等时，a*","两边向中间遍历","丨","个,","个一组翻转链表(leetcode_25)","个一组翻转链表_leetcode_25","个不同的元素。","个不同的子序列分别是","个位置，其中","个元素是一支给定股票第","个元素有序的（升序）整型数组","个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。","个元素的矩阵（m","个单位。","个单位的雨水（蓝色部分表示雨水）。","个台阶。你有多少种不同的方法可以爬到楼顶呢？","个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。","个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。","个数的组合。","个整数的数组","个最大的元素。请注意，你需要找的是数组排序后的第","个最大的元素，而不是第","个最小的元素。","个正整数的数组和一个正整数","个正方体叠放在对应单元格","个糖果。","个结点。我们重新链接第二个指针所引用的结点的","个结点分开。我们通过同时移动两个指针向前来保持这个恒定的间隔，直到第一个指针到达最后一个结点。此时第二个指针将指向从最后一个结点数起的第","个节点。","个节点一组进行翻转，请你返回翻转后的链表。","个节点（最详细解决方案！！！）是一样的。其实就是一个循环链表首先，如果head","个节点，并且返回链表的头结点。","个节点；在","个非负整数","个非负整数表示每个宽度为","个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为","个鸡蛋，并可以使用一栋从","个黄色的边：","中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。","中因此返回","中并且下标为","中序遍历","中所有可以使数字和为","中所有可能的","中搜索","中是否存在三个元素","中的","中的一个目标值","中的三个整数，使得它们的和与","中的元素。","中的所有元素是不重复的。","中的数字可以无限制重复被选取。","中的每个数字在每个组合中只能使用一次。","中第一个字符，再以此字符为起点进行","中缀表达式转换成前缀表达式和中缀表达式转换成后缀表达式十分类似，只需要将扫描方向由前往后变成由后往前，","中间是我选定扔的楼层","中除","中，使得","中，相交节点前有","串中的元音字母几篇文章中的解题思路。我们通过设置两个指针，分别指向数组的头l和尾r，计算容器可以容纳多少水contain。","临时草稿","为","为不同节点且均存在于给定的二叉树中。","为中心，向左找第一个小于","为了更好的处理删除头结点情况,我们一般都会设置虚拟节点","为了表示给定链表中的环，我们使用整数","为了避免循环搜索，我们还要将本轮深度优先搜索中搜索过的数字变一下，等递归回来之后再变回来。实现这个特性最简单的方法就是异或上一个特定数，然后再异或回来","为什么是","为例：","为原始数组","为右下角的最大正方形的边长应该为多少呢？","为数组长度","为空串时，无论a多少字符，公共连续子序列长度都为0","为空串时，无论b多少字符，公共连续子序列长度都为0","举一个例子，若给定数组为","举例来说：1","举例：{2,4,3,6,3,2,5,5}","么dp['4']","之和等于目标数","之外其余各元素的乘积。","之外，这两个数都不会以","之所以用s[index].isdigit(),是因为有可能这种情况，‘0012a42’","之间。","乘积最大子序列","乘积最大子序列(leetcod","乘积最大子序列_leetcod","也不能直接将输入的字符串转换为整数形式。","也可以for","也就是说（x0+a/x0）/2是过点（x0,y0）的切线与x轴的交点的横坐标。","也就是，匹配串需要看前两个字符的状态","也是一个有效的格雷编码序列。","也是升序的子序列,","买卖股票的最佳时机","买卖股票的最佳时机(leetcod","买卖股票的最佳时机_leetcod","二、题目","二分","二分搜索","二分搜索有递归和循环两种方式","二分查找","二分查找(leetcode704简单)","二分查找_leetcode_704","二分法","二分法，","二分法：查找距离某个元素最近的位置","二分法：首先要判断这个有序数组是否旋转了，通过比较第一个和最后一个数的大小，如果第一个数小，则没有#","二分法：首先要判断这个有序数组是否旋转了，通过比较第一个和最后一个数的大小，如果第一个数小，则没有旋转，直接返回这个数。如果第一个数大，就要进一步搜索。我们定义left和right两个指针分别指向开头和结尾，还要找到中间那个数，然后和left指的数比较，如果中间的数大，则继续二分查找右半段数组，反之查找左半段。终止条件是当左右两个指针相邻，返回小的那个。","二叉搜索树中第k小的元素","二叉搜索树元素个数。","二叉搜索树后序遍历的特点，列表的最后一个值一定是树的根节点，然后我们可以根据这个根节点将列表前n","二叉搜索树的最近公共祖先","二叉搜索树的特点：对于任意一个节点，它的左子树上所有节点的值都小于这个节点的值，它的右子树上所有节点都大于这个节点的值。","二叉树","二叉树不超过1000个节点，且节点数值范围是","二叉树中的最大路径和(leetcod","二叉树中的最大路径和_leetcod","二叉树展开为链表","二叉树序列化和反序列化","二叉树最大子树和","二叉树的层次遍历","二叉树的序列化和反序列化","二叉树的很多问题都可以转化为二叉树的遍历来求解","二叉树的所有路径(leetcode257简单)","二叉树的所有路径leetcode_257简单","二叉树的最大深度","二叉树的最近公共祖先","二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。","二叉树的深度（通过层次遍历实现）(每层节点单独输出)","二叉树的节点表示以及树的创建","二叉树的锯齿形层次遍历","二叉树的锯齿形层次遍历(leetcod","二叉树的镜像","二叉树的镜像定义：源二叉树","二叉树路径等于输入整数的所有路径","二是两个节点在同一侧，则","二是就在愿矩阵上，进行查找，不过起始点，选为左下，或者右上，但是我们不能选择左上角和右下角为起点，假设左上角的数字为1，我们查找数字为7，那么第一次比较7比1大，但是我们无法缩小查询范围（即不能剔除第一行，也不能剔除第一列）","二者不相等时，a*","二进制求和","二进制求和_leetcode_67","人类最熟悉的一种表达式1+2，(1+2)*3，3+4*2+4等等都是中缀表示法。对于人们来说，也是最直观的一种求值方式，先算括号里的，","从0行0列开始遍历","从1开始，不然0位置会重复计算","从1行1列开始遍历","从root走到叶子节点了，但是路径之和不为sum，所以向上回溯","从上到下","从中序与后序遍历序列构造二叉树(leetcode_106)","从中序和后序遍历构造二叉树","从二进制上看，2的幂一定是这样的形式：整个二进制数上只有一位是1，其他位全是0；","从右到左依次计算各矩形高度，同时乘以该高度为矩形，宽为数组长度减去当前矩形下标（数组下标从0开始计算），最后比较谁大就行了","从右向左读,","从右向左，所以res[i+j+1]我们可以获取得到","从右边往最高点遍历","从后往前匹配,","从尾巴开始左旋","从左上角到右下角一共有","从左上角开始，总共有","从左下角开始查找","从左向右读,","从左边往最高点遍历","从数据流中添加一个整数到数据结构中。","从理论上讲，已知一棵二叉树的中序遍历序列，要求出它的后序遍历序列是不唯一的，即文法是有多义性的。但是，在这","代码","代码1","代码2","代码2(理解版)","代码2非递归","代码2（堆排序）","代码2（大神版）","代码2，用字典来计算","代表可以匹配零个或多个前面的那一个元素,","以","以word1[i]为结尾的字符串","以word2[j]为结尾的字符串","以上是柱状图的示例，其中每个柱子的宽度为","以及","以数组","以此类推","任何不在边界上，或不与边界上的","任何从高于","众数是指在数组中出现次数大于n/2","优先队列","优先队列（一次性加入所有元素）","优先队列（每次只加入各队列最小值比较）","优化","优化空间复杂度","优秀的代码","会从","但它不是数字或正、负号。","但它不是连续的，因为5和7在原数组里被4隔开。","但是为了统一减65来计算","但是本题nums1后面留的空间足够，所以我们在nums1尾部进行添加元素，不需要重新开辟数组进行归并。因此我们只能从后向前归并，因为nums2归并到nums1上，如果从前往后归并，那么需要不断调整nums1的值，防止nums1中未归并的值被覆盖丢失，相当复杂。而我们从后往前归并，就不需要这么复杂了。","但是正常情况下，后一个矩形的高度不一定比前一个矩形高度小，也就是说，就是因为这个矮高度矩形的加入，限制了我们之前矩形的高度。那么之前矩形的高度对于以后的统计就没什么用了，这个时候，我们把矮矩形添加进来之前，先计算高矩形的答案，然后删除高矩形。","但最多只能是2个，证明如下：","但第二个","位有符号整数。","位有符号整数范围。","位有符号整数，其数值范围是","位的有符号整数，你需要将这个整数中每位上的数字进行反转。","位的有符号整数，则其数值范围为","位置i能容下雨水量:min(3,1)","位置最大面积是什么？","何去何从gw","余数","作者","你不能使用任何內建","你不能先偷窃","你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。","你可以不使用额外空间来实现吗？","你可以假设","你可以假设字典中没有重复的单词。","你可以假设所有单词都是由小写字母","你可以假设所有的输入都是由小写字母","你可以假设数组中不存在重复元素。","你可以假设数组中不存在重复的元素。","你可以假设数组中无重复元素。","你可以假设数组中的所有字符都是","你可以假设数组是非空的，并且给定的数组总是存在众数。","你可以假设树中没有重复的元素。","你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。","你可以假设给定的","你可以先偷窃","你可以分别给这三个孩子分发","你可以删除c字符。","你可以在常数空间复杂度内完成这个题目吗？（","你可以对一个单词进行如下三种操作：","你可以认为每种硬币的数量是无限的。","你可以迭代或递归地反转链表。你能否用两种方法解决这道题？","你将获得","你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。","你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。","你是否可以不用额外空间解决此题？","你的目标是确切地知道","你的算法只能使用常数的额外空间。","你的算法应该具有线性时间复杂度。","你的算法时间复杂度必须是","你的算法的时间复杂度必须优于","你知道存在楼层","你算法的时间复杂度应该为","你能不将整数转为字符串来解决这个问题吗？","你能否用","你能将算法的时间复杂度降低到","你能尝试使用一趟扫描实现吗？","你能想出一个仅使用常数空间的一趟扫描算法吗？","你能用","你需要按照以下要求，帮助老师给这些孩子分发糖果：","使用dfs，先在","使用动态规划","使用快慢指针先确定是否有环，有的话，将fast指向head，和slow指针以相同的速度移动，当fast==slow时则找到了环的入口。","例如,","例如a:","例如，","例如，[0,2,3,1]","例如，上图是一个7","例如，数组","例如，给出","例如，给定二叉树","例如，给定如下二叉搜索树:","例如，给定如下二叉树:","例如，给定数组","例如：","依次判断每个数num将其插入dp数组相应的位置:","保存商和余数，知道商为0为止，再将余数反转。","保留前面计算过的最大最小值","保证所有输入均为非空字符串。","保证是有效的。","倒序输出","倒序过程中,统计数量","假设你正在爬楼梯。需要","假设列表为：$n1→...→nk−1→nk→nk+1→...→nm→∅$","假设存在链表","假设我们的环境只能存储","假设我们的环境只能存储得下","假设按照升序排序的数组在预先未知的某个点上进行了旋转。","假设数组是：[1,2,1,1,2,1]。算法步骤如下：","假设有这样一个场景：票选村长，每人可投一票，我们将候选村长从1开始编号，村民们在票上写上候选村长的编号即可完成投票。那么最后统计的票可形成一个整型数组。那么谁是村长呢？票数过半的那个人。","假设每个v=grid[i][j]都是独立的,每一个坐标都可以提供","假设过点（x0,y0）的切线方程为y=kx+b，那么切线与x轴的交点横坐标为","做这道题目之前，建议先去看看300号问题，本题在300号问题的基础上做了一些改变，需要多使用一个数组来记录lis的组合数","偶数个,","偷窃","偷窃到的最高金额","元素的个数，然后按照0、1、2的排序，重写当前数组。","元音字母不包含字母\"y\"。","先写elif","先判断有没有环","先取数组中间节点作为根节点，将数组分成左右部分，对数组的左右两部分采用递归的方法进行建立左右子树","先定义好res,后面再相应位置修改res里面的值,而不是r","先将数组排序，对于","先手都可以划掉2条线和3条线来让后手落入“4”的陷阱。","先排好序","先排序，后去重","先正序遍历，如果后一位比前一位高分，就给比前一位多1的糖果","先正序遍历，如果后一位比前一位高分，就给比前一位多1的糖果，否则给1","先计算从左到右的相乘的最大值，再计算从右到左的最大值；再将两组最大值相比","先计算出矩形高度矩阵","先让fast走n步","先让fast走n步,第n+1步时候,slow也开始走","先遍历所有的值，然后找到第k小的数字，最后利用二分搜索进行处理","入栈","入栈、出栈的地方叫做栈顶","入栈刚才那个元素","全局变量可以这么设","全局变量可以这么设置","全排列","全排列(leetcod","全排列_leetcod","全排列是交换x[i],x[k]","共有","其中","其中ab是出现一次的两个数字","其中一个栈用来预处理：将字符串倒序压进栈中。","其他的情况，返回root","其状态与前2的状态一致","内存。","冒泡排序是稳定的","冒泡排序有错","写成这样就错了","减为空串，说明都匹配了","减去面贴在一起的情况","出于对空间复杂度分析的目的，输出数组不被视为额外空间。）","出栈至输出串中","出现在","出现次数","出现次数超过一半的数","出现次数超过数组1/3长","函数。","函数应该返回这两个下标值","分两种情况讨论，偷第一家，最后家就不能偷，不偷第一家，最后家可以选择偷，也可以选择不偷。然后取最大值","分别表示红色、白色和蓝色。","分割回文串","分割回文串(leetcod","分割回文串_leetcod","分割成","分割成一些子串，使每个子串都是回文串。","分发糖果(leetcode_135)","分发糖果_leetcode_135","分析","分治法","分治法（未完成）","列表归并，作为参考","列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。","则dp","则fpre.next.next找不到了","则不交换","则中位数是","则中缀表达式得名于它是由相应的语法树的中序遍历的结果得到的。","则当前为*时,","则是抛出异常。","则说明q,p都在左边，反之els","创建一个新的链表节点，指向排序好的链表；对分割得到的两个子链表逐一遍历对比，值小的节点插入到新链表后面；","创建日期","初始值","初始值dp[0]","初始化","初始化队列，将所有起始点加入","初始化：","初始有一个点","初始状态：","删除一个字符","删除成","删除排序数组中的重复项","删除排序链表中的重复元素","删除排序链表中的重复元素(leetcod","删除该节点","删除链表中的节点","删除链表的倒数第","删除链表的倒数第k个节点","删除链表的倒数第n个节点(leetcode_19)","判断s1是不是s2的子串","判断x+i","判断一个串s1是不是另一个串s2的子序列，","判断一个串是不是另一个串的子串","判断一个字符串是不是另一个字符串的子串，如","判断一个序列是不是另一个字符串的子序列","判断一个数组是否是二叉搜索树的后序遍历","判断一个数组是否是二叉搜索树的后续遍历，如果是，返回true，如果不是,返回false，比如【1，3，2，5，7，6，4】就是一棵二叉搜索树的后序遍历序列。","判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。","判断一个链表是否是回文的，很自然的想法就是两个指针，一个指针从前往后走，一个指针从后往前走，判断元素值是否相同，","判断两棵二叉树是否相等","判断回文字符串","判断地址，而不是val，因为那两个1实际上不是同一个节点，地址不同，直接判断地址就行了","判断数组是否是二叉搜索树的后序遍历","判断是不是换位字符串","判断是否是平衡二叉树_leetcode_110","利用n/2条件","利用集合创建一个无序但不重复（重要）的元素集，可以判断不同字符串","到","到达边界外或访问到为0的位置则返回0,否则先把该位置的1置为0(作为访问过的标记,相当于visited数组),随后递归的访问四个方向.","到达边界外或访问到为0的位置则返回0,否则先把该位置的1置为0(作为访问过的标记,相当于visited数组),随后递归访问四个方向,","前k个高频元素","前三句话可以变成这样","前两种情况可以用递归求解，而第三种情况则可以将前半部分的最大子序列和（此处的子序列必须包含前半部分的最后一个元素）与后半部分的最大子序列和（此处的子序列必须包含后半部分的第一个元素）相加得到","前序遍历展开为链表","前指针，这儿没有用，但是可以看看怎么写","前缀树的功能很强大，可以做文本词频统计，例如我们在搜索框中的搜索提示，就可以利用前缀树实现。因此，前缀树基本的操作是字符串的插入，搜索，删除，查找前缀等。","前缀积","前缀表达式又叫做波兰式。同样的道理，表达式的前缀表达式是由相应的语法树的前序遍历的结果得到的。","前言","前面先讨论递归到底的情况情况","剑指offer（四十）：数组中只出现一次的数字","加入s_len","动态规划","动态规划,","动态规划1(原地修改)：","动态规划2","动态规划2（非原地修改，空间复杂度m*n）","动态规划3（非原地修改，空间复杂度2*m）","动态规划4（非原地修改，空间复杂度为m）","动态规划之二分替换","动态规划思路","动态规划方程：dp[n]","动态规划替换","动态规划的思路：将","动态规划题目，好比数学数列题，由前面的结果推导后面的结果","动态规划，一般都要设这两个变量","动态规划：","北面(或南面)","匹配0个字符","匹配串为空串时，字符串1个以上字符时，匹配不成功，即第一列从第一个字符开始为false，由于创建dp","匹配串：p串","匹配任意单个字符","匹配多个字符（>=1个字符）","匹配空字符，多字符","匹配零个或多个前面的那一个元素","区间","区间搜索","十进制数为：5","单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。","单词拆分(leetcod","单词拆分_leetcod","单词搜索","单词搜索(leetcod","单词搜索_leetcode_79","单词的反转","单调栈","单调栈:","单调栈原理","单调栈应用","单调栈是一种特殊性质的栈，特殊之处在于栈内的元素都保持一个单调性","单调递减栈","单调递减栈:从栈顶到栈底严格单调递减","单调递减栈伪代码","单调递减栈（简写）","单调递减栈，原始数组右边添加一个最小值，是为了让栈内元素全部出栈","单调递增栈","单调递增栈:","单调递增栈:从栈顶到栈底严格单调递增","单调递增栈，原始数组右边添加一个最大值，是为了让栈内元素全部出栈","即为","即输出p%1000000007","原因：342","原始数据：1，2，4，3","原始数组右边添加float('inf')","原文：你可以假设网格的四个边均被水包围。","原生","原生写法，通过率99.99%，超时，其它语言可通过","原链表拼接","去重,如【1，1，7】","去重代码","去重代码1","去重代码2","去重代码3","参照这","参考接雨水","参考柱状图中最大的矩形(leetcode_84)","参考正则表达式匹配_leetcode_10","双指针","双指针法","双指针法（指针对撞法）","双重循环遍历，时间复杂度为o(n^2)，","反转一个单链表。","反转一半数","反转从位置","反转字符","反转字符串中的元音字母(leetcode_345)","反转字符串中的元音字母_leetcode_345","反转字符串中的单词","反转链表","反转链表2","取出奇数位","取出来，放到最大堆中去，这样就能保证最小堆的堆，都比最大堆的堆顶大","取出来，放到最大堆中去，这样就能保证最小堆的最小元素，都比最大堆的（最大元素）堆顶大","古老办法","另外一种方法，我们要保存前面走过的路，里面的最大最小值，因为这是乘法，乘法的话，会出现最大值，是由两个负数乘起来的。但是负数是最小的","只会走一个","只会走一个==","只出现一次的数字","只包含小写字母。","只包含数字","只有一句话，可以不加大括号","只有作为空串，才能匹配成功","只有连续))))),既不入栈,同时还要不断更新start","只能往上和往左延伸1单位，(i","只能往上和往左延伸2个单位：","只能往上和往左延伸3个单位，(i，j","只需对每个元素第一个位置排序即可，不需要两个位置都排序","只需要o(k)空间复杂度","可不可以用一个函数来判断在线条总是为x时你的输赢情况呢？这样你以后跟别人玩这个游戏的时候就不会输啦。","可以不加，因为if","可以不排序，答案也正确","可以不用keys,直接tre","可以作为空字符，单字符a，多字符处理","可以使用快速排序的思想","可以使用重复元素","可以利用对撞指针","可以匹配","可以匹配任何单个字符。","可以匹配任意字符串。","可以匹配任意字符串（包括空字符串）。","可以匹配字符串","可以匹配空字符串,","可以参考最大矩形","可以将它分开写成","可以感受得到，算法会保存一个当前大多数，和得分，当遇到一个数不是当前大多数时，得分会减一，当减到0时，大多数会发生改变，并且重置得分为1。","可以搜索文字或正则表达式字符串，字符串只包含字母","可以是任意值。","可以用类似快速排序，也可以用类似冒泡排序","可以表示任何一个字母。","可以被拆分成","可假定整个链表结构中没有循环。","可省略，但是不省略含义更明确","可能为空，且只包含从","可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。","可能包含重复元素。","可能变为","可被视为","可被视为重叠区间。","右子树节点大于根节点","右旋","右边是没碎的那段","右边有序，去右边找","叶子节点是指没有子节点的节点。","号房屋","号房屋（金额","号房间可盗窃最大值为","号房间自身的值为","合并","合并k个排序链表","合并两个有序数组","合并两个有序数组(leetcode_88)","合并两个有序数组_leetcode_88","合并两个有序链表(leetcod","合并两个有序链表__leetcod","合并到","合并区间(leetcode_56)","合并区间_leetcode_56","同一位置是否是相同字母，如果是，加入该字母，否....","同时对a和b进行遍历,","同时算出商和余数","后序遍历","后序遍历为切入点","后继节点","后缀表达式","后缀表达式又叫做逆波兰式。它是由相应的语法树的后序遍历的结果得到的。如上图的后缀表达式为：","后，下面的代码就不执行了","向下","向右","向右旋转","吗?","否则右边一定是有序的,但是mid这个位置可能会是最小值，所以下次还要继续搜索","否则有环","否则，鸡蛋从","和","和463岛屿周长一模一样","和[1,","和num2","和num2,求这两个数字在数组中出现的位置的最小距离","和一个包含非空单词列表的字典","和一个字符模式","和一个字符规律","和一个总金额","和一个目标值","和一个目标数","和为n的正整数组合","和层次遍历一样，只不过加一个，判断语句","和最大问题","和最大：","和节点","和除数","哈希法,双指针法","商","回到题目","回文数(leetcod","回文数_leetcod","回文链表","回文链表(leetcode_234)","回溯","回溯法","回溯算法:","因为","因为q","因为他们是相邻的。","因为单词长度最小是1，所以起点是1","因为卖出价格需要大于买入价格。","因为存在目标和为","因为展开成一维列表后也不是有序的，因此，我们就在原矩阵上进行查找，查找的起始点是左下角和右上角","因为已经碎了一个了","因为数组","因为无重复字符的最长子串是","因为机器到底右下角，向下几步，向右几步的总步数都是固定的，","因为根据定义最近公共祖先节点可以为节点本身。","因为用到了sort，时间复杂度o(nlogn)，并非最优","因为结果可能很大，所以返回答案模","因为路径","因为过一会还要用headb，heada，所以这儿先用其他变量保存","因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。","因为这种方法只遍历了一遍数组，因此，算法的时间复杂度，是o(n)","因此无法执行有效的转换。","因此返回","因此，在最坏的情况下我们需要移动","因此，当","围绕的区域，并将这些区域里所有的","固定i，调整j和k","图中垂直线代表输入数组","图中阴影部分为所能勾勒出的最大矩形面积，其面积为","在","在[left,","在一个位置能容下的雨水量等于它左右两边(并不要求最近的最高)柱子最大高度的最小值减去它的高度.比如下图所示,","在一个字符串(0","在一个由","在上一个动态规划上进行优化","在上图中，我们可以看到以","在二叉搜索树中","在介绍前缀，后缀表达式之前，我想先通过我们最熟悉的中缀表达式画出一棵语法树来直观认识前后缀表达式。以a+b(c","在倒叙遍历，如果前一位比后一位高分并且得到的糖果小于或等于后一位，就给前一位孩子比后一位孩子多一个糖果","在原矩阵上进行查找","在左边和上边各加一条边界","在左边和上边各加一条边界（简写）","在序列中找出左子树","在找到一个合法节点后需要去探知其附近的合法节点，直到这一个区域内符合合法节点的节点都被找到。","在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数p。并将p对1000000007取模的结果输出。","在未排序的数组中找到第","在第","在节点","在返回结果后，两个链表仍须保持原有的结构。","在这种情况下,","在这给其他now赋值","在这进行res结果更新","在这里前面的元素就是","在遍历列表时，将当前节点的","地址格式。","均不以零开头，除非是数字","堆排序","堆排序（大根堆）","填充。","处理只有一对()情况,不加判断,结果为4，当只有一对括号时，不需要向前扩展了","处理独立的括号对的情形","备用法（未实现）:","复原ip地址","复原ip地址_leetcode_93","大于0，就是走n步","大家首先想到的是顺序扫描法，但是这种方法的时间复杂度是o（n^2）。接着大家又会考虑用哈希表的方法，但是空间复杂度不是o（1）。","大根堆","天","天和第","天接连购买股票，之后再将它们卖出。","天的价格。","天（股票价格","头插法","奇偶情况都考虑","奇数个,又因为fast一次跳两个,所以第一次跳到3,第二次跳到5,所以当元素个数为奇数时候,fast.next为空,返回slow.next","如","如2","如baa，b只与第一个a交换，与第二个a不交换。去重复。","如s1='a'，s2","如s1='abc'，s2","如s1='ac'，s2","如s1='ad'，s2","如上图的前缀表达式为","如下","如下面的两个链表：","如下：","如何从5亿个数中找出中位数","如何找所有位置的左右两边的柱子的最大值?","如数组[6,","如果","如果j位的数值比i位小，则可加入i位的lis比较队列","如果nums[mid+1]","如果nums[mid]","如果s【n","如果不为空，分别求左子树的深度和右子树的深度，取最大的再加1。","如果不存在公共前缀，返回空字符串","如果两个串长度不相等，则s1要想成为s2的子序列，则我们可以","如果两个链表没有交点，返回","如果两棵二叉树root1,root2相等，那么root1与root2节点值相同，同时他们的左右孩子也有相同的结构，且值root1.data","如果二叉树为空，则深度为0","如果从某一个字符开始，两串对应字符不相等，得重新计数","如果任何值在数组中出现至少两次，函数返回","如果你已经完成了o(n)","如果你已经实现复杂度为","如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。","如果先执行fpre.next","如果字符串至少有一个字符并且所有字符都是字母则返回","如果它没碎，那么我们肯定知道","如果当前值tmp","如果当前值tmp>r2且不等于r1：r3=r2,r2=tmp","如果当前值tmp大于r3且不等于r2,r3","如果当前节点是叶子节点,且路径之和等于sum","如果我们在使用摩尔算法时，同时记录两个大多数，会怎么样呢？直觉告诉我，这会得到一个大多数，和一个出现次数仅次于大多数的数，但是这两个数不一定会比数组长的1/3大","如果我们要求a的平方根，首先令f(x)=x^2","如果扫描到操作数，则压进s2，如果扫描到操作符，则从s2弹出两个操作数进行相应的操作，并将结果压进s2(s2的个数出2个进1个),","如果数列第i项在之前出现过，那么我们需要找到第i项对应的字符在前i","如果数列第i项没有在之前出现过，那么dp[i]","如果数据个数为奇数，则，中位数出现在元素个数多的堆的堆顶中","如果数据流中","如果数据流中所有整数都在","如果有两个1，一定不是2的幂）","如果有两个中间结点，则返回第二个中间结点。","如果此时上边大于下边，说明此时已经遍历完成了，直接break","如果没有旋转，则第一个元素小于最后个元素，直接返回第一个元素","如果没有相等元素，最后left>right,且left=right+1","如果现在re的长度加上后面能加上的所有的长度已经小于k了）,那么也剪枝","如果碰到空发现已经结束，则无环","如果节点总数不是","如果负数，不是回文数；如果个位数是0（除0这种特殊情况），不是回文数","如果都不为空，则返回左子树和右子树深度的最小值。","如果采用k倒着从大到小计算","如果重复元素有很多个连着的，需要走到重复元素的最后一个","如果链表无环，则返回","如果问题规模小于等于1，直接解决","如果题目增加难度,说如果n不满足条件,就返回none,就可以用下面两句","如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。","子串","子序列","子数组","子问题无解","子集","子集(leetcod","子集_leetcod","字典","字典法","字典这么取值是错的","字符中没有空格","字符串","字符串全排列","字符串列表","字符串只包含从","字符串的反转","字符串的当前字符","字符串相乘(leetcod","字符串相乘__leetcod","字符串相加(leetcode_415)","字符串相加_leetcode_415","字符串转换整数","字符串：s串","存储下一个无序区节点","存在重复元素","它可以解码为","它是一个负号。","它的周长是下面图片中的","完全背包问题","实现","实现一个","实现上，我们需要建立一个26大小的数组以容纳不同字母结尾的字符串个数。每当我们遍历到一个新的字母时，","实现思路：给定四个边界，left","对两棵树只进行了一次遍历，所以时间复杂度为o(n),空间复杂度为o(1)","对于%50的数据,size示例1","对于4，如果不用max(dp[j]+1,dp[i]),那","对于上面这个给定的矩阵,","对于上面这个给定矩阵应返回","对于二叉树，很多题既要判断根节点，还有判断左节点，右节点，这个题也是，如果只判断根节点，就会出错","对于给定的","对于这个问题，如果你注意到下面的这个规律话就非常简单。","对于这个题，如果从左到右，矩形的高度依次递增（可以不是严格递增），那么我们求解方法为：","对于这种螺旋遍历的方法，重要的是要确定上下左右四条边的位置，那么初始化的时候，上边up就是0，下边down就是m","对于链表的问题，根据以往的经验一般都是要建一个dummi","对每一行进行应用单调递减栈","对第一行第一列特殊处理","对角线意味着匹配串是否匹配对应的字符串","对链表进行插入排序","对链表进行插入排序_leetcode_147","对链表进行插入排序。","寻找两个有序数组的中位数","寻找出队元素的（符合条件的）最近节点","寻找插入点使用二分法，但与寻找某数字不同的是，需要考虑一些边界条件：","寻找旋转排序数组中的最小值","寻找旋转排序数组中的最小值(leetcode153中等)","寻找旋转排序数组中的最小值_含重复元素_leetcode_154","寻找旋转排序数组中的最小值（leetcod","寻找选择排序数组中最小值leetcode_153中等","将'('改为')',')'改为'(',注意其中一个判断优先级的地方需要由>=变成>.","将num添加入dp","将s[i]压栈;","将s[i]添加到输出串中;","将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。","将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。","将其展开为：","将在","将奇数放在偶数的前面","将它们合并为","将所有相邻节点加入队列","将排序好的数据，拼接成字符串","将数组中的值替换","将数组的奇数放到偶数的前面","将有序数组转换为二叉搜索树](https://leetcod","将有序数组转换为二叉搜索树_leetcod","将翻转部分","将计算好的值，赋给上一行","小写字母要减65再减6","小牛向右看_poj_3250","就像爬楼梯，一样，要爬到10楼，先看能不能爬到1楼，2楼等","就可以只存一行的dp[k]","就地反转","就是一个排序二叉树的后序遍历，而[7,10，8,9]则不是","就是检验是否走重复的路，我们也可以额外定义一个标志数组","就是走logn步","就说明是循环，而不是靠func传没传left和right决定","尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。","尽管","尾，还要找到中间那个数，然后和left指的数比较，如果中间的数大，则继续二分查找右半段数组，反之查找左半#","层楼的建筑。","层次遍历","层次遍历简写","层次遍历（每层单独输出）","岛屿","岛屿中没有“湖”（“湖”","岛屿周长_leetcode_463","岛屿的个数","岛屿的周长","岛屿的最大面积(leetcode_695)","岛屿的最大面积_leetcode_695","左包右不包","左右两边不可能盛水，所以跳过，不遍历","左右两边界不能装水，所以我们不需要","左右两边都有数","左右移动。","左子树节点小于根节点","左括号必须以正确的顺序闭合。","左括号必须用相同类型的右括号闭合。","左旋","左边left是0，右边right是n","左边是碎的那段","左边有序，去左边找","已知升序整数数组a【l】,b【m】,c【n】,请在三个数组总各找一个元素，使得组成的三元组的距离最小，三元组距离的定义为dist","已经排好序了，","平方数之和(leetcode_633)","平方数之和_leetcode_633","平衡二叉树(leetcode_110)","平衡二叉树前序遍历是递增的，列表中间点是根节点","并且让到达末尾的指针指向另一个链表的头结点.","广度搜索，入队可以将所有0都先入队，作为队头节点","序列化","库，","应该怎么做才能即满足时间复杂度是o（n）又满足空间复杂度是o（1）的要求呢？","应该这样：","延伸一","延伸二","建立数组dp[][]来存储","开头。","开始对两个","开始比较第二个成员，第二个成员是一个listnode，没有比较方法，在处理这个问题上","开始相交。","开始）。","开始，后面的每一项数字都是前面两项数字的和。也就是：","开括号'('出栈并丢弃;","异或","异或操作","异或操作满足交换律和结合律","异或法","异或解决","归并排序","归并排序采用分治思想，首先使其子序列成为有序序列，然后再对子序列进行归并。","归并，现在左右两个列表已经是有序的了","当","当fast走到头时，second即是要删除节点的前一个节点位置","当s[a:b]==s[a:b][","当删除了倒数第二个节点后，链表变为","当前数组有序","当前柱子高度比左右两边都高，则该处不能盛水，跳过","当前节点","当字符串是空串时，匹配串不为空，根据规则,","当对一个","当扫描结束后，s2的栈顶就是表达式结果。","当插入数字和nums中某数字相等时，插入到左边还是右边？本题要求插到左边；","当数组的数","当明天的价格比今天的价格贵的时候我们今天买，明天卖，这样能够获取最大利润。","当线的总数为5条的时候，先手先划掉一条线，后手就等于是在4条线的情况下先手，自然后手输。","当被除数大于等于除数时(否则的话就为0了),我们设置两个变量tmp_cs和tmp_res,并分别初始化为临时除数(除数后面会变化,过一会就知道了)和1(最小的情况),当被除数大于等于tmp_cs的二倍时bcs>=(tmp_cs=8*2,所以我们有两个8,所以tmp_res扩大两倍,除数也变为原来两倍16,继续循环,被除数47>=16*2,所以tmp_r","当链表长度为偶数时，慢指针所指节点和所指节点的下一节点都是链表的中间节点","当链表长度为奇数时，快指针走到链表尾部时，慢指针恰好指向链表的中间","很多人很难理解为什么上面这种写法是回溯法，其实我们将push和pop的过程合到了一块，我在之前的一些问题中也没说明，所以在此解释一下。","很有趣，前两个链表的第一项比较结果都相同（","得到的商。","循环实现二分搜索","循环版本","循环结束后bottom","循环结束后left+1","循环结束后right","循环结束后top+1","循环结束条件为index","循环这么多次","必须为","必须小于","必须这样，而不能直接在if语句返回","忍不住想吐槽leetcode，日你妈，题目说明不完善，操你大爷的！！！！","快慢指针","快慢指针，不过最后要分奇数、偶数讨论","快慢指针，写成一个函数","快慢指针，写成两个函数","快速排序","快速排序解决奇偶问题","思路","思路:","思路一：数组排序后，如果符合条件的数存在，则一定是数组中间那个数。（比如：1，2，2，2，3；或2，2，2，3，4；或2，3，4，4，4等等）","思路：双指针法。","性质","总体来讲，前缀树的构造过程，通过不断插入新的字符串来丰富这棵26叉树。强调注意这里是26叉树，因为每一个英文字符串中下一个字母都只能是a","总是合理的，且","总是有效的，1","总是有效的，且","您可以假设除了数字","成为一个有序数组。","我们一直有一个条件没有使用","我们也可以通过回溯法来解决。","我们会在[0:2]这个区间查找对应元素，但是这样是错误的，这个区间并不是递增区间。那要怎么做呢？","我们使用一个最大堆，然后遍历数组每一个元素，将其加入堆，根据最大堆的性质，大的元素会排到最前面，然后我们看当前堆中的元素个数","我们依次对数组中的每个数字做异或运行之后，得到的结果用二进制表示是0010。异或得到结果中的倒数第二位是1，于是我们根据数字的倒数第二位是不是1分为两个子数组。第一个子数组{2,3,6,3,2}中所有数字的倒数第二位都是1，而第二个子数组{4,5,5}中所有数字的倒数第二位都是0。接下来只要分别两个子数组求异或，就能找到第一个子数组中只出现一次的数字是6，而第二个子数组中只出现一次的数字是4。","我们假设子序列可以为空，最后的结果减一就可以得到正确答案，dp[i]表示数组前i项构成的不同子序列个数，","我们先不看找到俩个的情况，先看这样一个问题，如何在一个数组中找到一个只出现一次的数字呢？比如数组：{4,5,5}，唯一一个只出现一次的数字是4。","我们只需修改candidates为【i","我们可以想一想“异或”运算的一个性质，我们直接举例说明。","我们可以用一个栈s2来实现计算，扫描从左往右进行，如果扫描到操作数，则压进s2，如果扫描到操作符，则从s2弹出两个操作数","我们可以观察发现，如果","我们定义格雷编码序列必须以","我们寻找最近的空节点进行插入，所以是广度遍历","我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到","我们希望","我们归并的起点为m","我们是按照从左向右的顺序存储的数字。我们注意到对于index:i和index:j相乘的话，结果在index:i+j和index:i+j+1上。","我们知道reverselist(head)返回输入的链表反转后的head，那么如果reverselist(head.next)的话","我们知道异或的一个性质是：任何一个数字异或它自己都等于0。也就是说，如果我们从头到尾依次异或数组中的每一个数字，那么最终的结果刚好是那个只出现一次的数字。比如数组{4,5,5}，我们先用数组中的第一个元素4（二进制形式：0100）和数组中的第二个元素5（二进制形式：0101）进行异或操作，0100和0101异或得到0001，用这个得到的元素与数组中的三个元素5（二进制形式：0101）进行异或操作，0001和0101异或得到0100，正好是结果数字4。这是因为数组中相同的元素异或是为0的，因此就只剩下那个不成对的孤苦伶仃元素。","我们知道想要容乃的水最多，最好的情况是l和r都是最大，然后二者离的最远，但是这是理想情况，我们最一般的情况是二者离的足够远，但是二者都不是很大,二者都很大，但是二者离的近","我们要将l=i+1、r=len(nums)","我们要求每一个矩形高度，左边和右边第一个小于该矩形高度的下标。","我们还是从头到尾一次异或数组中的每一个数字，那么最终得到的结果就是两个只出现一次的数组的异或结果。因为其他数字都出现了两次，在异或中全部抵消了。由于两个数字肯定不一样，那么异或的结果肯定不为0，也就是说这个结果数组的二进制表示至少有一个位为1。我们在结果数组中找到第一个为1的位的位置，记为第n位。现在我们以第n位是不是1为标准把元数组中的数字分成两个子数组，第一个子数组中每个数字的第n位都是1，而第二个子数组中每个数字的第n位都是0。","我们需要进行插入、删除和修改操作将a串变为b串，定义c0，c1，c2分别为三种操作的代价","或","或者","房屋可盗窃的最大值加上当前房屋的值，二者之间取最大值","房屋可盗窃的最大值，要么就是","所以","所以,问题就变成了:","所以你会发现8条也是必输，8条线可以分成两个部分，每个部分四条线。自然先手还是必输。4这个数字还真是不太吉利。","所以可以说数组中的负数已经按照平方值降序排好了，数组中的非负数已经按照平方值升序排好了。","所以我们一开始从两边考虑就是考虑的第一种可能。如果这个时候num[l]","所以我们可以看出，我们只要远离”4“就行了。当线的总数不是4的倍数的时候，先手必赢。","所以我们得到它们后，还需要检查它们出现的次数是否符合条件。","所以我们要把a【i】等于0时，置为1","所以最大利润为","所以有","所以要再加上6个长度","所以进栈出栈都是操作元素下标，然后我们可以通过元素下标获取元素","所以递推公式是","所以，$n{k}nk.next.next","所以，我们的问题就变成如何找","所使用的最少操作数","所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。","所有可能的分割方案。","所有数字（包括","所有数字（包括目标数）都是正整数。","所有根节点到叶子节点的路径为:","所有节点的值都是唯一的。","所有输入只包含小写字母","所有长度为i+1的递增子序列中,","所求解集为:","所谓匹配，是要涵盖","所需的最小操作数","打印1~n,短路原理","打家劫舍","打家劫舍(leetcode_198)","打家劫舍2_leetcode_213","打家劫舍_leetcode_198","扔下（满足","扫描到的操作符优先级比栈顶操作符高)","找出异或结果中其中一位为1的位置","找出数值中前k大","找出数组中2个出现一次的数","找出数组中出现次数为奇数次的数","找出数组中出现次数为奇数次的数（异或法）","找出数组中前k大","找出数组中唯一重复的元素","找出数组中第k大的数","找出路径和等于给定数值的路径总数。","找到所有被","找到最高点","找到最高点,然后从左右两边遍历到中间","找到离0最近的值，向两边遍历","找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)","找到该树中两个指定节点的最近公共祖先。","找最高点，然后从左右两边遍历到中间","把","把遍历到的节点插入到头结点后面去","拆分时可以重复使用字典中的单词。","拿十进制举例:29除以8，8扩大二倍，16小于29，再扩大二倍，超过29，于是29减去之前的16(我们保存了的)，返回值加上2(因为现在我们除的是16,16是8的2倍)。剩余除数为29","指向","指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为","指针对撞法","指针指向该结点的下下个结点。","指针改为指向前一个元素。由于节点没有引用其上一个节点，因此必须事先存储其前一个元素。在更改引用之前，还需要另一个指针来存储下一个节点。不要忘记在最后返回新的头引用！","按照这个思路分析一下[7,10,8,9]为什么不是，首先9为根节点，从数组左侧找到比8小的元素组，该元素组的最后一个元素是7，因此，左子树应该是7，而剩下的[10,8,9]应该是右子树，右子树应该满足的条件是每个数字都比根节点9大，然而8比9小，所以不满足","排列组合","排序时，","排序，取数组中间那个数","接雨水(leetcode_42)","接雨水_leetcod","接雨水_leetcode_42","提示：","插入一个字符","插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。","插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。","插入排序算法：","插入数字在nums第一个数字左边，或在最后一个数字右边；","插入法","搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回","搜索二维矩阵","搜索二维矩阵(leetcod","搜索二维矩阵_leetcod","搜索插入位置(leetcode_35)","搜索插入位置_leetcode_35","搜索旋转排序数组","搜索，若搜索出的路径与","摩尔投票算法","摩尔投票算法可以快速的计算出一个数组中出现次数过半的数即大多数（majority），算法核心思想是同加，异减。我们举个例子。","摩根投票法","操作符出栈并加到输出串中","改为：tail.next","数字","数字1~1000存放在含有1001个元素组成的数组中，其中只有唯一的一个元素值重复，其他数字只出现一次，设计一个算法，将重复元素找出来，要求每个元素只能访问一次，如果不使用辅助存储空间，能否设计一个算法实现？","数字。","数字在排序数组中出现的次数","数字拼接后最大","数字运算","数学云算法","数据流的中位数(leetcod","数据流的中位数_leetcode_295","数据结构设计","数据结构设计(leetcod","数组","数组nums[i]表示前i字符串最小的分割次数，那么在遍历过程中需要知道j至i的字符串是否为回文串。","数组中不相同的元素的个数。","数组中元素全部相等，例如【1，1，1，1】","数组中只出现一次的数_两个","数组中大部分元素相同，如【1，0，1，1，1】","数组中存在重复元素，所以每次只缩小一个查找范围","数组中有n+2个数，其中n个数出现了偶数次，2个数出现了奇数次（这两个数不相同），请用o（1）的空间复杂度，找出这两个数，注意，不需要找出位置。","数组中的最大者","数组中第k大的数","数组定义为：以","数组尾部","数组无序","数组有序，用二分","数组本身没有旋转，是一个有序数组，例如[1,2,3,4]","数组的端点，不可能盛水，所以跳过，不用遍历","数组的长度。","整个","整个字符串。","整数反转","整数反转(leetcod","整数逆置","整数除法只保留整数部分。","文件名","斐波拉契数列第n项","斐波那契数(leetcode_509)","斐波那契数，通常用","新建立一个新的链表。建立两个指针cur1和cur2，分别指向两个链表。然后只需要通过比较两个链表每个元素的大小，小的元素添加到新的链表中即可。最后，我们要分别判断cur1和cur2是否是各自链表的末尾，如果不是，将剩余元素添加到新的链表末尾即可。","方法检测字符串是否只由字母组成。","方法检测字符串是否由字母和数字组成。","方法非常简单，就是利用辗转相除发，","方法：双指针二分法","旋转字符串__leetcode796","旋转字符串（leetcode796）","旋转完毕，断开换","旋转数组","旋转链表(leetcod","旋转链表__leetcod","旋转，直接返回这个数。如果第一个数大，就要进一步搜索。我们定义left和right两个指针分别指向开头和结","无法匹配","无论","无重复字符的最长子串","既然中缀表达式对于计算机的运算并不便利，而前缀后缀表达式的计算相对简单方便。因此，找到一种途径将中缀表达式","既然是后序遍历，则数组最后一个数值肯定是根节点，而从左到右，剩下数组元素的左侧值肯定小于根节点值，而其余的数组元素则大于根节点，例如[5,7,6,9,11,10,8]这个数组，8肯定是根节点，而从数组左侧到5~6三个数比8小，肯定是左子树，而剩下的9~10应该就是右子树，右子树应该满足每个数字都比根节点大，如果满足的话，我们再把[5,7,6]和[9,11,10]两个部分的数组元素重复进行之前的操作，知道结束","时候，已经设置好了，所以这儿不用再次初始化","时才有交换的价值","时间复杂度为o(n)。","时间复杂度内完成此题。","时间复杂度和","时间复杂度和常数级空间复杂度下，对链表进行排序。","时间复杂度的解法,","时间复杂度的解法。","时间复杂度（o(n)）:","时间复杂度，且仅用","时间复杂度：o(n),n","时，其格雷编码序列为","时，应当返回:","时，长度为","明确一点,10进制数扩大两倍,左移一位","是","是1","是一个子序列，不是子串。","是一个正整数。","是一个正整数，它的值小于或等于链表的长度。","是以i","是否re","是否为空，不为空，我们弹出队首元素（1），接着判断这个弹出的元素作为一个链表节点，其后是否还有元素，如果有元素，将元素加入队列。同时将结果加入到result中","是否可以被空格拆分为一个或多个在字典中出现的单词。","是否大于k，大于的话就将首元素去掉，循环结束后我们返回堆中的首元素即为所求:","是多少。","是数组的大小。","是由四个方向","是该条件下的长度最小的连续子数组。","是非负数。","是非负整数。","显式回溯","普通法查找","暴力法","暴力法，","暴力解决","替换一个字符","替换为","替换思路","替换成","最优方法","最前面一个元素一般为","最后return加和中最大值。","最后不能返回head,因为【1，1，2，3】","最后生存下来的节点","最后要全部走一遍，看最大值","最多能够确定的楼层数为l","最大前缀和","最大子序和(leetcod","最大子序和_leetcode_53","最大子序和leetcod","最大数","最大数(leetcod","最大正方形(leetcod","最大正方形_leetcod","最大矩形(leetcode_85)","最大矩形_leetcode_85","最大矩形区域包含选定柱子的区域。","最大矩形区域在不包含选定柱子的右半区域当中。","最大矩形区域在不包含选定柱子的左半区域当中。","最大结果","最大连续子序列是所有连续子序中元素和最大的一个，例如给定序列{","最小堆元素个数大于","最小的k个数","最小的那个序列尾数.","最小编辑距离","最小距离法，数学运算法","最小路径和(leetcod","最小路径和_leetcod","最左边的字符移动到最右边。","最差情况是1个鸡蛋走n步","最接近。返回这三个数的和。假定每组输入只存在唯一答案。","最接近的三个数的和为","最接近的三数之和","最正确的代码","最简单的思路就是，就是暴力法，直接分别在","最终res的值为8","最终都会被填充为","最长上升子序列(leetcod","最长上升子序列_leetcod","最长公共前缀（腾讯）","最长公共子序列","最长公共字符串","最长子串","最长字符串","最长有效括号(leetcode_32)","最长有效括号_leetcode_32","最长有效括号子串为","最长的上升子序列是","最长连续递增序列","最长连续递增序列_leetcode_674","最长连续递增序列是","最长递增子序列的个数(leetcode_673)","最长递增子序列的个数_leetcode_673","最长递增子序列的长度是1，并且存在5个子序列的长度为1，因此输出5。","最长重复子数组(leetcode_718)","最长重复子数组_leetcode_718","有一群牛站成一排，每头牛都是面朝右的，每头牛可以看到他右边身高比他小的牛。给出每头牛的身高，要求每头牛能看到的牛的总数。","有三种方法可以爬到楼顶。","有两个最长递增子序列，分别是","有两种情况，一是要找的这两个节点（a,","有两种方法可以爬到楼顶。","有了差异，","有序数组的平方(leetcode_977)","有序数组的平方_leetcode_977","有序矩阵中第k小的元素","有序矩阵中第k小的元素_leetcode_378","有效字符串需满足：","有效的括号(leetcode_20)","有效的括号_leetcode_20","有效的运算符包括","有最大乘积","有毛病吧，不带头结点的链表","有足够的空间（空间大小大于或等于","未写代码","本来是","本身。","本题中，一个高度平衡二叉树是指一个二叉树每个节点","本题中，一棵高度平衡二叉树定义为：","本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。","机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“finish”）。","条不同的路径：","条垂直线，垂直线","条路径可以到达右下角。","来查找其中第","来表示。","来表示链表尾连接到链表中的位置（索引从","构成三角形的个数","构成的。","构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。","某","查找距离某个值最近的下标","查找链表倒数第n个节点","柱状图中最大的矩形(leetcode_84)","柱状图中最大的矩形_leetcode_84","栈","栈中运算符逐个出栈并输出，直到遇到开括号'(';","栈元素出栈","栈的最底部，叫做栈底","栈顶为'('","树的创建,创建一个树的类，并给一个root根节点，一开始为空，随后添加节点","根据一棵树的中序遍历与后序遍历构造二叉树。","根据匹配规则，比较匹配串*的前一个字符","根据逆波兰表示法，求表达式的值。","根据递推公式","格雷编码(leetcod","格雷编码_leetcode_89","格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。","检测是否有序并寻找右侧节点","楼层或比它低的楼层落下的鸡蛋都不会破。","楼掉落。如果它碎了，我们肯定知道","次以确定","次的元素。","正则表达式匹配(leetcode_10)","正则表达式匹配_leetcode_10","正常情况：","正常解法","正序输出","此方法也可以用一个更生动的例子来形容：在一个环形跑道上，两个运动员在同一地点起跑，一个运动员速度快，一个运动员速度慢。当两人跑了一段时间，速度快的运动员必然会从速度慢的运动员身后再次追上并超过，原因很简单，因为跑道是环形的。","此时我们只要将数组中所有结果加起来然后再加1即为以新的字母为结尾的字符串总数。最后我们只要将数组中的结果加起来即可。","此时，n","此题中，我们使用整数","步:","步就一定能到达终点。","步，向右","步，而第二个指针将从列表的开头出发。现在，这两个指针被","段。终止条件是当左右两个指针相邻，返回小的那个。","每个值","每个孩子至少分配到","每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。","每人每步最多划三条线，所以线的总是至少为4条。当线的总数为4条的时候，不管先手划几条线，后手都有应对的方法，先手必输。","每列的元素从上到下升序排列。","每层节点","每弹出一个元素，就计算比当前弹出元素小的元素有多少个","每次你可以爬","每次取出来的都是数字，而不是运算符","每次插入一个元素后，就把堆里面的大元素丢出去，因此堆里面剩下的都是小的元素，同时我们需要维护堆的大小为k","每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层","每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。","每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。","每次都插入到最小堆，然后，将最小堆里面的栈顶元素，","每行中的整数从左到右按升序排列。","每行的元素从左到右升序排列。","每行的第一个整数大于前一行的最后一个整数。","比如2，1","比如，m=3,","比较首元素，然后依次加入优先队列（或者一个堆，我这里使用堆）","求1+2+3+...+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（a?b:c）。","求10100001中1的数量是奇数还是偶数；","求众数","求众数(leetcod","求众数_leetcod","求出两个链表a和b的长度,","求在该柱状图中，能够勾勒出来的矩形的最大面积。","求左边，右边两边的下标，所以要在原始数组左右各添加一个无穷小（或者原始数组中的最小值）","求数组中两个元素的最小距离","求最小三元组距离","求树的节点数量","求每个数和它右边第一个比它大的数之间的数的个数，分别求出后相加即可。","没有交易完成,","没有发生交换，排序结束","没有就新建{}，有就利用char对应的{}","没有括号,也叫做括号匹配","没有旋转","没有重复出现","沿着匹配串和字符串构成矩阵的对角线传递状态","法2","法2(推荐)","法一","法一简单修改","法一：将2进制数转为10进制计算，然后转化为二进制","法一：超时","法一：转化为列表","法二","法二：不转化为列表","法二：模仿10进制，字符串相加，这儿我们同样可以将直接利用字符串，也可以将字符串先转化为列表。","波兰式、逆波兰式与表达式求值","注1：因为第三种情况跨越了中间边界，且要求的序列为连续的，因此第三种情况得到的子序列必定包含左子序列","注1：因为第三种情况跨越了中间边界，且要求的序列为连续的，因此第三种情况得到的子序列必定包含左子序列的最后一个元素以及右子序列的第一个元素。","注2：若要求的序列可以为不连续的，则第三种情况可以直接用前半部分最大子序列和与后半部分最大子序列和相加得到","注意:","注意你不能在买入股票前卖出股票。","注意你不能在第","注意你可以重复使用字典中的单词。","注意利润不能是","注意去重","注意取整数","注意数组中可能存在重复的元素。","注意空字符串可被认为是有效字符串。","注意这儿func（i）而不是func(i+1)","注意这儿的调用，不是func(root.left,","注意这儿，字符串长度减一,因为上面的if判断，等于校验了最后个字符，比如word='ab',","注意，我们返回了一个","注意：","注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。","注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。","注意：我们必须先定义一个头结点","注意：我们数组的最后个元素进栈后，由于后面没有元素了，所以无法和其他元素进行比较，也就无法出栈，所以我们需要在数组最后添加一个元素，该元素为无穷大，或者无穷小。具体情况看是单调递增还是单调递减栈。如果是单调递减栈，数组最后添加一个无穷小，如果是单调递增栈，数组最后添加一个无穷大元素","注意：数组长度不会超过10000。","注意：答案中不可以包含重复的三元组。","注意：给定","注意：这儿为什么是word1[i","注意：这儿是nums[:],而不是num","注意：这儿是将矩阵编程以为列表","注意：这是n行m列","测试用例","深度优先遍历,","深度搜索","添加与搜索单词","添加的新值的首下标","添加访问标志","清楚易懂","滑动窗口法","满足两个特性：","满足目标状态,进行操作","满足要求的三元组集合为：","然后判断这个","然后取最大的3个数相乘，或者最小的两个数（负数）和最大的一个数相乘","然后同时遍历返回第一个公共节点.","然后每次进行四遍循环，","然后算乘除，最后算加减，但是，计算机处理中缀表达式却并不方便，因为没有一种简单的数据结构可以方便从一个表达式中间抽出","然后遍历数组","然后，我们观察可以发现，如果，数据总数是偶数，那么大顶堆，和小顶堆，","爬楼梯","牛顿法","牛顿法**","特例：","特殊处理","状态矩阵的首行与首列对应于空字符与空匹配符","环形单链表约瑟夫问题","环形链表","环形链表(leetcod","环形链表_leetcod","现在你作为先手，在线条总数为多少的时候，你必赢呢，又在多少的时候必输呢？","现在好了，我们已经知道了如何找到一个数组中找到一个只出现一次的数字，那么我们如何在一个数组中找到两个只出现一次的数字呢？如果，我们可以将原始数组分成两个子数组，使得每个子数组包含一个只出现一次的数字，而其他数字都成对出现。这样，我们就可以用上述方法找到那个孤苦伶仃的元素。","现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？","现将序列等分为左右两份，则最大子列只可能出现在三个地方：","现有一个链表","现有矩阵","用","用height_j记录第i行为底,第j列高度是多少.","用left_j记录第i行为底,","用right_j记录第i行为底,","用while","用while循环将nums2依次添加到nums1","用于包含右边第一个数的累加求和","用于累加求和开始","用列表a=[0,1,2,3,4,5,6,7,8,9,’a’,’b’,’c’,’d’,’e’,’f’]储存转换之后的每一位，直接用余数作为指针即可找到对应的符号。","用动态规划先求出包括空序列的所有子序列，再返回答案之前再减去空序列。","用单调递增栈","由于不可以在相邻的房屋闯入，所以在当前位置","由于岛屿内没有湖,所以只需要求出","由于有正负，所以每次相乘完毕后，应该保留最大和最小值，也就是最大正数，最小负数","由于该列表有两个中间结点，值分别为","由于返回类型是整数，小数部分将被舍去。","由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。","由函数f(x)=x^2","由前缀表达式求出结果十分方便，只需要用一个栈实现：","由前缀表达式求出结果有下面两种思路：","由定义知dp数组必然是一个递增数组","略显复杂","百度百科中最近公共祖先的定义为：“对于有根树","的","的下一个必须指向","的下一个节点指向$n{k}nk$。","的下标为","的不同非空子序列的个数。","的两个端点分别为","的两个结点","的中位数是","的乘积，它们的乘积也表示为字符串形式。","的二维二进制矩阵，找出只包含","的二维网格地图，其中","的位置","的值均不超过","的值是多少。","的值永远是有效的,","的值的最小移动次数是多少？","的值至少为","的值：","的元素。","的元素。那么问题就很容易了，我们可以先将nums排序，然后返回中间元素的值即可（众数的个数大于一半，排好序的nums中间元素一定是众数）","的元素数量分别为","的初始值如何，你确定","的原地算法。","的含义是k个鸡蛋","的和最大，为","的子序列，","的字符串，判断字符串是否有效。","的字符串，找出最长的包含有效括号的子串的长度。","的小写字母。","的小写字母。字符串的最大长度是50000。","的小写字母，以及字符","的左右两个子树的高度差的绝对值不超过","的左右两个子树的高度差的绝对值不超过1。","的幂次方。","的平方为","的平方根(leetcode69简单)","的平方根是","的平方根，其中","的延伸题目，本题中的","的形式给出。","的总和最小。","的情况。","的成员依次比较，如果两个成员相同就再比较下一个成员。问题中的","的数字。","的数组，找出其中所有出现超过","的数组，找到其中的众数。众数是指在数组中出现次数大于","的整数。","的整数倍，那么请将最后剩余的节点保持原有顺序。","的整数数组","的整数都在","的方式存储的，并且它们的每个节点只能存储","的旋转操作就是将","的最后一个元素以及右子序列的第一个元素。","的最大和","的最大正方形，并返回其面积。","的最大矩形，并返回其面积。","的最近公共祖先是","的最近公共祖先是节点","的有序数组","的有序数组，找到两个数使得它们相加之和等于目标数。","的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。","的根节点到叶子节点的路径","的格雷编码序列，其长度为","的楼层落下的鸡蛋都会碎，从","的正则表达式匹配。","的正方形。网格为长方形，且宽度和高度均不超过","的每个元素都将在","的消息通过以下方式进行了编码：","的深度尽可能大（一个节点也可以是它自己的祖先）。”","的祖先且","的立方体。","的第三个节点，那么在调用了你的函数之后，该链表应变为","的第二个节点，那么在调用了你的函数之后，该链表应变为","的组合。","的网格。有多少可能的路径？","的网格上，我们放置一些","的解法，尝试使用更为精妙的分治法求解。","的距离。","的路径有:","的通配符匹配。","的链表。请使用一趟扫描完成反转。","的链表测试代码，则可能会捕获此错误。","的链表用来表示两个非负的整数。其中，它们各自的位数是按照","的长度。","的长度和宽度都不超过","的长度小于110。","的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回","的长度都小于","的长度，\"pwke\"","的非空单链表，返回链表的中间结点。","的额外空间解决这一问题。","盛最多水的容器","直接原地更新dp[k]","相交链表","相交链表(leetcod","相同元素异或等于0，0与任何元素异或为该元素","相连的","相邻的孩子中，评分高的孩子必须获得更多的糖果。","看到这里，恭喜你掌握了必胜法则，下次各位盆宇就可以用这个游戏跟别人打赌了。","矩形高度矩阵，然后对每一行应用单调栈","矩阵","矩阵(leetcode_542)","矩阵中的元素只在四个方向上相邻:","矩阵中，是否存在一个目标值。该矩阵具有如下特性：","矩阵，其中每行和每列元素均按升序排序，找到矩阵中第k小的元素。","码表中的可打印字符。","碰到一个题目，判断一个数组是不是排序二叉树的后序遍历，所谓排序二叉树，指的是对于二叉树中的根节点比左子节点数值大，同时比右子节点数值小，例如[5,7,6,9,11,10,8]","示例","示例1:","示例2:","示例:","示例：","祖先在右子树","祖先在左子树","种情况","移位法","移动m次最多能够确定多少楼层","程序尽量满足","空","空间复杂度","空间复杂度优化为2m","空间复杂度解决此题？","第j列右边第一个小于height_j[j]的位置","第j列左边第一个小于height_j[j]的位置","第一个","第一个while循环跳出后,","第一个只出现一次的字符","第一个指针从列表的开头向前移动","第一个非空字符是","第一个非空白字符为","第一次相遇，肯定是在环内，因为快指针比慢指针快一倍，所以，快指针比慢指针多走一倍路程，其中满指针走过的路程就是这一倍路程，快指针走的两倍路程是这样来的，慢指针的一倍路程，加上圆圈的长度（从相遇点出发，沿着环走，再次回到相遇点）。现在两个指针都剪掉，入环点到相遇点的路程，两边剩下的路程长度相同（慢指针到入环点，和快指针从入环点逆时针回到相遇点），所以，一个从head出发，一个从相遇点出发，走到入环点的路程长度相同。","第一趟冒泡：2，4，3，1","第一轮循环合并完后，由于可能nums2指针未走完(n>=0:nums2还有元素比nums1最小元素小)，需要将nums2剩余首部覆盖至nums1首部。nums1指针未走完不需要做任何多余操作，因为覆盖前后相同。","第三个孩子只得到","第三趟冒泡：4，3，2，1","第二个","第二个有序列表的第一个元素","第二种就是判断左子树或右子树是否为空，若左子树为空，则返回右子树的深度，反之返回左子树的深度，","第二趟冒泡：4，3，2，1","等于","等于3，当求10，dp['10']时候，10>4,则dp['10']","等于最大堆元素个数","等价","等价于前面一堆0，后面一堆1，寻找第一个1的位置","答案：1","简化","简洁方式","算法：中缀表达式转换成后缀表达式","类似()()、()(())","类型的对象","系统自带方法","累加求和就去另一个累加求和","级别。","组合(leetcod","组合_leetcod","组合总和","组合总和(leetcod","组合总和_leetcod","组合成的数字是10~26，则dp【n】","组成的。","组成的二维矩阵内，找到只包含","组成的矩阵，找出每个元素到最近的","组，然后返回由这些元组组成的列表","经典","经典回溯,深度优先","经典回溯，深度优先","经过上面的几个if判断后，如果能走到这一步，if","经过分析知道","经过分析知道,当left==right，调整已经完整，以tmp为界限的数组左边比右边小，所以我们当left","结尾的最长上升子序列的长度","结果不能为","结果：","给两个整数数组","给二叉树插入节点","给你一个字符串","给你一个链表，每","给出一个","给出一个区间的集合，请合并所有重叠的区间。","给出一组序列,序列中的元素都大于0，则该序列中元素可以构成多少个三角形","给出两个","给定","给定一个","给定一个二叉搜索树,","给定一个二叉搜索树，编写一个函数","给定一个二叉树,","给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。","给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。","给定一个二叉树，判断它是否是高度平衡的二叉树。","给定一个二叉树，原地将它展开为链表。","给定一个二叉树，它的每个结点都存放着一个整数值。","给定一个二叉树，找出其最大深度。","给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。","给定一个二叉树，返回其节点值自底向上的层次遍历。","给定一个二叉树，返回所有从根节点到叶子节点的路径。","给定一个二维的矩阵，包含","给定一个二维网格和一个单词，找出该单词是否存在于网格中。","给定一个仅包含","给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。","给定一个代表编码总位数的非负整数","给定一个包含","给定一个包含了一些","给定一个包含红色、白色和蓝色，一共","给定一个包含非负整数的","给定一个包括","给定一个只包含","给定一个只包含数字的字符串，复原它并返回所有可能的","给定一个只包含数字的非空字符串，请计算解码方法的总数。","给定一个只包括","给定一个可包含重复数字的序列，返回所有不重复的全排列。","给定一个可能包含重复元素的整数数组","给定一个含有","给定一个大小为","给定一个字符串","给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。","给定一个字符串，请你找出其中不含有重复字符的","给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。","给定一个已按照升序排列","给定一个带有头结点","给定一个按非递减顺序排序的整数数组","给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。","给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中","给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。","给定一个数组","给定一个数组，它的第","给定一个数组，将数组中的元素向右移动","给定一个数组，数组中含有重复元素，给定两个数字num1","给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。","给定一个整数数组","给定一个整数数组，判断是否存在重复元素。","给定一个整数，编写一个函数来判断它是否是","给定一个无序的整数数组，找到其中最长上升子序列的长度。","给定一个无重复元素的数组","给定一个未排序的整数数组，找到最长递增子序列的个数。","给定一个未经排序的整数数组，找到最长且连续的的递增序列。","给定一个正整数","给定一个没有重复数字的序列，返回其所有可能的全排列。","给定一个由","给定一个链表:","给定一个链表，删除链表的倒数第","给定一个链表，判断链表中是否有环。","给定一个链表，旋转链表，将链表每个节点向右移动","给定一个链表，返回链表开始入环的第一个节点。","给定一个非空二叉树，返回其最大路径和。","给定一个非空字符串","给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。","给定一个非空的整数数组，返回其中出现频率前","给定一个非负整数","给定一组不含重复元素的整数数组","给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。","给定一颗二叉树，它的每个节点都是正数或负数，如何找到一颗子树，是的该子树和最大","给定不同面额的硬币","给定两个二进制字符串，返回他们的和（用二进制表示）。","给定两个以字符串形式表示的非负整数","给定两个单词","给定两个大小为","给定两个字符串,","给定两个字符串形式的非负整数","给定两个整数","给定两个整数，被除数","给定两个有序整数数组","给定二叉树","给定你链表中值为","给定如下二叉树，以及目标和","给定数组","给定有序数组:","给定的","给定的整型数组长度范围是[3,104]，数组中所有的元素范围是[","给定的矩阵grid","给定的节点为非末尾节点并且一定是链表中的一个有效节点。","给定矩阵中至少有一个元素是","给定矩阵的元素个数不超过","给定编码总位数为","给定这个链表：1","给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为","给定链表的结点数介于","给定长度为","继续扫描到bc',计算bc'=b',表达式变成:","综上，一个数组中不可能存在2个以上的数它们出现的次数大于n/3。","编写一个函数来判断给定的目标值是否存在于数组中。若存在返回","编写一个函数来查找字符串数组中的最长公共前缀。","编写一个函数，以字符串作为输入，反转该字符串中的元音字母。交换左右两边的元音字母","编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组","编写一个程序，找到两个单链表相交的起始节点。","编写一个高效的算法来判断","编写一个高效的算法来搜索","编辑距离","编辑距离_leetcode_72","网格中的格子水平和垂直方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。","网格中的障碍物和空位置分别用","网格的左上角","网格的正中间有一个障碍物。","网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。","置空法","翻转","翻转法，经过三次翻转：","老师想给孩子们分发糖果，有","考虑到存在序列全为负数的情况，因为初始化为负无穷而非0","而6条","而b=y0","而不是","而且这儿的left，right都是经过递归后的伪根结点。自然就是q，p的公共祖先","肯定不是最小；","能变成b，那么返回true。","自写","自定义排序算法","自己写","自己写反转判断","自己手写代码","自底向上的动态规划","至少有一个字符并且所有字符都是字母或数字则返回","至少有两个元素","节点","若","若从节点","若走了n步后为none，则表明删除的为head节点","范围内，你将如何优化你的算法？","草泥马，leetcod","螺旋矩阵","行,","表示","表示a【:i","表示可匹配零个或多个（'*'）任意字符（'.'）。","表示水域。","表示的高度图，在这种情况下，可以接","表示陆地","表示零个或多个，这里","表示，形成的序列称为斐波那契数列。该数列由","被围绕的区域(leetcod","被围绕的区域_leetcode_130","被围绕的区间不会存在于边界上，换句话说，任何边界上的","被重复一次。因此可以匹配字符串","被除数和除数均为","西面(或东面)的长度再乘2即可","要小心的是$n1$","要求一棵二叉树的最大子树和，最容易想到的办法就是对每棵子树，求出这棵子树中所有节点的和，然后从中选出最大值。恰好二叉树的后序遍历就能做到这一点，在对二叉树进行后序遍历过程中，如果当前遍历节点的值与其左右子树和的值相加大于最大值，则更新最大值。","要求使用空间复杂度为","要求时间复杂度为o（n）","要求算法的时间复杂度为","要注意python中逻辑运算符的用法，a","解析：","解法3：不使用额外空间，设置两个指针p1,p2，开始均指向头结点，然后每次p1向后移动一个节点，p2向后移动两个节点。然后比较两个指针指向的节点是否相同。如果相同，则判断出链表有环，如果不同，则继续下一次循环。有“环”自会“重逢”。","解码方法(leetcode_91)","解码方法_leetcode_91","解释:","解释：","解释：3","解释：6","解释：7","解释：这两个链表不相交，因此返回","解释：链表中有一个环，其尾部连接到第一个节点。","解释：链表中有一个环，其尾部连接到第二个节点。","解释：链表中没有环。","解集不能包含重复的组合。","解题思维：","解题思路","计算now【0】","计算一行矩形的高度就用一次单调栈","计算完一行中一个元素，就应用单调栈","计算并返回","计算树的节点数","计算跨越了中间的序列","计算链表节点个数，然后扫描","记录本轮答案","记（x0+a/x0）/2=x',继续求过点（x',f(x')）的切线与x轴的交点的横坐标x''，很明显x''比x'更靠近函数f(x)=x^2","设置虚拟头结点","设置虚拟头结点，删除有序列表，但是最后要保留一个，而不是全部删","设置链表的第一个节点为尾节点","设计一个支持以下两种操作的数据结构：","设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。","证明","说一下解题思路哈，其实主要还是hash，利用每个字母的ascii码作hash来作为数组的index。首先用一个58长度的数组来存储每个字母出现的次数，为什么是58呢，主要是由于a","说明","说明:","说明边界的1也算岛屿","说明：","说明：*m","说明：不允许修改给定的链表。","说明：你不能倾斜容器，且","说明：本题中，我们将空字符串定义为有效的回文串。","说明：每次只能向下或者向右移动一步。","说明：解集不能包含重复的子集。","请不要使用除法，且在","请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为","请你返回最终形体的表面积。","请判断一个链表是否为回文链表。","请尝试","请找出其中最小的元素。","请注意，你的答案必须是","请注意，它是排序后的第k小元素，而不是第k个元素。","请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。","调整数组，奇数在前偶数在后，保持相对顺序","走不通，那么我们就要把这条路删除掉。回到原来的模样","起始点颠倒","起来就像一对逆过程，实际上并不是这样子，因为字符读取的时候都是从左往右的，所以，前缀表达式往往需要用两个栈来计算，","超时算法","超过","路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。","路径总和","路径总和(leetcod","跳过第一个字符，因为第一个字符有可能是‘+","转化为char后再排序：","转换为二进制为：","转换为八进制为：","转换为十六进制为：","转换成","转换成前缀后缀表达式就十分重要。实际上，二者的转换算法看起来也很像一个逆过程。因此，我们着重讨论中缀转后缀。","转换截止于数字","轴共同构成的容器可以容纳最多的水。","输入","输入:","输入[","输入n个整数，找出其中最小的k个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。","输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。","输入一个字符串,长度不超过9(可能有字符重复),字符只包括大小写字母。","输入不存在公共前缀。","输入为非空字符串且只包含数字","输入描述:","输入数字：5","输入无须数组","输入有序数组","输入有序数组、","输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。","输入解释：从各自的表头开始算起，链表","输入解释：相交节点的值为","输入：","输入：\"aaa\"","输入：\"aba\"","输入：\"abc\"","输入：(2","输入：1","输入：[","输入：[\"h\",\"a\",\"n\",\"n\",\"a\",\"h\"]","输入：[\"h\",\"e\",\"l\",\"l\",\"o\"]","输入：[0,1,0,2,1,0,1,3,2,1,2,1]","输入：[1,2,3,4,5,6]","输入：[1,2,3,4,5]","输入：[[1,0],[0,2]]","输入：[[1,2],[3,4]]","输入：[[2]]","输入：head","输入：intersectv","输入：k","输入：中缀表达式串","输出","输出1+2+...+n_短路原理","输出:","输出环形链表是第几个节点，但是有错，深拷贝也不行","输出结果可能非常大，所以你需要返回一个字符串而不是整数。","输出节点值到列表，重建链表","输出：","输出：1","输出：10","输出：111","输出：16","输出：2","输出：3","输出：34","输出：4","输出：444","输出：6","输出：7","输出：[\"h\",\"a\",\"n\",\"n\",\"a\",\"h\"]","输出：[\"o\",\"l\",\"l\",\"e\",\"h\"]","输出：[0,1,9,16,100]","输出：[4,9,9,49,121]","输出：fals","输出：no","输出：null","输出：refer","输出：tail","输出：true","输出：后缀表达式串","输出：此列表中的结点","运算符。","运行你的函数后，矩阵变为：","返回","返回:","返回[a,b]","返回fals","返回true","返回其自底向上的层次遍历为：","返回如下的二叉树：","返回它的最大深度","返回的下标值（index1","返回的结点值为","返回目前所有元素的中位数。","返回符合要求的最少分割次数。","返回被除数","返回递增序列的长度，就是最长递增子序列","返回锯齿形层次遍历如下：","返回镜像树的根节点","还可以先逆序，后输出，逆序有多种方法，就低逆序，递归逆序","还有个办法就是回溯，然后统计结果集是否为空","还有着而需要注意回溯思想，我们只需要单条线走通，其它的就交给回溯算法本身去工作","还能用摩尔投票法吗？答案当然是要，但是需要变通一下。","这一步是关键，卖出之后我们必须调整，初始进价","这一步是基本操作","这三个操作。","这两种在这个问题中是一种情况，但是在判断[1,4,1]==[4,1,1]，两者是不相同的。","这个判断可以不要，因为下个函数会判断","这个数组中只出现一次的两个数分别是4和6。怎么找到这个两个数字呢？","这个比查找倒数第n个节点多走一步,因为我们需要找到倒数第n+1个节点,我们才能删除倒数第n个节点","这个点为右下角的最大正方形的边长为2（红色），以","这个点为右下角的最大正方形的边长为3（绿色），以","这个点为右下角的正方形的边长为1（蓝色），那么以","这个角度思考","这个问题其实和","这个问题是之前问题","这个问题通过递归可以很快的解决，我们只要知道了subsets(nums[1:])，那么我们只要将nums[0]添加到每个子集的前面形成新的子集，然后将新的子集添加到result中即可。","这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？","这儿一定要注意，排除ele","这儿不需要判断是不是叶子节点（根据题意）","这儿出问题了，不能return","这儿用low、mid、high，是因为后续还会调用这个函数，会写成递归","这儿等于也是错的，也要退出","这其实就是单调栈模型。在单调栈中进出栈时候，我们比较的是矩形的高度，但是栈中维护的是每个矩形的下标，这样我们就可以在弹出栈时候，统计出宽度，同时知道矩形的高度。我们就可以计算出各个矩形的高度了。由于我们所有操作都是在进栈出栈间完成，所以时间复杂度为o(n).","这句话阐述了是左旋，我们可以这么理解，左边的等于右边的就是左旋；右边的等于左边的，就是右旋","这就是把l分成3段","这意味着1是这个数组中出现次数过半的数。","这是","这是一个简单的note类型的使用，所有的属性都是默认值。","这是一个简单的note类型的使用，所有的属性都是默认值。\\","这是一个非常经典的问题，我们通过递归可以非常快的解决这个问题，我们只要理清楚这样的几种情况：","这是之前leetcod","这样两个回文子串。","这样的子序列是不符合要求的；","这种方法虽然容易理解，但由于涉及到快排sort，其时间复杂度为o(nlogn)并非最优；","这笔交易所能获得利润","这道题真正难点在于:","这里要分几个步骤来进行求解：","这里要求出现次数大于一半，所以直接套用摩尔投票算法即可得到答案。","这里需要区分的是，摩尔算法不能用来得到众数（mode），例如数组：[1,1,1,2,2,3,3,4,4]，摩尔算法得出最后的结果应该是4，但4并不是众数，可是显然4也不是大多数，那是因为，大多数是指出现次数过半的数，而这个数组中没有这样的数，所以摩尔算法是是失效的，对于这种情况采取需要重新投票。","进行一次分割就可将","进行奇数、偶数划分","进行相应的操作，并将结果压进s2(s2的个数出2个进1个),当扫描结束后，s2的栈顶就是表达式结果。后缀表达式和前缀表达式看","进阶:","进阶：","连续","连续子数组","迭代","迭代法","退出循环的条件为fast指向最后个节点","退出循环的条件是fast刚好指向最后个节点。此时,slow指向倒数第n+1个节点,这样就能删除倒数第n个节点","逆序","逆序对个数","逆波兰表达式","逆波兰表达式求值","递归","递归、回溯","递归二分搜索查找第二版本","递归如果有返回值,所有调用的地方必须写return","递归实现二分查找","递归实现：","递归有两个出口，一是没有找到a或者b，则返回null；二是只要碰到a或者b，就立刻返回。","递归法","递归法(没有头结点)","递归法（有头结点）","递归版","递归版本稍微复杂一些，其关键在于反向工作。假设列表的其余部分已经被反转，现在我该如何反转它前面的部分？","递归简单修改","递归简单修改2","通过使用node类中定义三个属性，分别为elem本身的值，还有lchild左孩子和rchild右孩子","通过分析知道，旋转数组可以划分为两个有序数组，前面的数组的每个元素都大于等于后面数组的每个元素，可以用二分法不断缩小查找范围。","通过分析，最大的前三个数比数值中其其它数都大，因此可以采用类似求最大值的方法来求前三名。初始化前三名为最小整数：r1,r2,r3。","通过选择数组的特性知道，数组元素先是递增，然后突然下降到最小值，然后再递增。","通配符匹配(leetcode_44)","通配符匹配_leetcode_44","逻辑思维","遍历数组，记录max(nums[i","遍历时会相交于4","遍历法","遍历的过程中将值置空","那么","那么我选定第一个扔的楼层之后，我要么碎，要么不碎","那么这样下来，老师至少需要准备多少颗糖果呢？","那么题目要求的，就是这个","都不会被填充为","都不包含任何前导零。","都只包含数字","都可以。","都有可能转移到","采用分治法","里加上了优先级这一限制条件，转换就变得唯一了。","重叠,","重复了一次。","重复此步骤，直至所有操作符处理完毕。如","重复直到所有输入数据插入完为止。","金额不可达","链表","链表__leetcod","链表中所有节点的值都是唯一的。","链表归并","链表归并排序","链表的中间结点","链表的中间结点(leetcod","链表至少包含两个节点。","链表逆序输出（不带头结点）","链表长度。","链表（leetcod","镜像二叉树","长度不超过","长度为1。","长度为3。","长度是dp[k","长度是dp[k][m","长度最小的子数组","长度最长的公共子数组是","长链表先走|len(a)","问总共有多少条不同的路径？","问题解决思路：","阶","阶你才能到达楼顶。","阶层函数","阶层计算函数","阶层递归计算函数","除以除数","除数不为","除数倍增法","除自身以外数组的乘积","随后，在第","随机瞎排，","隐式回溯","集合法","零钱兑换(leetcode_322)","零钱兑换_leetcode_322","需要","需要注意的是出现次数超过1/3数组长的数，也许会有多个，例子如下：","需要逆置的子串的头尾序号","非原地修改，动态规划","非空","非递归","面积.","预期结果","预期结果：6","颗糖果。","颗糖果，这已满足上述两个条件。","题目","题目保证输入的数组中没有的相同的数字数据范围：","题目描述","题目：","题解","颜色分类","颜色分类(leetcode_75)","首先对边界上每一个'o'做深度优先搜索，将与其相连的所有'o'改为'","首先将list中的每个","首先我们将添加一个哑结点作为辅助，该结点位于列表头部。哑结点用来简化某些极端情况，例如列表中只含有一个结点，或需要删除列表的头部。","首先把链表分割为两个子链表（采用快慢指针找到链表中间节点），递归该分割过程，直至子链表只包含一个节点为止；","首先明确，是小于，所以用单调递减栈。","首先现将数字转化为字符","首先要说明的是","首先，要想找到第","首先，迭代计算出0、1","首尾相连法","首尾相连法:","首尾连接","验证回文串、","验证回文字符串","验证回文字符串2_leetcode_680","高度为0的矩形，即heights[0]","高度差不超过一，说明是二叉搜索树","高的元素。","鸡蛋从","鸡蛋完全够用的时候","鸡蛋掉落(leetcod","鸡蛋掉落_leetcod","（即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）","（如果存在该元素，就输出该元素位置）（此处查找0元素）","（当前行）","（注意，如果两个列表相交则不能为","（股票价格","（起始点在下图中标记为“start”","）。","），于是","，","，你要判断是否存在两个整数","，使得","，其中","，写一个函数搜索","，单调栈","，只写self...没有return，等于空了吹","，因为它的下一个字符不为数字。","，因为我们有两个2。最简单的思路就是添加一个判断if","，实现一个支持","，得分为1，当前大多数","，执行插入尾部操作，表示num比所有已知递增序列的尾数都大,","，找出","，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。","，找出该数组中满足其和","，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。","，满足","，然后偷窃","，计算它们的和。","，返回两个数组中公共的、长度最长的子数组的长度。","：","：2019","：dp[0][j]","：gw","：二叉树序列化.pi","：子集（最详细的解法！！！）的扩展。我们用之前的解法会出现这样的问题，[1,2]会出现两次","？找出所有满足条件且不重复的三元组。"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"前言","keywords":"","body":"Introduction\nLeetCode刷题（python） \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:29\n"},"临时草稿.html":{"url":"临时草稿.html","title":"临时草稿","keywords":"","body":"临时草稿\nclass Solution:\n    def findMedianSortedArrays(self, nums1, nums2):\n        tmp = nums1 + nums2\n        tmp.sort()\n        num = len(tmp) // 2\n        return  (tmp[num] + tmp[~num]) / 2\nnums1.extend(nums2)\nwhen left \ndef partition(nums, left, right):\ndef partition(nums, left, right):\n    # 经过分析知道\n    tmp = nums[left]\n    # 经过分析知道,当left==right，调整已经完整，以tmp为界限的数组左边比右边小，所以我们当left\ndef isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        m = {'{':0,'[':0,'(':0,')':1,'}':1,']':1}\n        pair = {'{':'}','[':']','(':')'}\n        # stack\n        stack = []\n\n        for ch in s:\n            if m.get(ch) == 0:\n                stack.insert(0,ch)\n            else:\n                if len(stack) > 0:\n                    tch = stack.pop(0)\n                    if pair[tch] != ch:\n                        return False\n                else:\n                    return False\n        return True if len(stack) == 0 else False\n\n\n\n\n        a=[1]\n        b=[1]\n\n        for i in range(len(nums)-1):\n            a.append(a[i]*nums[i])\n            b.append(b[i]*nums[-i-1])\n        res=[]\n        for i in range(len(a)):\n            res.append(a[i]*b[-i-1])\n\n        return res\n​   \n1.题目\n2.分析\n3.代码\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n=len(nums)\n        dic={}\n        for x in nums:\n            if x in dic:\n                dic[x]+=1                \n            else:\n                dic[x]=1\n        return [x for x in dic.keys() if dic[x]>n/3]\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        def merge(a, b):\n            head = ListNode(0)\n            cur = head\n            while a and b:\n                if a.val > b.val:\n                    cur.next = b\n                    b = b.next\n                else:\n                    cur.next = a\n                    a = a.next\n                cur = cur.next\n            if a:\n                cur.next = a\n            if b:\n                cur.next = b\n            return head.next\n\n        # 采用分治法\n        n = len(lists)\n        if n == 0:\n            return None\n        def deal(l, r):\n            if l > r:\n                return None\n            if l == r:\n                return lists[0]\n            middle = (l+r) // 2\n            a = deal(l, middle)\n            b = deal(middle+1, r)\n            return merge(a, b)\n        return deal(0, n-1)\n    def detectCycle(self, head):\n        a = {}\n        while head:\n            if head in a:\n                return head\n            a[head] = \"\"\n            head = head.next\n  \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        for i in s:\n            if i ==' ' :\n                return ' '.join(s[::-1].split()[::-1])\n        return s[::-1]\n​       if not s:\n            return ''\n        tmp = s.split(' ')\n        ans = ' '.join(each[::-1] for each in tmp)\n        return ans\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\ndef get_right(head, end=None):\n    # 检测是否有序并寻找右侧节点\n    i = 0\n    cur = head\n    is_inc = True\n\n    while cur.next != end:\n        last_val = cur.val\n        cur = cur.next\n        if cur.val  ListNode:\n\n        if not head:\n            return head\n\n        sort(head, None)\n        return head\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:30\n"},"LeetCode刷题优先顺序.html":{"url":"LeetCode刷题优先顺序.html","title":"LeetCode刷题顺序","keywords":"","body":"LeetCode刷题优先顺序\n\n\n\nID\nQuestion\nDiff\nFreq\nData Structure\nAlgorithms\n\n\n\n\n\n\n1\nTwo Sum\n2\n5\narray\nsort\n\n\n\n\n\n\n\nset\nTwo Pointers\n\n\n\n2\nAdd Two Numbers\n3\n4\nlinked list\nTwo Pointers\n\n\n\n\n\n\n\n\nMath\n\n\n\n3\nLongest Substring Without Repeating Characters\n3\n2\nstring\nTwo Pointers\n\n\n\n\n\n\n\nhashtable\n\n\n\n\n4\nMedian of Two Sorted Arrays\n5\n3\narray\nBinary Search\n\n\n\n5\nLongest Palindromic Substring\n4\n2\nstring\n\n\n\n\n6\nZigZag Conversion\n3\n1\nstring\n\n\n\n\n7\nReverse Integer\n2\n3\n\nMath\n\n\n\n8\nString to Integer (atoi)\n2\n5\nstring\nMath\n\n\n\n9\nPalindrome Number\n2\n2\n\nMath\n\n\n\n10\nRegular Expression Matching\n5\n3\nstring\nRecursion\n\n\n\n\n\n\n\n\nDP\n\n\n\n11\nContainer With Most Water\n3\n2\narray\nTwo Pointers\n\n\n\n12\nInteger to Roman\n3\n4\n\nMath\n\n\n\n13\nRoman to Integer\n2\n4\n\nMath\n\n\n\n14\nLongest Common Prefix\n2\n1\nstring\n\n\n\n\n15\n3Sum\n3\n5\narray\nTwo Pointers\n\n\n\n16\n3Sum Closest\n3\n1\narray\nTwo Pointers\n\n\n\n17\nLetter Combinations of a Phone Number\n3\n3\nstring\nDFS\n\n\n\n18\n4Sum\n3\n2\narray\n\n\n\n\n19\nRemove Nth Node From End of List\n2\n3\nlinked list\nTwo Pointers\n\n\n\n20\nValid Parentheses\n2\n5\nstring\nStack\n\n\n\n21\nMerge Two Sorted Lists\n2\n5\nlinked list\nsort\n\n\n\n\n\n\n\n\nTwo Pointers\n\n\n\n\n\n\n\n\nmerge\n\n\n\n22\nGenerate Parentheses\n3\n4\nstring\nDFS\n\n\n\n23\nMerge k Sorted Lists\n3\n4\nlinked list\nsort\n\n\n\n\n\n\n\nheap\nTwo Pointers\n\n\n\n\n\n\n\n\nmerge\n\n\n\n24\nSwap Nodes in Pairs\n2\n4\nlinked list\n\n\n\n\n25\nReverse Nodes in k-Group\n4\n2\nlinked list\nRecursion\n\n\n\n\n\n\n\n\nTwo Pointers\n\n\n\n26\nRemove Duplicates from Sorted Array\n1\n3\narray\nTwo Pointers\n\n\n\n27\nRemove Element\n1\n4\narray\nTwo Pointers\n\n\n\n28\nImplement strStr()\n4\n5\nstring\nTwo Pointers\n\n\n\n\n\n\n\n\nKMP\n\n\n\n\n\n\n\n\nrolling hash\n\n\n\n29\nDivide Two Integers\n4\n3\n\nBinary Search\n\n\n\n\n\n\n\n\nMath\n\n\n\n30\nSubstring with Concatenation of All Words\n3\n1\nstring\nTwo Pointers\n\n\n\n31\nNext Permutation\n5\n2\narray\npermutation\n\n\n\n32\nLongest Valid Parentheses\n4\n1\nstring\nDP\n\n\n\n33\nSearch in Rotated Sorted Array\n4\n3\narray\nBinary Search\n\n\n\n34\nSearch for a Range\n4\n3\narray\nBinary Search\n\n\n\n35\nSearch Insert Position\n2\n2\narray\n\n\n\n\n36\nValid Sudoku\n2\n2\narray\n\n\n\n\n37\nSudoku Solver\n4\n2\narray\nDFS\n\n\n\n38\nCount and Say\n2\n2\nstring\nTwo Pointers\n\n\n\n39\nCombination Sum\n3\n3\narray\ncombination\n\n\n\n40\nCombination Sum II\n4\n2\narray\ncombination\n\n\n\n41\nFirst Missing Positive\n5\n2\narray\nsort\n\n\n\n42\nTrapping Rain Water\n4\n2\narray\nTwo Pointers\n\n\n\n\n\n\n\n\nStack\n\n\n\n43\nMultiply Strings\n4\n3\nstring\nTwo Pointers\n\n\n\n\n\n\n\n\nMath\n\n\n\n44\nWildcard Matching\n5\n3\nstring\nRecursion\n\n\n\n\n\n\n\n\nDP\n\n\n\n\n\n\n\n\ngreedy\n\n\n\n45\nJump Game II\n4\n2\narray\n\n\n\n\n46\nPermutations\n3\n4\narray\npermutation\n\n\n\n47\nPermutations II\n4\n2\narray\npermutation\n\n\n\n48\nRotate Image\n4\n2\narray\n\n\n\n\n49\nAnagrams\n3\n4\nstring\n\n\n\n\n\n\n\n\nhashtable\n\n\n\n\n50\nPow(x, n)\n3\n5\n\nBinary Search\n\n\n\n\n\n\n\n\nMath\n\n\n\n51\nN-Queens\n4\n3\narray\nDFS\n\n\n\n52\nN-Queens II\n4\n3\narray\nDFS\n\n\n\n53\nMaximum Subarray\n3\n3\narray\nDP\n\n\n\n54\nSpiral Matrix\n4\n2\narray\n\n\n\n\n55\nJump Game\n3\n2\narray\n\n\n\n\n56\nMerge Intervals\n4\n5\narray\nsort\n\n\n\n\n\n\n\nlinked list\nmerge\n\n\n\n\n\n\n\nred-black tree\n\n\n\n\n57\nInsert Interval\n4\n5\narray\nsort\n\n\n\n\n\n\n\nlinked list\nmerge\n\n\n\n\n\n\n\nred-black tree\n\n\n\n\n58\nLength of Last Word\n1\n1\nstring\n\n\n\n\n59\nSpiral Matrix II\n3\n2\narray\n\n\n\n\n60\nPermutation Sequence\n5\n1\n\npermutation\n\n\n\n\n\n\n\n\nMath\n\n\n\n61\nRotate List\n3\n2\nlinked list\nTwo Pointers\n\n\n\n62\nUnique Paths\n2\n3\narray\nDP\n\n\n\n63\nUnique Paths II\n3\n3\narray\nDP\n\n\n\n64\nMinimum Path Sum\n3\n3\narray\nDP\n\n\n\n65\nValid Number\n2\n5\nstring\nMath\n\n\n\n66\nPlus One\n1\n2\narray\nMath\n\n\n\n67\nAdd Binary\n2\n4\nstring\nTwo Pointers\n\n\n\n\n\n\n\n\nMath\n\n\n\n68\nText Justification\n4\n2\nstring\n\n\n\n\n69\nSqrt(x)\n4\n4\n\nBinary Search\n\n\n\n70\nClimbing Stairs\n2\n5\n\nDP\n\n\n\n71\nSimplify Path\n3\n1\nstring\nStack\n\n\n\n72\nEdit Distance\n4\n3\nstring\nDP\n\n\n\n73\nSet Matrix Zeroes\n3\n5\narray\n\n\n\n\n74\nSearch a 2D Matrix\n3\n3\narray\nBinary Search\n\n\n\n75\nSort Colors\n4\n2\narray\nsort\n\n\n\n\n\n\n\n\nTwo Pointers\n\n\n\n76\nMinimum Window Substring\n4\n2\nstring\nTwo Pointers\n\n\n\n77\nCombinations\n3\n4\n\ncombination\n\n\n\n78\nSubsets\n3\n4\narray\nRecursion\n\n\n\n\n\n\n\n\ncombination\n\n\n\n79\nWord Search\n3\n4\narray\nDFS\n\n\n\n80\nRemove Duplicates from Sorted Array II\n2\n2\narray\nTwo Pointers\n\n\n\n81\nSearch in Rotated Sorted Array II\n5\n3\narray\nBinary Search\n\n\n\n82\nRemove Duplicates from Sorted List II\n3\n3\nlinked list\nRecursion\n\n\n\n\n\n\n\n\nTwo Pointers\n\n\n\n83\nRemove Duplicates from Sorted List\n1\n3\nlinked list\n\n\n\n\n84\nLargest Rectangle in Histogram\n5\n2\narray\nStack\n\n\n\n85\nMaximal Rectangle\n5\n1\narray\nDP\n\n\n\n\n\n\n\n\nStack\n\n\n\n86\nPartition List\n3\n3\nlinked list\nTwo Pointers\n\n\n\n87\nScramble String\n5\n2\nstring\nRecursion\n\n\n\n\n\n\n\n\nDP\n\n\n\n88\nMerge Sorted Array\n2\n5\narray\nTwo Pointers\n\n\n\n\n\n\n\n\nmerge\n\n\n\n89\nGray Code\n4\n2\n\ncombination\n\n\n\n90\nSubsets II\n4\n2\narray\nRecursion\n\n\n\n\n\n\n\n\ncombination\n\n\n\n91\nDecode Ways\n3\n4\nstring\nRecursion\n\n\n\n\n\n\n\n\nDP\n\n\n\n92\nReverse Linked List II\n3\n2\nlinked list\nTwo Pointers\n\n\n\n93\nRestore IP Addresses\n3\n3\nstring\nDFS\n\n\n\n94\nBinary Tree Inorder Traversal\n4\n3\ntree\nRecursion\n\n\n\n\n\n\n\nhashtable\nmorris\n\n\n\n\n\n\n\n\nStack\n\n\n\n95\nUnique Binary Search Trees II\n4\n1\ntree\nDP\n\n\n\n\n\n\n\n\nDFS\n\n\n\n96\nUnique Binary Search Trees\n3\n1\ntree\nDP\n\n\n\n97\nInterleaving String\n5\n2\nstring\nRecursion\n\n\n\n\n\n\n\n\nDP\n\n\n\n98\nValidate Binary Search Tree\n3\n5\ntree\nDFS\n\n\n\n99\nRecover Binary Search Tree\n4\n2\ntree\nDFS\n\n\n\n100\nSame Tree\n1\n1\ntree\nDFS\n\n\n\n101\nSymmetric Tree\n1\n2\ntree\nDFS\n\n\n\n102\nBinary Tree Level Order Traversal\n3\n4\ntree\nBFS\n\n\n\n103\nBinary Tree Zigzag Level Order Traversal\n4\n3\nqueue\nBFS\n\n\n\n\n\n\n\ntree\nStack\n\n\n\n104\nMaximum Depth of Binary Tree\n1\n1\ntree\nDFS\n\n\n\n105\nConstruct Binary Tree from Preorder and Inorder Tr\n3\n3\narray\nDFS\n\n\n\n\n\n\n\ntree\n\n\n\n\n106\nConstruct Binary Tree from Inorder and Postorder T\n3\n3\narray\nDFS\n\n\n\n\n\n\n\ntree\n\n\n\n\n107\nBinary Tree Level Order Traversal II\n3\n1\ntree\nBFS\n\n\n\n108\nConvert Sorted Array to Binary Search Tree\n2\n3\ntree\nDFS\n\n\n\n109\nConvert Sorted List to Binary Search Tree\n4\n3\nlinked list\nRecursion\n\n\n\n\n\n\n\n\nTwo Pointers\n\n\n\n110\nBalanced Binary Tree\n1\n2\ntree\nDFS\n\n\n\n111\nMinimum Depth of Binary Tree\n1\n1\ntree\nDFS\n\n\n\n112\nPath Sum\n1\n3\ntree\nDFS\n\n\n\n113\nPath Sum II\n2\n2\ntree\nDFS\n\n\n\n114\nFlatten Binary Tree to Linked List\n3\n3\ntree\nRecursion\n\n\n\n\n\n\n\n\nStack\n\n\n\n115\nDistinct Subsequences\n4\n2\nstring\nDP\n\n\n\n116\nPopulating Next Right Pointers in Each Node\n3\n3\ntree\nDFS\n\n\n\n117\nPopulating Next Right Pointers in Each Node II\n4\n2\ntree\nDFS\n\n\n\n118\nPascal's Triangle\n2\n1\narray\n\n\n\n\n119\nPascal's Triangle II\n2\n1\narray\n\n\n\n\n120\nTriangle\n3\n1\narray\nDP\n\n\n\n121\nBest Time to Buy and Sell Stock\n2\n1\narray\nDP\n\n\n\n122\nBest Time to Buy and Sell Stock II\n3\n1\narray\ngreedy\n\n\n\n123\nBest Time to Buy and Sell Stock III\n4\n1\narray\nDP\n\n\n\n124\nBinary Tree Maximum Path Sum\n4\n2\ntree\nDFS\n\n\n\n125\nValid Palindrome\n2\n5\nstring\nTwo Pointers\n\n\n\n126\nWord Ladder II\n1\n1\n\n\n\n\n\n127\nWord Ladder\n3\n5\ngraph\nBFS\n\n\n\n\n\n\n\n\nshortest path\n\n\n\n128\nLongest Consecutive Sequence\n4\n3\narray\n\n\n\n\n129\nSum Root to Leaf Numbers\n2\n4\ntree\nDFS\n\n\n\n130\nSurrounded Regions\n4\n3\narray\nBFS\n\n\n\n\n\n\n\n\nDFS\n\n\n\n131\nPalindrome Partitioning\n3\n4\nstring\nDFS\n\n\n\n132\nPalindrome Partitioning II\n4\n3\nstring\nDP\n\n\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:26\n"},"数字运算/":{"url":"数字运算/","title":"数字运算","keywords":"","body":"数字运算\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-08 00:43:19\n"},"数字运算/2的幂_LeetCode_231.html":{"url":"数字运算/2的幂_LeetCode_231.html","title":"2的幂_LeetCode_231","keywords":"","body":"2的幂(LeetCode 231)\n1.题目\n给定一个整数，编写一个函数来判断它是否是 2 的幂次方。\n示例 1:\n输入: 1\n输出: true\n解释: 20 = 1\n示例 2:\n输入: 16\n输出: true\n解释: 24 = 16\n示例 3:\n输入: 218\n输出: false\n2.分析\n从二进制上看，2的幂一定是这样的形式：整个二进制数上只有一位是1，其他位全是0；\n如果有两个1，一定不是2的幂）\n此时，n-1的二进制数一定会是当前位变为0，其他位全是1，这样n与n-1操作，就会是0；\n3.代码\n    def isPowerOfTwo(self, n: int) -> bool:\n        if(n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:26\n"},"数字运算/只出现一次的数字.html":{"url":"数字运算/只出现一次的数字.html","title":"只出现一次的数字","keywords":"","body":"只出现一次的数字\n1.题目\n给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\n说明：\n你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\n示例 1:\n输入: [2,2,1]\n输出: 1\n\n示例 2:\n输入: [4,1,2,1,2]\n输出: 4\n\n2.分析\n异或解决\n3.代码\n3.1异或解决\n    # 异或解决\n    def singleNumber(self, nums):\n        a = 0\n        for num in nums:\n            a = a ^ num\n        return a\n\n3.2常规解决\n    def singleNumber(self, nums: List[int]) -> int:\n        bag = {}\n        for i in nums:\n            if i not in bag:\n                bag[i] = 1\n            else:\n                bag[i] += 1\n        # a = filter(lambda x:bag[x] ==1,bag)\n        # return a.__next__()\n        for i in bag:\n            if bag[i] == 1:\n                return i\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:41\n"},"数字运算/求众数 LeetCode 169.html":{"url":"数字运算/求众数 LeetCode 169.html","title":"求众数_LeetCode 169.md","keywords":"","body":"求众数(LeetCode 169)\n1.题目\n给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。\n你可以假设数组是非空的，并且给定的数组总是存在众数。\n示例 1:\n输入: [3,2,3]\n输出: 3\n示例 2:\n输入: [2,2,1,1,1,2,2]\n输出: 2\n2.分析\n我们一直有一个条件没有使用 众数是指在数组中出现次数大于n/2 的元素。那么问题就很容易了，我们可以先将nums排序，然后返回中间元素的值即可（众数的个数大于一半，排好序的nums中间元素一定是众数）\n3.代码\nCounter模块\n    def majorityElement(self, nums):\n        from collections import Counter\n        most_val = Counter(nums).most_common(1)\n        return most_val[0][0]\n\n利用n/2条件\n    # def majorityElement(self, nums):\n    #     nums.sort()\n    #     return nums[len(nums)//2]\n\n字典\n    def majorityElement(self, nums: List[int]) -> int:\n        bag = {}\n        for i in nums:\n            if i not in bag:\n                bag[i] = 1\n            else:\n                bag[i] += 1 \n        return max(bag,key = bag.get)\n\n摩根投票法\n    def majorityElement(self, nums):\n        num, count = None, 0\n        for i in nums:\n            if num == i:count+=1\n            elif count == 0:\n                num, count = i, 1\n            else:\n                count -= 1\n        return num\n\n摩尔投票算法\n\n假设有这样一个场景：票选村长，每人可投一票，我们将候选村长从1开始编号，村民们在票上写上候选村长的编号即可完成投票。那么最后统计的票可形成一个整型数组。那么谁是村长呢？票数过半的那个人。\n摩尔投票算法可以快速的计算出一个数组中出现次数过半的数即大多数（majority），算法核心思想是同加，异减。我们举个例子。\n假设数组是：[1,2,1,1,2,1]。算法步骤如下：\n\n1。当前大多数是1，得分置1\n2。与当前大多数不同，得分 - 1，得分为0，当前大多数 = 1\n1。与当前大多数不同，得分为0，所以设置当前大多数 1 -> 1，得分置1\n1。与当前大多数相同，得分 + 1，得分为2，当前大多数 = 1\n2。与当前大多数不同，得分 - 1 ，得分为1，当前大多数 = 1\n1。与当前大多数相同，得分 + 1，得分为2，当前大多数 = 1\n\n\n这意味着1是这个数组中出现次数过半的数。\n可以感受得到，算法会保存一个当前大多数，和得分，当遇到一个数不是当前大多数时，得分会减一，当减到0时，大多数会发生改变，并且重置得分为1。\n这里需要区分的是，摩尔算法不能用来得到众数（mode），例如数组：[1,1,1,2,2,3,3,4,4]，摩尔算法得出最后的结果应该是4，但4并不是众数，可是显然4也不是大多数，那是因为，大多数是指出现次数过半的数，而这个数组中没有这样的数，所以摩尔算法是是失效的，对于这种情况采取需要重新投票。 \n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:03\n"},"数字运算/求众数 II LeetCode 229.html":{"url":"数字运算/求众数 II LeetCode 229.html","title":"求众数 II LeetCode 229","keywords":"","body":"求众数 II(LeetCode 229)\n1.题目\n给定一个大小为 n 的数组，找出其中所有出现超过 ⌊ n/3 ⌋ 次的元素。\n说明: 要求算法的时间复杂度为 O(n)，空间复杂度为 O(1)。\n示例 1:\n输入: [3,2,3]\n输出: [3]\n示例 2:\n输入: [1,1,1,3,3,2,2,2]\n输出: [1,2]\n2.分析\n摩根投票法\n\n如果我们在使用摩尔算法时，同时记录两个大多数，会怎么样呢？直觉告诉我，这会得到一个大多数，和一个出现次数仅次于大多数的数，但是这两个数不一定会比数组长的1/3大\n所以我们得到它们后，还需要检查它们出现的次数是否符合条件。\n\n3.代码\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        a, b, ca, cb, ans = None, None, 0, 0, []\n        for i in nums:\n            if   i  == a: ca += 1\n            elif i  == b: cb += 1\n            elif ca == 0: a, ca = i, 1\n            elif cb == 0: b, cb = i, 1\n            else:         ca, cb = ca - 1, cb - 1\n        # print(a, b)\n        ca, cb = 0, 0\n        for i in nums:\n            if   i == a: ca += 1\n            elif i == b: cb += 1\n\n        if ca > len(nums)//3:\n            ans.append(a)\n        if cb > len(nums)//3:\n            ans.append(b)\n        return ans\n\n# print(a, b) 不检验的结果\n输入\n[3,2,3,2,3,2,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\nstdout\n1 2\n输出\n[1]\n预期结果\n[1]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:03\n"},"数字运算/整数反转 LeetCode 7.html":{"url":"数字运算/整数反转 LeetCode 7.html","title":"整数反转 LeetCode 7","keywords":"","body":"整数反转(LeetCode 7)\n1.题目\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n示例 1:\n输入: 123\n输出: 321\n 示例 2:\n输入: -123\n输出: -321\n示例 3:\n输入: 120\n输出: 21\n注意:\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n2.分析\n3.代码\ndef reverse(self, x: 'int') -> 'int':\n        if x  (2**31-1):\n            return 0\n        x = str(x)\n        if x[0] == '-':\n            x = x[1:]\n            str_x = ''.join(list(reversed(x)))\n            str_x = '-'+str_x\n        else:\n            str_x = ''.join(list(reversed(x)))\n        if int(str_x)  (2**31-1):\n                return 0\n        return int(str_x)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:59\n"},"数字运算/格雷编码_LeetCode_89.html":{"url":"数字运算/格雷编码_LeetCode_89.html","title":"格雷编码_LeetCode_89","keywords":"","body":"格雷编码(LeetCode 89)\n1.题目\n格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。\n给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。格雷编码序列必须以 0 开头。\n示例 1:\n输入: 2\n输出: [0,1,3,2]\n解释:\n00 - 0\n01 - 1\n11 - 3\n10 - 2\n\n对于给定的 n，其格雷编码序列并不唯一。\n例如，[0,2,3,1] 也是一个有效的格雷编码序列。\n\n00 - 0\n10 - 2\n11 - 3\n01 - 1\n示例 2:\n输入: 0\n输出: [0]\n解释: 我们定义格雷编码序列必须以 0 开头。\n     给定编码总位数为 n 的格雷编码序列，其长度为 2n。当 n = 0 时，长度为 20 = 1。\n     因此，当 n = 0 时，其格雷编码序列为 [0]。\n2.分析\n.assets\\20180703120635594.png)\n.assets\\2018070312065295.png)\n3.代码\n    def grayCode(self, n: int) -> List[int]:\n        res = []\n        for i in range(2**n):\n            res.append(i^(i>>1))\n        # print(res)\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:02\n"},"数字运算/两数相除_LeeetCode_29.html":{"url":"数字运算/两数相除_LeeetCode_29.html","title":"两数相除_LeeetCode_29","keywords":"","body":"两数相除(LeetCode_29)\n1.题目\n给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。\n返回被除数 dividend 除以除数 divisor 得到的商。\n示例 1:\n输入: dividend = 10, divisor = 3\n输出: 3\n示例 2:\n输入: dividend = 7, divisor = -3\n输出: -2\n说明:\n- 被除数和除数均为 32 位有符号整数。\n- 除数不为 0。\n- 假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。\n\n2.分析\n明确一点,10进制数扩大两倍,左移一位  \n        a = 2\n        a > = 1\n        输出: b = 4\n当被除数大于等于除数时(否则的话就为0了),我们设置两个变量tmp_cs和tmp_res,并分别初始化为临时除数(除数后面会变化,过一会就知道了)和1(最小的情况),当被除数大于等于tmp_cs的二倍时bcs>=(tmp_cs=8*2,所以我们有两个8,所以tmp_res扩大两倍,除数也变为原来两倍16,继续循环,被除数47>=16*2,所以tmp_res = 2*2....后面继续判断,不赘述了)同时扩大二倍(左移)，并将返回值加上tmp_res，除数减去tmp_res。\n拿十进制举例:29除以8，8扩大二倍，16小于29，再扩大二倍，超过29，于是29减去之前的16(我们保存了的)，返回值加上2(因为现在我们除的是16,16是8的2倍)。剩余除数为29-16=13，第二次循环时因为此时的13小于8的二倍(tmp_cs\n3.代码\n暴力法 (每次减去一个除数，统计可以减去多少个除数)\nclass Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        res = 0 \n        sign = 1 if dividend ^ divisor > 0 else -1\n        dividend = abs(dividend)\n        divisor = abs(divisor)\n        while dividend >= divisor:\n            dividend -= divisor\n            res += 1\n        res = res if sign > 0 else -res\n\n        return max(res, -2**31) if res (除数倍增法) 移位法\nclass Solution:\n    def divide(self, dividend, divisor):\n        sign = (dividend > 0) ^ (divisor > 0)\n        i, bcs, cs = 0, abs(dividend), abs(divisor)\n        if bcs == 0 or bcs = cs:\n            tmp_cs, tmp_res = cs, 1\n            while bcs>=(tmp_cs\n除数倍增法\nclass Solution:\n    def divide(self, dividend, divisor):\n        sign = (dividend > 0) ^ (divisor > 0)\n        i, bcs, cs = 0, abs(dividend), abs(divisor)\n        if bcs == 0 or bcs = cs:\n            tmp_cs, tmp_res = cs,1\n            while bcs>=(tmp_cs+tmp_cs):\n                tmp_res += tmp_res\n                tmp_cs += tmp_cs\n            bcs = bcs-tmp_cs\n            res = res + tmp_res\n\n        res = -res if sign else res\n        return max(res, -2**31) if res \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-24 12:26:00\n"},"数字运算/10进制转化为其它进制.html":{"url":"数字运算/10进制转化为其它进制.html","title":"10进制转化为其它进制","keywords":"","body":"方法非常简单，就是利用辗转相除发， 保存商和余数，知道商为0为止，再将余数反转。 \n用列表a=[0,1,2,3,4,5,6,7,8,9,’A’,’b’,’C’,’D’,’E’,’F’]储存转换之后的每一位，直接用余数作为指针即可找到对应的符号。\n\ndef f(n,x):\n    #n为待转换的十进制数，x为想转为的进制，取值为2-16\n    a=[0,1,2,3,4,5,6,7,8,9,'A','b','C','D','E','F']\n    b = []\n    while 1:\n        # divmod 同时算出商和余数 divmod(6,3) == 2,0\n        s = n//x # 商\n        y = n%x # 余数\n        b.append(y)\n        if s == 0:\n            break\n        n = s\n    b.reverse()\n    for i in b:\n        print(a[i],end='')\n    print(b)\n f(26,16)\n\n系统自带方法\ndec = int(input(\"输入数字：\"))\n\nprint(\"十进制数为：\", dec)\nprint(\"转换为二进制为：\", bin(dec))\nprint(\"转换为八进制为：\", oct(dec))\nprint(\"转换为十六进制为：\", hex(dec))\n\n结果：\npython3 test.py \n输入数字：5\n十进制数为：5\n转换为二进制为： 0b101\n转换为八进制为： 0o5\n转换为十六进制为： 0x5\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-26 12:10:32\n"},"数字运算/二进制求和_LeetCode_67.html":{"url":"数字运算/二进制求和_LeetCode_67.html","title":"二进制求和_LeetCode_67","keywords":"","body":"二进制求和\n1.题目\n给定两个二进制字符串，返回他们的和（用二进制表示）。\n输入为非空字符串且只包含数字 1 和 0。\n示例 1:\n输入: a = \"11\", b = \"1\"\n输出: \"100\"\n示例 2:\n输入: a = \"1010\", b = \"1011\"\n输出: \"10101\"\n2.分析\n法一：将2进制数转为10进制计算，然后转化为二进制\n法二：模仿10进制，字符串相加，这儿我们同样可以将直接利用字符串，也可以将字符串先转化为列表。\n3.代码\n法一\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        a = int(a, 2)\n        b = int(b, 2)\n        return bin(a+b)[2:]\n\n法二\n    def addBinary(self, a: str, b: str) -> str:\n        res = ''\n        tmp = 0\n        a_len = len(a)\n        b_len = len(b)\n        while a_len>0 or b_len>0 or tmp:\n            a_len -= 1\n            b_len -= 1\n            i = a[a_len] if a_len>=0 else 0\n            j = b[b_len] if b_len>=0 else 0\n\n            s,y = divmod(int(i)+int(j)+tmp, 2)\n            res = str(y) + res\n            tmp = s\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-15 15:25:09\n"},"数字运算/输出1+2+...+n_短路原理.html":{"url":"数字运算/输出1+2+...+n_短路原理.html","title":"输出1+2+...+n_短路原理","keywords":"","body":"求1+2+3+...+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。\n要注意python中逻辑运算符的用法，a  and  b，a为False，返回a，a为True，就返回b\n\nclass Solution:\n    def Sum_Solution(self, n):\n        res = n\n        tmp = res and self.Sum_Solution(n-1)\n        return res+tmp\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 21:27:17\n"},"数字运算/打印1~n,短路原理.html":{"url":"数字运算/打印1~n,短路原理.html","title":"打印1~n,短路原理","keywords":"","body":"正序输出\ndef func(n):\n    res = n-1\n    res & func(n-1)\n    print(res+1)\n\n\n\n\n输出：\nfunc(6)\n1，2，3，4，5，6\n\n倒序输出\ndef func(n):\n    print(n)\n    n-1 & func(n-1)\n\n\n输出：\nfunc(6)\n6,5,4,3,2,1\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 21:34:54\n"},"数字运算/数组中只出现一次的数_两个.html":{"url":"数字运算/数组中只出现一次的数_两个.html","title":"数组中只出现一次的数_两个","keywords":"","body":"题目描述\n一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。\n二、题目\n一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。\n1、思路\n大家首先想到的是顺序扫描法，但是这种方法的时间复杂度是O（n^2）。接着大家又会考虑用哈希表的方法，但是空间复杂度不是O（1）。\n应该怎么做才能即满足时间复杂度是O（n）又满足空间复杂度是O（1）的要求呢？\n我们可以想一想“异或”运算的一个性质，我们直接举例说明。\n举例：{2,4,3,6,3,2,5,5}\n这个数组中只出现一次的两个数分别是4和6。怎么找到这个两个数字呢？\n我们先不看找到俩个的情况，先看这样一个问题，如何在一个数组中找到一个只出现一次的数字呢？比如数组：{4,5,5}，唯一一个只出现一次的数字是4。\n我们知道异或的一个性质是：任何一个数字异或它自己都等于0。也就是说，如果我们从头到尾依次异或数组中的每一个数字，那么最终的结果刚好是那个只出现一次的数字。比如数组{4,5,5}，我们先用数组中的第一个元素4（二进制形式：0100）和数组中的第二个元素5（二进制形式：0101）进行异或操作，0100和0101异或得到0001，用这个得到的元素与数组中的三个元素5（二进制形式：0101）进行异或操作，0001和0101异或得到0100，正好是结果数字4。这是因为数组中相同的元素异或是为0的，因此就只剩下那个不成对的孤苦伶仃元素。\n现在好了，我们已经知道了如何找到一个数组中找到一个只出现一次的数字，那么我们如何在一个数组中找到两个只出现一次的数字呢？如果，我们可以将原始数组分成两个子数组，使得每个子数组包含一个只出现一次的数字，而其他数字都成对出现。这样，我们就可以用上述方法找到那个孤苦伶仃的元素。\n我们还是从头到尾一次异或数组中的每一个数字，那么最终得到的结果就是两个只出现一次的数组的异或结果。因为其他数字都出现了两次，在异或中全部抵消了。由于两个数字肯定不一样，那么异或的结果肯定不为0，也就是说这个结果数组的二进制表示至少有一个位为1。我们在结果数组中找到第一个为1的位的位置，记为第n位。现在我们以第n位是不是1为标准把元数组中的数字分成两个子数组，第一个子数组中每个数字的第n位都是1，而第二个子数组中每个数字的第n位都是0。\n举例：{2,4,3,6,3,2,5,5}\n我们依次对数组中的每个数字做异或运行之后，得到的结果用二进制表示是0010。异或得到结果中的倒数第二位是1，于是我们根据数字的倒数第二位是不是1分为两个子数组。第一个子数组{2,3,6,3,2}中所有数字的倒数第二位都是1，而第二个子数组{4,5,5}中所有数字的倒数第二位都是0。接下来只要分别两个子数组求异或，就能找到第一个子数组中只出现一次的数字是6，而第二个子数组中只出现一次的数字是4。\n# -*- coding:utf-8 -*-\nclass Solution:\n    # 返回[a,b] 其中ab是出现一次的两个数字\n    def FindNumsAppearOnce(self, array):\n        # write code here\n        res = 0\n        for i in array:\n            res ^= i\n        index = 0\n        while True:\n            if res&1 ==0:\n                index += 1\n                res >>= 1\n            else:\n                break\n        a = 0\n        b = 0\n\n        for i in array:\n            if i>>index&1==1:\n                a ^= i\n            else:\n                b ^= i\n        return [a,b]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-19 00:10:51\n"},"栈/":{"url":"栈/","title":"栈","keywords":"","body":"栈\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-08 00:43:19\n"},"栈/逆波兰表达式.html":{"url":"栈/逆波兰表达式.html","title":"逆波兰表达式","keywords":"","body":"逆波兰表达式\n波兰式、逆波兰式与表达式求值\n1.题目\n逆波兰表达式求值\n根据逆波兰表示法，求表达式的值。\n有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。\n说明：\n\n整数除法只保留整数部分。\n给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。\n\n示例 1：\n输入: [\"2\", \"1\", \"+\", \"3\", \"*\"]\n输出: 9\n解释: ((2 + 1) * 3) = 9\n示例 2：\n输入: [\"4\", \"13\", \"5\", \"/\", \"+\"]\n输出: 6\n解释: (4 + (13 / 5)) = 6\n示例 3：\n输入: [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]\n输出: 22\n解释: \n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n2.分析\n3.代码1\nclass Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        stack = []\n        op = [\"+\", \"-\", \"*\", \"/\"]\n        for i in tokens:\n            if i in op:\n                t1 = stack.pop()\n                t2 = stack.pop()\n                if i=='+':\n                    stack.append(t2+t1)\n                if i=='-':\n                    stack.append(t2-t1)\n                if i=='*':\n                    stack.append(t2*t1)\n                if i=='/':\n                    stack.append(int(t2/t1)) # 注意取整数 \n            else:\n                stack.append(int(i)) # 每次取出来的都是数字，而不是运算符\n        return stack.pop()\n\n代码2\nclass Solution:\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        import operator\n        stack = list()\n        ops = { \"+\": operator.add, \"-\": operator.sub, \"*\": operator.mul, \"/\": operator.truediv}\n        for char in tokens:\n            if char in ops:\n                t1 = int(stack.pop())\n                t2 = int(stack.pop())\n            stack.append(ops[char](t2, t1))\n            else:\n            stack.append(int(char))\n        return stack.pop()\n\n1.中缀表达式\n   人类最熟悉的一种表达式1+2，(1+2)*3，3+4*2+4等等都是中缀表示法。对于人们来说，也是最直观的一种求值方式，先算括号里的，\n然后算乘除，最后算加减，但是，计算机处理中缀表达式却并不方便，因为没有一种简单的数据结构可以方便从一个表达式中间抽出\n一部分算完结果，再放进去，然后继续后面的计算（链表也许可以，但是，代价也是不菲）。\n       在介绍前缀，后缀表达式之前，我想先通过我们最熟悉的中缀表达式画出一棵语法树来直观认识前后缀表达式。以A+B(C-D)-EF为例：\n\n则中缀表达式得名于它是由相应的语法树的中序遍历的结果得到的。\n2.前缀缀表达式\n　　前缀表达式又叫做波兰式。同样的道理，表达式的前缀表达式是由相应的语法树的前序遍历的结果得到的。\n如上图的前缀表达式为- + A  B - C D  E F\n由前缀表达式求出结果有下面两种思路：\n　　1.从左至右扫描表达式，如果一个操作符后面跟着两个操作数时，则计算，然后将结果作为操作数替换(这个操作符和两个操作数)，\n重复此步骤，直至所有操作符处理完毕。如-+AB-CDEF，扫描到-CD时，会计算C-D=C',表达式变成：-+ABC'EF\n继续扫描到BC',计算BC'=B',表达式变成:-+AB'*EF,继续+AB'，依此类推。\n　　2.由1.知，要多遍扫描表达式，并且需要将3个字符替换成1个，比较繁锁，我们可以用一个栈S2来实现计算，扫描从右往左进行，\n如果扫描到操作数，则压进S2，如果扫描到操作符，则从S2弹出两个操作数进行相应的操作，并将结果压进S2(S2的个数出2个进1个),\n当扫描结束后，S2的栈顶就是表达式结果。\n3. 后缀表达式\n　　后缀表达式又叫做逆波兰式。它是由相应的语法树的后序遍历的结果得到的。如上图的后缀表达式为：\nA B C D -  + E F  -\n由前缀表达式求出结果十分方便，只需要用一个栈实现：\n我们可以用一个栈S2来实现计算，扫描从左往右进行，如果扫描到操作数，则压进S2，如果扫描到操作符，则从S2弹出两个操作数\n进行相应的操作，并将结果压进S2(S2的个数出2个进1个),当扫描结束后，S2的栈顶就是表达式结果。后缀表达式和前缀表达式看\n起来就像一对逆过程，实际上并不是这样子，因为字符读取的时候都是从左往右的，所以，前缀表达式往往需要用两个栈来计算，\n其中一个栈用来预处理：将字符串倒序压进栈中。\n4.中缀表达式转换成后缀表达式\n　　既然中缀表达式对于计算机的运算并不便利，而前缀后缀表达式的计算相对简单方便。因此，找到一种途径将中缀表达式\n转换成前缀后缀表达式就十分重要。实际上，二者的转换算法看起来也很像一个逆过程。因此，我们着重讨论中缀转后缀。\n从理论上讲，已知一棵二叉树的中序遍历序列，要求出它的后序遍历序列是不唯一的，即文法是有多义性的。但是，在这\n里加上了优先级这一限制条件，转换就变得唯一了。\n算法：中缀表达式转换成后缀表达式\n输入：中缀表达式串\n输出：后缀表达式串\nPROCESS BEGIN:\n   1.从左往右扫描中缀表达式串s，对于每一个操作数或操作符，执行以下操作;\n            2.IF (扫描到的s[i]是操作数DATA)\n　　　　　    将s[i]添加到输出串中;\n           3.IF (扫描到的s[i]是开括号'(')\n\n                    将s[i]压栈;\n\n           4.WHILE (扫描到的s[i]是操作符OP)\n\n                   IF (栈为空 或 栈顶为'(' 或 扫描到的操作符优先级比栈顶操作符高)\n\n                         将s[i]压栈;\n\n                         BREAK;\n\n                   ELSE\n\n                         出栈至输出串中\n\n           5.IF (扫描到的s[i]是闭括号')')\n\n                   栈中运算符逐个出栈并输出，直到遇到开括号'(';\n\n                   开括号'('出栈并丢弃;\n\n           6.返回第1.步\n　　       7.WHILE (扫描结束而栈中还有操作符)\n                    操作符出栈并加到输出串中\nPROCESS END\n5.中缀表达式转换成前缀表达式\n　　中缀表达式转换成前缀表达式和中缀表达式转换成后缀表达式十分类似，只需要将扫描方向由前往后变成由后往前，\n​    将'('改为')',')'改为'(',注意其中一个判断优先级的地方需要由>=变成>. \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 23:46:56\n"},"栈/有效的括号_LeetCode_20.html":{"url":"栈/有效的括号_LeetCode_20.html","title":"有效的括号_LeetCode_20","keywords":"","body":"有效的括号(LeetCode_20)\n1.题目\n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n有效字符串需满足：\n\n左括号必须用相同类型的右括号闭合。\n左括号必须以正确的顺序闭合。\n\n注意空字符串可被认为是有效字符串。\n示例 1:\n输入: \"()\"\n输出: true\n示例 2:\n输入: \"()[]{}\"\n输出: true\n示例 3:\n输入: \"(]\"\n输出: false\n示例 4:\n输入: \"([)]\"\n输出: false\n示例 5:\n输入: \"{[]}\"\n输出: true\n2.分析\n3.代码\n清楚易懂\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        # 没有括号,也叫做括号匹配\n        if not s:return True\n        stack = []\n        if s[0] in ['}',']',')']:\n            return False\n        for i in s:\n            if not stack:\n                stack.append(i)\n                continue\n            tmp = stack[-1]\n            if tmp == '{':\n                if i != '}':\n                    stack.append(i)\n                else:\n                    stack.pop()\n            elif tmp == '[':\n                if i != ']':\n                    stack.append(i)\n                else:\n                    stack.pop()\n            elif tmp == '(':\n                if i != ')':\n                    stack.append(i)\n                else:\n                    stack.pop()\n        if not stack:\n            return True\n        else:\n            return False\n\n优化\nclass Solution(object):\n    def isValid(self, s):\n        stack = []\n        judge = {'()','[]','{}'}\n        for i in s:\n            if not stack: \n                stack.append(i)\n            else:\n                # stack[-1]+ i字符串拼接  \n                if stack[-1]+ i in judge:\n                    stack.pop()\n                else:\n                    stack.append(i)\n\n        return stack == []\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 20:01:32\n"},"栈/最长有效括号_LeetCode_32.html":{"url":"栈/最长有效括号_LeetCode_32.html","title":"最长有效括号_LeetCode_32","keywords":"","body":"最长有效括号(LeetCode_32)\n1.题目\n给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。\n示例 1:\n输入: \"(()\"\n输出: 2\n解释: 最长有效括号子串为 \"()\"\n示例 2:\n输入: \")()())\"\n输出: 4\n解释: 最长有效括号子串为 \"()()\"\n2.分析\n3.代码\nclass Solution(object):\n    def longestValidParentheses(self, s):\n        stack = []\n        res = 0\n        start = 0\n        for i in range(len(s)):\n            if not stack:\n                if i == ')':\n                    # 只有连续))))),既不入栈,同时还要不断更新start\n                    start = i +1\n                elif i == '(':\n                    stack.append(i)\n            else:\n                if i == ')':\n                    tmp = stack.pop()\n                    if stack:\n                        # res = max(res, i-stack[-1])\n                           res = max(res, i-tmp+1)\n                    else:\n                         res = max(res, i-start + 1)\n                elif i == '(':\n                    stack.append(i)\n          return res\n\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        if len(s) == 0:\n            return 0\n        stack = []\n        max_len, start = 0, 0\n        for i in range(len(s)):\n            if s[i] == \"(\":\n                stack.append(i)\n            if s[i] == \")\":\n                if not stack:\n                    start = i + 1\n                # elif s[stack[-1]] == \"(\":\n                else:\n                    stack.pop(-1)\n                    if not stack:\n                        max_len = max(max_len, i-start+1)\n                    else:\n                        max_len = max(max_len, i-stack[-1])\n        return max_len\n\n动态规划\nclass Solution(object):\n    def longestValidParentheses(self, s):\n        n = len(s)\n        if n=0:\n                    dp[i] = dp[i-1]+2\n                    # 处理独立的括号对的情形 类似()()、()(())\n                    if pre>0: # 处理只有一对()情况,不加判断,结果为4，当只有一对括号时，不需要向前扩展了\n                        dp[i] += dp[pre-1]\n        return max(dp)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-24 10:03:02\n"},"双指针/":{"url":"双指针/","title":"双指针","keywords":"","body":"双指针\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-08 00:43:19\n"},"双指针/将奇数放在偶数的前面.html":{"url":"双指针/将奇数放在偶数的前面.html","title":"将奇数放在偶数的前面","keywords":"","body":"将奇数放在偶数的前面\n1.题目\n将数组的奇数放到偶数的前面\n2.分析\n可以使用快速排序的思想\n3.代码\n3.1代码1（奇数放到偶数前）\nimport random\nimport sys   \nsys.setrecursionlimit(1000000)\nfrom copy import deepcopy\n\ndef resetArray(nums, left, right):\n    # 当数组的数 >= 2 时才有交换的价值\n    while left \n3.2代码2（为了保证代码的整齐性，可以简单封装一下）\nimport random\nimport sys   \nsys.setrecursionlimit(1000000)\nfrom copy import deepcopy\ndef _quick_sort(nums, left, right):\n    # 至少有两个元素\n    if left = tmp:\n            right -= 1\n        nums[left] = nums[right]\n        while left \n3.3代码3（将整除3的放在前面）\ndef resetArray(nums, left, right):\n    while left \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 17:58:36\n"},"双指针/有序数组的平方_LeetCode_977.html":{"url":"双指针/有序数组的平方_LeetCode_977.html","title":"有序数组的平方_LeetCode_977","keywords":"","body":"有序数组的平方(LeetCode_977)\n1.题目\n给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。\n示例 1：\n输入：[-4,-1,0,3,10]\n输出：[0,1,9,16,100]\n示例 2：\n输入：[-7,-3,2,3,11]\n输出：[4,9,9,49,121]\n提示：\n 1 \n2.分析\n因为数组 A 已经排好序了， 所以可以说数组中的负数已经按照平方值降序排好了，数组中的非负数已经按照平方值升序排好了。\n\n举一个例子，若给定数组为 [-3, -2, -1, 4, 5, 6]，数组中负数部分 [-3, -2, -1] 的平方为 [9, 4, 1]，数组中非负部分 [4, 5, 6] 的平方为 [16, 25, 36]。我们的策略就是从前向后遍历数组中的非负数部分，并且反向遍历数组中的负数部分。\n\n\n两种双指针方法\n\n3.代码\n二分法：查找距离某个元素最近的位置 （如果存在该元素，就输出该元素位置）（此处查找0元素）\n当前数组有序\n\n        li = [-5,-3,-1,2,3,6,7]\n\n        def func(li):\n            left,right = 0,len(li)-1\n\n            while left 0:\n                    right = mid-1\n                else:\n                    print('有相等元素,最近下标为',mid)\n                    return\n            print(left,right)\n            # 如果没有相等元素，最后left>right,且left=right+1\n            if li[left]-0 > 0-li[right]:\n                print(\"没有相等，最近下标为\",right)\n                return\n            else:\n                print('没有相等，最近下标为',left)\n                return \n\n        func(li)\n\n普通法查找\n        li = [-5,-3,-1,0,2,3,6,7]\n        def func(li):\n            A = li[:]\n            left, right = 0, len(A)-1\n            if A[0]>=0:\n                print('最近下标为',0)\n                return\n            while leftli[left]-0:\n                    print(\"没有相等，最近下标为\",left)\n                    return \n                else:\n                    print('没有相等，最近下标为',left-1)\n                    return\n        func(li)\n\n找到离0最近的值，向两边遍历 (找0时候用的是二分法查找，因为0应该在中间附近，二分法查找更快)\nclass Solution:\n    def sortedSquares(self, A: List[int]) -> List[int]:\n        n = len(A)\n        left, right = 0, n-1\n        if n == 1:\n            return [A[0]**2]\n\n        def func(li, left, right):\n            while left  0:\n                    right = mid-1\n                elif li[mid] right,且left=right+1  \n            if li[left]-0 > 0-li[right]:\n                return right\n            return left\n        res = []\n        if A[0] \n两边向中间遍历 \nclass Solution(object):\n    def sortedSquares(self, A):\n        left, right = 0, len(A)-1\n        # 先定义好res,后面再相应位置修改res里面的值,而不是res = [],然后一个个添加元素,因为从两边向中间遍历,添加的元素从大到小,如果我们用res.append(...)，则最后需要res.resverse().如果添加元素时候，res.insert(0,...)则每次添加元素,其实内部都有大量操作(当前元素向后移位)。所以我们先定义好res.直接修改相应位置\n        res = [0] * (right+1)\n        cur = right\n        while left\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 17:18:27\n"},"双指针/验证回文字符串2_LeetCode_680.html":{"url":"双指针/验证回文字符串2_LeetCode_680.html","title":"验证回文字符串2_LeetCode_680","keywords":"","body":"验证回文字符串 Ⅱ(LeetCode_680)\n1.题目\n给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。\n示例 1:\n输入: \"aba\"\n输出: True\n示例 2:\n输入: \"abca\"\n输出: True\n解释: 你可以删除c字符。\n注意:\n字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。\n\n2.分析\n\n双指针\n递归\n原生 判断回文字符串\n\n3.代码\n双指针\nclass Solution:\n    def validPalindrome(self, s: str) -> bool:\n        if len(s) \n递归\nclass Solution:\n    def validPalindrome(self, s: str) -> bool:   \n        if len(s)0:\n                        return func(s,left+1,right,0) or func(s,left,right-1,0)\n                    else:\n                        return False\n\n            return True\n        return func(s,0,len(s)-1,1)\n\n原生写法，通过率99.99%，超时，其它语言可通过\nclass Solution:\n    def validPalindrome(self, s: str) -> bool:\n        if not s:return True\n        flag =True\n        left, right = 0,len(s)-1\n        while left \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 17:27:36\n"},"双指针/构成三角形的个数.html":{"url":"双指针/构成三角形的个数.html","title":"构成三角形的个数","keywords":"","body":"1.题目\n给出一组序列,序列中的元素都大于0，则该序列中元素可以构成多少个三角形\n2.分析\n\n双指针法\n先将数组排序，对于 a c,则可以构成三角形，`a  c，则 \n\n3.代码\n    def numDupDigitsAtMostN(self, N: int) -> int:\n\n        def func(li):\n            li.sort()\n            print(li)\n\n            n = len(li)\n            left, right = 0, n-1\n            res = 0\n            for i in range(n-2):\n                j = i+1\n                while j li[j+1]:\n                        j += 1\n                        res += 1 \n            print(res)\n\n        func([2,3,4,5,6])\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 17:49:54\n"},"双指针/反转字符串中的元音字母_LeetCode_345.html":{"url":"双指针/反转字符串中的元音字母_LeetCode_345.html","title":"反转字符串中的元音字母_LeetCode_345","keywords":"","body":"反转字符串中的元音字母(LeetCode_345)\n1.题目\n编写一个函数，以字符串作为输入，反转该字符串中的元音字母。交换左右两边的元音字母\n示例 1:\n输入: \"hello\"\n输出: \"holle\"\n示例 2:\n输入: \"leetcode\"\n输出: \"leotcede\"\n说明:\n元音字母不包含字母\"y\"。\n2.分析\n...\n3.代码\nclass Solution:\n    def reverseVowels(self, s: str) -> str:\n        if not s:return ''\n        left, right = 0, len(s)-1\n        # print(right)\n        s = list(s)\n        tmp = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        while left\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 17:54:09\n"},"双指针/平方数之和_LeetCode_633.html":{"url":"双指针/平方数之和_LeetCode_633.html","title":"平方数之和_LeetCode_633","keywords":"","body":"平方数之和(LeetCode_633)\n1.题目\n给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a2 + b2 = c。\n示例1:\n输入: 5\n输出: True\n解释: 1 * 1 + 2 * 2 = 5\n示例2:\n输入: 3\n输出: False\n2.分析\n...\n3.代码\nfrom math import *\nclass Solution:\n    def judgeSquareSum(self, c: int) -> bool:\n        left,right = 0,int(sqrt(c))+1\n\n        while left c:\n                right -= 1\n            elif tmp \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 18:07:42\n"},"双指针/合并两个有序数组_LeetCode_88.html":{"url":"双指针/合并两个有序数组_LeetCode_88.html","title":"合并两个有序数组_LeetCode_88","keywords":"","body":"合并两个有序数组(LeetCode_88)\n1.题目\n给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。\n说明:\n\n初始化 nums1 和 nums2 的元素数量分别为 m 和 n。\n你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。\n\n示例:\n输入:\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n输出: [1,2,2,3,5,6]\n2.分析\n3.代码\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n'''\n        两个有序数组进行合并,就联想到归并排序。我们既可以从前往后归并，也可以从后往前归并。\n        但是本题nums1后面留的空间足够，所以我们在nums1尾部进行添加元素，不需要重新开辟数组进行归并。因此我们只能从后向前归并，因为nums2归并到nums1上，如果从前往后归并，那么需要不断调整nums1的值，防止nums1中未归并的值被覆盖丢失，相当复杂。而我们从后往前归并，就不需要这么复杂了。\n        我们归并的起点为m-1,n-1(因为这是下标表示，所以减一)。归并结果保存位置从 (m+n-1)开始(因为这是下标表示，所以减一)。归并起点和归并结果的位置都是从右向左前进。\n\n        第一轮循环合并完后，由于可能nums2指针未走完(n>=0:nums2还有元素比nums1最小元素小)，需要将nums2剩余首部覆盖至nums1首部。nums1指针未走完不需要做任何多余操作，因为覆盖前后相同。\n        nums1 = 【3,4,5,0,0】\n        nums2 = 【1,2】\n\n        第一个while循环跳出后, \n            nums1 = [3,4,3,4,5]\n            nums2 = [1,2]\n\n            nums2的下标为 n=1\n            所以 用while循环将nums2依次添加到nums1\n\n        nums1 = 【1,2,5,0,0】\n        nums2 = 【3,4】\n        第一个while循环跳出后, \n            nums1 = [1,2,3,4,5]\n            nums2 = []\n\n            nums2 的下标为 n=-1\n            不用第二个循环\n'''   \n        # nums1 添加的新值的首下标\n        cur = m+n-1\n        n = n-1\n        m = m-1\n        while n>=0 and m>=0:\n            if nums1[m]>nums2[n]:\n                nums1[cur] = nums1[m]\n                m -= 1\n            else:\n                nums1[cur] = nums2[n]\n                n -= 1\n            cur -= 1\n        while n>=0:\n            nums1[cur] = nums2[n]\n            n -= 1\n            cur -= 1\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 18:26:31\n"},"二分/":{"url":"二分/","title":"二分","keywords":"","body":"二分\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-08 00:43:19\n"},"二分/二分搜索.html":{"url":"二分/二分搜索.html","title":"二分搜索","keywords":"","body":"二分搜索\n1. 二分搜索有递归和循环两种方式\n2.1 递归实现二分查找\ndef func(li, item, left, right):\n    if left  item:\n            right = mid - 1\n            return func(li, item, left, right)# 递归如果有返回值,所有调用的地方必须写return\n        else:\n            return True\n    else:\n        return False\na = [2,3,32,2,23,2]\nb = func(a,2,0,len(a)-1)\nprint(b)\n\n2.2 递归二分搜索查找第二版本\ndef func(li, item, left, right):\n    if left  item:\n            right = mid - 1 \n        else:\n            return True\n        res = func(li, item, left, right) # 递归如果有返回值,所有调用的地方必须写return\n        if not res:\n            return False\n        else:\n            return True\n    else:\n        return False\n\n2.3 循环实现二分搜索\ndef func(li, item):\n    left, right = 0, len(li)-1\n    # 用while 就说明是循环，而不是靠func传没传left和right决定\n    while left  item:\n            right = mid - 1\n        else:\n            return True\n    return False\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 09:10:11\n"},"二分/二叉搜索树中第K小的元素.html":{"url":"二分/二叉搜索树中第K小的元素.html","title":"二叉搜索树中第K小的元素","keywords":"","body":"二叉搜索树中第K小的元素\n1.题目\n给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。\n说明：\n你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。\n示例 1:\n输入: root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n   2\n输出: 1\n\n示例 2:\n输入: root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n输出: 3\n\n2.分析\n3.代码1\nclass Solution(object):\n    def kthSmallest(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n        arr = []\n        def inder(root, arr, k):\n            if root:\n                inder(root.left, arr, k)\n                if len(arr) >= k:\n                    # print(root.val)\n                    return\n                arr.append(root.val)\n                inder(root.right, arr, k)\n        inder(root, arr, k)\n        # print(arr[-1])\n        # 必须这样，而不能直接在if语句返回 return arr[-1]\n        return arr[-1]\n\n代码2\nclass Solution(object):\n    def countNodes(self, root): # 计算树的节点数\n        if root == None: \n            return 0\n        else:\n            return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n\n    def kthSmallest(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # 先遍历所有的值，然后找到第k小的数字，最后利用二分搜索进行处理\n        if root == None:\n            return None\n        leftCount = self.countNodes(root.left)\n        if k \n\n[!TIP]\n计算树的节点数\ndef countNodes(self, root):\n    if root == None:\n        return 0\n    else:\n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:51:38\n"},"二分/寻找两个有序数组的中位数.html":{"url":"二分/寻找两个有序数组的中位数.html","title":"寻找两个有序数组的中位数","keywords":"","body":"寻找两个有序数组的中位数\n1.题目\n给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。\n请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。\n你可以假设 nums1 和 nums2 不会同时为空。\n示例 1:\nnums1 = [1, 3]\nnums2 = [2]\n\n则中位数是 2.0\n\n示例 2:\nnums1 = [1, 2]\nnums2 = [3, 4]\n\n则中位数是 (2 + 3)/2 = 2.5\n\n2.分析\n3.代码\n3.1代码1\ndef findMedianSortedArrays(self, nums1: 'List[int]', nums2: 'List[int]') -> 'float':\n    nums1.extend(nums2)\n    nums1.sort()\n    num_len = len(nums1) //2\n    return (nums1[num_len] + nums1[~num_len])/2\n\n3.2代码2\n    def findMedianSortedArrays(self, nums1: 'List[int]', nums2: 'List[int]') -> 'float':\n        a = nums1\n        b = nums2\n        a_flag = 0\n        b_flag = 0\n        res = []\n        if not a:\n            res = b\n            b_flag = 1\n        if not b:\n            res = a\n            a_flag = 1\n        a_index = b_index = 0\n        while a_index \n3.3代码3（归并的最后一次）\n        def findMedianSortedArrays(self, nums1, nums2):\n            res = []\n            num_len = (len(nums1)+len(nums2))//2\n            while nums1 and nums2:\n                if nums1[-1] >= nums2[-1]:\n                    res.insert(0, nums1.pop())\n                else:\n                    res.insert(0, nums2.pop())\n            res = (nums1 or nums2) + res\n            print(res)\n            return (res[num_len] + res[~num_len])/2\n\n3.4代码4（未完成）\n        def findMedianSortedArrays(self, nums1, nums2):\n            if not nums1 and not nums2:\n                return \n            elif not nums1 or not nums2:\n                nums = nums1+nums2\n                nums_len = len(nums)//2\n                return (nums[nums_len] + nums[~nums_len])/2\n            print( self.findMedian(nums1, nums2))\n\n        def findMedian(self, nums1, nums2):\n            if len(nums1)  nums2[nums_2_mid]:\n                self.findMedian(nums1[nums_1_mid:], nums2[:nums_2_mid])\n            elif nums1[nums_1_mid] \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:57\n"},"二分/找出数组中第K大的数.html":{"url":"二分/找出数组中第K大的数.html","title":"数组中第K大的数","keywords":"","body":"找出数组中第K大的数\n1.题目\n在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。\n示例 1:\n输入: [3,2,1,5,6,4] 和 k = 2\n输出: 5\n示例 2:\n输入: [3,2,3,1,2,4,5,5,6] 和 k = 4\n输出: 4\n说明:\n你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。\n2.分析\n\n可以用类似快速排序，也可以用类似冒泡排序\n\n3.代码\nclass Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n\n        if len(nums) == 1:\n            return nums[0]\n        mid = nums[0]\n        right = [i for i in nums[1:] if i >= mid]\n        left = [i for i in nums[1:] if i len(right):\n            return self.findKthLargest(left, k-len(right)-1)\n        else:\n            return self.findKthLargest(right, k)\n\n冒泡排序有错\n        def findKthLargest(self, nums, k):\n            nums_len = len(nums)\n            if nums_len == 1: return nums[0]\n            res = 0\n            for i in range(k):\n                # print(i)\n                for j in range(nums_len-1-i):\n                    if nums[j] >= nums[j+1]:\n                        nums[j],nums[j+1] = nums[j+1],nums[j]\n                    if i==k-2 and j == nums_len-2-i:\n                        # print(nums[j])\n                        return nums[j-1]\n\n> [!NOTE]\n> 这是一个简单的Note类型的使用，所有的属性都是默认值。\n\n[!NOTE]\n这是一个简单的Note类型的使用，所有的属性都是默认值。\\\n\n> [!NOTE]\n> 这是一个简单的Note类型的使用，所有的属性都是默认值。\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:57\n"},"二分/找出数组中唯一重复的元素.html":{"url":"二分/找出数组中唯一重复的元素.html","title":"找出数组中唯一重复的元素","keywords":"","body":"找出数组中唯一重复的元素\n1.题目\n​    数字1~1000存放在含有1001个元素组成的数组中，其中只有唯一的一个元素值重复，其他数字只出现一次，设计一个算法，将重复元素找出来，要求每个元素只能访问一次，如果不使用辅助存储空间，能否设计一个算法实现？\n2.分析\n​    累加求和就去另一个累加求和\n3.代码\n3.1代码1（累加求和）\ndef findDup(nums):\n    min_num = float('inf')\n    max_num = float('-inf')\n    sum_1 = 0\n    sum_2 = 0\n    for i in nums:\n        if i  max_num:\n            max_num = i\n        sum_1 += i\n    for i in range(min_num, max_num+1):\n        sum_2 += i\n    return abs(sum_1 - sum_2)\nprint(findDup([0,1,2,3,4,5,5,6]))\n\n3.2代码2（异或）\ndef findDup(nums):\n    nums_len = len(nums)\n    i = 0\n    for j in nums:\n        i ^= j\n#     print(i)\n    j = 1\n    while j \n\n[!TIP]\n相同元素异或等于0，0与任何元素异或为该元素\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:57\n"},"二分/找出数组中前k大.html":{"url":"二分/找出数组中前k大.html","title":"找出数组中前k大","keywords":"","body":"找出数值中前k大\n1.题目\n2.分析\n\n通过分析，最大的前三个数比数值中其其它数都大，因此可以采用类似求最大值的方法来求前三名。初始化前三名为最小整数：r1,r2,r3。\n然后遍历数组\n如果当前值tmp > r1:r3=r2,r2=r1,r1=tmp\n如果当前值tmp>r2且不等于r1：r3=r2,r2=tmp\n如果当前值tmp大于r3且不等于r2,r3 = tmp\n\n3.代码1\n\ndef findTop3(li):\n    if li == None or len(li) r1:\n            r3,r2,r1 = r2,r1,li[i]\n        elif li[i]>r2:\n            r3,r2 = r2,li[i]\n        else:\n            r3 = li[i]\n        i += 1\n    print(\"前三名：\"+str(r1)+\",\"+str(r2)+\",\"+str(r3))\nfindTop([2,3,4,45,5,5])\n\n\n\n代码2（堆排序）\n\nimport heapq\nli = list(range(10))\nrandom.shuffle(li)\ndef topk(li, k):\n    tmp = li[:k]\n    heapq.heapify(tmp)\n    for i in li[k:]:\n        if i \n​\n\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:57\n"},"二分/颜色分类.html":{"url":"二分/颜色分类.html","title":"颜色分类","keywords":"","body":"颜色分类(LeetCode_75)\n1.题目\n给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。\n此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。\n注意: \n不能使用代码库中的排序函数来解决这道题。\n示例: \n输入: [2,0,2,1,1,0]\n输出: [0,0,1,1,2,2]\n进阶：\n\n一个直观的解决方案是使用计数排序的两趟扫描算法。\n首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。\n\n\n你能想出一个仅使用常数空间的一趟扫描算法吗？\n\n2.分析\n3.代码\nclass Solution(object):\n    # rtype: None Do not return anything, modify nums in-place instead.\n    def sortColors(self, nums):\n        left = -1\n        right = len(nums)\n        curr = 0\n        while curr \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-21 03:18:01\n"},"二分/快速排序解决奇偶问题.html":{"url":"二分/快速排序解决奇偶问题.html","title":"快速排序解决奇偶问题","keywords":"","body":"def partition(list1):\n        \"\"\"\n        在[left, right]对list1 进行奇数、偶数划分\n        \"\"\"\n    # 初始值\n    left = -1\n    right = len(nums)\n    curr = 0\n    while curr Copyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-19 20:14:17\n"},"二分/查找距离某个值最近的下标.html":{"url":"二分/查找距离某个值最近的下标.html","title":"查找距离某个值最近的下标","keywords":"","body":"数组有序，用二分\n        li = [-5,-3,-1,2,3,6,7]\n\n        def func(li):\n            left,right = 0,len(li)-1\n\n            while left 0:\n                    right = mid-1\n                else:\n                    print('有相等元素,最近下标为',mid)\n                    return\n            print(left,right)\n            # 如果没有相等元素，最后left>right,且left=right+1\n            if li[left]-0 > 0-li[right]:\n                print(\"没有相等，最近下标为\",right)\n                return\n            else:\n                print('没有相等，最近下标为',left)\n                return \n\n        func(li)\n\n数组无序\n        li = [-5,-3,-1,0,2,3,6,7]\n        def func(li):\n            A = li[:]\n            left, right = 0, len(A)-1\n            if A[0]>=0:\n                print('最近下标为',0)\n                return\n            while leftli[left]-0:\n                    print(\"没有相等，最近下标为\",left)\n                    return \n                else:\n                    print('没有相等，最近下标为',left-1)\n                    return\n        func(li)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 18:29:48\n"},"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html":{"url":"二分/寻找选择排序数组中最小值_LeetCode_153_中等.html","title":"寻找选择排序数组中最小值LeetCode_153中等","keywords":"","body":"寻找旋转排序数组中的最小值(LeetCode153中等)\n1.题目\n假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。\n请找出其中最小的元素。\n你可以假设数组中不存在重复元素。\n示例 1:\n输入: [3,4,5,1,2]\n输出: 1\n示例 2:\n输入: [4,5,6,7,0,1,2]\n输出: 0\n2.分析\n等价于前面一堆0，后面一堆1，寻找第一个1的位置\n# 1、nums[mid] > nums[right]：例子：[7, 8, 9, 10, 1, 2]，mid 肯定不是最小；\n# 2、否则，nums[mid] \n# 二分法：首先要判断这个有序数组是否旋转了，通过比较第一个和最后一个数的大小，如果第一个数小，则没有旋转，直接返回这个数。如果第一个数大，就要进一步搜索。我们定义left和right两个指针分别指向开头和结尾，还要找到中间那个数，然后和left指的数比较，如果中间的数大，则继续二分查找右半段数组，反之查找左半段。终止条件是当左右两个指针相邻，返回小的那个。\n\n3.代码\n    def findMin(self, nums: List[int]) -> int:\n        # 二分法：首先要判断这个有序数组是否旋转了，通过比较第一个和最后一个数的大小，如果第一个数小，则没有旋转，直接返回这个数。如果第一个数大，就要进一步搜索。我们定义left和right两个指针分别指向开头和结尾，还要找到中间那个数，然后和left指的数比较，如果中间的数大，则继续二分查找右半段数组，反之查找左半段。终止条件是当左右两个指针相邻，返回小的那个。\n        if not nums:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        if nums[0]  nums[mid]:\n                return nums[mid]\n            elif nums[mid+1]  nums[left]:\n                left = mid\n            else:\n                # 分治法\n                return min(self.findMin_1(nums, left, mid-1), self.findMin_1(nums, mid+1, right))\n\n递归\n    def findMin(self, nums: List[int]) -> int:\n        # 二分法：首先要判断这个有序数组是否旋转了，通过比较第一个和最后一个数的大小，如果第一个数小，则没有旋转，直接返回这个数。如果第一个数大，就要进一步搜索。我们定义left和right两个指针分别指向开头和结尾，还要找到中间那个数，然后和left指的数比较，如果中间的数大，则继续二分查找右半段数组，反之查找左半段。终止条件是当左右两个指针相邻，返回小的那个。\n        left, right = 0, len(nums)-1\n        return self.findMin_1(nums, left, right)\n    def findMin_1(self, nums, left, right):\n        if left == right:\n            return nums[left]\n        if left + 1 == right:\n            return min(nums[left], nums[right])\n        mid = (left+right)//2\n        return min(self.findMin_1(nums, left, mid), self.findMin_1(nums, mid+1, right))\n\n    def findMin(self, nums):\n        if not nums:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        if nums[0]  nums[right]:\n                left = mid+1\n            # 否则右边一定是有序的,但是mid这个位置可能会是最小值，所以下次还要继续搜索\n            else:\n                right = mid\n        # print(left, right)\n        return nums[left]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-26 09:55:01\n"},"二分/二分查找_LeetCode_704.html":{"url":"二分/二分查找_LeetCode_704.html","title":"二分查找_LeetCode_704","keywords":"","body":"二分查找(LeetCode704简单)\n1.题目\n给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n示例 1:\n输入: nums = [-1,0,3,5,9,12], target = 9\n输出: 4\n解释: 9 出现在 nums 中并且下标为 4\n示例 2:\n输入: nums = [-1,0,3,5,9,12], target = 2\n输出: -1\n解释: 2 不存在 nums 中因此返回 -1\n提示：\n\n你可以假设 nums 中的所有元素是不重复的。\nn 将在 [1, 10000]之间。\nnums 的每个元素都将在 [-9999, 9999]之间\n\n2.分析\nhttps://leetcode-cn.com/problems/binary-search/solution/er-fen-cha-zhao-xiang-jie-by-labuladong/\nhttps://leetcode-cn.com/problems/search-insert-position/solution/te-bie-hao-yong-de-er-fen-cha-fa-fa-mo-ban-python-/\n3.代码\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        n = len(nums)\n        if n == 0:return -1\n        left, right = 0, n-1\n        while left>1\n            if nums[mid] == target:\n                return mid\n            elif nums[mid]  target:\n                right = mid-1\n        return -1\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-26 10:13:18\n"},"二分/搜索插入位置_LeetCode_35.html":{"url":"二分/搜索插入位置_LeetCode_35.html","title":"搜索插入位置_LeetCode_35","keywords":"","body":"搜索插入位置(LeetCode_35)\n1.题目\n给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n你可以假设数组中无重复元素。\n示例 1:\n输入: [1,3,5,6], 5\n输出: 2\n示例 2:\n输入: [1,3,5,6], 2\n输出: 1\n示例 3:\n输入: [1,3,5,6], 7\n输出: 4\n示例 4:\n输入: [1,3,5,6], 0\n输出: 0\n2.分析\n3.代码\nclass Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        # 寻找插入点使用二分法，但与寻找某数字不同的是，需要考虑一些边界条件：\n        # 当插入数字和nums中某数字相等时，插入到左边还是右边？本题要求插到左边；\n        # 插入数字在nums第一个数字左边，或在最后一个数字右边；\n\n        left, right = 0, len(nums) - 1\n        while left \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 19:05:38\n"},"二分/x的平方根_LeetCode_69_简单.html":{"url":"二分/x的平方根_LeetCode_69_简单.html","title":"x的平方根LeetCode_69简单","keywords":"","body":"x 的平方根(LeetCode69简单)\n1.题目\n实现 int sqrt(int x) 函数。\n计算并返回 x 的平方根，其中 x 是非负整数。\n由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。\n示例 1:\n输入: 4\n输出: 2\n示例 2:\n输入: 8\n输出: 2\n说明: 8 的平方根是 2.82842..., \n     由于返回类型是整数，小数部分将被舍去。\n2.分析\n\n牛顿法\n\n\n\n如果我们要求a的平方根，首先令f(x)=x^2-a;那么我们的目的就是求得x使得f(x)=0;\n\n由函数f(x)=x^2-a，我们求导可以知道，函数上任意一点(x,y)的切线的斜率为2x。\n假设过点（x0,y0）的切线方程为y=kx+b，那么切线与x轴的交点横坐标为-b/k。\n而b=y0-kx0,k=2x0,y0=x0^2-a,化简-b/k=（x0+a/x0）/2。\n也就是说（x0+a/x0）/2是过点（x0,y0）的切线与x轴的交点的横坐标。\n记（x0+a/x0）/2=x',继续求过点（x',f(x')）的切线与x轴的交点的横坐标x''，很明显x''比x'更靠近函数f(x)=x^2-a与x轴的交点的横坐标(即a的正平方根)。\n​\n\n\n\n\n3.代码\n牛顿法**\n    def mySqrt(self, x: int) -> int:\n        # 牛顿法\n        if x 1*math.e**-9:\n            r = (r+x/r)/2 \n        return int(r)\n\n二分法\n    def mySqrt(self, x):\n        if x>1\n            sq = mid**2\n            if sq == x:\n                return mid\n            # elif sqx决定了最后非法循环出去时,left=right=mid-1还是left=right=mid+1\n            # 先写elif sqx:\n                right = mid - 1\n        # if left**2 > x:\n        #     return left-1\n        # else:\n        #     return left\n        # print(left,right)\n        if right**2 > x:\n            return right-1\n        else:\n            return right\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-26 10:06:44\n"},"二分/数字在排序数组中出现的次数.html":{"url":"二分/数字在排序数组中出现的次数.html","title":"数字在排序数组中出现的次数","keywords":"","body":"数字在排序数组中出现的次数\n`//因为data中都是整数，所以可以稍微变一下，不是搜索k的两个位置，而是搜索k-0.5和k+0.5\n//这两个数应该插入的位置，然后相减即可。\nclass Solution:\n    def GetNumberOfK(self, data, k):\n        # write code here\n        def func(arr, k):\n            left, right = 0, len(arr)-1\n            while left >1\n                if k>arr[mid]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            return left\n        return func(data, k+0.1) - func(data, k-0.1)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-19 00:37:43\n"},"三数/":{"url":"三数/","title":"三数","keywords":"","body":"三数\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-08 00:43:19\n"},"三数/最接近的三数之和.html":{"url":"三数/最接近的三数之和.html","title":"最接近的三数之和","keywords":"","body":"最接近的三数之和\n1.题目\n给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。\n例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.\n\n与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).\n\n2.分析\n我们要将l=i+1、r=len(nums)-1这样初始化，因为我们希望在[l:r]中进行寻找操作。计算sum=nums[i]+nums[l]+nums[r]和target的差是多少，并且我们要记录下来，最后取最小的差对应的sum作为结果。当l\n3.代码\n代码1\n    def threeSumClosest(self, nums: 'List[int]', target: 'int') -> 'int':\n        nums.sort()\n        len_nums = len(nums)\n        res = []\n        # 固定i，调整j和k\n        for key, value in enumerate(nums[:len_nums-2]):\n            l, r = key+1,len_nums-1\n            if nums[l] + nums[l+1] + value > target:\n                res.append(nums[l] + nums[l+1] + value)\n            elif nums[r] + nums[r-1] + nums[r-2] \n代码2\n    def threeSumClosest(self, nums: 'List[int]', target: 'int') -> 'int':\n        nums.sort()\n        len_nums = len(nums)\n        best_dist = float('inf')\n        best_sum = 0\n        for key, value in enumerate(nums[:len_nums-2]):\n            l, r = key+1,len_nums-1\n            while l \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:59\n"},"三数/三数之和 腾讯.html":{"url":"三数/三数之和 腾讯.html","title":"三数之和（腾讯）","keywords":"","body":"三数之和（腾讯）\n1.题目\n给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。\n注意：答案中不可以包含重复的三元组。\n例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，\n\n满足要求的三元组集合为：\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n\n2.分析\n注意去重\n\n\n\n【-2，-2，1，1】头去重\nif i > 0 and nums[i] == nums[i-1]:continue\n\n\n\n\n【-2，1，1，1】尾去重\nwhile j\n\n\n\n3.代码\n    def threeSum(self,nums: 'List[int]') -> 'List[List[int]]':\n        if len(nums)  0:\n                break   \n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            #记录下第二、第三个数的下标位置\n            j = i+1\n            k = len_nums - 1\n            while j  0:\n                    k -= 1\n                elif s \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:29\n"},"三数/求最小三元组距离.html":{"url":"三数/求最小三元组距离.html","title":"求最小三元组距离","keywords":"","body":"求最小三元组距离\n1.题目\n​    已知升序整数数组a【l】,b【m】,c【n】,请在三个数组总各找一个元素，使得组成的三元组的距离最小，三元组距离的定义为Distance =  max(abs(a[i]-b[j]), abs(a[i]-c[k]), abs(b[j]-c[k])),请计算最小三元组距离。\n2.分析\n​    最小距离法，数学运算法\n\n数学云算法\nDistance =  1/2 * (abs(a[i]-b[j]), abs(a[i]-c[k]), abs(b[j]-c[k]))\n\n3.代码\ndef minDis(a, b, c):\n    alen = len(a)\n    blen = len(b)\n    clen = len(c)\n    min_dis = float('inf')\n    i, j, k = 0, 0, 0 \n    while True:\n        tmp_dis = max(abs(a[i]-b[j]), abs(a[i]-c[k]), abs(b[j]-c[k]))\n        if tmp_dis \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:23\n"},"三数/三个数的最大乘积 LeetCode 628.html":{"url":"三数/三个数的最大乘积 LeetCode 628.html","title":"三个数的最大乘积 LeetCode 628","keywords":"","body":"三个数的最大乘积 LeetCode 628\n1.题目\n给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。\n示例 1:\n输入: [1,2,3]\n输出: 6\n示例 2:\n输入: [1,2,3,4]\n输出: 24\n注意:\n\n给定的整型数组长度范围是[3,104]，数组中所有的元素范围是[-1000, 1000]。\n输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。\n\n2.分析\n\n先排好序\n然后取最大的3个数相乘，或者最小的两个数（负数）和最大的一个数相乘\n\n3.代码\nclass Solution:\n    def maximumProduct(self, nums: List[int]) -> int:\n        nums.sort()\n        return max(nums[0]*nums[1]*nums[-1], nums[-1]*nums[-2]*nums[-3])\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:52:26\n"},"区间搜索/":{"url":"区间搜索/","title":"区间搜索","keywords":"","body":"区间搜索\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-07 22:00:38\n"},"区间搜索/接雨水 LeetCode 42.html":{"url":"区间搜索/接雨水 LeetCode 42.html","title":"接雨水_LeetCode 42","keywords":"","body":"接雨水(LeetCode_42)\n1.题目\n给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n\n上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。\n示例:\n输入: [0,1,0,2,1,0,1,3,2,1,2,1]\n输出: 6\n\n2.分析\n\n这道题真正难点在于: 在一个位置能容下的雨水量等于它左右两边(并不要求最近的最高)柱子最大高度的最小值减去它的高度.比如下图所示,\n\n\n\n位置i能容下雨水量:min(3,1) - 0 = 1\n所以,问题就变成了: 如何找所有位置的左右两边的柱子的最大值?\n\n\n\n单调栈\n找最高点，然后从左右两边遍历到中间\n动态规划\n不用动态规划\n\n3.代码\n单调递增栈:\n==注意：==因为左边和右边对于接雨水没有用，所以第一个元素的左边我们不需要加float('inf') ,最后个元素也不需要float('inf')\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        # height = [float('inf')] + height[:] + [float('inf')]\n        n = len(height)\n\n        res = 0\n        stack = []\n        for i in range(n):\n            while stack and height[i]>height[stack[-1]]:\n                tmp = stack.pop()\n                if not stack:\n                    break\n                res += (min(height[stack[-1]],height[i])-height[tmp]) * (i-stack[-1] - 1)\n                # print(res)\n            stack.append(i)\n        return res\n\n单调递增栈\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        # height = [float('inf')] + height[:] + [float('inf')]\n        n = len(height)\n\n        res = 0\n        stack = []\n        for i in range(n):\n            if not stack or height[i]=height[stack[-1]]:\n                    tmp = stack.pop()\n                    if stack:\n                        res += (min(height[stack[-1]],height[i])-height[tmp]) * (i-stack[-1]-1)\n                    else:\n                        # 左右两边界不能装水，所以我们不需要 height = [float('inf')] + height[:] + [float('inf')]\n                        pass\n                stack.append(i)\n        return res\n\n找最高点，然后从左右两边遍历到中间\n# 找到最高点,然后从左右两边遍历到中间  \nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        if len(height) == 1:return 0\n        res = 0\n        high_id = 0\n        high_num = height[0]\n# 找到最高点\n        n = len(height)\n        for i in range(1,n):\n            if height[i]>high_num:\n                high_id = i\n                high_num = height[i]\n        # print(high_id)\n        # print(high_num)\n\n# 从左边往最高点遍历\n        tmp = height[0]\n        for i in range(0,high_id):\n            if height[i] > tmp:\n                tmp = height[i]\n            else:\n                res += (tmp-height[i])\n# 从右边往最高点遍历     \n        tmp = height[-1]\n        for j in range(n-1,high_id,-1):\n            if height[j] > tmp:\n                tmp = height[j]\n            else:\n                res += (tmp-height[j])\n        return res\n\n动态规划\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        n = len(height)\n        if n height[i]:\n                res += (tmp-height[i])\n\n        return res\n\n不用动态规划\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        n = len(height)\n        if n left[-1]:\n                left.append(height[i])\n            else:\n                left.append(left[-1])\n\n        right = [height[-1]]\n        for j in range(n-1-1,-1,-1):\n            if height[j] > right[0]:\n                right.insert(0,height[j])\n            else:\n                right.insert(0,right[0])\n\n        print(left)\n        print(right)\n        # 数组的端点，不可能盛水，所以跳过，不用遍历\n        for i in range(1,n-1):\n            tmp = min(left[i], right[i])\n            # 当前柱子高度比左右两边都高，则该处不能盛水，跳过\n            if tmp>height[i]:\n                res += (tmp-height[i])\n\n        return res\n\n测试用例\n输入：[0,1,0,2,1,0,1,3,2,1,2,1]\nstdout:\n    [0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3]\n    [3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1]\n输出：6\n预期结果：6\n\n不用动态规划（...）\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        n = len(height)\n        if n == 1:return 0\n\n        res = 0\n        # 左右两边不可能盛水，所以跳过，不遍历\n        for i in range(1,n-1):\n            left = 0\n            for j in range(0,i):\n                if height[j]>left:\n                    left = height[j]\n            right = 0\n            for j in range(i+1,n):\n                if height[j]>right:\n                    right = height[j]\n\n            tmp = min(right,left)\n            if tmp>height[i]:\n                res += (tmp-height[i])\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 23:56:30\n"},"单调栈/":{"url":"单调栈/","title":"单调栈","keywords":"","body":"单调栈\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:54:05\n"},"单调栈/单调栈原理.html":{"url":"单调栈/单调栈原理.html","title":"单调栈原理","keywords":"","body":"性质\n- 单调栈是一种特殊性质的栈，特殊之处在于栈内的元素都保持一个单调性\n\n单调栈:\n- 入栈、出栈的地方叫做栈顶\n- 栈的最底部，叫做栈底\n\n单调递增栈:从栈顶到栈底严格单调递增\n单调递减栈:从栈顶到栈底严格单调递减\n\n题目：\n​    柱状图中最大的矩形(LeetCode_84)\n解析：\n​    特例：\n-  对于这个题，如果从左到右，矩形的高度依次递增（可以不是严格递增），那么我们求解方法为：\n\n    - 从右到左依次计算各矩形高度，同时乘以该高度为矩形，宽为数组长度减去当前矩形下标（数组下标从0开始计算），最后比较谁大就行了\n\n​    正常情况：\n    但是正常情况下，后一个矩形的高度不一定比前一个矩形高度小，也就是说，就是因为这个矮高度矩形的加入，限制了我们之前矩形的高度。那么之前矩形的高度对于以后的统计就没什么用了，这个时候，我们把矮矩形添加进来之前，先计算高矩形的答案，然后删除高矩形。\n\n    这其实就是单调栈模型。在单调栈中进出栈时候，我们比较的是矩形的高度，但是栈中维护的是每个矩形的下标，这样我们就可以在弹出栈时候，统计出宽度，同时知道矩形的高度。我们就可以计算出各个矩形的高度了。由于我们所有操作都是在进栈出栈间完成，所以时间复杂度为O(n).\n\n    注意：我们数组的最后个元素进栈后，由于后面没有元素了，所以无法和其他元素进行比较，也就无法出栈，所以我们需要在数组最后添加一个元素，该元素为无穷大，或者无穷小。具体情况看是单调递增还是单调递减栈。如果是单调递减栈，数组最后添加一个无穷小，如果是单调递增栈，数组最后添加一个无穷大元素\n\n单调栈应用\n\n1.最基础的应用就是给定一组数，针对每个数，寻找它和它右边第一个比它大的数之间有多少个数。（小牛向右看）\n2.给定一序列，寻找某一子序列，使得子序列中的最小值乘以子序列的长度最大。（柱状图中的最大矩形）\n3.给定一序列，寻找某一子序列，使得子序列中的最小值乘以子序列所有元素和最大。题目 题解\n\n单调递减栈伪代码\n所以进栈出栈都是操作元素下标，然后我们可以通过元素下标获取元素\n\na 为原始数组\na = a+[float('-inf')]\nstack = []\nres = 0\nfor i in range(len(a)):\n    if (栈为空，或者入栈元素a[i]大于栈顶元素stack[-1]):\n        入栈\n    else:\n        while (栈不为空，或者栈顶元素大于等于入栈元素):\n            tmp = stack.pop()  栈元素出栈\n            res = ... 在这进行res结果更新\n        stack.append(i)   入栈刚才那个元素\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 19:30:37\n"},"单调栈/柱状图中最大的矩形_LeetCode_84.html":{"url":"单调栈/柱状图中最大的矩形_LeetCode_84.html","title":"柱状图中最大的矩形_LeetCode_84","keywords":"","body":"柱状图中最大的矩形(LeetCode_84)\n1.题目\n给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。\n求在该柱状图中，能够勾勒出来的矩形的最大面积。\n\n以上是柱状图的示例，其中每个柱子的宽度为 1，给定的高度为 [2,1,5,6,2,3]。\n\n图中阴影部分为所能勾勒出的最大矩形面积，其面积为 10 个单位。\n示例:\n输入: [2,1,5,6,2,3]\n输出: 10\n2.分析\n暴力法\n首先，要想找到第 i 位置最大面积是什么？\n是以i 为中心，向左找第一个小于 heights[i] 的位置 left_i；向右找第一个小于于 heights[i] 的位置 right_i，即最大面积为 heights[i] * (right_i - left_i -1)，如下图所示：\n\n所以，我们的问题就变成如何找 right_i 和 left_i？\n最简单的思路就是，就是暴力法，直接分别在 i 左右移动。\n单调栈\n​    我们要求每一个矩形高度，左边和右边第一个小于该矩形高度的下标。\n\n首先明确，是小于，所以用单调递减栈。\n求左边，右边两边的下标，所以要在原始数组左右各添加一个无穷小（或者原始数组中的最小值）\n\n分治法\n\n\n最大矩形区域在不包含选定柱子的左半区域当中。\n最大矩形区域在不包含选定柱子的右半区域当中。\n最大矩形区域包含选定柱子的区域。\n\n3.代码\n暴力法\nclass Solution(object):\n    def largestRectangleArea(self, heights):\n        n = len(heights)\n        res = 0\n        for i in range(n):\n            width = 0\n            h = heights[i]\n            low = i-1\n            while low>=0 and heights[low]>=h:\n                low -= 1 \n            high = i+1\n            while high=h:\n                high += 1 \n            width = high-low-1\n            res = max(res,width * h)\n        return res\n\n暴力法\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        res = 0\n        n = len(heights)\n        for i in range(n):\n            left_i = i\n            right_i = i\n            while left_i >= 0 and heights[left_i] >= heights[i]:\n                left_i -= 1\n            while right_i = heights[i]:\n                right_i += 1\n            res = max(res, (right_i - left_i - 1) * heights[i])\n        return res\n\n单调递减栈\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        res = 0\n        n = len(heights)\n        stack = []\n        # 单调递减栈，原始数组右边添加一个最小值，是为了让栈内元素全部出栈\n        # 单调递增栈，原始数组右边添加一个最大值，是为了让栈内元素全部出栈\n        heights = [0]+heights+[0]\n        for i in range(len(heights)):\n            if not stack or heights[i]>heights[stack[-1]]:\n                stack.append(i)\n            else:\n                while stack and heights[stack[-1]]>=heights[i]:\n                    # 每弹出一个元素，就计算比当前弹出元素小的元素有多少个\n                    tmp = stack.pop()\n                    if stack:\n                        res = max(res, (i-stack[-1]-1)*heights[tmp])\n                    else:\n                        # 高度为0的矩形，即heights[0]\n                        pass\n                stack.append(i)\n        return res\n\n单调递减栈（简写）\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        stack = []\n        heights = [0] + heights + [0]\n        res = 0\n        for i in range(len(heights)):\n            #print(stack)\n            while stack and heights[stack[-1]] > heights[i]:\n                tmp = stack.pop()\n                res = max(res, (i - stack[-1] - 1) * heights[tmp])\n            stack.append(i)\n        return res\n\n分治法\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n = len(heights)\n        if n == 1:\n            return heights[0]*1\n        if n == 0:\n            return 0\n        mid = n//2\n        left = heights[:mid]\n        right = heights[mid:]\n\n        left_area = self.largestRectangleArea(left)\n        right_area = self.largestRectangleArea(right)\n\n        if left[-1]!=right[0]:\n            if left[-1]>right[0]:\n                h = left[-1]\n                low = mid-1-1\n                while low>=0 and left[low]>=h:\n                    low -=1\n                mid_area = (mid-low-1)*h\n\n                h = right[0]\n                high = mid+1\n                low = mid-1-1\n                while low>=0 and left[low]>=h:\n                    low -=1\n                high = mid+1\n                while high=h:\n                    high +=1\n                mid_area = max((high-low-1)*h,mid_area)\n\n            else:\n                h = right[0]\n                high = mid+1\n                while high=h:\n                    high +=1\n                mid_area = (high-mid)*h\n\n                h = left[-1]\n                high = mid+1\n                low = mid-1-1\n                while low>=0 and left[low]>=h:\n                    low -=1\n                high = mid+1\n                while high=h:\n                    high +=1\n                mid_area = max((high-low-1)*h,mid_area)\n        else:\n            h = left[-1]\n            low = mid-1-1\n            while low>=0 and left[low]>=h:\n                low -=1\n            high = mid+1\n            while high=h:\n                high +=1\n            mid_area = (high-low-1)*h\n\n        return max(left_area,right_area,mid_area)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 20:52:57\n"},"单调栈/小牛向右看_POJ_3250.html":{"url":"单调栈/小牛向右看_POJ_3250.html","title":"小牛向右看_POJ_3250","keywords":"","body":"POJ 3250\n1.题目\n有一群牛站成一排，每头牛都是面朝右的，每头牛可以看到他右边身高比他小的牛。给出每头牛的身高，要求每头牛能看到的牛的总数。\n2.分析\n求每个数和它右边第一个比它大的数之间的数的个数，分别求出后相加即可。\n暴力法\n​    双重循环遍历，时间复杂度为O(n^2)，\n单调栈\n- 用单调递增栈\n\n原始数组右边添加float('inf')\n时间复杂度为O(n)。\n\n3.代码\n单调栈\ndef func(arr):\n    if not arr:return 0\n    arr = arr+[float('inf')]\n    res = 0\n    stack = []\n    for i in range(len(arr)):\n        if not stack or arr[i]=arr[stack[-1]]:\n                tmp = stack.pop()\n                res += (i-tmp-1)\n            stack.append(i)\n    return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 14:58:19\n"},"单调栈/最大矩形_LeetCode_85.html":{"url":"单调栈/最大矩形_LeetCode_85.html","title":"最大矩形_LeetCode_85","keywords":"","body":"最大矩形(LeetCode_85)\n1.题目\n给定一个仅包含 0 和 1 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。\n示例:\n输入:\n[\n  [\"1\",\"0\",\"1\",\"0\",\"0\"],\n  [\"1\",\"0\",\"1\",\"1\",\"1\"],\n  [\"1\",\"1\",\"1\",\"1\",\"1\"],\n  [\"1\",\"0\",\"0\",\"1\",\"0\"]\n]\n输出: 6\n\n2.分析\n\n参考柱状图中最大的矩形(LeetCode_84)\n\n对每一行进行应用单调递减栈\n\n\n动态规划 参考接雨水 未写代码\n\n   用height_j记录第i行为底,第j列高度是多少.\n   用left_j记录第i行为底, 第j列左边第一个小于height_j[j]的位置\n   用right_j记录第i行为底, 第j列右边第一个小于height_j[j]的位置\n\n   ​\n\n\n3.代码\n先计算出矩形高度矩阵\nclass Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        if not matrix or not matrix[0]: return 0\n        res = 0\n        arr = []\n        n,m = len(matrix),len(matrix[0])\n        for i in range(n):\n            tmp_arr =[]\n            for j in range(m):\n                k = i\n                tmp = 0\n                while k>=0 and matrix[k][j]==\"1\":\n                    k -= 1\n                    tmp += 1\n                tmp_arr.append(tmp)\n            arr.append(tmp_arr)\n        # for i in arr:\n        #     print(i)\n        # print(arr[2])\n        import copy        \n        res = 0\n        for i in range(n):\n            arr_ = [0]+copy.deepcopy(arr[i][:])+[0]\n            # print(arr_)\n            stack = []\n            for j in range(m+2):\n                if not stack or arr_[j]>arr_[stack[-1]]:\n                    stack.append(j)\n                else:\n                    while stack and arr_[j]\n矩形高度矩阵，然后对每一行应用单调栈\n上面代码的17，18行的输出\nfor i in arr:\n    print(i)\n\n[1, 0, 1, 0, 0]\n[2, 0, 2, 1, 1]\n[3, 1, 3, 2, 2]\n[4, 0, 0, 3, 0]\n\n计算一行矩形的高度就用一次单调栈\nclass Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        if not matrix or not matrix[0]: return 0\n        res = 0\n        arr = []\n        n,m = len(matrix),len(matrix[0])\n        for i in range(n):\n            tmp_arr =[]\n            for j in range(m):\n                k = i\n                tmp = 0\n                while k>=0 and matrix[k][j]==\"1\":\n                    k -= 1\n                    tmp += 1\n                tmp_arr.append(tmp)\n            arr_ = [0]+tmp_arr[:]+[0]\n            # print(arr_)\n            stack = []\n            for j in range(m+2):\n                if not stack or arr_[j]>arr_[stack[-1]]:\n                    stack.append(j)\n                else:\n                    while stack and arr_[j]\n计算完一行中一个元素，就应用单调栈\nclass Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        if not matrix or not matrix[0]: return 0\n        res = 0\n        arr = []\n        n,m = len(matrix),len(matrix[0])\n        for i in range(n):\n            heights =[0]*(m+2)\n            stack = []\n            for j in range(m+2):\n                k = i\n                tmp = 0\n\n                while 1=0 and matrix[k][j-1]==\"1\":\n                    k -= 1\n                    tmp += 1\n                heights[j] = tmp\n                while stack and heights[j]\n最优方法\nclass Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        if not matrix or not matrix[0]: return 0\n        n,m = len(matrix),len(matrix[0])\n        heights = [0]*(m+2)\n        res = 0\n        for i in range(n):\n            stack = []\n            for j in range(m+2):\n                # 本来是 0\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:15:34\n"},"单调栈/接雨水_LeetCode_42.html":{"url":"单调栈/接雨水_LeetCode_42.html","title":"接雨水_LeetCode_42","keywords":"","body":"接雨水(LeetCode_42)\n1.题目\n给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n\n上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。\n示例:\n输入: [0,1,0,2,1,0,1,3,2,1,2,1]\n输出: 6\n\n2.分析\n\n这道题真正难点在于: 在一个位置能容下的雨水量等于它左右两边(并不要求最近的最高)柱子最大高度的最小值减去它的高度.比如下图所示,\n\n\n\n位置i能容下雨水量:min(3,1) - 0 = 1\n所以,问题就变成了: 如何找所有位置的左右两边的柱子的最大值?\n\n\n\n单调栈\n找最高点，然后从左右两边遍历到中间\n动态规划\n不用动态规划\n\n3.代码\n单调递增栈:\n==注意：==因为左边和右边对于接雨水没有用，所以第一个元素的左边我们不需要加float('inf') ,最后个元素也不需要float('inf')\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        # height = [float('inf')] + height[:] + [float('inf')]\n        n = len(height)\n\n        res = 0\n        stack = []\n        for i in range(n):\n            while stack and height[i]>height[stack[-1]]:\n                tmp = stack.pop()\n                if not stack:\n                    break\n                res += (min(height[stack[-1]],height[i])-height[tmp]) * (i-stack[-1] - 1)\n                # print(res)\n            stack.append(i)\n        return res\n\n单调递增栈\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        # height = [float('inf')] + height[:] + [float('inf')]\n        n = len(height)\n\n        res = 0\n        stack = []\n        for i in range(n):\n            if not stack or height[i]=height[stack[-1]]:\n                    tmp = stack.pop()\n                    if stack:\n                        res += (min(height[stack[-1]],height[i])-height[tmp]) * (i-stack[-1]-1)\n                    else:\n                        # 左右两边界不能装水，所以我们不需要 height = [float('inf')] + height[:] + [float('inf')]\n                        pass\n                stack.append(i)\n        return res\n\n找最高点，然后从左右两边遍历到中间\n# 找到最高点,然后从左右两边遍历到中间  \nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        if len(height) == 1:return 0\n        res = 0\n        high_id = 0\n        high_num = height[0]\n# 找到最高点\n        n = len(height)\n        for i in range(1,n):\n            if height[i]>high_num:\n                high_id = i\n                high_num = height[i]\n        # print(high_id)\n        # print(high_num)\n\n# 从左边往最高点遍历\n        tmp = height[0]\n        for i in range(0,high_id):\n            if height[i] > tmp:\n                tmp = height[i]\n            else:\n                res += (tmp-height[i])\n# 从右边往最高点遍历     \n        tmp = height[-1]\n        for j in range(n-1,high_id,-1):\n            if height[j] > tmp:\n                tmp = height[j]\n            else:\n                res += (tmp-height[j])\n        return res\n\n动态规划\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        n = len(height)\n        if n height[i]:\n                res += (tmp-height[i])\n\n        return res\n\n不用动态规划\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        n = len(height)\n        if n left[-1]:\n                left.append(height[i])\n            else:\n                left.append(left[-1])\n\n        right = [height[-1]]\n        for j in range(n-1-1,-1,-1):\n            if height[j] > right[0]:\n                right.insert(0,height[j])\n            else:\n                right.insert(0,right[0])\n\n        print(left)\n        print(right)\n        # 数组的端点，不可能盛水，所以跳过，不用遍历\n        for i in range(1,n-1):\n            tmp = min(left[i], right[i])\n            # 当前柱子高度比左右两边都高，则该处不能盛水，跳过\n            if tmp>height[i]:\n                res += (tmp-height[i])\n\n        return res\n\n测试用例\n输入：[0,1,0,2,1,0,1,3,2,1,2,1]\nstdout:\n    [0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3]\n    [3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1]\n输出：6\n预期结果：6\n\n不用动态规划（...）\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        n = len(height)\n        if n == 1:return 0\n\n        res = 0\n        # 左右两边不可能盛水，所以跳过，不遍历\n        for i in range(1,n-1):\n            left = 0\n            for j in range(0,i):\n                if height[j]>left:\n                    left = height[j]\n            right = 0\n            for j in range(i+1,n):\n                if height[j]>right:\n                    right = height[j]\n\n            tmp = min(right,left)\n            if tmp>height[i]:\n                res += (tmp-height[i])\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:15:10\n"},"字符串/":{"url":"字符串/","title":"字符串","keywords":"","body":"字符串\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-07 22:00:38\n"},"字符串/验证回文字符串.html":{"url":"字符串/验证回文字符串.html","title":"验证回文字符串","keywords":"","body":"验证回文字符串\n1.题目\n给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。\n说明：本题中，我们将空字符串定义为有效的回文串。\n示例 1:\n输入: \"A man, a plan, a canal: Panama\"\n输出: true\n示例 2:\n输入: \"race a car\"\n输出: false\n2.分析\n\n可以利用对撞指针\n\nPython isalnum() 方法检测字符串是否由字母和数字组成。\n\n如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False\n\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\nstr = \"this2009\";  # 字符中没有空格\nprint str.isalnum();\n\nstr = \"this is string example....wow!!!\";\nprint str.isalnum();\n\n输出\nTrue\nFalse\n\n\n\n\nPython isalpha() 方法检测字符串是否只由字母组成。\n\n如果字符串至少有一个字符并且所有字符都是字母则返回 True,否则返回 False\n\n#!/usr/bin/python\n\nstr = \"this\";  # No space & digit in this string\nprint str.isalpha();\n\nstr = \"this is string example....wow!!!\";\nprint str.isalpha();\n\n输出\nTrue\nFalse\n\n​\n\n\n3.代码\n    def isPalindrome(self, s: str) -> bool:\n        s = s.lower().replace(' ','')\n        print(s)\n        s = ''.join(list(filter(str.isalnum,s)))\n\n        # 前三句话可以变成这样\n        # s = ''.join(filter(str.isalnum,s)).lower()\n\n\n\n        print(s)\n        n = len(s)\n        mid = len(s) // 2\n        for i in range(mid):\n            if s[i] != s[n-i-1]:\n                return False\n        return True\n\n        if len(s) == 1:\n            return True\n\n指针对撞法\n  def isPalindrome(self, s: str) -> bool:   \n      s = [i for i in s if i.isalnum()]\n        n = len(s)\n        for i in range(n//2):\n            if s[i].lower() != s[n-i-1].lower():\n                return False\n        return True\n\n简洁方式\ndef isPalindrome(self, s):\n\n    s_filter = ''.join(filter(str.isalnum, s)).lower()\n    return s_filter[::-1] == s_filter\n\n指针对撞法\n    def isPalindrome(self, s: str) -> bool:\n        l, r = 0, len(s)-1\n        while l\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 18:35:10\n"},"字符串/实现 Trie 前缀树 Leetcode 208.html":{"url":"字符串/实现 Trie 前缀树 Leetcode 208.html","title":"实现 Trie (前缀树)_Leetcode 208","keywords":"","body":"实现 Trie (前缀树)(Leetcode 208)\n1.题目\n实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。\n示例:\nTrie trie = new Trie();\n\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // 返回 true\ntrie.search(\"app\");     // 返回 false\ntrie.startsWith(\"app\"); // 返回 true\ntrie.insert(\"app\");   \ntrie.search(\"app\");     // 返回 true\n说明:\n\n你可以假设所有的输入都是由小写字母 a-z 构成的。\n保证所有输入均为非空字符串。\n\n2.分析\n​    trie树，即字典树，又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。” \n       总体来讲，前缀树的构造过程，通过不断插入新的字符串来丰富这棵26叉树。强调注意这里是26叉树，因为每一个英文字符串中下一个字母都只能是a-z中的一种可能。 \n  前缀树的功能很强大，可以做文本词频统计，例如我们在搜索框中的搜索提示，就可以利用前缀树实现。因此，前缀树基本的操作是字符串的插入，搜索，删除，查找前缀等。\napple:{'a': {'p': {'p': {'l': {'e': {'end': True}}}}}}             #第一次insert，最后一个'e'存在结束'end'\napp:  {'a': {'p': {'p': {'l': {'e': {'end': True}}, 'end': True}}}}#第二次insert，第二个'p'存在结束'end'\n\n3.代码\n法一\nclass TrieNode(object):\n    def __init__(self):\n        self.nodes = [None]*26\n        self.last = False\n\nclass Trie:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n\n\n    def insert(self, word: str) -> None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n        tree = self.root\n        for i in word:\n            if tree.nodes[ord(i) - ord('a')] == None:\n                tree.nodes[ord(i)-ord('a')] = TrieNode()\n            tree = tree.nodes[ord(i)-ord('a')]\n        tree.last = True\n\n\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n        tree = self.root\n        for i in word:\n            if tree.nodes[ord(i)-ord('a')]==None:\n                return False\n            tree = tree.nodes[ord(i)-ord('a')]\n        return tree.last\n\n\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"\n        tree = self.root\n        for i in prefix:\n            if tree.nodes[ord(i)-ord('a')] == None:\n                return False\n            tree = tree.nodes[ord(i)-ord('a')]\n        return True\n\n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)\n\n法2(推荐)\nclass Trie(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = {}\n\n\n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: None\n        \"\"\"\n        node = self.root\n        for char in word:\n        # 没有就新建{}，有就利用char对应的{}\n            node = node.setdefault(char, {})\n        node[\"end\"] = True\n\n        ==================================================== 等价\n        for char in word:\n            if char not in node:\n                node[char] = {}\n        node['end'] = True\n         =========================================================================   \n\n\n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n\n        return \"end\" in node\n\n\n    def startsWith(self, prefix):\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        :type prefix: str\n        :rtype: bool\n        \"\"\"\n        node = self.root\n        for char in prefix:\n            if char not in node:\n                return False\n            node = node[char]\n\n        return True\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-10 22:49:16\n"},"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html":{"url":"字符串/添加与搜索单词 - 数据结构设计 LeetCode 211.html","title":"添加与搜索单词 - 数据结构设计 LeetCode 211)(前缀树","keywords":"","body":"添加与搜索单词 - 数据结构设计(LeetCode 211)\n1.题目\n设计一个支持以下两种操作的数据结构：\nvoid addWord(word)\nbool search(word)\nsearch(word) 可以搜索文字或正则表达式字符串，字符串只包含字母 . 或 a-z 。 . 可以表示任何一个字母。\n示例:\naddWord(\"bad\")\naddWord(\"dad\")\naddWord(\"mad\")\nsearch(\"pad\") -> false\nsearch(\"bad\") -> true\nsearch(\".ad\") -> true\nsearch(\"b..\") -> true\n说明:\n你可以假设所有单词都是由小写字母 a-z 组成的。\n2.分析\n3.代码\npython代码\nclass WordDictionary:\n\n    def __init__(self):\n        self.root = {}\n\n    def addWord(self, word: str) -> None:\n        tree = self.root\n        for i in word:\n            tree = tree.setdefault(i,{})\n        tree['end'] = True\n\n    def search(self, word: str) -> bool:\n        return self.dfs(word,self.root)\n\n    def dfs(self, word, root):\n        if len(word) == 0:\n            return 'end' in root\n        if root == None: \n            return False\n        for i in word:\n            if i!='.':\n                if i not in root:\n                    return False\n                # 不要忘记写return ，只写self...没有return，等于空了吹\n                return self.dfs(word[1:],root[i])\n            else:\n                for ele in root.keys():# 可以不用keys,直接tree\n                    # 这儿一定要注意，排除ele == ‘end’，这种情况，因为它没有对应一个字典，而是存储了False和True\n                    if ele != 'end' and self.dfs(word[1:],root[ele]):\n                        return True\n                return False\n\nC++\nclass WordDictionary:\n\n    def __init__(self):\n        self.root = {'end':False}\n\n    def addWord(self, word: str) -> None:\n        tree = self.root\n        for i in word:\n            tree = tree.setdefault(i,{'end':False})\n        tree['end'] = True\n        # for i in word:\n        #     if i not in tree:\n        #         tree[i] = {'isend':False}\n        #     else:\n        #         tree = tree[i]\n        # tree['isend'] = True\n\n    def search(self, word: str) -> bool:\n        tree = self.root\n        res = False\n        for index,value in enumerate(word):\n            if value not in tree:\n                return False\n            if (index  List[str]:\n        res = []\n        tree = WordDictionary()\n        for word in words:\n            tree.addWord(word)\n        for word in words:\n            if tree.search(word):\n                # print(word)\n                res.append(word)\n        return res\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:24\n"},"字符串/字符串的反转.html":{"url":"字符串/字符串的反转.html","title":"字符串的反转","keywords":"","body":"字符串的反转\n1.题目\n编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。\n不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。\n你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。\n示例 1：\n输入：[\"h\",\"e\",\"l\",\"l\",\"o\"]\n输出：[\"o\",\"l\",\"l\",\"e\",\"h\"]\n示例 2：\n输入：[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n输出：[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n2.分析\n3.代码\ndef reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        # s.reverse()\n\n        # 自己写\n        # k = len(s)\n        # for i,key in enumerate(s):\n        #     if i \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:53\n"},"字符串/单词的反转.html":{"url":"字符串/单词的反转.html","title":"单词的反转","keywords":"","body":"单词的反转\n1.题目\n'abc as'--------------->>>>>>>'as abc'\n2.分析\n两次反转\n3.代码\ndef func(s, start, end):\n    s_len = len(s)\n    i, j = start, end\n    while i \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:28\n"},"字符串/判断是不是换位字符串.html":{"url":"字符串/判断是不是换位字符串.html","title":"判断是不是换位字符串","keywords":"","body":"判断是不是换位字符串\n1.题目\n'aaad'和’'daaa'是换位字符串\n2.分析\n3.代码\ndef func(s1, s2):\n    bag = [0]*256\n    for i in s1:\n        bag[ord(i)] += 1\n    for j in s2:\n        bag[ord(j)] -= 1\n    for k in bag:\n        if k != 0:\n            print('不是换位字符串')\n            return \n    print('是换位字符串')\nfunc('addabas','aabdda')\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:39\n"},"字符串/两个字符串的最长公共子串.html":{"url":"字符串/两个字符串的最长公共子串.html","title":"两个字符串的最长公共子串","keywords":"","body":"两个字符串的最长公共子串\n1.题目\n2.分析\n$mat[i][j]$ 表示 $s1[某, i-1],s2[ 某 , j - 1 ] $的最长公共子串的长度\n3.代码\n代码1\ndef findMaxSub(s1, s2):\n    s1_len = len(s1)\n    s2_len = len(s2)\n    max_len = 0\n    max_id = 0\n    mat = [[0]*(s2_len+1) for _ in range(s1_len+1)]\n    for i in range(1,s1_len+1):\n        for j in range(1,s2_len+1):\n            if s1[i-1] == s2[j-1]:\n                mat[i][j] = mat[i-1][j-1]+1\n                if mat[i][j] > max_len:\n                    max_len = mat[i][j]\n                    max_id = i\n            else:\n                mat[i][j] = 0\n    max_str = s1[max_id-max_len:max_id]\n    print(max_str,max_len)\n\nfindMaxSub('abccade', 'dgcadde')\n\n代码2\ndef findMaxSub(s1, s2):\n    s1_len = len(s1)\n    s2_len = len(s2)\n    max_len = 0\n    max_id = 0\n    mat = [[0]*(s2_len+1) for _ in range(s1_len+1)]\n    for i in range(1,s1_len+1):\n        for j in range(1,s2_len+1):\n            mat[i][j] = mat[i-1][j-1]+1 if s1[i-1] == s2[j-1] else 0\n            if mat[i][j] > max_len:\n                max_len = mat[i][j]\n                max_id = i\n    max_str = s1[max_id-max_len:max_id]\n    print(max_str,max_len)\n\nfindMaxSub('abcdcdabccade', 'dgcadabcdcdde')\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-21 16:16:11\n"},"字符串/字符串转换整数 atoi.html":{"url":"字符串/字符串转换整数 atoi.html","title":"字符串转换整数 _atoi","keywords":"","body":"字符串转换整数 (atoi)\n示例 1:\n输入: \"42\"\n输出: 42\n示例 2:\n输入: \"   -42\"\n输出: -42\n解释: 第一个非空白字符为 '-', 它是一个负号。\n     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n示例 3:\n输入: \"4193 with words\"\n输出: 4193\n解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。\n示例 4:\n输入: \"words and 987\"\n输出: 0\n解释: 第一个非空字符是 'w', 但它不是数字或正、负号。\n     因此无法执行有效的转换。\n示例 5:\n输入: \"-91283472332\"\n输出: -2147483648\n解释: 数字 \"-91283472332\" 超过 32 位有符号整数范围。 \n     因此返回 INT_MIN (−231) 。\n2.分析\n草泥马，LeetCode\n3.代码\n def myAtoi(self, s):\n        s = s.lstrip().split(\" \",1)[0]\n        length = len(s)\n        if length == 0 or s[0] not in '0123456789+-':\n            return 0\n        index = 1\n        # 跳过第一个字符，因为第一个字符有可能是‘+-’\n        # 之所以用s[index].isdigit(),是因为有可能这种情况，‘0012a42’\n        # 忍不住想吐槽LeetCode，日你妈，题目说明不完善，操你大爷的！！！！\n        while index \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:57\n"},"字符串/无重复字符的最长子串.html":{"url":"字符串/无重复字符的最长子串.html","title":"无重复字符的最长子串","keywords":"","body":"无重复字符的最长子串\n1.题目\n给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n示例 1:\n输入: \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n示例 2:\n输入: \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n示例 3:\n输入: \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n2.分析\n3.代码1\nclass Solution:\n    def lengthOfLongestSubstring(self, s: 'str') -> 'int':\n        print(s)\n        res = 0\n        start = 0\n        bag = {}\n        for index, value in enumerate(s):\n            if value in bag and start \n代码2(理解版)\nclass Solution:\n    def lengthOfLongestSubstring(self, s: 'str') -> 'int': \n        res_count = 0 # 最大结果\n        res_str = '' # 最长字符串\n\n        for i in range(len(s)):  # 循环这么多次  \n            max_str = ''\n            count = 0\n            for j in s[i:]:\n                if j not in max_str:\n                    count += 1\n                    max_str += j\n                    if count > res_count:\n                        res_count = count\n                        res_str = max_str\n                else:\n                    break\n        return res_count\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:59\n"},"字符串/最长公共前缀 腾讯.html":{"url":"字符串/最长公共前缀 腾讯.html","title":"最长公共前缀（腾讯）","keywords":"","body":"最长公共前缀（腾讯）\n1.题目\n编写一个函数来查找字符串数组中的最长公共前缀。\n如果不存在公共前缀，返回空字符串 \"\"。\n示例 1:\n输入: [\"flower\",\"flow\",\"flight\"]\n输出: \"fl\"\n示例 2:\n输入: [\"dog\",\"racecar\",\"car\"]\n输出: \"\"\n解释: 输入不存在公共前缀。\n说明:\n所有输入只包含小写字母 a-z 。\n2.分析\n3.代码\ndef longestCommonPrefix(self, strs: 'List[str]') -> 'str':\n        res = ''\n        if len(strs) == 0:\n            return res\n        if len(strs) == 1:\n            return strs[0]\n        for i in zip(*strs):#zip()函数用于将可迭代对象作为参数，将对象中对应的元素打包成一个个元                            # 组，然后返回由这些元组组成的列表\n            if len(set(i)) == 1:# 利用集合创建一个无序但不重复（重要）的元素集，可以判断不同字符串                            # 同一位置是否是相同字母，如果是，加入该字母，否....            \n                res += i[0]\n            else:\n                return res\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:00\n"},"字符串/判断一个串是不是另一个串的子串.html":{"url":"字符串/判断一个串是不是另一个串的子串.html","title":"判断一个串是不是另一个串的子串","keywords":"","body":"判断一个串是不是另一个串的子串\n1.题目\n判断一个字符串是不是另一个字符串的子串，如\n\n\n\ns1\ns2\nresult\n\n\n\n\n'abc'\n'abcd'\nTrue\n\n\n'ad'\n'ssd'\nFalse\n\n\n'fs'\n'fsffsf'\nTrue\n\n\n\n2.分析\n3.代码\n# 判断s1是不是s2的子串\ndef substr(s1, s2):\n    s1_len = len(s1)\n    index = 0\n    for i in range(len(s2)):\n#         print(i)\n        if s2[i] == s1[index]:\n            index += 1\n            if index == s1_len:\n                print('True')\n                return\n        # 如果从某一个字符开始，两串对应字符不相等，得重新计数\n        else:\n            index = 0\n            if s2[i] == s1[index]:\n                index += 1\n    print(\"False\")\ns1 = 'abcdfd'\ns2 = 'aabcsssdfddf'\nsubstr(s1, s2)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:39\n"},"字符串/判断一个序列是不是另一个字符串的子序列.html":{"url":"字符串/判断一个序列是不是另一个字符串的子序列.html","title":"判断一个序列是不是另一个字符串的子序列","keywords":"","body":"判断一个序列是不是另一个字符串的子序列\n1.题目\n\n判断一个串s1是不是另一个串s2的子序列，\n- 如s1='a'，s2 = 'abc',则s1是s2的子序列 ,返回True\n- 如s1='ac'，s2 = 'abc',则s1是s2的子序列, 返回True\n- 如s1='abc'，s2 = 'abc',则s1是s2的子序列, 返回True\n- 如s1='abc'，s2 = 'abd',则s1不是s2的子序列, 返回False\n- 如s1='ad'，s2 = 'abc',则s1不是s2的子序列, 返回False\n\n\n\n2.分析\n\n我们可以观察发现，如果 两个串长度相等，内容相同，则s1是s2 的子序列，\n如果两个串长度不相等，则s1要想成为s2的子序列，则我们可以    以 s2为基准，依次取出s2的字符，判断与s1的字符相等不，相等 res加1，最后统计结果看 是否res ==len(s1) \n\n3.代码\n def subseq(s1,s2):\n            index = 0;\n            if s1 == s2:\n                   return True\n            for s in s2:\n                if(index \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:39\n"},"字符串/旋转字符串 LeetCode 796.html":{"url":"字符串/旋转字符串 LeetCode 796.html","title":"旋转字符串__LeetCode796","keywords":"","body":"旋转字符串（LeetCode796）\n1.题目\n给定两个字符串, A 和 B。\nA 的旋转操作就是将 A 最左边的字符移动到最右边。 例如, 若 A = 'abcde'，在移动一次之后结果就是'bcdea' 。如果在若干次旋转操作之后，A 能变成B，那么返回True。\n示例 1:\n输入: A = 'abcde', B = 'cdeab'\n输出: true\n\n示例 2:\n输入: A = 'abcde', B = 'abced'\n输出: false\n注意：\n\nA 和 B 长度不超过 100。\n\n2.分析\n3.代码\n3.1代码1\n    def rotateString(self, A: str, B: str) -> bool:\n        if len(A) != len(B):\n            return False\n        if not A and not B:\n            return True\n        str_all = A*2\n        return self.substr(B, str_all)\n    # 判断一个串是不是另一个串的子串\n    def substr(self, s1, s2):\n        s1_len = len(s1)\n        s2_len = len(s2)\n        index = 0\n        for i in range(s2_len):\n            if s2[i] == s1[index]:\n                index += 1\n                if index == s1_len:\n                    return True\n            else:\n                index = 0\n                if s2[i] == s1[index]:\n                    index += 1\n        return False\n\n3.2代码2\n    def rotateString(self, A: str, B: str) -> bool:\n        if len(A) != len(B):\n            return False\n        if not A and not B:\n            return True\n        return B in A*2\n\n3.3代码3\n    def rotateString(self, A: str, B: str) -> bool:\n        if len(A) != len(B):\n            return False\n        if not A and not B:\n            return True\n        for i in range(0,len(A)):\n            if A == B:\n                return True\n            A = A[1:]+A[0]\n        return False\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:44:13\n"},"字符串/字符串相乘 LeetCode 43.html":{"url":"字符串/字符串相乘 LeetCode 43.html","title":"字符串相乘__LeetCode 43","keywords":"","body":"字符串相乘(LeetCode 43)\n1.题目\n给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。\n示例 1:\n输入: num1 = \"2\", num2 = \"3\"\n输出: \"6\"\n示例 2:\n输入: num1 = \"123\", num2 = \"456\"\n输出: \"56088\"\n说明：\n\nnum1 和 num2 的长度小于110。\nnum1 和 num2 只包含数字 0-9。\nnum1 和 num2 均不以零开头，除非是数字 0 本身。\n不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。\n\n2.分析\n对于这个问题，如果你注意到下面的这个规律话就非常简单。\n\n首先要说明的是 我们是按照从左向右的顺序存储的数字。我们注意到对于index:i和index:j相乘的话，结果在index:i+j和index:i+j+1上。\n\n3.代码\n代码1\n    def multiply(self, num1: str, num2: str) -> str:\n        num1_len = len(num1)\n        num2_len = len(num2)\n        res = [0] * (num1_len + num2_len)\n        for i in range(num1_len-1,-1,-1):\n            for j in range(num2_len-1,-1,-1):\n                # 从右向左，所以res[i+j+1]我们可以获取得到\n                tmp = int(num1[i]) * int(num2[j]) + int(res[i+j+1])\n                res[i+j+1] = tmp%10\n                res[i+j] = res[i+j] + tmp//10\n        res = list(map(str, res))\n        # print(res)\n        for i in range(num1_len+num2_len):\n            if res[i]!='0':\n                return ''.join(res[i:])\n        return '0'\n\n    def multiply(self, num1: str, num2: str) -> str:\n\n        num1_len = len(num1)\n        num2_len = len(num2)\n        res = [0] *(num1_len+num2_len)\n\n        for i in range(num1_len-1,-1,-1):\n            for j in range(num2_len-1,-1,-1):\n                tmp = int(num1[i]) * int(num2[j]) + res[i+j+1]\n                res[i+j+1] = tmp % 10\n                res[i+j] += tmp//10\n\n        for i in range(num1_len+num2_len):\n            if res[i] != 0:\n                return ''.join(map(str,res[i:]))\n        return '0'\n\n代码2（大神版）\n    def multiply(self, num1, num2):\n        res = 0\n        for i in range(1,len(num1)+1):\n            for j in range(1, len(num2)+1):\n                res += int(num1[-i]) * int(num2[-j]) *10**(i+j-2)\n        return str(res)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 01:07:02\n"},"字符串/反转字符串中的单词 III.html":{"url":"字符串/反转字符串中的单词 III.html","title":"反转字符串中的单词 III","keywords":"","body":"反转字符串中的单词 III\n1.题目\n给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。\n示例 1:\n输入: \"Let's take LeetCode contest\"\n输出: \"s'teL ekat edoCteeL tsetnoc\"\n注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。\n2.分析\n3.代码\n代码1\n    def reverseWords(self, s):\n        if s == '':\n            return ''\n        s = s.split()\n        res = []\n        res = ' '.join(i[::-1] for i in s)\n        # print(res)\n        return res\n\n代码2\n\n    def reverseWords(self, s: str) -> str:\n        print(s.split()[::-1])\n        s = list(s)\n        start = 0\n        # self.func(s, 0 , len(s)-1)\n        for i in range(len(s)-1):\n            if s[i] == ' ':\n                self.func(s, start, i-1)\n                start = i+1\n        self.func(s, start, len(s)-1)\n        res = ''.join(s)\n        # print(res)\n        return res\n    def func(self, s, b, e):\n        # 需要逆置的子串的头尾序号\n        # b:begin e:end\n        while b \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:43:23\n"},"字符串/存在重复元素.html":{"url":"字符串/存在重复元素.html","title":"存在重复元素","keywords":"","body":"存在重复元素\n1.题目\n给定一个整数数组，判断是否存在重复元素。\n如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。\n示例 1:\n输入: [1,2,3,1]\n输出: true\n示例 2:\n输入: [1,2,3,4]\n输出: false\n示例 3:\n输入: [1,1,1,3,3,4,3,2,4,2]\n输出: true\n2.分析\n3.代码\ncounter\n    def containsDuplicate(self, nums):\n        from collections import Counter\n        nums_count = Counter(nums)\n        for i in nums_count.values():\n            if i >= 2:\n                return True\n        return False\n\n        return not len(nums) == len(set(nums))\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:57\n"},"字符串/字符串相加_LeetCode_415.html":{"url":"字符串/字符串相加_LeetCode_415.html","title":"字符串相加_LeetCode_415","keywords":"","body":"字符串相加(LeetCode_415)\n1.题目\n给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和。\n注意：\n\nnum1 和num2 的长度都小于 5100.\nnum1 和num2 都只包含数字 0-9.\nnum1 和num2 都不包含任何前导零。\n你不能使用任何內建 BigInteger 库， 也不能直接将输入的字符串转换为整数形式。\n\n2.分析\n法一：转化为列表\n法二：不转化为列表\n3.代码\n法一\n    def addStrings(self, num1: str, num2: str) -> str:\n        res = ''\n        tmp = 0\n        num1 = list(num1)\n        num2 = list(num2)\n        while num1 or num2 or tmp:\n            i = num1.pop() if num1 else 0\n            j = num2.pop() if num2 else 0\n            # s:商  y:余数\n            s,y = divmod(int(i)+int(j)+tmp,10)\n            res = str(y) + res\n            tmp = s         \n        return res\n\n法二\n        res = ''\n        tmp = 0\n        num1_len = len(num1)\n        num2_len = len(num2)\n        while num1_len>0 or num2_len>0 or tmp:\n            num1_len -= 1\n            num2_len -= 1\n            i = num1[num1_len] if num1_len>=0 else 0\n            j = num2[num2_len] if num2_len>=0 else 0\n\n            s,y = divmod(int(i)+int(j)+tmp, 10)\n            res = str(y) + res\n            tmp = s\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-15 17:09:14\n"},"字符串/第一个只出现一次的字符.html":{"url":"字符串/第一个只出现一次的字符.html","title":"第一个只出现一次的字符","keywords":"","body":"在一个字符串(0\n说一下解题思路哈，其实主要还是hash，利用每个字母的ASCII码作hash来作为数组的index。首先用一个58长度的数组来存储每个字母出现的次数，为什么是58呢，主要是由于A-Z对应的ASCII码为65-90，a-z对应的ASCII码值为97-122，而每个字母的index=int(word)-65，比如g=103-65=38，而数组中具体记录的内容是该字母出现的次数，最终遍历一遍字符串，找出第一个数组内容为1的字母就可以了，时间复杂度为O(n)\nASCII码中的90-96不是字母 但是为了统一减65来计算 所以要再加上6个长度 不然就要判断是否是小写字母 小写字母要减65再减6\nclass Solution:\n    def FirstNotRepeatingChar(self, s):\n        # write code here\n        if s == '':\n            return -1\n\n        res = [0]*58\n        n = len(s)\n        for i in s:\n            res[ord(i)-65] += 1\n        for i in range(n):\n            if res[ord(s[i])-65] == 1:\n                return i\n\n字典法\nclass Solution:\n    def FirstNotRepeatingChar(self, s):\n# write code here\n        if s == '':\n            return -1\n\n        n = len(s)\n        res = dict()\n        for i in range(n):\n            if s[i] not in res:\n                res[s[i]] = i\n            else:\n                res[s[i]] = -1\n        for i in range(n):\n            if res[s[i]] != -1:\n                # return res[s[i]]\n                return i\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 22:45:08\n"},"数组/":{"url":"数组/","title":"数组","keywords":"","body":"数组\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-07 22:00:38\n"},"数组/搜索旋转排序数组.html":{"url":"数组/搜索旋转排序数组.html","title":"搜索旋转排序数组","keywords":"","body":"搜索旋转排序数组\n1.题目\n假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。\n搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。\n你可以假设数组中不存在重复的元素。\n你的算法时间复杂度必须是 O(log n) 级别。\n示例 1:\n输入: nums = [4,5,6,7,0,1,2], target = 0\n输出: 4\n\n示例 2:\n输入: nums = [4,5,6,7,0,1,2], target = 3\n输出: -1\n\n2.分析\n方法：双指针二分法\n思路\n1，不管数组如何变化，它总归还是一个有序数组，只是变成了两个升序数组的组合，所以可以使用二分法；\n2，双指针，指向头尾，拿着target和数组中间元素nums[mid]比较，分三种情况判断：（1）若相等则直接mid就是答案；（2）如果nums[mid]比头元素大与等于，并且目标值在它和头元素之间，则尾指针变为mid - 1,否则头指针变为mid + 1;（3）如果nums[mid]比头元素小，并且目标值在尾巴元素和中间元素之间，那么头指针就变为mid + 1,否则尾指针变为mid - 1；\n3，如果全部没有找到目标值相匹配的元素，或者数组长度为空，就返回-1即可，总之就还是二分法的应用，仔细推敲，分析就可以弄懂！\n\n左边有序，去左边找\n右边有序，去右边找\n\n3.代码\ndef search(self, nums: List[int], target: int) -> int:\n        if nums == None:return -1\n        l, r = 0, len(nums)-1\n        while l = nums[l]:\n                if target >= nums[l] and target  nums[mid] and target \n优秀的代码\nclass Solution:\n    def binary_search(self, left, right, nums, target):\n        while left  target:\n                right = mid - 1\n        return False\n\n\n    def sub_search(self, left, right, nums, target):\n        if left = nums[left]:      #左边是有序的\n                if target = nums[left]:      #target在左边\n                    return self.binary_search(left, mid - 1, nums, target)\n                else:\n                    return self.sub_search(mid + 1, right, nums, target)\n            elif nums[mid]  nums[mid] and target  'bool':\n        if len(nums) == 0: return False\n        return self.sub_search(0, len(nums) - 1, nums, target)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:58\n"},"数组/搜索旋转排序数组 II LeetCode 81.html":{"url":"数组/搜索旋转排序数组 II LeetCode 81.html","title":"搜索旋转排序数组 II_LeetCode 81","keywords":"","body":"搜索旋转排序数组 II(LeetCode 81)\n1.题目\n假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n( 例如，数组 [0,0,1,2,2,5,6] 可能变为 [2,5,6,0,0,1,2] )。\n编写一个函数来判断给定的目标值是否存在于数组中。若存在返回 true，否则返回 false。\n示例 1:\n输入: nums = [2,5,6,0,0,1,2], target = 0\n输出: true\n示例 2:\n输入: nums = [2,5,6,0,0,1,2], target = 3\n输出: false\n进阶:\n\n这是 搜索旋转排序数组 的延伸题目，本题中的 nums  可能包含重复元素。\n这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？\n\n2.分析\n解题思路\n这是之前Leetcode 33：搜索旋转排列数组（最详细的解法！！！）问题的延伸。如果使用之前的方法解决这个问题，会出现错误，例如\n1  3  1  1  1\n丨     |\n我们会在[0:2]这个区间查找对应元素，但是这样是错误的，这个区间并不是递增区间。那要怎么做呢？\n一种最简单的思路就是将nums的重复元素去除，然后在使用之前的方法就可以啦。\n3.代码\n去重代码\ndef search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if not nums:\n            return False\n        nums = list(set(nums))\n        low, high = 0, len(nums) - 1\n\n        while low \n不去重代码\n    def search(self, nums: List[int], target: int) -> bool:\n        if nums == None: return False\n        l, r = 0, len(nums)-1\n        while l\n优秀的代码\nclass Solution:\n    def binary_search(self, left, right, nums, target):\n        while left  target:\n                right = mid - 1\n        return False\n\n\n    def sub_search(self, left, right, nums, target):\n        if left = nums[left]:      #左边是有序的\n                if target = nums[left]:      #target在左边\n                    return self.binary_search(left, mid - 1, nums, target)\n                else:\n                    return self.sub_search(mid + 1, right, nums, target)\n            elif nums[mid]  nums[mid] and target  'bool':\n        if len(nums) == 0: return False\n        return self.sub_search(0, len(nums) - 1, nums, target)\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:58\n"},"数组/合并两个有序数组.html":{"url":"数组/合并两个有序数组.html","title":"合并两个有序数组","keywords":"","body":"合并两个有序数组\n1.题目\n给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。\n说明:\n\n初始化 nums1 和 nums2 的元素数量分别为 m 和 n。\n你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。\n\n示例:\n输入:\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n输出: [1,2,2,3,5,6]\n2.分析\n3.代码\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n'''\n        两个有序数组进行合并,就联想到归并排序。我们既可以从前往后归并，也可以从后往前归并。\n        但是本题nums1后面留的空间足够，所以我们在nums1尾部进行添加元素，不需要重新开辟数组进行归并。因此我们只能从后向前归并，因为nums2归并到nums1上，如果从前往后归并，那么需要不断调整nums1的值，防止nums1中未归并的值被覆盖丢失，相当复杂。而我们从后往前归并，就不需要这么复杂了。\n        我们归并的起点为m-1,n-1(因为这是下标表示，所以减一)。归并结果保存位置从 (m+n-1)开始(因为这是下标表示，所以减一)。归并起点和归并结果的位置都是从右向左前进。\n\n        第一轮循环合并完后，由于可能nums2指针未走完(n>=0:nums2还有元素比nums1最小元素小)，需要将nums2剩余首部覆盖至nums1首部。nums1指针未走完不需要做任何多余操作，因为覆盖前后相同。\n        nums1 = 【3,4,5,0,0】\n        nums2 = 【1,2】\n\n        第一个while循环跳出后, \n            nums1 = [3,4,3,4,5]\n            nums2 = [1,2]\n\n            nums2的下标为 n=1\n            所以 用while循环将nums2依次添加到nums1\n\n        nums1 = 【1,2,5,0,0】\n        nums2 = 【3,4】\n        第一个while循环跳出后, \n            nums1 = [1,2,3,4,5]\n            nums2 = []\n\n            nums2 的下标为 n=-1\n            不用第二个循环\n'''   \n        # nums1 添加的新值的首下标\n        cur = m+n-1\n        n = n-1\n        m = m-1\n        while n>=0 and m>=0:\n            if nums1[m]>nums2[n]:\n                nums1[cur] = nums1[m]\n                m -= 1\n            else:\n                nums1[cur] = nums2[n]\n                n -= 1\n            cur -= 1\n        while n>=0:\n            nums1[cur] = nums2[n]\n            n -= 1\n            cur -= 1\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 16:55:54\n"},"数组/旋转数组.html":{"url":"数组/旋转数组.html","title":"旋转数组","keywords":"","body":"旋转数组\n1.题目\n给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。\n示例 1:\n输入: [1,2,3,4,5,6,7] 和 k = 3\n输出: [5,6,7,1,2,3,4]\n解释:\n向右旋转 1 步: [7,1,2,3,4,5,6]\n向右旋转 2 步: [6,7,1,2,3,4,5]\n向右旋转 3 步: [5,6,7,1,2,3,4]\n示例 2:\n输入: [-1,-100,3,99] 和 k = 2\n输出: [3,99,-1,-100]\n解释: \n向右旋转 1 步: [99,-1,-100,3]\n向右旋转 2 步: [3,99,-1,-100]\n说明:\n\n尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。\n要求使用空间复杂度为 O(1) 的原地算法。\n\n2.分析\n3.代码\n代码1\nclass Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        for i in range(k):\n            x = nums.pop()\n            nums.insert(0,x)\n\n代码2\n翻转法，经过三次翻转：\n\n翻转 0 ~ n-1\n翻转 0 ~ k-1\n翻转 k ~ n-1\n\n空间复杂度 O(1)，时间复杂度 O(n)。\n    def rotate(self, nums, k):\n        n = len(nums)\n        # 不需要旋转\n        if n == 0 or n == 1:\n            return\n        k %= n\n        self.func(nums, 0, n-1)\n        self.func(nums, 0, k-1)\n        self.func(nums, k, n-1)\n\n    def func(self, nums, start, end):\n        while start \n左旋\n        def rotate(self, nums, k):\n            n = len(nums)\n            k = k%n\n            if k == 0:\n                return \n            count = n-k\n            tmp = nums[:]\n            for i in range(n):\n                nums[i] = tmp[(i+count)%n]\n\n右旋\n        def rotate(self, nums, k):\n            n = len(nums)\n            k = k%n\n            if k == 0:\n                return\n            tmp = nums[:]\n            for i in range(n):\n                nums[(i+k)%n] = tmp[i]\n\npythonic\n    def rotate(self, nums, k):\n        n = len(nums)\n        k = k%n\n        if k == 0:\n            return\n        # 注意：这儿是nums[:],而不是nums\n        nums[:] = nums[n-k:]+nums[0:n-k]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:41:23\n"},"数组/寻找旋转排序数组中的最小值 LeetCode 153.html":{"url":"数组/寻找旋转排序数组中的最小值 LeetCode 153.html","title":"寻找旋转排序数组中的最小值 LeetCode 153","keywords":"","body":"寻找旋转排序数组中的最小值（LeetCode 153）\n1.题目\n假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。\n请找出其中最小的元素。\n你可以假设数组中不存在重复元素。\n示例 1:\n输入: [3,4,5,1,2]\n输出: 1\n\n示例 2:\n输入: [4,5,6,7,0,1,2]\n输出: 0\n\n2.分析\n通过选择数组的特性知道，数组元素先是递增，然后突然下降到最小值，然后再递增。\n\n数组本身没有旋转，是一个有序数组，例如[1,2,3,4]\n数组中元素全部相等，例如【1，1，1，1】\n数组中大部分元素相同，如【1，0，1，1，1】\n\n通过分析知道，旋转数组可以划分为两个有序数组，前面的数组的每个元素都大于等于后面数组的每个元素，可以用二分法不断缩小查找范围。\n\n如果没有旋转，则第一个元素小于最后个元素，直接返回第一个元素\n如果nums[mid] ,则nums[mid]最小\n如果nums[mid+1] ,则nums[mid+1]最小\n如果nums[mid]  ,则最小值在数组左边\n如果nums[mid]  > nums[left],则最小值在数组右边\n如果nums[mid]  == nums[right] == nums[left],如【2，2，2，1，2】无法区别时，只能求左右最小值，然后返回左右最小值中最小的\n\n3.代码\n    def findMin(self, nums: List[int]) -> int:\n        if not nums:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        if nums[0]  nums[mid]:\n                return nums[mid]\n            elif nums[mid+1]  nums[left]:\n                left = mid+1\n            else:\n                return min(self.findMin_1(nums, left, mid-1), self.findMin_1(nums, mid+1, right))\n\n3.2代码2\n # 二分法：首先要判断这个有序数组是否旋转了，通过比较第一个和最后一个数的大小，如果第一个数小，则没有旋转，直接返回这个数。如果第一个数大，就要进一步搜索。我们定义left和right两个指针分别指向开头和结尾，还要找到中间那个数，然后和left指的数比较，如果中间的数大，则继续二分查找右半段数组，反之查找左半段。终止条件是当左右两个指针相邻，返回小的那个。\n    def findMin(self, nums):\n        if not nums:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        # 没有旋转\n        if nums[0] \n3.3代码3\n # 二分法：首先要判断这个有序数组是否旋转了，通过比较第一个和最后一个数的大小，如果第一个数小，则没有# # 旋转，直接返回这个数。如果第一个数大，就要进一步搜索。我们定义left和right两个指针分别指向开头和结\n# 尾，还要找到中间那个数，然后和left指的数比较，如果中间的数大，则继续二分查找右半段数组，反之查找左半# 段。终止条件是当左右两个指针相邻，返回小的那个。   \n    def findMin(self, nums):\n        if not nums:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        if nums[0] \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-14 17:34:24\n"},"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html":{"url":"数组/寻找旋转排序数组中的最小值_含重复元素_LeetCode_154.html","title":"寻找旋转排序数组中的最小值_含重复元素_LeetCode_154","keywords":"","body":"寻找旋转排序数组中的最小值 II(LeetCode_154)\n1.题目\n假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。\n请找出其中最小的元素。\n注意数组中可能存在重复的元素。\n示例 1：\n输入: [1,3,5]\n输出: 1\n示例 2：\n输入: [2,2,2,0,1]\n输出: 0\n2.分析\n3.代码\n暴力法\n    def findMin(self, nums):\n        for i in range(1,len(nums)):\n            if nums[i]\n    def findMin(self, nums):\n        if not nums:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        if nums[0]  nums[right]:\n                left = mid+1\n            else:\n              # 数组中存在重复元素，所以每次只缩小一个查找范围\n                right -= 1\n\n        return nums[left]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-17 18:03:09\n"},"数组/删除排序数组中的重复项.html":{"url":"数组/删除排序数组中的重复项.html","title":"删除排序数组中的重复项","keywords":"","body":"删除排序数组中的重复项\n1.题目\n2.分析\n3.代码\n    def removeDuplicates(self, nums: List[int]) -> int:\n        nums_len = len(nums)\n        for i in range(nums_len-1, 0 , -1):\n            if nums[i] == nums[i-1]:\n                nums.pop(i)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:37\n"},"数组/找出数组中出现次数为奇数次的数 异或法.html":{"url":"数组/找出数组中出现次数为奇数次的数 异或法.html","title":"找出数组中出现次数为奇数次的数 异或法","keywords":"","body":"找出数组中出现次数为奇数次的数（异或法）\n1.题目\n​    数组中有N+2个数，其中N个数出现了偶数次，2个数出现了奇数次（这两个数不相同），请用O（1）的空间复杂度，找出这两个数，注意，不需要找出位置。\n2.分析\n3.代码\ndef get2Num(nums):\n    res = 0\n    for i in nums:\n        res ^= i\n    tmp_res = res\n    # 找出异或结果中其中一位为1的位置\n    pos = 0\n    while res & 1 == 0:\n        pos += 1\n        res >> 1\n    for i in nums:\n        if (i>>pos)&1 == 1:\n            tmp_res =  i ^ tmp_res\n    print(tmp_res)\n    print(tmp_res^res)\nnums = [2,2,2,2,4,5,6,6]\nget2Num(nums)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:57\n"},"数组/求数组中两个元素的最小距离.html":{"url":"数组/求数组中两个元素的最小距离.html","title":"求数组中两个元素的最小距离","keywords":"","body":"求数组中两个元素的最小距离\n1.题目\n​    给定一个数组，数组中含有重复元素，给定两个数字num1 和num2,求这两个数字在数组中出现的位置的最小距离\n2.分析\n​    哈希法,双指针法\n3.代码\n3.1哈希法\ndef minDis(nums, k1, k2):\n    bag = {}\n    min_dis = float('inf')\n    for index, value in enumerate(nums):\n        if value == k1:\n            bag[value] = index\n            print(bag)\n            if k2 in bag:\n                min_dis = min(min_dis, index-bag.get(k2))\n        elif value == k2:\n            bag[value] = index\n            print(bag)\n            if k1 in bag:\n                min_dis = min(min_dis, index-bag.get(k1))\n    print(bag)\n    print(min_dis)\n\nminDis([4,5,6,4,7,4,6,4,7,8,5,6,4,3,10,8],4,8)\n\n3.2代码2（用while循环）\ndef minDis(nums, k1, k2):\n    min_dis = float('inf')\n    k1_pos = -1\n    k2_pos = -1\n    i = 0\n    while i = 0:\n                min_dis = min(min_dis, i-k2_pos)\n        elif nums[i] == k2:\n            k2_pos = i\n            if k1_pos >= 0:\n                min_dis = min(min_dis, i-k1_pos)\n        i += 1\n    print(min_dis)\n\nminDis([4,5,6,4,7,4,6,4,7,8,5,6,4,3,10,8],4,8)\n\n\n[!NOTE]\na = {'3':2,'43':43}\na[0]\n\n字典这么取值是错的\n应该这样：\na = {'3':2,'43':43}\na.get('3')\n\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:41:57\n"},"数组/回文数 LeetCode 9.html":{"url":"数组/回文数 LeetCode 9.html","title":"回文数_LeetCode 9","keywords":"","body":"回文数(LeetCode 9)\n1.题目\n判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n示例 1:\n输入: 121\n输出: true\n示例 2:\n输入: -121\n输出: false\n解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n示例 3:\n输入: 10\n输出: false\n解释: 从右向左读, 为 01 。因此它不是一个回文数。\n进阶:\n你能不将整数转为字符串来解决这个问题吗？\n2.分析\n整数逆置\n3.代码\n不用自己写反转\n    def isPalindrome(self, x: 'int') -> 'bool':\n        x = str(x)\n        new_x = x[::-1]\n        if new_x == x: \n                return True\n        return False\n\n自己写反转判断\n    def isPalindrome(self, x: 'int') -> 'bool':\n        x = str(x)\n        return self.func(x)\n    def func(self, x):\n        l, r =0, len(x)-1\n        while l\n整数逆置\n    def isPalindrome(self, x: 'int') -> 'bool':\n        # 如果负数，不是回文数；如果个位数是0（除0这种特殊情况），不是回文数\n        if x\n反转一半数\n   # 反转一半数\n    def isPalindrome(self, x: 'int') -> 'bool':\n        if x right_rev:\n            right_rev = right_rev*10 + x%10\n            x = x//10\n       #    奇偶情况都考虑\n        return x==right_rev or x==right_rev//10\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:50\n"},"数组/异或操作.html":{"url":"数组/异或操作.html","title":"异或操作","keywords":"","body":"异或操作\n1.性质\n\n异或操作满足交换律和结合律\n0和一个数异或，等于该数\n两数相同，异或，等于0\n两数不同，异或，等于其他数\n\n2.1找出只出现一次的元素\n给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\n说明：\n你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\n示例 1:\n输入: [2,2,1]\n输出: 1\n\n示例 2:\n输入: [4,1,2,1,2]\n输出: 4\n\n代码\n    # 异或解决\n    def singleNumber(self, nums):\n        a = 0\n        for num in nums:\n            a = a ^ num\n        return a\n\n2.2不使用额外空间，交换元素\na = a ^ b;\nb = a ^ b; # a ^ b ^ b = a ^ 0 = a;\na = a ^ b;\n\na = a + b\nb = a - b\na = a - b\n\n2.3互换二进制的奇偶位\n0x5555 =  101010101010101\n0xaaaa = 1010101010101010\n\na = 6\ntmp_1 = (a & 0x5555)> 1 # 取出奇数位\ntmp = tmp_1 ^ tmp_2\nprint(tmp) # 9\n\n2.3找出出现两次的数\ndef findDup(nums):\n    nums_len = len(nums)\n    i = 0\n    for j in nums:\n        i ^= j\n#     print(i)\n    j = 1\n    while j \n2.4异或来判断一个二进制数中1的数量是奇数还是偶数\n\n求10100001中1的数量是奇数还是偶数； 答案：1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 = 1,结果为1就是奇数个1，结果为0就是偶数个1；\n\nres = 0\nfor i in nums:\n    res = res ^ i\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 12:56:07\n"},"数组/除自身以外数组的乘积.html":{"url":"数组/除自身以外数组的乘积.html","title":"除自身以外数组的乘积","keywords":"","body":"除自身以外数组的乘积\n1.题目\n给定长度为 n 的整数数组 nums，其中 n > 1，返回输出数组 output ，其中 output[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积。\n示例:\n输入: [1,2,3,4]\n输出: [24,12,8,6]\n说明: 请不要使用除法，且在 O(n) 时间复杂度内完成此题。\n进阶：\n你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组不被视为额外空间。）\n2.分析\n前缀积\n3.代码\n    def productExceptSelf(self, nums):\n        nums_len = len(nums)\n        res = [1]*nums_len\n        right = 1\n        for i in range(1, nums_len):\n            res[i] = res[i-1] * nums[i-1]\n        for i in range(nums_len-1, -1, -1):\n            res[i] = res[i]*right\n            right = right * nums[i]\n        # print(res)\n        return res\n\n    def productExceptSelf(self, nums):\n        nums_len = len(nums)\n        left = [1]*nums_len\n        right = [1]*nums_len\n        res = [] \n        for i in range(1,nums_len):\n            left[i] = left[i-1] * nums[i-1]\n            right[-(i+1)] = right[-(i+1)+1] * nums[-(i+1)+1]\n        for i in range(nums_len):\n            res.append(left[i]*right[i])\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:25\n"},"数组/最大子序和LeetCode 53.html":{"url":"数组/最大子序和LeetCode 53.html","title":"最大子序和LeetCode 53","keywords":"","body":"最大子序和(LeetCode 53)\n(子数组)\n1.题目\n给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n示例:\n输入: [-2,1,-3,4,-1,2,1,-5,4],\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n进阶:\n如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。\n2.分析\n使用动态规划\nF（i）：以array[i]为末尾元素的子数组的和的最大值，子数组的元素的相对位置不变\nF（i）=max（F（i-1）+array[i] ， array[i]）\nres：所有子数组的和的最大值\nres=max（res，F（i））\n\n如数组[6, -3, -2, 7, -15, 1, 2, 2]\n初始状态：\n    F（0）=6\n    res=6\ni=1：\n    F（1）=max（F（0）-3，-3）=max（6-3，3）=3\n    res=max（F（1），res）=max（3，6）=6\ni=2：\n    F（2）=max（F（1）-2，-2）=max（3-2，-2）=1\n    res=max（F（2），res）=max（1，6）=6\ni=3：\n    F（3）=max（F（2）+7，7）=max（1+7，7）=8\n    res=max（F（2），res）=max（8，6）=8\ni=4：\n    F（4）=max（F（3）-15，-15）=max（8-15，-15）=-7\n    res=max（F（4），res）=max（-7，8）=8\n以此类推\n最终res的值为8\n\n3.代码\nclass Solution(object):\n    def maxSubArray(self, nums):\n        sum = 0\n        max_sub_sum = nums[0]\n        for num in nums:\n            sum += num\n            if sum > max_sub_sum:\n                max_sub_sum = sum\n            if sum \n动态规划\n    def FindGreatestSumOfSubArray(self, array):\n        # write code here\n        # 动态规划\n        a_len = len(array)\n        res = array[0]\n        dp = [0]*a_len\n        for i in range(a_len):\n            dp[i] = max(dp[i-1]+array[i], array[i])\n            res = max(res, dp[i])\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 10:34:50\n"},"数组/两数之和 II - 输入无须数组.html":{"url":"数组/两数之和 II - 输入无须数组.html","title":"两数之和 II - 输入无须数组","keywords":"","body":"两数之和 II - 输入无须数组\n1.题目\n2.分析\n3.代码\n3.1二分法\nclass Solution:\n    def binary_search(self, li, left, right, val):\n        while left  li[mid][0]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            return None\n\n    def twoSum(self, nums, target):\n        new_list = [[num,i] for i,num in enumerate(nums)]\n        new_list.sort()\n        for i in range(len(new_list)):\n            a = new_list[i][0]\n            b = target - a\n            if b > a:\n                j = self.binary_search(new_list, i + 1, len(new_list) - 1, b)\n            else:\n                j = self.binary_search(new_list, 0, i - 1, b)\n            if j:\n                break\n        return [new_list[i][1], new_list[j][1]]\nret = Solution()\nprint(ret.twoSum([-1,-3,-2],-5))\n\n3.2字典法\nclass Solution:\n    def twoSum(self, nums, target):\n        nums_len = len(nums)\n        for i in range(nums_len):\n            dif = target - nums[i]\n            if dif in nums[:i]:\n                return [nums.index(dif), i]\n        return []\n\n3.3字典法\nclass Solution:\n    def twoSum(self, nums, target):\n        bag = {}\n        for index, value in enumerate(nums):\n            dif = target - value\n            if dif in bag:\n                return [index, bag[dif]]\n        return []\n\n3.4切片法\nclass Solution:\n    def twoSum(self, nums, target):\n        nums_len = len(nums)\n        for i in range(nums_len):\n            dif = target - nums[i]\n            if dif in nums[:i]:\n                return [nums.index(dif), i]\n    return []\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:29\n"},"数组/两数之和 II - 输入有序数组.html":{"url":"数组/两数之和 II - 输入有序数组.html","title":"两数之和 II - 输入有序数组","keywords":"","body":"两数之和 II - 输入有序数组\n1.题目\n给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。\n函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。\n说明:\n\n返回的下标值（index1 和 index2）不是从零开始的。\n你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\n\n示例:\n输入: numbers = [2, 7, 11, 15], target = 9\n输出: [1,2]\n解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n\n2.分析\n暴力法，\n二分法，\n指针对撞法\n3.代码\n暴力法\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        for i in range(len(numbers)-1):\n            for j in range(i+1,len(numbers)):\n                if numbers[i]+numbers[j] == target:\n                    return [i+1,j+1]\n        return []\n\n二分法\n    def binary_search(self, li, left, right, val):\n        while left  li[mid]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            return None\n    def twoSum(self, nums, target):\n        for i in range(len(nums)):\n            a = nums[i]\n            b = target - a\n            if b > a:\n                j = self.binary_search(nums, i + 1, len(nums) - 1, b)\n            else:\n                j = self.binary_search(nums, 0, i - 1, b)\n            if j and j!=i:\n                break\n        return [i+1, j+1]\n\n字典法\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        m={}\n        for index,value in enumerate(numbers):\n            if target-value in m:\n                return[m[target-value]+1,index+1]\n            m[value]=index\n\n双指针法（指针对撞法）\n==if elif else: 只会走一个==\nif 3>2:\n   print(111)\nelif 4>2:\n    print(4444)\nelse:\n    print(6666)\n\n输出：111\n\n\nif 3>22:\n   print(111)\nelif 4>2:\n    print(4444)\nelse:\n    print(6666)\n\n输出：444\n\ndef twoSum(self, numbers, target):\n    left, right = 0, len(numbers)-1\n    sum_all = 0\n    while left  target:\n            right -= 1\n            # continue 可以不加，因为if elif else 只会走一个\n        elif sum_all \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 09:17:38\n"},"数组/反转字符串中的单词 III.html":{"url":"数组/反转字符串中的单词 III.html","title":"反转字符串中的单词 III","keywords":"","body":"反转字符串中的单词 III\n1.题目\n给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。\n示例 1:\n输入: \"Let's take LeetCode contest\"\n输出: \"s'teL ekat edoCteeL tsetnoc\"\n注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。\n2.分析\n3.代码\n代码1\n    def reverseWords(self, s):\n        if s == '':\n            return ''\n        s = s.split()\n        res = []\n        res = ' '.join(i[::-1] for i in s)\n        # print(res)\n        return res\n\n代码2\n\n    def reverseWords(self, s: str) -> str:\n        print(s.split()[::-1])\n        s = list(s)\n        start = 0\n        # self.func(s, 0 , len(s)-1)\n        for i in range(len(s)-1):\n            if s[i] == ' ':\n                self.func(s, start, i-1)\n                start = i+1\n        self.func(s, start, len(s)-1)\n        res = ''.join(s)\n        # print(res)\n        return res\n    def func(self, s, b, e):\n        # 需要逆置的子串的头尾序号\n        # b:begin e:end\n        while b \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:41\n"},"数组/长度最小的子数组.html":{"url":"数组/长度最小的子数组.html","title":"长度最小的子数组","keywords":"","body":"长度最小的子数组\n1.题目\n给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。\n示例: \n输入: s = 7, nums = [2,3,1,2,4,3]\n输出: 2\n解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。\n进阶:\n如果你已经完成了O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。\n2.分析\n滑动窗口法\n3.代码\nclass Solution:\n    def minSubArrayLen(self, s, nums):\n        sum_all = 0\n        left, right = 0, 0\n        nums_len = len(nums)\n        min_len = nums_len+1\n        while left = s:\n                min_len = min(min_len, right-left)\n        if min_len == nums_len+1:\n            return 0\n        else:\n            return min_len\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:25\n"},"数组/合并区间_LeetCode_56.html":{"url":"数组/合并区间_LeetCode_56.html","title":"合并区间_LeetCode_56","keywords":"","body":"合并区间(LeetCode_56)\n1.题目\n给出一个区间的集合，请合并所有重叠的区间。\n示例 1:\n输入: [[1,3],[2,6],[8,10],[15,18]]\n输出: [[1,6],[8,10],[15,18]]\n解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].\n\n示例 2:\n输入: [[1,4],[4,5]]\n输出: [[1,5]]\n解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。\n2.分析\n...\n3.代码\n简化\nclass Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        if not intervals:return []\n        # arr = sorted(intervals, key=lambda x:(x[0],[x[1]]))\n        # 只需对每个元素第一个位置排序即可，不需要两个位置都排序\n        arr = sorted(intervals, key=lambda x:x[0])\n        res = [arr[0]]\n        for i in range(1,len(arr)):\n            if res[-1][1] >= arr[i][0]:\n                res[-1][1] = max(res[-1][1], arr[i][1])\n            else:\n                res.append([arr[i][0],arr[i][1]])\n        return res\n\n略显复杂\nclass Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        if not intervals:return []\n        arr = sorted(intervals, key=lambda x:(x[0],[x[1]]))\n        # print(arr)\n        res = [arr[0]]\n        for i in range(1,len(arr)):\n            if res[-1][1] >= arr[i][0]:\n                tmp = [min(res[-1][0],arr[i][0]),max(res[-1][1],arr[i][1])]\n                res.pop()\n                res.append(tmp)\n            else:\n                res.append([arr[i][0],arr[i][1]])\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 18:03:38\n"},"数组/最长连续递增序列_LeetCode_674.html":{"url":"数组/最长连续递增序列_LeetCode_674.html","title":"最长连续递增序列_LeetCode_674","keywords":"","body":"1.题目\n给定一个未经排序的整数数组，找到最长且连续的的递增序列。\n示例 1:\n输入: [1,3,5,4,7]\n输出: 3\n解释: 最长连续递增序列是 [1,3,5], 长度为3。\n尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。\n\n示例 2:\n输入: [2,2,2,2,2]\n输出: 1\n解释: 最长连续递增序列是 [2], 长度为1。\n注意：数组长度不会超过10000。\n2.分析\n要求时间复杂度为O（n）\n3.代码\n动态规划\nclass Solution:\n    def findLengthOfLCIS(self, nums: List[int]) -> int:\n        n = len(nums)\n        if nnums[i-1]:\n                dp[i] = dp[i-1]+1\n\n        return max(dp)\n\nclass Solution:\n    def findLengthOfLCIS(self, nums: List[int]) -> int:\n        nums_len = len(nums)\n        if len(nums)nums[i-1]:\n                count += 1\n                res = max(res, count)\n            else:\n                count = 1\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 12:06:47\n"},"数组/调整数组，奇数在前偶数在后，保持相对顺序.html":{"url":"数组/调整数组，奇数在前偶数在后，保持相对顺序.html","title":"调整数组，奇数在前偶数在后，保持相对顺序","keywords":"","body":"冒泡排序是稳定的\n\n\ndef func(nums):\n    nums_len = len(nums)\n    if nums_len\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-17 18:18:52\n"},"数组/找出数组中2个出现一次的数.html":{"url":"数组/找出数组中2个出现一次的数.html","title":"找出数组中2个出现一次的数","keywords":"","body":"剑指Offer（四十）：数组中只出现一次的数字\n二、题目\n一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。\n1、思路\n大家首先想到的是顺序扫描法，但是这种方法的时间复杂度是O（n^2）。接着大家又会考虑用哈希表的方法，但是空间复杂度不是O（1）。\n应该怎么做才能即满足时间复杂度是O（n）又满足空间复杂度是O（1）的要求呢？\n我们可以想一想“异或”运算的一个性质，我们直接举例说明。\n举例：{2,4,3,6,3,2,5,5}\n这个数组中只出现一次的两个数分别是4和6。怎么找到这个两个数字呢？\n我们先不看找到俩个的情况，先看这样一个问题，如何在一个数组中找到一个只出现一次的数字呢？比如数组：{4,5,5}，唯一一个只出现一次的数字是4。\n我们知道异或的一个性质是：任何一个数字异或它自己都等于0。也就是说，如果我们从头到尾依次异或数组中的每一个数字，那么最终的结果刚好是那个只出现一次的数字。比如数组{4,5,5}，我们先用数组中的第一个元素4（二进制形式：0100）和数组中的第二个元素5（二进制形式：0101）进行异或操作，0100和0101异或得到0001，用这个得到的元素与数组中的三个元素5（二进制形式：0101）进行异或操作，0001和0101异或得到0100，正好是结果数字4。这是因为数组中相同的元素异或是为0的，因此就只剩下那个不成对的孤苦伶仃元素。\n现在好了，我们已经知道了如何找到一个数组中找到一个只出现一次的数字，那么我们如何在一个数组中找到两个只出现一次的数字呢？如果，我们可以将原始数组分成两个子数组，使得每个子数组包含一个只出现一次的数字，而其他数字都成对出现。这样，我们就可以用上述方法找到那个孤苦伶仃的元素。\n我们还是从头到尾一次异或数组中的每一个数字，那么最终得到的结果就是两个只出现一次的数组的异或结果。因为其他数字都出现了两次，在异或中全部抵消了。由于两个数字肯定不一样，那么异或的结果肯定不为0，也就是说这个结果数组的二进制表示至少有一个位为1。我们在结果数组中找到第一个为1的位的位置，记为第n位。现在我们以第n位是不是1为标准把元数组中的数字分成两个子数组，第一个子数组中每个数字的第n位都是1，而第二个子数组中每个数字的第n位都是0。\n举例：{2,4,3,6,3,2,5,5}\n我们依次对数组中的每个数字做异或运行之后，得到的结果用二进制表示是0010。异或得到结果中的倒数第二位是1，于是我们根据数字的倒数第二位是不是1分为两个子数组。第一个子数组{2,3,6,3,2}中所有数字的倒数第二位都是1，而第二个子数组{4,5,5}中所有数字的倒数第二位都是0。接下来只要分别两个子数组求异或，就能找到第一个子数组中只出现一次的数字是6，而第二个子数组中只出现一次的数字是4。\n3.代码\n一次遍历法\nclass Solution:\n    # 返回[a,b] 其中ab是出现一次的两个数字\n    def FindNumsAppearOnce(self, array):\n        # write code here\n        res = set()\n        for i in array:\n            if i not in res:\n                res.add(i)\n            else:\n                res.remove(i)\n        return list(res)\n\n异或\nclass Solution:\n    # 返回[a,b] 其中ab是出现一次的两个数字\n    def FindNumsAppearOnce(self, array):\n        # write code here\n        res = 0\n        for i in array:\n            res ^= i\n        index = 0\n        while True:\n            if res&1 ==0:\n                index += 1\n                res >>= 1\n            else:\n                break\n        a = 0\n        b = 0\n\n        for i in array:\n            if i>>index&1==1:\n                a ^= i\n            else:\n                b ^= i\n        return [a,b]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 17:49:08\n"},"矩阵/":{"url":"矩阵/","title":"矩阵","keywords":"","body":"矩阵\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-07 22:00:38\n"},"矩阵/搜索二维矩阵 LeetCode 74.html":{"url":"矩阵/搜索二维矩阵 LeetCode 74.html","title":"搜索二维矩阵_LeetCode 74","keywords":"","body":"搜索二维矩阵(LeetCode 74)\n1.题目\n编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：\n\n每行中的整数从左到右按升序排列。\n每行的第一个整数大于前一行的最后一个整数。\n\n示例 1:\n输入:\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 3\n输出: true\n示例 2:\n输入:\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 13\n输出: false\n2.分析\n\n一是变为一维列表，进行二分查找\n二是就在愿矩阵上，进行查找，不过起始点，选为左下，或者右上，但是我们不能选择左上角和右下角为起点，假设左上角的数字为1，我们查找数字为7，那么第一次比较7比1大，但是我们无法缩小查询范围（即不能剔除第一行，也不能剔除第一列）\n\n3.代码\n二分查找\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return False\n        m = len(matrix)\n        n = len(matrix[0])\n        left = 0\n        right = m*n -1\n        res =[]\n        for i in matrix:\n            # 注意：这儿是将矩阵编程以为列表\n            res.extend(i)\n        return self.binary_search(res, left, right, target)\n\n    def binary_search(self,li, left, right, target):\n\n        while left \n在原矩阵上进行查找\n    def searchMatrix(self, matrix, target):\n        if not matrix:return False\n        m, n = len(matrix), len(matrix[0])\n        i, j = m-1, 0\n        # 从左下角开始查找\n        while i>=0 and j\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-11 19:08:15\n"},"矩阵/搜索二维矩阵 II LeetCode 240.html":{"url":"矩阵/搜索二维矩阵 II LeetCode 240.html","title":"搜索二维矩阵 II_LeetCode 240","keywords":"","body":"搜索二维矩阵 II(LeetCode 240)\n1.题目\n编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：\n\n每行的元素从左到右升序排列。\n每列的元素从上到下升序排列。\n\n示例:\n现有矩阵 matrix 如下：\n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n给定 target = 5，返回 true。\n给定 target = 20，返回 false。\n2.分析\n因为展开成一维列表后也不是有序的，因此，我们就在原矩阵上进行查找，查找的起始点是左下角和右上角\n3.代码\n def searchMatrix(self, matrix, target):\n        \"\"\"每一行都用二分法计算，但是，如果匹配成功啦，不是返回的下标，而是True\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return False\n        m, n = len(matrix)-1,len(matrix[0])-1\n        i = m\n        j = 0\n        while (i>=0 and j\nC++\nclass Solution {\npublic:\n    bool searchMatrix(vector>& matrix, int target) {\n        /        // 不加这个传入为空的判断的话会访问越界\n        // 只有一句话，可以不加大括号\n        // if (matrix.empty()) \n        //     return 0;\n\n        //也可以这么判断，\n        int len = matrix.size();\n        if (len == 0)\n            return 0;\n\n\n        int row = matrix.size()-1;\n        int col = matrix[0].size()-1;\n        int j = 0;\n        int i = row;\n        while (i>=0 && j target){\n                i--;\n                continue;\n            }\n            else if (matrix[i][j] \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:57\n"},"矩阵/最小路径和 LeetCode 64.html":{"url":"矩阵/最小路径和 LeetCode 64.html","title":"最小路径和_LeetCode 64","keywords":"","body":"最小路径和(LeetCode 64)\n1.题目\n给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。\n说明：每次只能向下或者向右移动一步。\n示例:\n输入:\n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n输出: 7\n解释: 因为路径 1→3→1→1→1 的总和最小。\n2.分析\n​    (动态规划1)：时间复杂为o(nm)和空间复杂度为o(nm)。典型的动态规划问题，假设当前已经开始计算s[i][j]，那么s[i][j]只可能从s[i-1][j]+grid[i][j]或者s[i][j-1]+grid[i][j]计算得到，也就是s[i][j] = min(s[i-1][j],s[i][j-1])+grid[i][j]。我们需要一个o(nm)额外空间保存已经计算的s[i][j]的值，我们只需要访问一遍数组即可。因此时间复杂度为o(nm)，空间复杂度为o(n*m)。我们需要特殊处理矩阵中第一行和第一列。因为第一行没有s[i-1][j]元素，只有s[i][j-1]元素。第一列没有s[i][j-1]元素，只有s[i-1][j]元素。\n3.代码\n动态规划1(原地修改)：\n    def minPathSum(self, grid):\n        if not grid or not grid[0]:return 0\n        n, m = len(grid), len(grid[0])\n        for i in range(1,n):\n            grid[i][0] = grid[i-1][0] + grid[i][0]\n        for j in range(1,m):\n            grid[0][j] = grid[0][j-1] + grid[0][j]  \n        for i in range(1,n):\n            for j in range(1,m):\n                grid[i][j] = min(grid[i-1][j], grid[i][j-1])+grid[i][j]\n        return grid[-1][-1]\n\n    def minPathSum(self, grid):\n        if not grid or not grid[0]:return 0\n\n        n, m = len(grid), len(grid[0])\n        for i in range(n):\n            for j in range(m):\n                if i==0 and j>0:\n                    grid[i][j] = grid[i][j-1] + grid[i][j]\n                elif j==0 and i>0:\n                    grid[i][j] = grid[i-1][j] + grid[i][j]\n                elif i>0 and j>0:\n                    grid[i][j] = min(grid[i-1][j], grid[i][j-1])+grid[i][j]\n        return grid[-1][-1]\n\n(动态规划2)：时间复杂度为o(nm)，空间复杂度为o(m)，此方法需要2m额外空间。当我们求s[i][j]时，s[i-2]行的元素我们就不再需要，我们只需要s[i-1]行中的元素，我们把s[i-1]行中的元素保存在up数组中，数组的大小为m。我们把s[i]保存在now数组中，当s[i]行的元素计算完毕以后，我们交换up和now数组。因为需要up数组和now数组，且数组的大小都为m，所以我们需要2*m大小的额外空间。\n        def minPathSum(self, grid):\n            if not grid or not grid[0]:return 0\n            n, m = len(grid), len(grid[0])\n            up = [grid[0][0]]*m\n            now = [0] *m\n            for j in range(1,m):\n                up[j] = grid[0][j] + up[j-1]\n\n            for i in range(1,n):\n                now[0] = grid[i][0] + up[0]\n                for j in range(1,m):\n                    # pre[j]:上元素  tmp:左元素，求和后，tmp也为左元素\n                    now[j] = min(up[j],now[j-1]) + grid[i][j]\n                up = now.copy()\n            return up[-1]\n\n(动态规划3)：时间复杂度为o(nm)，空间复杂度为o(m)，需要m大小的额外空间，注意此方法和方法三的区别，方法三需要2m大小的额外空间，此方法只需要m大小的额外空间，在方法三中我们保存当前行s[i]中的元素，假设我们当前计算s[i][j]，我们只需要知道s[i][j-1]的值即可，不需要保存s[i]行中的元素。每次计算s[i][j]时，我们需要更新up[j]的值。\n        def minPathSum(self, grid):\n            if not grid or not grid[0]:return 0\n            n, m = len(grid), len(grid[0])\n            up = [grid[0][0]]*m\n            for j in range(1,m):\n                up[j] = grid[0][j] + up[j-1]\n\n            for i in range(1,n):\n                tmp = grid[i][0] + up[0]\n                up[0] = tmp\n                for j in range(1,m):\n                    # pre[j]:上元素  tmp:左元素，求和后，tmp也为左元素\n                    tmp = min(up[j],tmp) + grid[i][j]\n                    up[j] = tmp\n            return up[-1]\n\n非原地修改，动态规划\n        def minPathSum(self, grid):\n            if not grid or not grid[0]:return 0\n\n            n, m = len(grid), len(grid[0])\n            mat = [[grid[0][0]]*m]*n\n            for i in range(1,n):\n                mat[i][0] = mat[i-1][0] + grid[i][0]\n\n            for j in range(1,m):\n                mat[0][j] = mat[0][j-1] + grid[0][j]\n            for i in range(1,n):\n                for j in range(1,m):\n                    mat[i][j] = min(mat[i][j-1], mat[i-1][j]) + grid[i][j]\n            return mat[-1][-1]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:39:21\n"},"矩阵/长度最小的子数组.html":{"url":"矩阵/长度最小的子数组.html","title":"长度最小的子数组","keywords":"","body":"长度最小的子数组\n1.题目\n给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。\n示例: \n输入: s = 7, nums = [2,3,1,2,4,3]\n输出: 2\n解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。\n进阶:\n如果你已经完成了O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。\n2.分析\n滑动窗口法\n3.代码\nclass Solution:\n    def minSubArrayLen(self, s, nums):\n        sum_all = 0\n        left, right = 0, 0\n        nums_len = len(nums)\n        min_len = nums_len+1\n        while left = s:\n                min_len = min(min_len, right-left)\n        if min_len == nums_len+1:\n            return 0\n        else:\n            return min_len\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:40:10\n"},"矩阵/两数之和 II - 输入有序数组.html":{"url":"矩阵/两数之和 II - 输入有序数组.html","title":"两数之和 II - 输入有序数组","keywords":"","body":"两数之和 II - 输入有序数组\n1.题目\n给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。\n函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。\n说明:\n\n返回的下标值（index1 和 index2）不是从零开始的。\n你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\n\n示例:\n输入: numbers = [2, 7, 11, 15], target = 9\n输出: [1,2]\n解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n\n2.分析\n暴力法，\n二分法，\n指针对撞法\n3.代码\n暴力法\n暴力解决\ndef twoSum(self, numbers: List[int], target: int) -> List[int]:\n    for i in range(len(numbers)-1):\n        for j in range(i+1,len(numbers)):\n            if i!=j and numbers[i]+numbers[j] == target:\n                return [i+1,j+1]\n            return []\n\n二分法\n    def binary_search(self, li, left, right, val):\n        while left  li[mid][0]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            return None\n    def twoSum(self, nums, target):\n        for i in range(len(nums)):\n            a = nums[i]\n            b = target - a\n            if b > a:\n                j = self.binary_search(nums, i + 1, len(nums) - 1, b)\n            else:\n                j = self.binary_search(nums, 0, i - 1, b)\n            if j and j!=i:\n                break\n        return [i+1, j+1]\n\n指针对撞法\ndef twoSum(self, numbers, target):\n    left, right = 0, len(numbers)-1\n    sum_all = 0\n    while left  target:\n            right -= 1\n            elif sum_all \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:38:51\n"},"矩阵/两数之和 II - 输入无须数组.html":{"url":"矩阵/两数之和 II - 输入无须数组.html","title":"两数之和 II - 输入无须数组","keywords":"","body":"两数之和 II - 输入无须数组\n1.题目\n2.分析\n3.代码\n3.1二分法\nclass Solution:\n    def binary_search(self, li, left, right, val):\n        while left  li[mid][0]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            return None\n\n    def twoSum(self, nums, target):\n        new_list = [[num,i] for i,num in enumerate(nums)]\n        new_list.sort()\n        for i in range(len(new_list)):\n            a = new_list[i][0]\n            b = target - a\n            if b > a:\n                j = self.binary_search(new_list, i + 1, len(new_list) - 1, b)\n            else:\n                j = self.binary_search(new_list, 0, i - 1, b)\n            if j:\n                break\n        return [new_list[i][1], new_list[j][1]]\nret = Solution()\nprint(ret.twoSum([-1,-3,-2],-5))\n\n3.2字典法\nclass Solution:\n    def twoSum(self, nums, target):\n        nums_len = len(nums)\n        for i in range(nums_len):\n            dif = target - nums[i]\n            if dif in nums[:i]:\n                return [nums.index(dif), i]\n        return []\n\n3.3字典法\nclass Solution:\n    def twoSum(self, nums, target):\n        bag = {}\n        for index, value in enumerate(nums):\n            dif = target - value\n            if dif in bag:\n                return [index, bag[dif]]\n        return []\n\n3.4切片法\nclass Solution:\n    def twoSum(self, nums, target):\n        nums_len = len(nums)\n        for i in range(nums_len):\n            dif = target - nums[i]\n            if dif in nums[:i]:\n                return [nums.index(dif), i]\n    return []\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:38:38\n"},"矩阵/螺旋矩阵.html":{"url":"矩阵/螺旋矩阵.html","title":"螺旋矩阵","keywords":"","body":"螺旋矩阵\n1.题目\n给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。\n示例 1:\n输入:\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n输出: [1,2,3,6,9,8,7,4,5]\n示例 2:\n输入:\n[\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9,10,11,12]\n]\n输出: [1,2,3,4,8,12,11,10,9,5,6,7]\n2.分析\n​    对于这种螺旋遍历的方法，重要的是要确定上下左右四条边的位置，那么初始化的时候，上边up就是0，下边down就是m-1，左边left是0，右边right是n-1。然后我们进行while循环，先遍历上边，将所有元素加入结果res，然后上边下移一位，如果此时上边大于下边，说明此时已经遍历完成了，直接break。同理对于下边，左边，右边，依次进行相对应的操作，这样就会使得坐标很有规律，并且不易出错，参见代码如下：\n3.代码\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        if not matrix:\n            return []\n        u, d, l, r = 0, len(matrix)-1, 0, len(matrix[0])-1\n        res = []\n        while True:\n            for i in range(l,r+1):res.append(matrix[u][i])\n            u += 1\n            if u > d:break\n\n            for i in range(u,d+1):res.append(matrix[i][r])\n            r -= 1\n            if r  r:break\n        # print(res)\n        return  res\n\nclass Solution {\n    public List spiralOrder(int[][] matrix) {\n        // 对于这种螺旋遍历的方法，重要的是要确定上下左右四条边的位置，那么初始化的时候，上边up就是0，下边down就是m-1，\n        // 左边left是0，右边right是n-1。然后我们进行while循环，先遍历上边，将所有元素加入结果res，然后上边下移一位，\n        // 如果此时上边大于下边，说明此时已经遍历完成了，直接break\n        List res = new ArrayList<>();\n        if (matrix == null || matrix.length == 0) return res;\n\n        int n = matrix.length;\n        int m = matrix[0].length;\n\n        int u=0, d=n-1, l=0, r=m-1;\n        while (true) {\n            for (int i = l; i  d) break;\n\n            for (int i = u; i = l; i--)\n                res.add(matrix[d][i]);\n            if (--d = u; i --)\n                res.add(matrix[i][l]);\n            if (++l > r) break;\n        }\n\n        return res;\n    }\n}\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-06 13:01:19\n"},"矩阵/螺旋矩阵 II LeetCode 53.html":{"url":"矩阵/螺旋矩阵 II LeetCode 53.html","title":"螺旋矩阵 II_LeetCode 53","keywords":"","body":"螺旋矩阵 II(LeetCode 53)\n1.题目\n给定一个正整数 n，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。\n示例:\n输入: 3\n输出:\n[\n [ 1, 2, 3 ],\n [ 8, 9, 4 ],\n [ 7, 6, 5 ]\n]\n2.分析\n实现思路：给定四个边界，left = 0,right = n-1,  top = 0,bottom = n-1,\n然后每次进行四遍循环，\n(top)left->right  循环结束后top+1\n(right)top->bottom  循环结束后right-1\n(bottom)right->left  循环结束后bottom-1\n(left)bottom->top  循环结束后left+1\n循环结束条件为index = n*n\n\n3.代码\ndef generateMatrix(self, n):\n        u, d, l, r = 0, n-1, 0, n-1\n        matrix = [[0]*n for _ in range(n)]\n        index = 0\n        while index \njava\nclass Solution {\n    public int[][] generateMatrix(int n) {\n        int[][] res = new int[n][n];\n        int u=0, d=n-1, l=0, r=n-1;\n        int num = 1;\n\n        while (true) {\n            for (int i = l; i  d) break;\n\n            for (int i = u; i = l; i--) res[d][i] = num++;\n            if (--d = u; i--) res[i][l] = num++;\n            if(++l > r) break;\n        }\n\n        return res;\n    }\n}\n\njava\npublic int[][] generateMatrix(int n) {\n\n        int l = 0, r = n - 1, t = 0, b = n - 1;\n        int[][] mat = new int[n][n];\n        int num = 1, tar = n * n;\n        while(num = l; i--) mat[b][i] = num++; // right to left.\n            b--;\n            for(int i = b; i >= t; i--) mat[i][l] = num++; // bottom to top.\n            l++;\n        }\n        return mat;\n\n    }\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-06 13:03:16\n"},"矩阵/有序矩阵中第K小的元素.html":{"url":"矩阵/有序矩阵中第K小的元素.html","title":"有序矩阵中第K小的元素","keywords":"","body":"有序矩阵中第K小的元素\n1.题目\n给定一个 n x n 矩阵，其中每行和每列元素均按升序排序，找到矩阵中第k小的元素。\n请注意，它是排序后的第k小元素，而不是第k个元素。\n示例:\nmatrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\n\n返回 13。\n说明: \n你可以假设 k 的值永远是有效的, 1 ≤ k ≤ n2 。\n2.分析\n\n我们使用一个最大堆，然后遍历数组每一个元素，将其加入堆，根据最大堆的性质，大的元素会排到最前面，然后我们看当前堆中的元素个数 是否大于k，大于的话就将首元素去掉，循环结束后我们返回堆中的首元素即为所求:\n\n3.代码\n\nclass Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        # 我们使用一个最大堆，然后遍历数组每一个元素，将其加入堆，根据最大堆的性质，大的元素会排到最前面，然后我们看当前堆中的元素个数         # 是否大于k，大于的话就将首元素去掉，循环结束后我们返回堆中的首元素即为所求:\n        import heapq\n        tmp = []\n        edge = len(matrix)\n        for i in range(edge):\n            for j in range(edge): \n                heapq.heappush(tmp,-matrix[i][j])\n                if len(tmp) > k:\n                    heapq.heappop(tmp)\n        print(-tmp[0])\n        return -tmp[0]\n\n​ \n\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:01\n"},"链表/":{"url":"链表/","title":"链表","keywords":"","body":"链表\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-08 00:43:19\n"},"链表/链表归并排序.html":{"url":"链表/链表归并排序.html","title":"链表归并排序","keywords":"","body":"链表归并排序\n1.题目\n在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。\n示例 1:\n输入: 4->2->1->3\n输出: 1->2->3->4\n示例 2:\n输入: -1->5->3->4->0\n输出: -1->0->3->4->5\n2.分析\n归并排序采用分治思想，首先使其子序列成为有序序列，然后再对子序列进行归并。\n递归实现：\n\n首先把链表分割为两个子链表（采用快慢指针找到链表中间节点），递归该分割过程，直至子链表只包含一个节点为止；\n创建一个新的链表节点，指向排序好的链表；对分割得到的两个子链表逐一遍历对比，值小的节点插入到新链表后面；\n两个子链表归并完成，且已完成对其排序，返回链表头指针给上层递归。\n\n3.代码\n链表归并\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # 归并排序\n    def sortList(self, head: ListNode) -> ListNode:\n        def split_List(head):\n            if head == None or head.next == None:\n                return head\n            fast = slow = head\n            while fast.next and fast.next.next:\n                fast = fast.next.next\n                slow = slow.next\n            tmp = slow\n            slow = slow.next\n            # print(slow.val)\n            tmp.next = None\n            return slow , head\n        def merger_sort(head):\n            if head == None or head.next ==None:\n                return head\n            head1, head2 = split_List(head)\n            head1 = merger_sort(head1)\n            head2 = merger_sort(head2)\n            return merger(head1, head2)\n        def merger(head1, head2):\n            if head1 == None:return head2\n            if head2 == None:return head1\n            new_head = tail = ListNode(-1)\n            while head1 and head2:\n                if head1.val \n\n[!NOTE]\nsplit_List函数\nslow = slow.next\ntmp.next = None\n不要写反了\n\n写成这样就错了\ntmp.next = None\nslow = slow.next\n\n\n列表归并，作为参考\n# 归并，现在左右两个列表已经是有序的了\n# 这儿用low、mid、high，是因为后续还会调用这个函数，会写成递归\ndef merge(li, low, mid, high):\n    i = low\n    # 第二个有序列表的第一个元素\n    j = mid+1\n    ltmp = []\n    # 左右两边都有数\n    while i\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 23:28:39\n"},"链表/合并两个有序链表 LeetCode 21.html":{"url":"链表/合并两个有序链表 LeetCode 21.html","title":"合并两个有序链表__LeetCode 21","keywords":"","body":"合并两个有序链表(LeetCode 21)\n1.题目\n将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 \n示例：\n输入：1->2->4, 1->3->4\n输出：1->1->2->3->4->4\n2.分析\n​    新建立一个新的链表。建立两个指针cur1和cur2，分别指向两个链表。然后只需要通过比较两个链表每个元素的大小，小的元素添加到新的链表中即可。最后，我们要分别判断cur1和cur2是否是各自链表的末尾，如果不是，将剩余元素添加到新的链表末尾即可。\n3.代码\n非递归\n   # 对于链表的问题，根据以往的经验一般都是要建一个dummy node，连上原链表的头结点，这样的话就算头结点变动了，我们还可以通过dummy->next来获得新链表的头结点。\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        tail = head = ListNode(0)\n        while l1 and l2:\n            if l1.val \n\n[!NOTE]\n    if l1:\n        tail.next = l1\n    if l2:\n        tail.next = l2\n\n    改为：tail.next = l1 or l2\n\n\n代码2非递归\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        if not l1: return l2\n        if not l2: return l1\n\n        tail = head = ListNode(0)\n        while l1 and l2:\n            if l1.val \n递归版\n        def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n            if not l1:return l2\n            if not l2:return l1\n            if l1.val \njava\nclass Solution {\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        if (l1 == null) return l2;\n        if (l2 == null) return l1;\n        ListNode dummy, head;\n        dummy = new ListNode(-1);\n        head = dummy;\n\n        while (l1 != null && l2 != null) {\n            if (l1.val \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-06 00:43:01\n"},"链表/合并K个排序链表.html":{"url":"链表/合并K个排序链表.html","title":"合并K个排序链表","keywords":"","body":"合并K个排序链表\n1.题目\n合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。\n示例:\n输入:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\n输出: 1->1->2->3->4->4->5->6\n2.分析\n​    首先将list中的每个 链表 比较首元素，然后依次加入优先队列（或者一个堆，我这里使用堆）\n然后判断这个 优先队列 是否为空，不为空，我们弹出队首元素（1），接着判断这个弹出的元素作为一个链表节点，其后是否还有元素，如果有元素，将元素加入队列。同时将结果加入到result中\n3.代码\n优先队列（每次只加入各队列最小值比较）\n    def mergeKLists(self, lists: List[ListNode]) -> ListNode:\n        import heapq\n        gw = []\n        new_head = cur = ListNode(0)\n        x = 0\n        for i in lists:\n            if i:\n                heapq.heappush(gw, (i.val, x, i))\n                x += 1\n        while len(gw) > 0:\n            tmp = heapq.heappop(gw)[2]\n            cur.next = tmp\n            cur = cur.next\n            if tmp.next:\n                heapq.heappush(gw, (tmp.next.val, x, tmp.next))\n                x += 1\n        return new_head.next\n\n优先队列（一次性加入所有元素）\n    def mergeKLists(self, lists):\n        import heapq\n        result = ListNode(-1)\n        cur = result\n        p = list()\n        x = 0\n        for i in lists:\n            while i:\n                heapq.heappush(p, (i.val, x, i))\n                i = i.next\n                x += 1\n        while p:\n            cur.next = heapq.heappop(p)[2]\n            cur = cur.next\n        return result.next\n\n分治法（未完成）\n  def mergeKLists(self, lists: List[ListNode]) -> ListNode:\n            def merge(a, b):\n                head = ListNode(0)\n                cur = head\n                while a and b:\n                    if a.val > b.val:\n                        cur.next = b\n                        b = b.next\n                    else:\n                        cur.next = a\n                        a = a.next\n                    cur = cur.next\n                if a:\n                    cur.next = a\n                if b:\n                    cur.next = b\n                return head.next\n\n            # 采用分治法\n            n = len(lists)\n            if n == 0:\n                return None\n            def deal(l, r):\n                if l > r:\n                    return None\n                if l == r:\n                    return lists[0]\n                middle = (l+r) // 2\n                a = deal(l, middle)\n                b = deal(middle, r)\n                return merge(a, b)\n            return deal(0, n-1)\n\n\n[!NOTE]\n​    当对一个 tuple 排序时， python 会从 0 开始对两个 tuple 的成员依次比较，如果两个成员相同就再比较下一个成员。问题中的 tuple 很有趣，前两个链表的第一项比较结果都相同（ 1 ），于是 python 开始比较第二个成员，第二个成员是一个ListNode，没有比较方法，在处理这个问题上 py2 和 py3 有了差异， py2 随机瞎排， py3 则是抛出异常。\n    一种解决办法是我们重写一个ListNode，给他添加val元素方法。我这里使用了另外的一种解决思路，就是在tuple中再添加一个元素。\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:41\n"},"链表/旋转链表 LeetCode 61.html":{"url":"链表/旋转链表 LeetCode 61.html","title":"旋转链表__LeetCode 61","keywords":"","body":"旋转链表(LeetCode 61)\n1.题目\n给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。\n示例 1:\n输入: 1->2->3->4->5->NULL, k = 2\n输出: 4->5->1->2->3->NULL\n解释:\n向右旋转 1 步: 5->1->2->3->4->NULL\n向右旋转 2 步: 4->5->1->2->3->NULL\n\n示例 2:\n输入: 0->1->2->NULL, k = 4\n输出: 2->0->1->NULL\n解释:\n向右旋转 1 步: 2->0->1->NULL\n向右旋转 2 步: 1->2->0->NULL\n向右旋转 3 步: 0->1->2->NULL\n向右旋转 4 步: 2->0->1->NULL\n\n2.分析\n这个问题其实和 Leetcode 19: 删除链表的倒数第 N 个节点（最详细解决方案！！！）是一样的。其实就是一个循环链表首先，如果head == None or head.next == None我们直接返回head就可以了。\n因为q = q.next，所以是左旋\n3.代码\n def rotateRight(self, head: ListNode, k: int) -> ListNode:\n        if head == None or head.next == None:\n            return head\n        # 初始有一个点\n        count = 1\n        cur = head\n        while cur.next:\n            count += 1\n            # 前指针，这儿没有用，但是可以看看怎么写\n            # pre = cur\n            cur = cur.next\n        # 首尾连接\n        cur.next = head\n        # 从尾巴开始左旋\n        tmp = cur\n        # print(cur.val)\n        k = count - k%count\n        for _ in range(k):\n            # 这句话阐述了是左旋，我们可以这么理解，左边的等于右边的就是左旋；右边的等于左边的，就是右旋\n            tmp = tmp.next\n        # 旋转完毕，断开换\n        new_head = tmp.next\n        tmp.next = None\n        return new_head\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:59\n"},"链表/环形链表 LeetCode 141.html":{"url":"链表/环形链表 LeetCode 141.html","title":"环形链表_LeetCode 141.md","keywords":"","body":"环形链表(LeetCode 141)\n1.题目\n给定一个链表，判断链表中是否有环。\n为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。\n示例 1：\n输入：head = [3,2,0,-4], pos = 1\n输出：true\n解释：链表中有一个环，其尾部连接到第二个节点。\n\n示例 2：\n输入：head = [1,2], pos = 0\n输出：true\n解释：链表中有一个环，其尾部连接到第一个节点。\n\n示例 3：\n输入：head = [1], pos = -1\n输出：false\n解释：链表中没有环。\n\n进阶：\n你能用 O(1)（即，常量）内存解决此问题吗？\n2.分析\n\n快慢指针\n\n    解法3：不使用额外空间，设置两个指针p1,p2，开始均指向头结点，然后每次p1向后移动一个节点，p2向后移动两个节点。然后比较两个指针指向的节点是否相同。如果相同，则判断出链表有环，如果不同，则继续下一次循环。有“环”自会“重逢”。\n    此方法也可以用一个更生动的例子来形容：在一个环形跑道上，两个运动员在同一地点起跑，一个运动员速度快，一个运动员速度慢。当两人跑了一段时间，速度快的运动员必然会从速度慢的运动员身后再次追上并超过，原因很简单，因为跑道是环形的。\n\n\n\n3.代码\n        if not head or not head.next:return False\n\n        fast = slow = head\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n            if slow == fast:\n                return True\n        return False\n\n 置空法\n    def hasCycle(self, head):\n        if not head:\n            return False\n        while head.next and head.val != None:\n            head.val = None  # 遍历的过程中将值置空\n            head = head.next\n        if not head.next:  # 如果碰到空发现已经结束，则无环\n            return False\n        return True  # 否则有环\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 16:41:04\n"},"链表/链表逆序输出 不带头结点.html":{"url":"链表/链表逆序输出 不带头结点.html","title":"链表逆序输出（不带头结点）","keywords":"","body":"链表逆序输出（不带头结点）\n1.题目\n2.分析\n递归\n3.代码\ndef reversePrint(head):\n    if not head:\n        return \n    reversePrint(head.next)\n    print(head.val)\n\n还可以先逆序，后输出，逆序有多种方法，就低逆序，递归逆序 \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 00:54:33\n"},"链表/环形链表 II LeetCode 142.html":{"url":"链表/环形链表 II LeetCode 142.html","title":"环形链表 II_LeetCode 142","keywords":"","body":"环形链表 II(LeetCode 142)\n1.题目\n给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。\n为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。\n说明：不允许修改给定的链表。\n示例 1：\n输入：head = [3,2,0,-4], pos = 1\n输出：tail connects to node index 1\n解释：链表中有一个环，其尾部连接到第二个节点。\n\n示例 2：\n输入：head = [1,2], pos = 0\n输出：tail connects to node index 0\n解释：链表中有一个环，其尾部连接到第一个节点。\n\n示例 3：\n输入：head = [1], pos = -1\n输出：no cycle\n解释：链表中没有环。\n\n进阶：\n你是否可以不用额外空间解决此题？\n2.分析\n使用快慢指针先确定是否有环，有的话，将fast指向head，和slow指针以相同的速度移动，当fast==slow时则找到了环的入口。\n第一次相遇，肯定是在环内，因为快指针比慢指针快一倍，所以，快指针比慢指针多走一倍路程，其中满指针走过的路程就是这一倍路程，快指针走的两倍路程是这样来的，慢指针的一倍路程，加上圆圈的长度（从相遇点出发，沿着环走，再次回到相遇点）。现在两个指针都剪掉，入环点到相遇点的路程，两边剩下的路程长度相同（慢指针到入环点，和快指针从入环点逆时针回到相遇点），所以，一个从head出发，一个从相遇点出发，走到入环点的路程长度相同。\n3.代码\n字典法\n    def detectCycle(self, head):\n        if head == None:\n            return None\n        bag = {}\n        index = 0\n        while head.next:\n            if head not in bag:\n                bag[head] = index\n                index += 1\n                head = head.next\n            else:\n                # 输出环形链表是第几个节点，但是有错，深拷贝也不行\n                # return bag[cur]\n                return head\n        return None\n\n快慢指针，写成两个函数\nclass Solution(object):\n    def detectCycle(self, head):\n        count = self.func(head)\n        if count ==0:return None\n        t1,t2 = head,head\n        for i in range(count):\n            t2 = t2.next\n        while t1!=t2:\n            t1 = t1.next\n            t2 = t2.next\n        return t1\n\n    # 先判断有没有环\n    def func(self,head):\n        if head == None or head.next == None:\n            return 0\n        fast = slow = head\n        count = 0\n        while fast.next and fast.next.next:\n            count+=1\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return count\n        return 0\n\n快慢指针，写成一个函数\nclass Solution(object):\n    def detectCycle(self, head):\n        if not head or not head.next:\n            return None\n        fast = slow = head\n        while fast.next and fast.next.next:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                slow = head\n                while fast != slow:\n                    fast = fast.next\n                    slow = slow.next\n                return fast\n        return None\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:24\n"},"链表/相交链表 LeetCode 160.html":{"url":"链表/相交链表 LeetCode 160.html","title":"相交链表 LeetCode 160","keywords":"","body":"相交链表(LeetCode 160)\n1.题目\n编写一个程序，找到两个单链表相交的起始节点。\n如下面的两个链表：\n\n在节点 c1 开始相交。\n示例 1：\n\n输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n输出：Reference of the node with value = 8\n输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n示例 2：\n\n输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n输出：Reference of the node with value = 2\n输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n示例 3：\n\n输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n输出：null\n输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n解释：这两个链表不相交，因此返回 null。\n注意：\n\n如果两个链表没有交点，返回 null.\n在返回结果后，两个链表仍须保持原有的结构。\n可假定整个链表结构中没有循环。\n程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。\n\n2.分析\n\n判断地址，而不是val，因为那两个1实际上不是同一个节点，地址不同，直接判断地址就行了\n首尾相连法: 同时对A和B进行遍历, 并且让到达末尾的指针指向另一个链表的头结点. 例如A: 6->7->4->5; B: 1->2->3->4->5 遍历时会相交于4 (67451234, 12345674).\n备用法（未实现）: 求出两个链表A和B的长度, 长链表先走|len(A)-len(B)|步, 然后同时遍历返回第一个公共节点.\n\n3.代码\n首尾相连法\n    def getIntersectionNode(self, headA, headB):\n        # 首尾相连法\n        if headA is None or headB is None:\n            return None\n        # 因为过一会还要用headB，headA，所以这儿先用其他变量保存\n        p = headA\n        q = headB\n        while p != q:\n            p = p.next if p else headB\n            q = q.next if q else headA\n        return p\n\n字典法\n    def getIntersectionNode(self, headA, headB):\n        d = {}\n        while headA:\n            d[headA] = 1\n            headA = headA.next\n        while headB:\n            if headB in d:\n                return headB\n            headB = headB.next\n        return None\n\n集合法\n    def getIntersectionNode(self, headA, headB):\n        d = set()\n        while headA:\n            d.add(headA)\n            headA = headA.next\n        while headB:\n            if headB in d:\n                return headB\n            headB = headB.next\n        return None\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 19:00:46\n"},"链表/删除链表中的节点 LeetCode 237.html":{"url":"链表/删除链表中的节点 LeetCode 237.html","title":"删除链表中的节点 LeetCode 237","keywords":"","body":"删除链表中的节点 LeetCode 237\n请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。\n现有一个链表 -- head = [4,5,1,9]，它可以表示为:\n\n示例 1:\n输入: head = [4,5,1,9], node = 5\n输出: [4,1,9]\n解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9.\n示例 2：\n输入: head = [4,5,1,9], node = 1\n输出: [4,5,9]\n解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -> 5 -> 9.\n说明:\n\n链表至少包含两个节点。\n链表中所有节点的值都是唯一的。\n给定的节点为非末尾节点并且一定是链表中的一个有效节点。\n不要从你的函数中返回任何结果。\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"\n        node.val = node.next.val\n        node.next = node.next.next\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-19 10:07:11\n"},"链表/反转链表.html":{"url":"链表/反转链表.html","title":"反转链表","keywords":"","body":"反转链表\n1.题目\n反转一个单链表。\n示例:\n输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n进阶:\n你可以迭代或递归地反转链表。你能否用两种方法解决这道题？\n2.分析\n\n头插法\n\n\n迭代法\n\n假设存在链表 1 → 2 → 3 → Ø，我们想要把它改成 Ø ← 1 ← 2 ← 3。\n在遍历列表时，将当前节点的 next 指针改为指向前一个元素。由于节点没有引用其上一个节点，因此必须事先存储其前一个元素。在更改引用之前，还需要另一个指针来存储下一个节点。不要忘记在最后返回新的头引用！\n\n\n\n递归法\n\n递归版本稍微复杂一些，其关键在于反向工作。假设列表的其余部分已经被反转，现在我该如何反转它前面的部分？\n假设列表为：$n1→...→nk−1→nk→nk+1→...→nm→∅$\n若从节点 $n{k+1}nk+1 $到 $n{m}nm $已经被反转，而我们正处于 $n_{k}nk$。\n$n1→...→nk−1→nk→nk+1←...←nm$\n我们希望 $n{k+1}n k+1$ 的下一个节点指向$n{k}nk$。\n所以，$n{k}nk.next.next = n{k}nk。$\n要小心的是$n1$ 的下一个必须指向 Ø 。如果你忽略了这一点，你的链表中可能会产生循环。如果使用大小为 2 的链表测试代码，则可能会捕获此错误。\n​\n\n\n\n\n3.代码\n头插法\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        # 有毛病吧，不带头结点的链表\n        # 插入法\n        if head is None:\n            return\n        cur = None # 当前节点\n        next = None# 后继节点\n        cur = head.next\n        head.next = None # 设置链表的第一个节点为尾节点\n\n        # 把遍历到的节点插入到头结点后面去\n        while cur:\n            next = cur.next\n            cur.next = head\n            head = cur\n            cur = next\n        return head\n\n就地反转\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        if head is None or head.next is None:\n            return head\n        pre = None\n        cur = head\n        while cur is not None:\n            next = cur.next\n            cur.next = pre\n            pre = cur\n            cur = next\n        return pre\n\n递归法(没有头结点)\n我们知道reverseList(head)返回输入的链表反转后的head，那么如果reverseList(head.next)的话\nhead\n  1->2我们此时只需要head.next.next=head，也就是先建立一个双向连接\nhead\n  1->2然后再head.next=None，返回node即可\n      head\n  null    def reverseList(self, head: ListNode) -> ListNode:\n        if not head or not head.next:\n            return head\n        new_head = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return new_head\n\n递归法（有头结点）\n    def reverseList(self, head: ListNode) -> ListNode:\n        if not head:\n            return head\n           first_node = head.next\n        new_head = self.reverseList(first_node)\n        head.next.next  = None\n        return new_head\n\n古老办法\n    def reverseList(self, head: ListNode) -> ListNode:\n        输出节点值到列表，重建链表\n        move = head\n        tail = head\n        head = None\n        res = []\n        while move:\n            res.append(move.val)\n            move = move.next\n        for element in res:\n            node = ListNode(element)\n            node.next = head\n            head = node\n        return head\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 00:53:08\n"},"链表/反转链表2.html":{"url":"链表/反转链表2.html","title":"反转链表2","keywords":"","body":"反转链表 II(LeetCode_92)\n1.题目\n反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。\n说明:\n1 ≤ m ≤ n ≤ 链表长度。\n示例:\n输入: 1->2->3->4->5->NULL, m = 2, n = 4\n输出: 1->4->3->2->5->NULL\n2.分析\n3.代码\n# 对于链表的问题，根据以往的经验一般都是要建一个dummy node，连上原链表的头结点，这样的话就算头结点变动了，我们还可以通过dummy->next来获得新链表的头结点。\n\n    def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:\n        dummy = ListNode(-1)\n        dummy.next = head\n        fpre = dummy\n        for _ in range(m-1):\n            fpre = fpre.next\n        pre = None\n        # fpre 指向 1\n        # cur 指向 4\n        cur = fpre.next\n        for _ in range(n-m+1):\n            next = cur.next\n            cur.next = pre\n            pre = cur\n            cur = next\n        # 将翻转部分 和 原链表拼接\n        # 不能交换位置\n        fpre.next.next = cur  # 1.2(next).next = 5,同时没有破坏1.next = 4 . 如果先执行fpre.next = pre 则fpre.next.next找不到了\n        fpre.next = pre # 1.next = 4\n        return dummy.next\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-24 09:04:55\n"},"链表/对链表进行插入排序_LeetCode_147.html":{"url":"链表/对链表进行插入排序_LeetCode_147.html","title":"对链表进行插入排序_LeetCode_147","keywords":"","body":"对链表进行插入排序\n1.题目\n对链表进行插入排序。\n\n插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。\n每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。\n插入排序算法：\n\n插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。\n每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。\n重复直到所有输入数据插入完为止。\n\n示例 1：\n输入: 4->2->1->3\n输出: 1->2->3->4\n示例 2：\n输入: -1->5->3->4->0\n输出: -1->0->3->4->5\n2.分析\n注意：我们必须先定义一个头结点\n3.代码\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def insertionSortList(self, head: ListNode) -> ListNode:\n        if head == None or head.next == None:\n            return head\n        dummyHead = ListNode(-1)\n        while head:\n           # pre.next的先序节点\n            pre = dummyHead\n            # 存储下一个无序区节点\n            while pre.next and head.val > pre.next.val:\n                pre = pre.next\n            head.next = pre.next\n            pre.next = head\n            head = next\n        return dummyHead.next\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 23:27:21\n"},"链表/两数相加-链表 LeetCode 2.html":{"url":"链表/两数相加-链表 LeetCode 2.html","title":"两数相加-链表__LeetCode 2","keywords":"","body":"两数相加-链表（LeetCode 2）\n1.题目\n给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n示例：\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n输出：7 -> 0 -> 8\n原因：342 + 465 = 807\n\n2.分析\n3.代码\n    def addTwoNumbers(self, l1, l2):\n        cur = ret = ListNode(0)\n        add = 0\n        while l1 or l2 or add:\n            val = (l1.val if l1 else 0) + (l2.val if l2 else 0) + add\n            add = val // 10\n            cur.next = ListNode(val % 10)\n            cur = cur.next\n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return ret.next\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:29\n"},"链表/删除链表的倒数第K个节点.html":{"url":"链表/删除链表的倒数第K个节点.html","title":"删除链表的倒数第K个节点","keywords":"","body":"删除链表的倒数第N个节点(LeetCode_19)\n1.题目\n给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。\n示例：\n给定一个链表: 1->2->3->4->5, 和 n = 2.\n当删除了倒数第二个节点后，链表变为 1->2->3->5.\n说明：\n给定的 n 保证是有效的。\n进阶：\n你能尝试使用一趟扫描实现吗？\n2.分析\n​    第一个指针从列表的开头向前移动 n+1n+1 步，而第二个指针将从列表的开头出发。现在，这两个指针被 nn 个结点分开。我们通过同时移动两个指针向前来保持这个恒定的间隔，直到第一个指针到达最后一个结点。此时第二个指针将指向从最后一个结点数起的第 nn 个结点。我们重新链接第二个指针所引用的结点的 next 指针指向该结点的下下个结点。\n3.代码\n\nclass Solution:\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n        if head is None or n  0:\n            pass\n        elif n \n# 首先我们将添加一个哑结点作为辅助，该结点位于列表头部。哑结点用来简化某些极端情况，例如列表中只含有一个结点，或需要删除列表的头部。\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n        dummy = ListNode(0)\n        dummy.next = head\n        fast = slow = dummy\n        # 这个比查找倒数第N个节点多走一步,因为我们需要找到倒数第N+1个节点,我们才能删除倒数第N个节点\n        # 大于0，就是走n步\n        while n>0:\n            n -= 1\n            fast = fast.next\n        # 退出循环的条件为fast指向最后个节点\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n        slow.next = slow.next.next\n        return dummy.next\n\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:       \n\n    # 为了更好的处理删除头结点情况,我们一般都会设置虚拟节点\n        dummy = ListNode(0)\n        dummy.next = head\n        fast = slow = dummy\n        count = 0\n        # 退出循环的条件是fast刚好指向最后个节点。此时,slow指向倒数第n+1个节点,这样就能删除倒数第n个节点\n        while fast.next:\n            count += 1\n            # 先让fast走n步,第n+1步时候,slow也开始走\n            if count > n:\n                slow = slow.next\n            fast = fast.next\n\n        # 如果题目增加难度,说如果n不满足条件,就返回None,就可以用下面两句\n        # if count \n        def removeNthFromEnd(self, head, n):\n            \"\"\"\n            :type head: ListNode\n            :type n: int\n            :rtype: ListNode\n            \"\"\"\n            # 思路：双指针法。\n            slow = fast = head\n            for i in range(n):          # 先让fast走n步\n                fast = fast.next\n            if fast == None:            # 若走了n步后为None，则表明删除的为head节点\n                return head.next\n\n            while fast.next != None:    # slow和fast同时往前走\n                slow = slow.next        # 当fast走到头时，second即是要删除节点的前一个节点位置\n                fast = fast.next\n            slow.next = slow.next.next  # 删除该节点\n            return head\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 00:14:08\n"},"链表/环形单链表约瑟夫问题.html":{"url":"链表/环形单链表约瑟夫问题.html","title":"环形单链表约瑟夫问题","keywords":"","body":"环形单链表约瑟夫问题\n1.题目\n输入\n一个环形单向链表的头结点head和报数的值m\n返回\n最后生存下来的节点\n2.分析\n3.代码\ndef func(self, head, m):\n    if head is None or head.next == head or m\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-19 13:05:53\n"},"链表/回文链表.html":{"url":"链表/回文链表.html","title":"回文链表","keywords":"","body":"回文链表(LeetCode_234)\n1.题目\n请判断一个链表是否为回文链表。\n示例 1:\n输入: 1->2\n输出: false\n示例 2:\n输入: 1->2->2->1\n输出: true\n进阶：\n你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？\n2.分析\n 判断一个链表是否是回文的，很自然的想法就是两个指针，一个指针从前往后走，一个指针从后往前走，判断元素值是否相同，\n 这里要分几个步骤来进行求解：\n1、找到链表长度的一半，用追赶法，一个指针一次走两步，一个指针一次走一步\n2、将后一半数组转置\n3、判断链表是否是回文链\n3.代码\nclass Solution:\n    def isPalindrome(self, head: ListNode) -> bool:\n# 判断一个链表是否是回文的，很自然的想法就是两个指针，一个指针从前往后走，一个指针从后往前走，判断元素值是否相同，\n# 这里要分几个步骤来进行求解：\n# 1、找到链表长度的一半，用追赶法，一个指针一次走两步，一个指针一次走一步\n# 2、将后一半数组转置\n# 3、判断链表是否是回文链\n\n        if head == None or head.next == None:\n            return  True\n\n        slow= fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        pre = None\n        while slow:\n            nxt = slow.next\n            slow.next = pre\n            pre = slow\n            slow = nxt\n\n        while pre and head:\n            if pre.val != head.val:\n                return False\n            pre = pre.next\n            head = head.next\n        return True\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-19 13:23:45\n"},"链表/删除排序链表中的重复元素 LeetCode 83.html":{"url":"链表/删除排序链表中的重复元素 LeetCode 83.html","title":"删除排序链表中的重复元素 LeetCode 83","keywords":"","body":"删除排序链表中的重复元素(LeetCode 83)\n1.题目\n给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。\n示例 1:\n输入: 1->1->2\n输出: 1->2\n示例 2:\n输入: 1->1->2->3->3\n输出: 1->2->3\n2.分析\n3.代码\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:38\n"},"链表/删除排序链表中的重复元素 II LeetCode 82.html":{"url":"链表/删除排序链表中的重复元素 II LeetCode 82.html","title":"删除排序链表中的重复元素 II LeetCode 82","keywords":"","body":"删除排序链表中的重复元素 II(LeetCode 82)\n1.题目\n给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。\n示例 1:\n输入: 1->2->3->3->4->4->5\n输出: 1->2->5\n示例 2:\n输入: 1->1->1->2->3\n输出: 2->3\n2.分析\n3.代码\ndef deleteDuplicates(self, head: ListNode) -> ListNode:\n\n    # 设置虚拟头结点\n\n    if head is None:\n        return\n    newHead = ListNode(None)\n    newHead.next = head\n    pre = newHead\n    cur = head\n    while cur:\n\n        if cur.next and cur.val == cur.next.val:\n            # 如果重复元素有很多个连着的，需要走到重复元素的最后一个\n            while cur.next and cur.val == cur.next.val:\n                cur = cur.next\n            pre.next = cur.next\n            cur = cur.next\n        else:\n            pre = pre.next\n            cur = cur.next\n    # 最后不能返回head,因为【1，1，2，3】->【2，3】,head一直都指着链表的第一个元素\n    return newHead.next\n\n延伸一\n不设置虚拟头结点，删除有序列表，但是最后要保留一个，而不是全部删   \n#除 【1，2，3，3】->【1,2,3】\n\n        if head is None:\n            return\n        pre = head\n        cur = head.next\n\n        while cur:\n            if pre.val == cur.val:\n                pre.next = cur.next\n                cur = cur.next\n            else:\n                pre = cur\n                cur = cur.next\n        return head\n\n延伸二\n设置虚拟头结点，删除有序列表，但是最后要保留一个，而不是全部删       \n#除 【1，2，3，3】->【1,2,3】\n        if head is None:\n            return\n        newHead = ListNode(None)\n        newHead.next = head\n        pre = newHead\n        cur = head\n\n        while cur:\n            if cur.next and cur.val == cur.next.val:\n                pre.next = cur.next\n                cur = cur.next\n            else:\n                pre = cur\n                cur = cur.next\n        return newHead.next\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:38\n"},"链表/链表的中间结点 LeetCode 876.html":{"url":"链表/链表的中间结点 LeetCode 876.html","title":"链表的中间结点 LeetCode 876","keywords":"","body":"链表的中间结点(LeetCode 876)\n1.题目\n给定一个带有头结点 head 的非空单链表，返回链表的中间结点。\n如果有两个中间结点，则返回第二个中间结点。\n示例 1：\n输入：[1,2,3,4,5]\n输出：此列表中的结点 3 (序列化形式：[3,4,5])\n返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。\n注意，我们返回了一个 ListNode 类型的对象 ans，这样：\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.\n示例 2：\n输入：[1,2,3,4,5,6]\n输出：此列表中的结点 4 (序列化形式：[4,5,6])\n由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。\n提示：\n\n给定链表的结点数介于 1 和 100 之间。\n\n2.分析\n\n快慢指针，不过最后要分奇数、偶数讨论\n当链表长度为奇数时，快指针走到链表尾部时，慢指针恰好指向链表的中间\n当链表长度为偶数时，慢指针所指节点和所指节点的下一节点都是链表的中间节点\n\n\n计算链表节点个数，然后扫描\n\n3.代码\n快慢指针\n\nclass Solution(object):\n    def middleNode(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n\n        if not head or not head.next:return False\n\n        fast = slow = head\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n\n        # [1,2,3,4,5] 奇数个,又因为fast一次跳两个,所以第一次跳到3,第二次跳到5,所以当元素个数为奇数时候,fast.next为空,返回slow.next\n        # [1,2,3,4,5,6] 偶数个, fast第一次跳到3,第二次跳到5,由于fast.next.next为None,所以退出循环,所以fast.next.val == 6, fast.next不为空\n        if fast.next:\n            return slow.next\n        else:\n            return slow\n\n遍历法\n        def middleNode(self, head: ListNode) -> ListNode:\n            if head == None or head.next == None:\n                return head\n            k = 1\n            cur = head\n            while cur.next:\n                k += 1\n                cur = cur.next\n            k //=2\n            while k>0:\n                head = head.next\n                k -= 1\n            return head\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 16:37:38\n"},"链表/K 个一组翻转链表_LeetCode_25.html":{"url":"链表/K 个一组翻转链表_LeetCode_25.html","title":"K 个一组翻转链表_LeetCode_25","keywords":"","body":"K 个一组翻转链表(LeetCode_25)\n1.题目\n给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。\nk 是一个正整数，它的值小于或等于链表的长度。\n如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。\n示例 :\n给定这个链表：1->2->3->4->5\n\n当 k = 2 时，应当返回: 2->1->4->3->5\n\n当 k = 3 时，应当返回: 3->2->1->4->5\n\n说明 :\n\n你的算法只能使用常数的额外空间。\n你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。\n\n2.分析\n\n递归\n\n3.代码\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        count = 0\n        cur = head\n        while cur and count\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-24 09:07:54\n"},"链表/查找链表倒数第N个节点.html":{"url":"链表/查找链表倒数第N个节点.html","title":"查找链表倒数第N个节点","keywords":"","body":"class Solution:\n    def FindKthToTail(self, head, k):\n        # write code here\n        if head==None or k k-1:\n                slow = slow.next\n        if count \nclass Solution:\n    def FindKthToTail(self, head, k):\n        # write code here\n        if head==None or k1:\n            if fast.next:\n                fast = fast.next\n                k -= 1\n            else:\n                return None\n\n\n        while fast.next is not None:\n            fast = fast.next\n            slow = slow.next\n        return slow\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 00:11:08\n"},"二叉树/":{"url":"二叉树/","title":"二叉树","keywords":"","body":"二叉树\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-07 22:00:38\n"},"二叉树/二叉树的最大深度.html":{"url":"二叉树/二叉树的最大深度.html","title":"二叉树的最大深度","keywords":"","body":"二叉树的最大深度\n1.题目\n给定一个二叉树，找出其最大深度。\n二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\n说明: 叶子节点是指没有子节点的节点。\n示例：\n给定二叉树 [3,9,20,null,null,15,7]，\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n返回它的最大深度 3 。\n2.分析\n3.代码\n递归\ndef maxDepth(self, root: TreeNode) -> int:\n        如果二叉树为空，则深度为0 \n        如果不为空，分别求左子树的深度和右子树的深度，取最大的再加1。\n        if root == None:\n            return 0\n        left = self.maxDepth(root.left)\n        right = self.maxDepth(root.right)\n        return left+1 if left>right else right+1\n\n递归简单修改\ndef maxDepth(self, root: TreeNode) -> int:\n    法一简单修改\n    if not root:\n    return 0\n    return max(self.maxDepth(root.left),self.maxDepth(root.right)) + 1\n\n递归简单修改2\ndef maxDepth(self, root: TreeNode) -> int:\n    第二种就是判断左子树或右子树是否为空，若左子树为空，则返回右子树的深度，反之返回左子树的深度，\n    如果都不为空，则返回左子树和右子树深度的最小值。\n    def minDepth(self,root):\n        if root == None:\n            return 0\n        if root.left == None:\n            return self.minDepth(root.right)\n        if root.right == None:\n            return self.minDepth(root.left)\n\n        return min(self.minDepth(root.left),self.minDepth(root.right)) + 1\n\n    def TreeDepth(self, pRoot):\n        # write code here\n        if not pRoot:\n            return 0\n        queue = [pRoot]\n        depth = 0\n        while queue:\n            tmp = []\n            depth += 1\n            for node in queue:\n                if node.left:\n                    tmp.append(node.left)\n                if node.right:\n                    tmp.append(node.right)\n            queue = tmp\n        return depth\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 12:30:39\n"},"二叉树/二叉树的层次遍历.html":{"url":"二叉树/二叉树的层次遍历.html","title":"二叉树的层次遍历","keywords":"","body":"二叉树的层次遍历\n1. 二叉树的深度（通过层次遍历实现）(每层节点单独输出)\n    def maxDepth(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n        res = [] # 层次遍历\n        depth, queue = 0, [root]\n        while queue:\n            res_temp = [] # 每层节点\n            depth += 1\n            tmp = []\n            for node in queue:\n                print(node.val)\n                res_temp.append(node.val)\n                if node.left:\n                    tmp.append(node.left)\n                if node.right:\n                    tmp.append(node.right)\n            res.append(res_temp)\n            queue = tmp\n        print(res)\n        return depth\n\n2. 层次遍历简写\n    def levelOrder(self, root):\n        from collections import deque\n        if root == None: return []\n        queue = deque()\n        queue.append(root)\n        res = []\n        while queue:\n            p = queue.popleft()\n            # p = queue.pop(0)\n            res.append(p.val)\n            if p.left: queue.append(p.left)\n            if p.right: queue.append(p.right)\n        print(res)\n\n3. 层次遍历（每层单独输出）\n    def levelOrder(self, root):\n        from collections import deque\n        if root == None: return []\n        queue = deque()\n        queue.append(root)\n        res = []\n        while queue:\n            res_tmp = []\n            queue_tmp = []\n            for node in queue:\n                res_tmp.append(node.val)\n                if node.left: queue_tmp.append(p.left)\n                if node.right: queue_tmp.append(p.right)\n             queue = queue_tmp\n             res.append(res_tmp)\n        print(res)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-11 23:41:03\n"},"二叉树/二叉树的层次遍历 II.html":{"url":"二叉树/二叉树的层次遍历 II.html","title":"二叉树的层次遍历 II","keywords":"","body":"二叉树的层次遍历 II\n1.题目\n给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）\n例如：\n给定二叉树 [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n返回其自底向上的层次遍历为：\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\n2.分析\n3.代码\nclass Solution:\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\n        res = []\n        if root == None:\n            return res\n        queue = [root]\n        while queue:\n            queue_tmp = []\n            res_tmp = []\n            for node in queue:\n                res_tmp.append(node.val)\n                if node.left:\n                    queue_tmp.append(node.left)\n                if node.right:\n                    queue_tmp.append(node.right)\n            queue = queue_tmp\n            res.insert(0, res_tmp)\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:34\n"},"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html":{"url":"二叉树/二叉树的锯齿形层次遍历 LeetCode 103.html","title":"二叉树的锯齿形层次遍历 LeetCode 103","keywords":"","body":"二叉树的锯齿形层次遍历(LeetCode 103)\n1.题目\n给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。\n例如：\n给定二叉树 [3,9,20,null,null,15,7],\n```sql lite\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n返回锯齿形层次遍历如下：\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n\n#### 2.分析\n\n和层次遍历一样，只不过加一个，判断语句\n\n#### 3.代码\n\n```python\n    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:\n        if root == None: return []\n        res = []\n        queue = [root]\n        deepth = 0\n        while queue:\n            deepth += 1\n            res_tmp = []\n            queue_tmp = []      \n            for node in queue:\n                if deepth%2==0:\n                    res_tmp.append(node.val)\n                else:\n                    res_tmp.insert(0,node.val)\n                if node.right:\n                    queue_tmp.append(node.right)\n                if node.left:\n                    queue_tmp.append(node.left)\n            queue = queue_tmp\n            res.append(res_tmp)\n        return res\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-11 20:25:06\n"},"二叉树/路径总和 LeetCode 112.html":{"url":"二叉树/路径总和 LeetCode 112.html","title":"路径总和 LeetCode 112","keywords":"","body":"路径总和(LeetCode 112)\n1.题目\n给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。\n说明: 叶子节点是指没有子节点的节点。\n示例: \n给定如下二叉树，以及目标和 sum = 22，\n              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\      \\\n        7    2      1\n返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5->4->11->2。\n2.分析\n3.代码\ndef hasPathSum(self, root: TreeNode, sum: int) -> bool:\n    if not root:\n        return False\n    # 如果当前节点是叶子节点,且路径之和等于sum\n    if not root.left and not root.right and root.val == sum:\n        return True\n    else:\n        return self.hasPathSum(root.left,sum-root.val) or self.hasPathSum(root.right,sum-root.val)\n    return False\n\n还有个办法就是回溯，然后统计结果集是否为空\n    def hasPathSum(self, root: TreeNode, sum: int) -> bool:\n        if not root:\n            return False\n        # 如果当前节点是叶子节点,且路径之和等于sum\n        if not root.left and not root.right and root.val == sum:\n            return True\n        left_is = False\n        if root.left:\n            left_is = self.hasPathSum(root.left,sum-root.val) \n        right_is = False\n        if root.right:\n            right_is = self.hasPathSum(root.right,sum-root.val)\n        return left_is or right_is\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-17 16:53:32\n"},"二叉树/路径总和 II LeetCode 113.html":{"url":"二叉树/路径总和 II LeetCode 113.html","title":"路径总和 II_LeetCode 113","keywords":"","body":"路径总和 II(LeetCode 113)\n1.题目\n给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。\n说明: 叶子节点是指没有子节点的节点。\n示例:\n给定如下二叉树，以及目标和 sum = 22，\n              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\    / \\\n        7    2  5   1\n返回:\n[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n2.分析\n3.代码\ndef pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:\n    X = []\n    path = []\n    self.func(root, sum, path, X)\n    # print(X)\n    return X\ndef func(self, root, sum, path, X):\n    if not root:\n        return \n    sum -= root.val\n    path.append(root.val)\n    if not root.left and not root.right and sum == 0:\n        X.append(path[:])\n    if root.left:\n        self.func(root.left, sum, path, X)\n    if root.right:\n        self.func(root.right, sum, path, X)\n    # 从root走到叶子节点了，但是路径之和不为sum，所以向上回溯\n    path.pop()\n\n全局变量可以这么设\ndef pathSum(self, root, sum):\n    self.res = []\n    self.track = []\n    self.helper(root, sum)\n    return self.res\n\ndef helper(self, node, sum):\n    if not node:\n        return\n    self.track.append(node.val)\n    sum -= node.val\n    if not node.left and not node.right and sum == 0:\n        self.res.append(self.track[:])\n    else:\n        self.helper(node.left, sum)\n        self.helper(node.right, sum)\n    self.track.pop()\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:25\n"},"二叉树/路径总和 III LeetCode 437.html":{"url":"二叉树/路径总和 III LeetCode 437.html","title":"路径总和 III LeetCode_437","keywords":"","body":"路径总和 III(LeetCode 437)\n1.题目\n给定一个二叉树，它的每个结点都存放着一个整数值。\n找出路径和等于给定数值的路径总数。\n路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。\n二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。\n示例：\nroot = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n\n      10\n     /  \\\n    5   -3\n   / \\    \\\n  3   2   11\n / \\   \\\n3  -2   1\n\n返回 3。和等于 8 的路径有:\n\n1.  5 -> 3\n2.  5 -> 2 -> 1\n3.  -3 -> 11\n2.分析\n3.代码\ndef pathSum(self, root: TreeNode, sum: int) -> int:\n    if root == None: return 0\n    res = 0\n    res += self.func(root, sum)\n\n    # 这个判断可以不要，因为下个函数会判断\n    if root.left:\n           # 注意这儿的调用，不是func(root.left, sum),因为这样的话，只会统计以root.left为根的左右子树的和是否满足要求。而忽略了以root.left和root.left.left root.left root.left.right加起来和为sum的情况\n        res += self.pathSum(root.left, sum)\n    if root.right:\n        res += self.pathSum(root.right, sum)\n    # print(res)\n    return res\n\ndef func(self, root, sum):\n    if root == None:\n        return 0\n    res = 0\n    # 这儿不需要判断是不是叶子节点（根据题意）\n    sum -= root.val\n    # if not root.left and not root.right and sum == 0: \n    # 这儿出问题了，不能return 1，因为return 后，下面的代码就不执行了\n    if sum == 0:\n        # return 1\n        res += 1\n    left = self.func(root.left, sum)\n    right = self.func(root.right, sum)\n    return res+left+right\n\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> int:\n        if root == None: return 0\n        res = 0\n        res += self.func(root, sum) + self.pathSum(root.left, sum)  + self.pathSum(root.right, sum)\n        return res\n\n    def func(self, root, sum):\n        if root == None:\n            return 0\n        sum -= root.val\n        if sum == 0:\n            # print(sum)\n            return 1+ self.func(root.left, sum) + self.func(root.right, sum)\n        else:\n            return self.func(root.left, sum) + self.func(root.right, sum)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 00:35:08\n"},"二叉树/二叉树的最近公共祖先.html":{"url":"二叉树/二叉树的最近公共祖先.html","title":"二叉树的最近公共祖先","keywords":"","body":"二叉树的最近公共祖先\n1.题目\n给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。\n百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”\n例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]\n\n示例 1:\n输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n输出: 3\n解释: 节点 5 和节点 1 的最近公共祖先是节点 3。\n示例 2:\n输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n输出: 5\n解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。\n说明:\n\n所有节点的值都是唯一的。\np、q 为不同节点且均存在于给定的二叉树中。\n\n2.分析\n\n有两种情况，一是要找的这两个节点（a, b），在要遍历的节点（root）的两侧，那么这个节点就是这两个节点的最近公共父节点；\n二是两个节点在同一侧，则 root->left 或者 root->right 为 NULL，另一边返回a或者b。那么另一边返回的就是他们的最小公共父节点。\n递归有两个出口，一是没有找到a或者b，则返回NULL；二是只要碰到a或者b，就立刻返回。\n二叉树的很多问题都可以转化为二叉树的遍历来求解\n\n3.代码\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n\n        if not root:\n            return None\n        if root.val == q.val or root.val == p.val:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        # q,p分布在根结点的两边，则root为最近公共祖先\n        if left and right: \n            return root\n        # 经过上面的几个if判断后，如果能走到这一步，if left 则说明q,p都在左边，反之else right，则说明q,p都在右边。\n        # 而且这儿的left，right都是经过递归后的伪根结点。自然就是q，p的公共祖先\n        return left if left else right\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if root is None:\n            return None\n        if root.val == q.val or root.val == p.val:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if not right:\n            return left\n        if not left:\n            return right\n        else:\n            return root\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 00:03:01\n"},"二叉树/二叉搜索树的最近公共祖先.html":{"url":"二叉树/二叉搜索树的最近公共祖先.html","title":"二叉搜索树的最近公共祖先","keywords":"","body":"二叉搜索树的最近公共祖先\n1.题目\n给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。\n百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”\n例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]\n\n示例 1:\n输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n输出: 6 \n解释: 节点 2 和节点 8 的最近公共祖先是 6。\n\n示例 2:\n输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n输出: 2\n解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。\n\n2.分析\n这是一个非常经典的问题，我们通过递归可以非常快的解决这个问题，我们只要理清楚这样的几种情况：\n\nroot.val > p.val and root.val > q.val，那我们在root.left继续搜索\nroot.val \n其他的情况，返回root\n\n3.代码\n3.1递归版\n    # 循环版本\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if not root:\n            return None\n        # 祖先在左子树\n        if root.val > q.val and root.val > p.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        # 祖先在右子树\n        if root.val  q.val and root.val  p.val and root.val \n3.2跌代版\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if root == None:\n            return None\n        while root:\n            if root.val > q.val and root.val > p.val:\n                root = root.left\n            elif root.val \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:34\n"},"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html":{"url":"二叉树/将有序数组转换为二叉搜索树 LeetCode 108.html","title":"将有序数组转换为二叉搜索树_LeetCode 108","keywords":"","body":"将有序数组转换为二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/)(LeetCode 108)\n1.题目\n将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。\n本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。\n示例:\n给定有序数组: [-10,-3,0,5,9],\n\n一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n2.分析\n高度差不超过一，说明是二叉搜索树\n\n先取数组中间节点作为根节点，将数组分成左右部分，对数组的左右两部分采用递归的方法进行建立左右子树\n时间复杂度（O(n)）:\n因为这种方法只遍历了一遍数组，因此，算法的时间复杂度，是O(n)\n\n3.代码\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:    \n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\n        # 平衡二叉树前序遍历是递增的，列表中间点是根节点\n        if len(nums) \n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\n        # 平衡二叉树前序遍历是递增的，列表中间点是根节点\n        if len(nums)  right:\n            return \n        mid = (left+right) // 2\n        root = TreeNode(nums[mid])\n        print(root.val)\n        root.left = self.creat_BST(nums, left, mid-1)\n        root.right = self.creat_BST(nums, mid+1, right)\n\n        return root\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-11 23:53:56\n"},"二叉树/二叉树中的最大路径和 LeetCode 124.html":{"url":"二叉树/二叉树中的最大路径和 LeetCode 124.html","title":"二叉树中的最大路径和_LeetCode 124","keywords":"","body":"二叉树中的最大路径和(LeetCode 124)\n1.题目\n给定一个非空二叉树，返回其最大路径和。\n本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。\n示例 1:\n输入: [1,2,3]\n\n       1\n      / \\\n     2   3\n\n输出: 6\n示例 2:\n输入: [-10,9,20,null,null,15,7]\n\n   -10\n   / \\\n  9  20\n    /  \\\n   15   7\n\n输出: 42\n2.分析\n3.代码\nclass Solution:\n    def maxPathSum(self, root):\n        self.re = float('-inf')\n        self.func(root)\n        return self.re\n    def func(self,root):\n        if root == None:\n            return 0\n        left = max(0,self.func(root.left))\n        right = max(0,self.func(root.right))\n        self.re = max(self.re,root.val + left + right)\n        return max(root.val,root.val + max(right,left))\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:34\n"},"二叉树/二叉树最大子树和.html":{"url":"二叉树/二叉树最大子树和.html","title":"二叉树最大子树和","keywords":"","body":"二叉树最大子树和\n1. 题目\n给定一颗二叉树，它的每个节点都是正数或负数，如何找到一颗子树，是的该子树和最大\n2. 分析\n​    要求一棵二叉树的最大子树和，最容易想到的办法就是对每棵子树，求出这棵子树中所有节点的和，然后从中选出最大值。恰好二叉树的后序遍历就能做到这一点，在对二叉树进行后序遍历过程中，如果当前遍历节点的值与其左右子树和的值相加大于最大值，则更新最大值。\n3. 代码\nclass Solution:\n    res = float('-inf')\n    def findMax(self, root, maxroot):\n        if root is not None:\n            left = self.findMax(root.left, maxroot)\n            right = self.findMax(root.right, maxroot)\n            tmp_res = left + right + root.data\n            if tmp_res > self.res:\n                self.res = tmp_res\n                maxroot.data = root.data\n            return self.res\n        else:\n            return 0\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-12 09:50:29\n"},"二叉树/判断两棵二叉树是否相等.html":{"url":"二叉树/判断两棵二叉树是否相等.html","title":"判断两棵二叉树是否相等","keywords":"","body":"判断两棵二叉树是否相等\n1. 题目\n两棵二叉树如果相等，则两棵二叉树有着相同的结构，并且在相同的位置上有相同的值\n2. 分析\n​    如果两棵二叉树root1,root2相等，那么root1与root2节点值相同，同时他们的左右孩子也有相同的结构，且值root1.data == root2.data，根据这个条件，我们可以用递归进行判断\n3. 代码\nclass BiNode(object):\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef isEqual(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if root1 is not None and root2 is None:\n        return False\n    if root1 is None and root2 is not None:\n        return False\n    if root1.data == root2.data:\n        left = isEqual(root1.left, root2.left)\n        right = isEqual(root1.right, root2.right)\n        return left and right\n    else:\n        return False\ndef constructTree():\n    root1 = BiNode(2)\n    node1 = BiNode(3)\n    node2 = BiNode(4)\n    root.left = node1\n    root.right = node2\n    node1.left = node1.right = node2.left= node2.right = None\n    return root\n\nif __name__ == '__main__':\n    root1 = constructTree()\n    root2 = constructTree()\n    equal = isEqual(root1, root2)\n    pritn(equal)\n\n4.复杂度分析\n​    对两棵树只进行了一次遍历，所以时间复杂度为O(n),空间复杂度为O(1) \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-12 10:09:53\n"},"二叉树/求树的节点数量.html":{"url":"二叉树/求树的节点数量.html","title":"求树的节点数量","keywords":"","body":"求树的节点数量\ndef countNodes(self, root): # 计算树的节点数\n        if root == None:\n            return 0\n        else:\n            return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:23\n"},"二叉树/从中序和后序遍历构造二叉树.html":{"url":"二叉树/从中序和后序遍历构造二叉树.html","title":"从中序和后序遍历构造二叉树","keywords":"","body":"从中序与后序遍历序列构造二叉树(LeetCode_106)\n1. 题目\n根据一棵树的中序遍历与后序遍历构造二叉树。\n注意:\n你可以假设树中没有重复的元素。\n例如，给出\n中序遍历 inorder = [9,3,15,20,7]\n后序遍历 postorder = [9,15,7,20,3]\n返回如下的二叉树：\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n2. 分析\n3. 代码\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:\n        if not inorder:\n            return None\n        mid_data = postorder[-1]\n        root = TreeNode(mid_data)\n        mid = inorder.index(mid_data)\n        root.left = self.buildTree(inorder[:mid], postorder[:mid])\n        root.right = self.buildTree(inorder[mid+1:], postorder[mid:-1])\n        return root\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-12 19:37:17\n"},"二叉树/二叉搜索树中第K小的元素.html":{"url":"二叉树/二叉搜索树中第K小的元素.html","title":"二叉搜索树中第K小的元素","keywords":"","body":"二叉搜索树中第K小的元素\n1.题目\n给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。\n说明：\n你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。\n示例 1:\n输入: root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n   2\n输出: 1\n\n示例 2:\n输入: root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n输出: 3\n\n2.分析\n3.代码1\nclass Solution(object):\n    def kthSmallest(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n        arr = []\n        def inder(root, arr, k):\n            if root:\n                inder(root.left, arr, k)\n                if len(arr) >= k:\n                    # print(root.val)\n                    return\n                arr.append(root.val)\n                inder(root.right, arr, k)\n        inder(root, arr, k)\n        # print(arr[-1])\n        # 必须这样，而不能直接在if语句返回 return arr[-1]\n        return arr[-1]\n\n代码2\nclass Solution(object):\n    def countNodes(self, root): # 计算树的节点数\n        if root == None: \n            return 0\n        else:\n            return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n\n    def kthSmallest(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # 先遍历所有的值，然后找到第k小的数字，最后利用二分搜索进行处理\n        if root == None:\n            return None\n        leftCount = self.countNodes(root.left)\n        if k \n\n[!TIP]\n计算树的节点数\ndef countNodes(self, root):\n    if root == None:\n        return 0\n    else:\n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:34\n"},"二叉树/二叉树展开为链表.html":{"url":"二叉树/二叉树展开为链表.html","title":"二叉树展开为链表","keywords":"","body":"二叉树展开为链表\n1. 题目\n给定一个二叉树，原地将它展开为链表。\n例如，给定二叉树\n   1\n   / \\\n  2   5\n / \\   \\\n3   4   6\n将其展开为：\n1\n \\\n  2\n   \\\n    3\n     \\\n      4\n       \\\n        5\n         \\\n          6\n2. 分析\n3.代码\n递归\nclass Solution:\n    def flatten(self, root: TreeNode) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        # 前序遍历展开为链表\n        if root is None:\n            return None\n        if root.left is None and root.right is None:\n            return root\n\n        self.flatten(root.left)\n        self.flatten(root.right)\n\n        ltree, rtree = root.left, root.right\n        ltree.left = None\n        p = root.left\n        while p.right:\n            p = p.right\n        p.right = root\n        root.right = rtree\n\n迭代\n    def flatten(self, root: TreeNode) -> None:\n\n        if root is None:\n            return None\n        if root.left is None and root.right is None:\n            return root\n\n        cur = root\n        while cur:\n            if cur.left:\n                p = cur.left\n                while p.right: p = p.right\n                p.right = cur.right\n                cur.right = cur.left\n                cur.left = None\n            cur = cur.right\n\n暴力法\n    def flatten(self, root):\n        if root is None:\n            return None\n        if root.left is None and root.right is None:\n            return root\n\n        res = []\n        def func(root):\n            if root is not None:\n                res.append(root.val)\n                func(root.left)\n                func(root.right)\n        func(root)\n        root.left = None\n        p = root\n        for i in range(1,len(res)):\n            node = TreeNode(res[i])\n            print(node.val)\n            p.left = None\n            p.right = node\n            p = p.right\n\n#         i = 1 \n#         root.left = None\n#         p = root\n#         while i \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-13 12:20:50\n"},"二叉树/二叉树序列化和反序列化.html":{"url":"二叉树/二叉树序列化和反序列化.html","title":"二叉树序列化和反序列化","keywords":"","body":"1.题目\n二叉树的序列化和反序列化\n\n2.代码\n序列化\n# 作者     ：gw\n# 创建日期 ：2019-07-11  下午 19:31\n# 文件名   ：二叉树序列化.py\n\nclass Node(object):\n    \"\"\"\"\"\"\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass Bitree(object):\n    def __init__(self,li):\n        self.root = None\n        if li:\n            for i in li:\n                self.add(i)\n\n    def add(self, val):\n        node = Node(val)\n        if self.root is None:\n            self.root = node\n            return\n        queue = [self.root]\n        while queue:\n            tmp = queue.pop(0)\n            if tmp.left is None:\n                tmp.left = node\n                return\n            else:\n                queue.append(tmp.left)\n            if tmp.right is None:\n                tmp.right = node\n                return\n            else:\n                queue.append(tmp.right)\n\n    def breadth_travel(self, root):\n        if root is None:\n            return\n        queue = [root]\n        res = []\n        while queue:\n            tmp = queue.pop(0)\n            res.append(tmp.data)\n            if tmp.left is not None:\n                queue.append(tmp.left)\n            if tmp.right is not None:\n                queue.append(tmp.right)\n        return res\n\n    def inorder(self, root):\n        if root:\n            self.inorder(root.left)\n            print(root.data, end=\" \")\n            self.inorder(root.right)\n\n    def serializer(self, root):\n        if root is None:\n            return ['#']\n        left = self.serializer(root.left)\n        right = self.serializer(root.right)\n        return [root.data] + left + right\n\n    def Serialize(self, root):\n        if not root:\n            return '#'\n        return str(root.data) + ',' + self.Serialize(root.left) + ',' + self.Serialize(root.right)\n\n    def deserializer(self, li):\n        if not li:\n            return None\n        data = li.pop(0)\n        root = None\n        if data !='#':\n            root = Node(data)\n            root.left = self.deserializer(li)\n            root.right = self.deserializer(li)\n\n        return root\n\n\n\n\ntree = Bitree([1,2,3,4,5])\n# tree.inorder(tree.root)\nser = tree.serializer(tree.root)\nprint(ser)\nser1 = tree.Serialize(tree.root)\nprint(ser1)\n\nroot = tree.deserializer([1, 2, 4, '#', '#', 5, '#', '#', 3, '#', '#'])\nprint(tree.breadth_travel(root))\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-11 20:23:54\n"},"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html":{"url":"二叉树/判断一个数组是否是二叉搜索树的后序遍历.html","title":"判断一个数组是否是二叉搜索树的后序遍历","keywords":"","body":"题目\n1. 判断数组是否是二叉搜索树的后序遍历\n​    判断一个数组是否是二叉搜索树的后续遍历，如果是，返回True，如果不是,返回False，比如【1，3，2，5，7，6，4】就是一棵二叉搜索树的后序遍历序列。\n2. 分析\n   1. 二叉搜索树的特点：对于任意一个节点，它的左子树上所有节点的值都小于这个节点的值，它的右子树上所有节点都大于这个节点的值。\n\n二叉搜索树后序遍历的特点，列表的最后一个值一定是树的根节点，然后我们可以根据这个根节点将列表前n-1个元素切分为左右子树。然后对切分的左右子树根据左右子树的最后一个节点进行左右切割。\n后序遍历为切入点\n\n碰到一个题目，判断一个数组是不是排序二叉树的后序遍历，所谓排序二叉树，指的是对于二叉树中的根节点比左子节点数值大，同时比右子节点数值小，例如[5,7,6,9,11,10,8] 就是一个排序二叉树的后序遍历，而[7,10，8,9]则不是\n解题思维：\n既然是后序遍历，则数组最后一个数值肯定是根节点，而从左到右，剩下数组元素的左侧值肯定小于根节点值，而其余的数组元素则大于根节点，例如[5,7,6,9,11,10,8]这个数组，8肯定是根节点，而从数组左侧到5~6三个数比8小，肯定是左子树，而剩下的9~10应该就是右子树，右子树应该满足每个数字都比根节点大，如果满足的话，我们再把[5,7,6]和[9,11,10]两个部分的数组元素重复进行之前的操作，知道结束\n按照这个思路分析一下[7,10,8,9]为什么不是，首先9为根节点，从数组左侧找到比8小的元素组，该元素组的最后一个元素是7，因此，左子树应该是7，而剩下的[10,8,9]应该是右子树，右子树应该满足的条件是每个数字都比根节点9大，然而8比9小，所以不满足\n3. 代码\ndef is_after_order(li, left, right):\n    if not li:\n        return False\n    mid = li[right]\n    i = left\n    while i mid:\n            break\n        i += 1\n    j = i\n    while j left:\n        left_is = is_after_order(li, left, i-1)\n    if j \nclass Solution:\n    def VerifySquenceOfBST(self, sequence):\n        # write code here\n        if sequence == None or len(sequence)==0:\n            return False\n        length = len(sequence)\n        root = sequence[-1]\n        # 在二叉搜索树中 左子树节点小于根节点 在序列中找出左子树\n        i = 0\n        while i root:\n                break\n            i += 1\n        # 在二叉搜索树中 右子树节点大于根节点\n        j = i\n        while j0:\n            left = self.VerifySquenceOfBST(sequence[0:i])\n        right = True\n        if i\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-17 18:33:33\n"},"二叉树/二叉树路径等于输入整数的所有路径.html":{"url":"二叉树/二叉树路径等于输入整数的所有路径.html","title":"二叉树路径等于输入整数的所有路径","keywords":"","body":"给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。\n说明: 叶子节点是指没有子节点的节点。\n示例:\n给定如下二叉树，以及目标和 sum = 22，\n              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\    / \\\n        7    2  5   1\n返回:\n[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n显式回溯\n    def binaryTreePaths(self, root):\n        sum = 8\n        X = []\n        if root is None:\n            return 0\n        self.helper(root, sum, [] ,X)\n        # return self.res\n        print(X)\n    def helper(self, node, sum, x, X):\n        if not node:\n            return\n        sum -= node.val\n        x.append(node.val)\n        if not node.left and not node.right and sum == 0:\n            X.append(x[:])\n            return\n        if node.left:\n            self.helper(node.left, sum,x,X)\n        if node.right:\n            self.helper(node.right, sum,x,X)\n        sum += x[-1]\n        x.pop()\n\n隐式回溯\n    def binaryTreePaths(self, root):\n        sum = 8\n        X = []\n        if root is None:\n            return 0\n        self.helper(root, sum, [root.val] ,X)\n        # return self.res\n        print(X)\n    def helper(self, node, sum, x, X):\n        if not node:\n            return\n        sum -= node.val\n        # x.append(node.val)\n        if not node.left and not node.right and sum == 0:\n            X.append(x[:])\n            return\n        if node.left:\n            self.helper(node.left, sum,x+[node.left.val],X)\n        if node.right:\n            self.helper(node.right, sum,x+[node.right.val],X)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 00:32:08\n"},"二叉树/二叉树的所有路径_LeetCode_257_简单.html":{"url":"二叉树/二叉树的所有路径_LeetCode_257_简单.html","title":"二叉树的所有路径LeetCode_257简单","keywords":"","body":"二叉树的所有路径(LeetCode257简单)\n1.题目\n给定一个二叉树，返回所有从根节点到叶子节点的路径。\n说明: 叶子节点是指没有子节点的节点。\n示例:\n输入:\n\n   1\n /   \\\n2     3\n \\\n  5\n\n输出: [\"1->2->5\", \"1->3\"]\n\n解释: 所有根节点到叶子节点的路径为: 1->2->5, 1->3\n\n2.分析\n\n显式回溯\n隐式回溯\n递归\n\n3.代码\nIn [47]: a = ['2']\n\nIn [48]: '->'.join(a)\nOut[48]: '2'\n\n显式回溯\nclass Solution:\n    def binaryTreePaths(self, root: TreeNode) -> List[str]:\n        res = []\n        self.func(root, [], res)\n        return res\n\n    def func(self, node, x, res):\n        if node is None:\n            return\n        x.append(str(node.val))\n        if node.left is None and node.right is None:\n            res.append('->'.join(x))\n\n        if node.left:\n            self.func(node.left, x, res)\n        if node.right:\n            self.func(node.right, x, res)\n        x.pop()\n\n隐式回溯\nclass Solution:\n    def binaryTreePaths(self, root: TreeNode) -> List[str]:\n        res = []\n        if root is None:\n            return []\n        self.func(root, [str(root.val)], res)\n        return res\n\n    def func(self, node, x, res):\n        if node is None:\n            return\n        if node.left is None and node.right is None:\n            res.append('->'.join(x))\n\n        if node.left:\n            self.func(node.left, x+[str(node.left.val)], res)\n        if node.right:\n            self.func(node.right, x+[str(node.right.val)], res)\n\n递归\n        def binaryTreePaths(self, root: TreeNode) -> List[str]:\n            res = []\n            # 前面先讨论递归到底的情况情况\n            if root is None:\n                return res\n\n            if root.left is None and root.right is None:\n                res.append(str(root.val))\n                return res\n\n            # 字符串列表\n            left_paths = self.binaryTreePaths(root.left)\n            for path in left_paths:\n                res.append(str(root.val) + '->' + path)\n            # 字符串列表\n            right_paths = self.binaryTreePaths(root.right)\n            for path in right_paths:\n                res.append(str(root.val) + '->' + path)\n\n            return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 00:29:08\n"},"二叉树/二叉树的镜像.html":{"url":"二叉树/二叉树的镜像.html","title":"二叉树的镜像","keywords":"","body":"二叉树的镜像定义：源二叉树 \n            8\n           /  \\\n          6   10\n         / \\  / \\\n        5  7 9 11\n        镜像二叉树\n            8\n           /  \\\n          10   6\n         / \\  / \\\n        11 9 7  5\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    # 返回镜像树的根节点\n    def Mirror(self, root):\n        if not root:\n            return None\n        root.left, root.right = root.right, root.left\n        if root.left:\n            self.Mirror(root.left)\n        if root.right:\n            self.Mirror(root.right)\n        return root\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-17 18:23:38\n"},"二叉树/判断是否是平衡二叉树_LeetCode_110.html":{"url":"二叉树/判断是否是平衡二叉树_LeetCode_110.html","title":"判断是否是平衡二叉树_LeetCode_110","keywords":"","body":"平衡二叉树(LeetCode_110)\n1.题目\n给定一个二叉树，判断它是否是高度平衡的二叉树。\n本题中，一棵高度平衡二叉树定义为：\n\n一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。\n\n示例 1:\n给定二叉树 [3,9,20,null,null,15,7]\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n返回 true 。\n示例 2:\n给定二叉树 [1,2,2,3,3,null,null,4,4]\n       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n返回 false 。\n2.分析\n\n对于二叉树，很多题既要判断根节点，还有判断左节点，右节点，这个题也是，如果只判断根节点，就会出错\n\n3.代码\nclass Solution:\n    def isBalanced(self, root: TreeNode) -> bool:\n        # write code here\n        if not root:\n            return True\n        def func(node):\n            if node is None:\n                return 0\n            return max(func(node.left),func(node.right))+1\n\n        return abs(func(root.left)-func(root.right))\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 19:25:32\n"},"动态规划/":{"url":"动态规划/","title":"动态规划","keywords":"","body":"动态规划\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-07 20:39:29\n"},"动态规划/不同路径 LeetCode 62.html":{"url":"动态规划/不同路径 LeetCode 62.html","title":"不同路径_LeetCode 62","keywords":"","body":"不同路径(LeetCode 62)\n1.题目\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n问总共有多少条不同的路径？\n\n例如，上图是一个7 x 3 的网格。有多少可能的路径？\n说明：*m 和 n* 的值均不超过 100。\n示例 1:\n输入: m = 3, n = 2\n输出: 3\n解释:\n从左上角开始，总共有 3 条路径可以到达右下角。\n1. 向右 -> 向右 -> 向下\n2. 向右 -> 向下 -> 向右\n3. 向下 -> 向右 -> 向右\n示例 2:\n输入: m = 7, n = 3\n输出: 28\n2.分析\n\n动态规划\n起始点颠倒\n\n3.代码\n动态规划\n    # 注意：这是n行m列\n    def uniquePaths(self, m: int, n: int) -> int:\n        mat = [[None]*m for _ in range(n)]\n        for i in range(m):\n            mat[-1][i] = 1\n        for i in range(n):\n            mat[i][-1] = 1\n        # for _ in mat:\n        #     print(_)\n        for i in range(n-2,-1,-1):\n            for j in range(m-2,-1,-1):\n                mat[i][j] = mat[i][j+1] + mat[i+1][j]\n        # print(mat[0][0])\n        return mat[0][0]\n\n起始点颠倒\n    def uniquePaths(self, m, n):\n        mat = [[0]*m for _ in range(n)]\n        for i in range(n):\n            mat[i][0] = 1\n        for j in range(m):\n            mat[0][j] = 1\n        print(mat)\n        for i in range(1,n):\n            for j in range(1,m):\n                mat[i][j] = mat[i-1][j] + mat[i][j-1]\n        # print(mat[-1][-1])\n        return mat[-1][-1]\n\n空间复杂度优化为2m\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        up = [1] * m    # 上面一行\n        now = [1] * m    # 下面一行 （当前行）\n        for i in range(1,n):\n            for j in range(1,m):\n                now[j] = up[j] + now[j-1]\n            up = now[:] # 将计算好的值，赋给上一行\n        return now[-1]\n\n优化空间复杂度 O(n)\n\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        dp = [1] * n\n        for i in range(1,m):\n            # dp[0] = dp[0] 可省略，但是不省略含义更明确\n            for j in range(1,n):\n                dp[j] = dp[j-1] + dp[j]\n        return dp[-1]\n\n排列组合\n因为机器到底右下角，向下几步，向右几步的总步数都是固定的，\n比如，m=3, n=2，我们只要向下 1 步，向右 2 步就一定能到达终点。\n所以有 $C_{m+n-2}^{m-1}$\n阶层函数 math.factorial(n)\nans = ((m-1 + n-1))!/(m-1)!(n-1)!\nCnm = n! / [(n-m)! * m!]\n\ndef uniquePaths(self, m: int, n: int) -> int:\n        return int(math.factorial(m+n-2)/math.factorial(m-1)/math.factorial(n-1))\n阶层计算函数\nfrom functools import reduce\ndef func(n):\n    return reduce(lambda x,y:x*y, range(1,n+1))\n\n阶层递归计算函数\ndef func(n):\n    if n==1:\n        return 1:\n    else:\n        return n*func(n-1)\n\nclass Solution {\n    public int uniquePaths(int m, int n) {\n        int[][] dp = new int[m][n];\n\n        for (int i = 0; i \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-06 13:57:34\n"},"动态规划/不同路径2_LeetCode_63.html":{"url":"动态规划/不同路径2_LeetCode_63.html","title":"不同路径2_LeetCode_63","keywords":"","body":"不同路径 II(LeetCode_63)\n1.题目\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\n\n网格中的障碍物和空位置分别用 1 和 0 来表示。\n说明：*m 和 n* 的值均不超过 100。\n示例 1:\n输入:\n[\n  [0,0,0],\n  [0,1,0],\n  [0,0,0]\n]\n输出: 2\n解释:\n3x3 网格的正中间有一个障碍物。\n从左上角到右下角一共有 2 条不同的路径：\n1. 向右 -> 向右 -> 向下 -> 向下\n2. 向下 -> 向下 -> 向右 -> 向右\n\n2.分析\n\n对第一行第一列特殊处理\n在左边和上边各加一条边界\n\n3.代码\n特殊处理\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:    \n        if not obstacleGrid or not obstacleGrid[0]: return 0\n        row = len(obstacleGrid)\n        col = len(obstacleGrid[0])\n        if obstacleGrid[0][0] == 1:return 0\n        dp = [[0]*col for _ in range(row)]\n        dp[0][0] = 1\n        for i in range(1,row):\n            if obstacleGrid[i][0] == 0:\n                dp[i][0] = dp[i-1][0]\n        for j in range(1,col):\n            if obstacleGrid[0][j] == 0:\n                dp[0][j] = dp[0][j-1]\n        for i in range(1,row):\n            for j in range(1,col):\n                if obstacleGrid[i][j] == 0:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[-1][-1]\n\n在左边和上边各加一条边界\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        if not obstacleGrid or not obstacleGrid[0]: return 0\n        if obstacleGrid[0][0]==1: return 0\n        row = len(obstacleGrid)+1\n        col = len(obstacleGrid[0])+1\n        if obstacleGrid[row-2][-1] == 1 or obstacleGrid[-1][col-2]:return 0\n\n        dp = [[0]*(col) for _ in range(row)]\n        for i in range(1,row):\n            for j in range(1,col):\n                if i==1 and j==1:\n                    if obstacleGrid[i-1][j-1] == 1:\n                        return 0\n                    else:\n                        dp[1][1] = 1\n                else:\n                    if obstacleGrid[i-1][j-1] == 1:\n                        pass\n                    else:\n                        dp[i][j] = dp[i-1][j]+ dp[i][j-1]\n\n        return dp[-1][-1]\n\n在左边和上边各加一条边界（简写）\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        if not obstacleGrid or not obstacleGrid[0]: return 0\n        if obstacleGrid[0][0]==1: return 0\n        row = len(obstacleGrid)+1\n        col = len(obstacleGrid[0])+1\n        if obstacleGrid[row-2][-1] == 1 or obstacleGrid[-1][col-2]:return 0\n\n        dp = [[0]*(col) for _ in range(row)]\n        for i in range(1,row):\n            for j in range(1,col):\n                if i==1 and j==1:\n                    dp[1][1] = 1\n                else:\n                    if obstacleGrid[i-1][j-1] == 0:\n                        dp[i][j] = dp[i-1][j]+ dp[i][j-1]\n\n        return dp[-1][-1]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-21 19:56:09\n"},"动态规划/分割回文串 LeetCode 131.html":{"url":"动态规划/分割回文串 LeetCode 131.html","title":"分割回文串 LeetCode 131","keywords":"","body":"分割回文串(LeetCode 131)\n1.题目\n给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。\n返回 s 所有可能的分割方案。\n示例:\n输入: \"aab\"\n输出:\n[\n  [\"aa\",\"b\"],\n  [\"a\",\"a\",\"b\"]\n]\n2.分析\n\n回溯法\n一个字符一个字符累加，这儿是个关键技巧\n\n3.代码\n递归、回溯\n    def partition(self, s):\n        X = []\n        self.func(s,0,[],X)\n        return X\n    def func(self, s, index, x, X):\n        if index == len(s):\n            X.append(x[:])\n        else:\n\n            # 还有着而需要注意回溯思想，我们只需要单条线走通，其它的就交给回溯算法本身去工作\n            # 一个字符一个字符累加，关键技巧\n            for i in range(index+1,len(s)+1):\n                if s[index:i] == s[index:i][::-1]:\n                    x.append(s[index:i])\n                    self.func(s,i,x,X)\n                    x.pop()\n\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:37\n"},"动态规划/分割回文串 II LeetCode 132.html":{"url":"动态规划/分割回文串 II LeetCode 132.html","title":"分割回文串 II_LeetCode 132","keywords":"","body":"分割回文串 II(LeetCode 132)\n1.题目\n给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。\n返回符合要求的最少分割次数。\n示例:\n输入: \"aab\"\n输出: 1\n解释: 进行一次分割就可将 s 分割成 [\"aa\",\"b\"] 这样两个回文子串。\n2.分析\n\n数组nums[i]表示前i字符串最小的分割次数，那么在遍历过程中需要知道j至i的字符串是否为回文串。\n\n\n动态规划   f(i)=min(f(j)+1)  for j in range(i)\n\n动态规划题目，好比数学数列题，由前面的结果推导后面的结果\n\ndp[i]表示前i个字母的最少分割次数,默认为i-1。\n当s[a:b]==s[a:b][ ::-1]时，dp[b]=dp[a]+1\n\n一般动态规划元素个数都比数组元素个数多一\n\n最前面一个元素一般为-1，因此dp的默认写法：\n\n# 加入s_len =3\ndp = [i for i in range(-1,s_len)]\n\n# 输出\n-1, 0 , 1, 2\n\n\ndp = [i for i in range(s_len+1)]\ndp[0] = -1                      \n# 输出\n\n-1, 0 ,0 ,0\n\n​\n\n\n\n\n3.代码\n    def minCut(self, s: str) -> int:\n        if not s: return 0\n\n        s_len = len(s)\n        dp = [i for i in range(-1,s_len)]\n        for i in range(1,s_len+1):\n            for j in range(0,i):\n                if s[j:i] == s[j:i][::-1]:\n                    dp[i] = min(dp[j]+1, dp[i])\n\n        return dp[-1]\n\n.assets\\1553930053874.png) \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:36\n"},"动态规划/单词拆分 LeetCode 139.html":{"url":"动态规划/单词拆分 LeetCode 139.html","title":"单词拆分_LeetCode 139","keywords":"","body":"单词拆分(LeetCode 139)\n1.题目\n给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。\n说明：\n\n拆分时可以重复使用字典中的单词。\n你可以假设字典中没有重复的单词。\n\n示例 1：\n输入: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\n输出: true\n解释: 返回 true 因为 \"leetcode\" 可以被拆分成 \"leet code\"。\n示例 2：\n输入: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\n输出: true\n解释: 返回 true 因为 \"applepenapple\" 可以被拆分成 \"apple pen apple\"。\n     注意你可以重复使用字典中的单词。\n示例 3：\n输入: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\n输出: false\n2.分析\n\n动态规划\n就像爬楼梯，一样，要爬到10楼，先看能不能爬到1楼，2楼等\n\n3.代码\n动态规划\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n\n        if s =='' or len(wordDict) ==0:\n            return False\n\n        dp = [0]*(len(s)+1)\n        dp[0] = 1\n\n        max_stride = max([len(x) for x in wordDict])\n        for i in range(1,len(s)+1):\n            k = i-max_stride\n            if k>0:\n                for j in range(k,i):\n                    if dp[j]==1 and s[j:i] in wordDict:\n                        dp[i] = 1\n            else:\n                for j in range(0,i):\n                    if dp[j]==1 and s[j:i] in wordDict:\n                        dp[i] = 1\n        return dp[-1] == 1\n\n动态规划2\n    def wordBreak(self, s, wordDict):\n        s_len = len(s)\n        dp = [False]*(s_len+1)\n        dp[0] = True\n\n        # 因为单词长度最小是1，所以起点是1\n        for i in range(1,s_len+1):\n            for word in wordDict:\n                if i>=len(word) and dp[i-len(word)] and word == s[i-len(word):i]:\n                    dp[i] = True\n        return dp[-1]\n\n在上一个动态规划上进行优化\nclass Solution:\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        len_s = len(s)\n        mem = [False]*(len_s+1)\n        mem[0] = True\n        tmpDict = dict((i,len(i)) for i in wordDict)\n        for i in range(1, len_s + 1):\n            for word in wordDict:\n                if i >= tmpDict[word] and mem[i - tmpDict[word]] \\\n                    and word == s[i-tmpDict[word]:i]:\n                    mem[i] = True\n                    break\n\n        return mem[-1]\n\n回溯\nclass Solution:\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        return self._wordBreak(s, set(wordDict), 0)\n\n    def _wordBreak(self, s, words, start):\n        if start == len(s):\n            return True\n\n        for i in range(start + 1, len(s) + 1):\n            sub = s[start:i]\n            if sub in words and self._wordBreak(s, words, i):\n                return True\n\n        return False\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:39\n"},"动态规划/鸡蛋掉落 Leetcode 887.html":{"url":"动态规划/鸡蛋掉落 Leetcode 887.html","title":"鸡蛋掉落_Leetcode 887","keywords":"","body":"鸡蛋掉落(Leetcode 887)\n1.题目\n你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。\n每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。\n你知道存在楼层 F ，满足 0  任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。\n每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 ）。\n你的目标是确切地知道 F 的值是多少。\n无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？\n示例 1：\n输入：K = 1, N = 2\n输出：2\n解释：\n鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。\n否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。\n如果它没碎，那么我们肯定知道 F = 2 。\n因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。\n示例 2：\n输入：K = 2, N = 6\n输出：3\n示例 3：\n输入：K = 3, N = 14\n输出：4\n提示：\n\n1 \n1 \n\n2.分析\ndp[k][m] 的含义是k个鸡蛋 移动m次最多能够确定多少楼层\n这个角度思考\ndp[k][m] 最多能够确定的楼层数为L\n那么我选定第一个扔的楼层之后，我要么碎，要么不碎\n这就是把L分成3段\n左边是碎的那段 长度是dp[k-1][m - 1]\n右边是没碎的那段 长度是dp[k][m - 1] 因为已经碎了一个了\n中间是我选定扔的楼层 是1\n所以递推公式是\ndp[k][m] = dp[k - 1][m - 1] + dp[k][m - 1] + 1\n根据递推公式 如果采用k倒着从大到小计算 就可以只存一行的dp[k] 直接原地更新dp[k] 不影响后续计算 只需要O(K)空间复杂度 O(KlogN) 鸡蛋完全够用的时候 就是走LogN步 最差情况是1个鸡蛋走N步 O(KN)\n3.代码\n    def superEggDrop(self, K, N):\n        dp =  [0]*(K+1)\n\n        m = 0\n        while dp[K]\n暴力法\n    def superEggDrop(self, K: int, N: int) -> int:\n        if K==1:return N\n        if N==0:return 0\n        res = []\n        for i in range(1,N+1):\n            res.append(max(self.superEggDrop(K-1,i-1),self.superEggDrop(K,N-i)))\n            print(res) \n        return min(res)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:25\n"},"动态规划/最大正方形 LeetCode 221.html":{"url":"动态规划/最大正方形 LeetCode 221.html","title":"最大正方形_LeetCode 221","keywords":"","body":"最大正方形(LeetCode 221)\n1.题目\n在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。\n示例:\n输入: \n\n1 0 1 0 0\n1 0 1 1 1\n1 1 1 1 1\n1 0 0 1 0\n\n输出: 4\n2.分析\n\ndpi - 1，dpi 和 dpi - 1 都有可能转移到 dpi\n    在上图中，我们可以看到以 (i - 1，j - 1) 这个点为右下角的最大正方形的边长为2（红色），以 (i - 1，j) 这个点为右下角的最大正方形的边长为3（绿色），以 (i，j - 1) 这个点为右下角的正方形的边长为1（蓝色），那么以 (i，j) 为右下角的最大正方形的边长应该为多少呢？\n\n    那么 (i - 1，j) 只能往上和往左延伸3个单位，(i，j - 1) 只能往上和往左延伸1单位，(i - 1，j - 1) 只能往上和往左延伸2个单位：\n\ndpi = min(dpi，min(dpi - 1，dpi - 1，dpi) + 1)\n\n\n可以参考最大矩形 ，单调栈\n\n3.代码\nC++代码\nclass Solution {\npublic:\n    int maximalSquare(vector>& matrix) {\n        if (matrix.empty() || matrix[0].empty()) return 0;\n        int m = matrix.size(),n = matrix[0].size(),res = 0;\n        vector> dp(m,vector(n,0));\n        for(int i =0;i\npython\nclass Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        if len(matrix)==0 or len(matrix[0]) == 0:return 0\n        m,n = len(matrix),len(matrix[0])\n        dp = [[0]*n for i in range(m)]\n        res = 0\n        for i in range(m):\n            if matrix[i][0] == '1':\n                dp[i][0] = 1\n                res = 1\n        for j in range(n):\n            if matrix[0][j] == '1':\n                dp[0][j] = 1\n                res = 1\n        # 从1行1列开始遍历\n        for i in range(1,m):\n            for j in range(1,n):\n                if matrix[i][j]=='1':\n                    dp[i][j] = min(dp[i-1][j-1],dp[i][j-1],dp[i-1][j])+1\n                    print(dp[i][j])\n                    res = max(res,dp[i][j])\n        return res*res\n\npython，在里面赋dp的初值\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        if len(matrix)==0 or len(matrix[0]) == 0:return 0\n        m,n = len(matrix),len(matrix[0])\n        dp = [[0]*n for i in range(m)]\n        res = 0\n        # 从0行0列开始遍历\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j]=='1':\n                    dp[i][j] = min(dp[i-1][j-1],dp[i][j-1],dp[i-1][j])+1\n                    res = max(res,dp[i][j])\n                else:\n                    dp[i][j]=0\n        return res*res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 23:03:10\n"},"动态规划/最长上升子序列 LeetCode 300.html":{"url":"动态规划/最长上升子序列 LeetCode 300.html","title":"最长上升子序列_LeetCode 300","keywords":"","body":"最长上升子序列(LeetCode 300)\n1.题目\n给定一个无序的整数数组，找到其中最长上升子序列的长度。\n示例:\n输入: [10,9,2,5,3,7,101,18]\n输出: 4 \n解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。\n说明:\n\n可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。\n你算法的时间复杂度应该为 O(n2) 。\n\n进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?\n2.分析\n动态规划思路\n1、子序列：不要求连续子序列，只要保证元素前后顺序一致即可；\n2、上升：这里的“上升”是“严格上升”，类似于 [2, 3, 3, 6, 7] 这样的子序列是不符合要求的；\n    # 动态规划的思路：将 dp 数组定义为：以 nums[i] 结尾的最长上升子序列的长度\n    # 那么题目要求的，就是这个 dp 数组中的最大者\n    # 以数组  [10, 9, 2, 5, 3, 7, 101, 18] 为例：\n    # dp 的值： 1  1  1  2  2  3  4    4\n替换思路\ndp[i]: 所有长度为i+1的递增子序列中, 最小的那个序列尾数. 由定义知dp数组必然是一个递增数组 依次判断每个数num将其插入dp数组相应的位置: 1. num > dp[-1], ，执行插入尾部操作，表示num比所有已知递增序列的尾数都大, 将num添加入dp 数组尾部 2. num \n3.代码\n动态规划\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        size = len(nums)\n        if size  nums[j]:\n                    dp[i] = max(dp[j] + 1,dp[i])\n        # 最后要全部走一遍，看最大值\n        return max(dp)\n\n\n为什么是\ndp[i] = max(dp[j] + 1,dp[i])\n而不是\ndp[i] = dp[j]+1\n\n如下\n# [1,3,6,7,9,4,10,5,6] 对于4，如果不用max(dp[j]+1,dp[i]),那 \n# 么dp['4'] 等于3，当求10，dp['10']时候，10>4,则dp['10'] = \n# dp['4']+1=4,所以最后max(dp),答案为5，而不是6\n\n动态规划替换\nclass Solution:\n    def lengthOfLIS(self, nums):\n        n = len(nums)\n        if n  stack[-1]:\n                stack.append(nums[i])\n            else:\n                # 不会动递增序列的个数，但是会调整递增序列的值，这儿也可以用二分查找\n                for j in range(len(stack)):\n                    # dp=【1，2，4】 ,nums[i]=3\n                    if nums[i] > stack[j]:\n                        continue\n                    else:\n                        stack[j] = nums[i] # 将数组中的值替换\n                        break\n        return len(stack) # 返回递增序列的长度，就是最长递增子序列\n\n动态规划之二分替换\nclass Solution:\n    def lengthOfLIS(self, nums):\n        n = len(nums)\n        if n dp[-1]:\n                dp.append(nums[i])\n            if nums[i] nums[i]:\n                        high = mid-1\n                    else: # 不用替换,设置一个标志位，跳过外循环的替换操作\n                        flag = False\n                        break\n                if flag == False:\n                    flag = True\n                    continue\n                dp[low] = nums[i]\n        return len(dp)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:59\n"},"动态规划/最小路径和 LeetCode 64.html":{"url":"动态规划/最小路径和 LeetCode 64.html","title":"最小路径和_LeetCode 64","keywords":"","body":"最小路径和(LeetCode 64)\n1.题目\n给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。\n说明：每次只能向下或者向右移动一步。\n示例:\n输入:\n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n输出: 7\n解释: 因为路径 1→3→1→1→1 的总和最小。\n2.分析\n​    \n(动态规划1)：时间复杂为o(nm)和空间复杂度为o(nm)。典型的动态规划问题，假设当前已经开始计算si，那么si只可能从si-1+gridi或者si+gridi计算得到，也就是si = min(si-1,si)+gridi。我们需要一个o(nm)额外空间保存已经计算的si的值，我们只需要访问一遍数组即可。因此时间复杂度为o(nm)，空间复杂度为o(n*m)。我们需要特殊处理矩阵中第一行和第一列。因为第一行没有si-1元素，只有si元素。第一列没有si元素，只有si-1元素。\n3.代码\n动态规划1(原地修改)：\n    def minPathSum(self, grid):\n        if not grid or not grid[0]:return 0\n        n, m = len(grid), len(grid[0])\n        # 从1开始，不然0位置会重复计算\n        for i in range(1,n):\n            grid[i][0] = grid[i-1][0] + grid[i][0]\n        for j in range(1,m):\n            grid[0][j] = grid[0][j-1] + grid[0][j]  \n        for i in range(1,n):\n            for j in range(1,m):\n                grid[i][j] = min(grid[i-1][j], grid[i][j-1])+grid[i][j]\n        return grid[-1][-1]\n\n    def minPathSum(self, grid):\n        if not grid or not grid[0]:return 0\n\n        n, m = len(grid), len(grid[0])\n        for i in range(n):\n            for j in range(m):\n                if i==0 and j>0:\n                    grid[i][j] = grid[i][j-1] + grid[i][j]\n                elif j==0 and i>0:\n                    grid[i][j] = grid[i-1][j] + grid[i][j]\n                elif i>0 and j>0:\n                    grid[i][j] = min(grid[i-1][j], grid[i][j-1])+grid[i][j]\n        return grid[-1][-1]\n\n动态规划2（非原地修改，空间复杂度m*n）\n def minPathSum(self, grid):\n            if not grid or not grid[0]:return 0\n\n            n, m = len(grid), len(grid[0])\n            mat = [[grid[0][0]]*m]*n\n            for i in range(1,n):\n                mat[i][0] = mat[i-1][0] + grid[i][0]\n\n            for j in range(1,m):\n                mat[0][j] = mat[0][j-1] + grid[0][j]\n            for i in range(1,n):\n                for j in range(1,m):\n                    mat[i][j] = min(mat[i][j-1], mat[i-1][j]) + grid[i][j]\n            return mat[-1][-1]\n\n动态规划3（非原地修改，空间复杂度2*m）\n(动态规划2)：时间复杂度为o(nm)，空间复杂度为o(m)，此方法需要2m额外空间。当我们求si时，s[i-2]行的元素我们就不再需要，我们只需要s[i-1]行中的元素，我们把s[i-1]行中的元素保存在up数组中，数组的大小为m。我们把s[i]保存在now数组中，当s[i]行的元素计算完毕以后，我们交换up和now数组。因为需要up数组和now数组，且数组的大小都为m，所以我们需要2*m大小的额外空间。\n        def minPathSum(self, grid):\n            if not grid or not grid[0]:return 0\n            n, m = len(grid), len(grid[0])\n            up = [grid[0][0]]*m\n            now = [0] *m\n            for j in range(1,m):\n                up[j] = grid[0][j] + up[j-1]\n\n            for i in range(1,n):\n                # 计算now【0】\n                now[0] = grid[i][0] + up[0]\n                for j in range(1,m):\n                    # 在这给其他now赋值\n                    now[j] = min(up[j],now[j-1]) + grid[i][j]\n                up = now.copy()\n            return up[-1]\n\n动态规划4（非原地修改，空间复杂度为m）\n(动态规划3)：时间复杂度为o(nm)，空间复杂度为o(m)，需要m大小的额外空间，注意此方法和方法三的区别，方法三需要2m大小的额外空间，此方法只需要m大小的额外空间，在方法三中我们保存当前行s[i]中的元素，假设我们当前计算si，我们只需要知道si的值即可，不需要保存s[i]行中的元素。每次计算si时，我们需要更新up[j]的值。\nclass Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        if not grid or not grid[0]:return 0\n        n, m = len(grid), len(grid[0])\n\n        dp = [0]*m\n        dp[0] = grid[0][0]\n        for i in range(1,m):\n            dp[i] = dp[i-1] + grid[0][i]\n\n\n        for i in range(1,n):\n            dp[0] = grid[i][0] + dp[0]\n            for j in range(1,m):\n                dp[j]= min(dp[j],dp[j-1]) + grid[i][j]\n        return dp[-1]\n\n \n​        \njava\nclass Solution {\n    public int minPathSum(int[][] grid) {\n        if (grid == null || grid[0].length == 0 || grid[0] == null || grid.length ==0)\n            return 0;\n\n        int res=0, n=grid.length, m=grid[0].length;\n        int[] dp = new int[m];\n        dp[0] = grid[0][0];\n        for (int i = 1; i \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-06 14:21:16\n"},"动态规划/斐波拉契数列第n项.html":{"url":"动态规划/斐波拉契数列第n项.html","title":"斐波拉契数列第n项","keywords":"","body":"斐波那契数(LeetCode_509)\n1.题目\n斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：\nF(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1.\n给定 N，计算 F(N)。\n提示：\n\n0 ≤ N ≤ 30\n\n2.分析\n3.代码\ndef func(n):\n    if N\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-20 07:03:40\n"},"动态规划/零钱兑换_LeetCode_322.html":{"url":"动态规划/零钱兑换_LeetCode_322.html","title":"零钱兑换_LeetCode_322","keywords":"","body":"零钱兑换(LeetCode_322)\n1.题目\n给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。\n示例 1:\n输入: coins = [1, 2, 5], amount = 11\n输出: 3 \n解释: 11 = 5 + 5 + 1\n示例 2:\n输入: coins = [2], amount = 3\n输出: -1\n说明:\n你可以认为每种硬币的数量是无限的。\n2.分析\n完全背包问题\n3.代码\n# class Solution:\n#     # 递归\n#     def coinChange(self, coins: List[int], amount: int) -> int:\n#         if amount == 0:return 0\n#         res = float('inf')\n#         for i in range(len(coins)):\n#             if coins[i]>amount:\n#                 continue\n#             tmp = self.coinChange(coins, amount-coins[i])\n#             if tmp == -1:\n#                 continue\n#             res = min(res, tmp+1)\n#         return res if res != float('inf') else -1\n\n# 从上到下\n# class Solution:\n#     def coinChange(self, coins: List[int], amount: int) -> int:\n#         memo = [-2]*(amount+1)\n#         return self.func(coins, amount, memo)\n\n#     def func(self, coins, amount, memo):\n#         if amount == 0:return 0\n#         res = float('inf')\n#         if memo[amount] != -2:\n#             return memo[amount]\n#         for i in range(len(coins)):\n#             # 金额不可达\n#             if coins[i]>amount:\n#                 continue\n#             tmp = self.func(coins, amount-coins[i], memo)\n#             # 子问题无解\n#             if tmp==-1:\n#                 continue\n#             res = min(res,tmp+1)\n#         # 记录本轮答案\n#         memo[amount] = res if res != float('inf') else -1\n#         return memo[amount]\n\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        dp = [amount+1] *(amount+1)\n        dp[0] = 0\n        for i in range(1,amount+1):\n            for j in coins:\n                if j amount else dp[amount]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-03 23:26:44\n"},"动态规划/打家劫舍_LeetCode_198.html":{"url":"动态规划/打家劫舍_LeetCode_198.html","title":"打家劫舍_LeetCode_198","keywords":"","body":"打家劫舍(LeetCode_198)\n1.题目\n你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。\n示例 1:\n输入: [1,2,3,1]\n输出: 4\n解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n示例 2:\n输入: [2,7,9,3,1]\n输出: 12\n解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。\n     偷窃到的最高金额 = 2 + 9 + 1 = 12 。\n2.分析\n\n动态规划方程：dp[n] = MAX( dp[n-1], dp[n-2] + num )\n由于不可以在相邻的房屋闯入，所以在当前位置 n 房屋可盗窃的最大值，要么就是 n-1 房屋可盗窃的最大值，要么就是 n-2 房屋可盗窃的最大值加上当前房屋的值，二者之间取最大值\n举例来说：1 号房间可盗窃最大值为 33 即为 dp[1]=3，2 号房间可盗窃最大值为 44 即为 dp[2]=4，3 号房间自身的值为 22 即为 num=2，那么 dp[3] = MAX( dp[2], dp[1] + num ) = MAX(4, 3+2) = 5，3 号房间可盗窃最大值为 55\n时间复杂度：O(n),n 为数组长度\n\n3.代码\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n\n        dp =[0]*len(nums)\n        dp[0], dp[1] = nums[0], max(nums[0], nums[1])\n\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i-2] + nums[i], dp[i-1])\n\n        return dp[-1]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-21 20:15:35\n"},"动态规划/打家劫舍2_LeetCode_213.html":{"url":"动态规划/打家劫舍2_LeetCode_213.html","title":"打家劫舍2_LeetCode_213","keywords":"","body":"打家劫舍 II(LeetCode_213)\n1.题目\n你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。\n示例 1:\n输入: [2,3,2]\n输出: 3\n解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。\n示例 2:\n输入: [1,2,3,1]\n输出: 4\n解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n2.分析\n分两种情况讨论，偷第一家，最后家就不能偷，不偷第一家，最后家可以选择偷，也可以选择不偷。然后取最大值\n3.代码\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0],nums[1])\n        res_1 = self.func(nums[1:])\n        res_2 = self.func(nums[:-1])\n        return max(res_1,res_2)\n\n    def func(self, nums):\n        dp = [0]*len(nums)\n        dp[0],dp[1] = nums[0],max(nums[0],nums[1])\n        for i in range(2,len(nums)):\n            dp[i] = max(dp[i-2]+nums[i],dp[i-1])\n        return dp[-1]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-21 20:15:27\n"},"动态规划/最大子序和_LeetCode_53.html":{"url":"动态规划/最大子序和_LeetCode_53.html","title":"最大子序和_LeetCode_53","keywords":"","body":"最大子序和(LeetCode 53)\n1.题目\n给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n示例:\n输入: [-2,1,-3,4,-1,2,1,-5,4],\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n进阶:\n如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。\n2.分析\n3.代码\n动态规划\n    def FindGreatestSumOfSubArray(self, array):\n        # write code here\n        # 动态规划\n        a_len = len(array)\n        res = array[0]\n        dp = [0]*a_len\n        for i in range(a_len):\n            dp[i] = max(dp[i-1]+array[i], array[i])\n            res = max(res, dp[i])\n        return res\n\n正常解法\nclass Solution(object):\n    def maxSubArray(self, nums):\n        sum = 0\n        max_sub_sum = nums[0]\n        for num in nums:\n            sum += num\n            if sum > max_sub_sum:\n                max_sub_sum = sum\n            if sum \n动态规划\n遍历数组，记录max(nums[i-1] + nums[i], nums[i])（含义为保留前面累加和与以当前元素为开始，哪种更优），即判断后面subarray是否舍去前面的累计加和，并继续遍历下一元素。\n最后return加和中最大值。\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        for i in range(1,len(nums)):\n            nums[i] = max(nums[i],nums[i-1]+nums[i])\n        return max(nums)\n\n分治法\n\n最大连续子序列是所有连续子序中元素和最大的一个，例如给定序列{ -2, 11, -4, 13, -5, -2 }，其最大连续子序列为{11,-4,13}，最大连续子序列和即为20。\n\n问题解决思路：\n现将序列等分为左右两份，则最大子列只可能出现在三个地方：\n1整个子序列出现在左半部分\n2整个子序列出现在右半部分\n3整个子序列跨越中间边界\n前两种情况可以用递归求解，而第三种情况则可以将前半部分的最大子序列和（此处的子序列必须包含前半部分的最后一个元素）与后半部分的最大子序列和（此处的子序列必须包含后半部分的第一个元素）相加得到\n注1：因为第三种情况跨越了中间边界，且要求的序列为连续的，因此第三种情况得到的子序列必定包含左子序列的最后一个元素以及右子序列的第一个元素。\n注2：若要求的序列可以为不连续的，则第三种情况可以直接用前半部分最大子序列和与后半部分最大子序列和相加得到\n\n\n1.分治法解决   连续   子序列    和最大问题\n# 注1：因为第三种情况跨越了中间边界，且要求的序列为连续的，因此第三种情况得到的子序列必定包含左子序列\n# 的最后一个元素以及右子序列的第一个元素。\ndef findMaxSum(li):\n    # 如果问题规模小于等于1，直接解决\n    if len(li)  leftAndMidMax:\n            leftAndMidMax = leftAndMid\n\n    # 用于包含右边第一个数的累加求和\n    rightAndMid = 0\n    # 考虑到存在序列全为负数的情况，因为初始化为负无穷而非0\n    rightAndMidMax = float('-inf')#包含右边最后一个数的最大序列和\n    for i in right:\n        rightAndMid += i\n        if rightAndMid > rightAndMidMax:\n            rightAndMidMax = rightAndMid        \n\n    # 计算跨越了中间的序列 的最大和\n    midMaxSum = leftAndMidMax + rightAndMidMax\n\n    # 合并\n    return max(leftMaxSum, midMaxSum, rightMaxSum)\n\nA=[2,3,4,1,-1,-7,-3,-7,-6]\n\nprint(findMaxSum(A))\n\n2.动态规划解决   连续   子序列   和最大：\ndef findMaxSum(li):\n    # initMax 用于累加求和开始\n    initMax = 0\n    MaxSum = float(\"-inf\")\n    for i in li:\n        initMax += i\n        if i > initMax:\n            initMax = i\n        if initMax > MaxSum:\n            MaxSum = initMax\n    return MaxSum\n\nA=[1,-2,-2,4]\n\nprint(findMaxSum(A))   \n\n\n\n法2\ndef maxSubArray(self, nums):\n    sum = 0\n    max_sub_sum = nums[0]\n    for num in nums:\n        sum += num\n        if sum > max_sub_sum:\n            max_sub_sum = sum\n        if sum \n3.分治法解决非连续   子序列    和最大问题\ndef findMaxSum(li):\n    # 如果问题规模小于等于1，直接解决\n    if len(li) \n4.动态规划解决非连续  子序列 和最大问题\ndef maxSubArray(nums):\n    sum = 0\n    max_sub_sum = nums[0]\n    for num in nums:\n        sum += num\n        if sum >= max_sub_sum:\n            max_sub_sum = sum\n        else:\n            sum -= num\n    print(max_sub_sum)\n\n\nA = [-1, 2, -2,-3,-5,9]\n\nprint(findMaxSum(A))\n\n def maxSubArray(nums):\n    max_sub_sum = nums[0]\n    for i in nums[1:]:\n        if i > 0:\n            if max_sub_sum \n最大子序和(LeetCode 53)\n(子数组)\n1.题目\n给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n示例:\n输入: [-2,1,-3,4,-1,2,1,-5,4],\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n进阶:\n如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。\n2.分析\n使用动态规划\nF（i）：以array[i]为末尾元素的子数组的和的最大值，子数组的元素的相对位置不变\nF（i）=max（F（i-1）+array[i] ， array[i]）\nres：所有子数组的和的最大值\nres=max（res，F（i））\n\n如数组[6, -3, -2, 7, -15, 1, 2, 2]\n初始状态：\n    F（0）=6\n    res=6\ni=1：\n    F（1）=max（F（0）-3，-3）=max（6-3，3）=3\n    res=max（F（1），res）=max（3，6）=6\ni=2：\n    F（2）=max（F（1）-2，-2）=max（3-2，-2）=1\n    res=max（F（2），res）=max（1，6）=6\ni=3：\n    F（3）=max（F（2）+7，7）=max（1+7，7）=8\n    res=max（F（2），res）=max（8，6）=8\ni=4：\n    F（4）=max（F（3）-15，-15）=max（8-15，-15）=-7\n    res=max（F（4），res）=max（-7，8）=8\n以此类推\n最终res的值为8\n\n3.代码\nclass Solution(object):\n    def maxSubArray(self, nums):\n        sum = 0\n        max_sub_sum = nums[0]\n        for num in nums:\n            sum += num\n            if sum > max_sub_sum:\n                max_sub_sum = sum\n            if sum \n动态规划\n    def FindGreatestSumOfSubArray(self, array):\n        # write code here\n        # 动态规划\n        a_len = len(array)\n        res = array[0]\n        dp = [0]*a_len\n        for i in range(a_len):\n            dp[i] = max(dp[i-1]+array[i], array[i])\n            res = max(res, dp[i])\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 12:02:18\n"},"动态规划/最长重复子数组_LeetCode_718.html":{"url":"动态规划/最长重复子数组_LeetCode_718.html","title":"最长重复子数组_LeetCode_718","keywords":"","body":"最长重复子数组(LeetCode_718)\n1.题目\n给两个整数数组 A 和 B ，返回两个数组中公共的、长度最长的子数组的长度。\n示例 1:\n输入:\nA: [1,2,3,2,1]\nB: [3,2,1,4,7]\n输出: 3\n解释: \n长度最长的公共子数组是 [3, 2, 1]。\n\n说明:\n\n1 \n2.分析\n\n动态规划\n\n“子数组”需要连续的一段，并不是“子序列”。\n\n| A  \\   B |  空  |  1   |  2   |  1   |\n| :------: | :--: | :--: | :--: | :--: |\n|    空    |  0   |  0   |  0   |  0   |\n|    1     |  0   |  1   |  0   |  1   |\n|    2     |  0   |  0   |  2   |  0   |\n|    2     |  0   |  0   |  1   |  0   |\n\n\n\n\n  dp[i][j] 表示A【:i-1】和B【:j-1】的最长公共子串的长度\n\n  初始化：\n      A 为空串时，无论B多少字符，公共连续子序列长度都为0 ：dp[0][j] = 0\n      B 为空串时，无论A多少字符，公共连续子序列长度都为0 : dp[i][0] = 0\n  ​\n3.代码\nclass Solution:\n    def findLength(self, A: List[int], B: List[int]) -> int:\n        s1_len = len(A)\n        s2_len = len(B)\n        max_len = 0\n        # max_id = 0\n        mat = [[0]*(s2_len+1) for _ in range(s1_len+1)]\n        for i in range(1,s1_len+1):\n            for j in range(1,s2_len+1):\n                mat[i][j] = mat[i-1][j-1]+ 1 if A[i-1] == B[j-1] else 0\n                if mat[i][j] > max_len:\n                    max_len = mat[i][j]\n                    # max_id = i\n        # max_str = s1[max_id-max_len:max_id]\n        return max_len\n\nclass Solution:\n    def findLength(self, A: List[int], B: List[int]) -> int:\n        s1_len = len(A)\n        s2_len = len(B)\n        max_len = 0\n        # max_id = 0\n        mat = [[0]*(s2_len+1) for _ in range(s1_len+1)]\n        for i in range(1,s1_len+1):\n            for j in range(1,s2_len+1):\n                mat[i][j] = mat[i-1][j-1]+1 if A[i-1] == B[j-1] else 0\n                max_len = max(max_len, mat[i][j])\n        return max_len\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-03 10:29:23\n"},"动态规划/最长公共子序列.html":{"url":"动态规划/最长公共子序列.html","title":"最长公共子序列","keywords":"","body":"最长公共子序列\n\n\n\nA \\ B\n空\na\nb\nc\n\n\n\n\n空\n0\n0\n0\n0\n\n\na\n0\n1\n1\n1\n\n\nc\n0\n1\n1\n2\n\n\nb\n0\n1\n2\n2\n\n\n\n\ndef findMaxSub(s1, s2):\n    s1_len = len(s1)\n    s2_len = len(s2)\n    max_len = 0\n    max_id = 0\n    mat = [[0]*(s2_len+1) for _ in range(s1_len+1)]\n    for i in range(1,s1_len+1):\n        for j in range(1,s2_len+1):\n            if s1[i-1] == s2[j-1]:\n                mat[i][j] = mat[i-1][j-1]+1\n            else:\n                mat[i][j] = max(mat[i][j-1],mat[i-1][j])\n\n    print(mat[-1][-1])\n\nfindMaxSub('abcdcdabccade', 'dgcadabcdcdde')\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-03 10:27:18\n"},"动态规划/最长公共字符串.html":{"url":"动态规划/最长公共字符串.html","title":"最长公共字符串","keywords":"","body":"def findMaxSub(s1, s2):\n    s1_len = len(s1)\n    s2_len = len(s2)\n    max_len = 0\n    max_id = 0\n    mat = [[0]*(s2_len+1) for _ in range(s1_len+1)]\n    for i in range(1,s1_len+1):\n        for j in range(1,s2_len+1):\n            mat[i][j] = mat[i-1][j-1]+1 if s1[i-1] == s2[j-1] else 0\n            if mat[i][j] > max_len:\n                max_len = mat[i][j]\n                max_id = i\n    max_str = s1[max_id-max_len:max_id]\n    print(max_str,max_len)\n\nfindMaxSub('abcdcdabccade', 'dgcadabcdcdde')\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-03 10:27:06\n"},"动态规划/正则表达式匹配_LeetCode_10.html":{"url":"动态规划/正则表达式匹配_LeetCode_10.html","title":"正则表达式匹配_LeetCode_10","keywords":"","body":"正则表达式匹配(LeetCode_10)\n1.题目\n给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。\n'.' 匹配任意单个字符\n'*' 匹配零个或多个前面的那一个元素\n所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。\n说明:\n\ns 可能为空，且只包含从 a-z 的小写字母。\np 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。\n\n示例 1:\n输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。\n示例 2:\n输入:\ns = \"aa\"\np = \"a*\"\n输出: true\n解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 \"aa\" 可被视为 'a' 重复了一次。\n示例 3:\n输入:\ns = \"ab\"\np = \".*\"\n输出: true\n解释: \".*\" 表示可匹配零个或多个（'*'）任意字符（'.'）。\n示例 4:\n输入:\ns = \"aab\"\np = \"c*a*b\"\n输出: true\n解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 \"aab\"。\n示例 5:\n输入:\ns = \"mississippi\"\np = \"mis*is*p*.\"\n输出: false\n2.分析\n\n    思路: 动态规划, 沿着匹配串和字符串构成矩阵的对角线传递状态\n    1. 状态矩阵的首行与首列对应于空字符与空匹配符\n    2. 对角线意味着匹配串是否匹配对应的字符串\n3.代码\n字符串：s串\n匹配串：p串\ndef isMatch(self, s: str, p: str) -> bool:\n    s_len = len(s)\n    p_len = len(p)\n\n    dp = [[False] *(p_len+1) for _ in range(s_len+1)]\n    # 初始化\n    # 两串都为空时，算匹配成功\n    dp[0][0] = True\n    # 匹配串为空串时，字符串1个以上字符时，匹配不成功，即第一列从第一个字符开始为False，由于创建dp\n    # 时候，已经设置好了，所以这儿不用再次初始化\n\n    # 当字符串是空串时，匹配串不为空，根据规则, *前必存在一个字符, 则当前为*时, 其状态与前2的状态一致\n    for i in range(0,p_len):\n        # *出现的位置只能是大于等于1（从0开始计数）\n        # dp和字符串实际位置相差1，所以当前状态p[i]的上上（前2）状态位dp【i-2+1】，都要在dp位置上加1\n        if p[i] == '*' and dp[0][i-1]:\n            dp[0][i+1] = True\n    for i in range(1,s_len+1):\n        for j in range(1,p_len+1):\n            if p[j-1] == '.' or s[i-1] == p[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            elif p[j-1] == '*':\n                # 根据匹配规则，比较匹配串*的前一个字符 与 字符串的当前字符\n                # 二者不相等时，a* 只有作为空串，才能匹配成功\n                # 也就是，匹配串需要看前两个字符的状态\n                if p[j-2] != s[i-1]:\n                    dp[i][j] = dp[i][j-2]\n                 # 两者相等时，a* 可以作为空字符，单字符a，多字符处理  aaa\n                if p[j-2] == s[i-1] or p[j-2] =='.':\n                    dp[i][j] = dp[i][j-2] or dp[i][j-1] or dp[i-1][j]\n    return dp[-1][-1]\n\n回溯法\nclass Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        '''\n            回溯算法: 从后往前匹配, 一旦遇到 *，前面必然有个字符\n        '''\n        def match(ins,inp):\n            if inp==-1:\n                if ins==-1:\n                    return True\n                return False\n            if p[inp] == '*':\n                # * 匹配多个字符（>=1个字符）\n                if ins>-1 and (p[inp-1] == s[ins] or p[inp-1]=='.'):\n                    if match(ins-1,inp):\n                        return True\n                # * 匹配0个字符\n                return match(ins,inp-2)\n            if ins >-1 and(p[inp]==s[ins] or p[inp]=='.'):\n                return match(ins-1,inp-1)\n            return False\n        return match(len(s)-1,len(p)-1)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-21 17:48:11\n"},"动态规划/通配符匹配_LeetCode_44.html":{"url":"动态规划/通配符匹配_LeetCode_44.html","title":"通配符匹配_LeetCode_44","keywords":"","body":"通配符匹配(LeetCode_44)\n1.题目\n给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 '?' 和 '*' 的通配符匹配。\n'?' 可以匹配任何单个字符。\n'*' 可以匹配任意字符串（包括空字符串）。\n两个字符串完全匹配才算匹配成功。\n说明:\n\ns 可能为空，且只包含从 a-z 的小写字母。\np 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。\n\n示例 1:\n输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。\n示例 2:\n输入:\ns = \"aa\"\np = \"*\"\n输出: true\n解释: '*' 可以匹配任意字符串。\n示例 3:\n输入:\ns = \"cb\"\np = \"?a\"\n输出: false\n解释: '?' 可以匹配 'c', 但第二个 'a' 无法匹配 'b'。\n示例 4:\n输入:\ns = \"adceb\"\np = \"*a*b\"\n输出: true\n解释: 第一个 '*' 可以匹配空字符串, 第二个 '*' 可以匹配字符串 \"dce\".\n示例 5:\n输入:\ns = \"acdcb\"\np = \"a*c?b\"\n输入: false\n2.分析\n参考正则表达式匹配_LeetCode_10\n3.代码\nclass Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        n, m = len(s),len(p)\n        dp = [[False]*(m+1) for _ in range(n+1)]\n        dp[0][0] = True\n\n        # 也可以for i in range（m）:\n            ...\n        for i in range(1,m+1):\n            if p[i-1] == '*':\n                dp[0][i] = dp[0][i-1]\n\n        for i in range(1,n+1):\n            for j in range(1,m+1):\n                if s[i-1] == p[j-1] or p[j-1] =='?':\n                    dp[i][j] = dp[i-1][j-1]\n                elif p[j-1] == '*':\n                    # * 匹配空字符，多字符\n                    dp[i][j] = dp[i][j-1] or dp[i-1][j]\n        return dp[-1][-1]\n\n回溯\nclass Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        def match(ins,inp):\n            if inp == -1:\n                if ins ==-1:\n                    return True\n                return False\n            if p[inp] == '*':\n                if ins >-1 and(p[inp-1]==s[ins] or p[inp-1]=='?'):\n                    if match(ins-1,inp):\n                        return True\n                return match(ins,inp-1)\n            if ins>-1 and (p[inp]==s[ins] or p[inp]=='?'):\n                return  match(ins-1,inp-1)\n            return False\n        return match(len(s)-1,len(p)-1)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-21 17:59:57\n"},"动态规划/乘积最大子序列 LeetCode 152.html":{"url":"动态规划/乘积最大子序列 LeetCode 152.html","title":"乘积最大子序列 LeetCode 152","keywords":"","body":"乘积最大子序列(LeetCode 152)\n1.题目\n给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。\n示例 1:\n输入: [2,3,-2,4]\n输出: 6\n解释: 子数组 [2,3] 有最大乘积 6。\n示例 2:\n输入: [-2,0,-1]\n输出: 0\n解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。\n2.分析\n\n一种方法类似于最大前缀和\n另外一种方法，我们要保存前面走过的路，里面的最大最小值，因为这是乘法，乘法的话，会出现最大值，是由两个负数乘起来的。但是负数是最小的\n\n3.代码\n最大前缀和\n    # 先计算从左到右的相乘的最大值，再计算从右到左的最大值；再将两组最大值相比\n    # \n    def maxProduct(self, A):\n        B = A[::-1]\n        for i in range(1, len(A)):\n            # 输入[-3,0,1,-2]\n            # 不加 or 1，输出[-3, 0, 0, 0] [-2, -2, 0, 0]\n            # 所以我们要把A【i】等于0时，置为1\n            A[i] *= (A[i - 1] or 1)\n            B[i] *= (B[i - 1] or 1)\n        print(A,B)\n        return max(max(A),max(B))\n\n保留前面计算过的最大最小值\n    def maxProduct(self, nums: List[int]) -> int:\n        #  由于有正负，所以每次相乘完毕后，应该保留最大和最小值，也就是最大正数，最小负数\n        maxnum = nums[0]\n        minnum = nums[0]\n        res = nums[0]\n        for i in nums[1:]:\n            print(i)\n            maxnum_temp = maxnum\n            minnum_temp = minnum\n           # 1,-2,i=3，这一次来的数是i=3，则这次的最大，应该就是它自己，不需要乘以前面的最大或者最小\n            maxnum = max(i, i*maxnum_temp, i*minnum_temp)\n            minnum = min(i, i*maxnum_temp, i*minnum_temp)\n            res = max(res,maxnum)\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:30\n"},"动态规划/编辑距离_LeetCode_72.html":{"url":"动态规划/编辑距离_LeetCode_72.html","title":"编辑距离_LeetCode_72","keywords":"","body":"编辑距离\n1.题目\n给定两个单词 word1 和 word2，计算出将 word1 转换成 word2 所使用的最少操作数 。\n你可以对一个单词进行如下三种操作：\n\n插入一个字符\n\n\n删除一个字符\n替换一个字符\n\n示例 1:\n输入: word1 = \"horse\", word2 = \"ros\"\n输出: 3\n解释: \nhorse -> rorse (将 'h' 替换为 'r')\nrorse -> rose (删除 'r')\nrose -> ros (删除 'e')\n\n示例 2:\n输入: word1 = \"intention\", word2 = \"execution\"\n输出: 5\n解释: \nintention -> inention (删除 't')\ninention -> enention (将 'i' 替换为 'e')\nenention -> exention (将 'n' 替换为 'x')\nexention -> exection (将 'n' 替换为 'c')\nexection -> execution (插入 'u')\n\n2.分析\n3.代码\nclass Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        len1 = len(word1)\n        len2 = len(word2)\n\n        dp = [[0]*(len2+1) for i in range(len1+1)]\n\n        for i in range(1,len1+1):\n            dp[i][0] = i\n        for j in range(1,len2+1):\n            dp[0][j] = j\n        # 建立数组dp[][]来存储 以word1[i]为结尾的字符串 转换成 以word2[j]为结尾的字符串 所需的最小操作数\n        # 1、替换 word1[i] 把 word1[i] 替换成 word2[j] 需要 dp[i-1][j-1]+1步\n        # 2、删除 word1[i] 把 word1[i] 删除成 word1[i-1] 需要 dp[i][j-1]+1步\n        # 3、删除 word2[j] 把 word2[j] 删除成 word2[j-1] 需要 dp[i-1][j]+1步(增加word1和删除word2一个效果)\n        # print(dp)\n        for i in range(1,len1+1):\n            for j in range(1,len2+1):\n                if word1[i-1]==word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i-1][j]+1,dp[i][j-1]+1,dp[i-1][j-1]+1)\n        return dp[-1][-1]\n\n        # 我们需要进行插入、删除和修改操作将A串变为B串，定义c0，c1，c2分别为三种操作的代价\n        for i in range(1,len1+1):\n            for j in range(1,len2+1):\n                if word1[i-1]==word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n\n                    dp[i][j] = min(dp[i-1][j]+c0,dp[i][j-1]+c1,dp[i-1][j-1]+c2)\n        return dp[-1][-1]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-11 15:40:32\n"},"动态规划/不同的子序列_LeetCode_940.html":{"url":"动态规划/不同的子序列_LeetCode_940.html","title":"不同的子序列_LeetCode_940","keywords":"","body":"不同的子序列 II(LeetCode940困难)\n1.题目\n给定一个字符串 S，计算 S 的不同非空子序列的个数。\n因为结果可能很大，所以返回答案模 10^9 + 7.\n示例 1：\n输入：\"abc\"\n输出：7\n解释：7 个不同的子序列分别是 \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", 以及 \"abc\"。\n示例 2：\n输入：\"aba\"\n输出：6\n解释：6 个不同的子序列分别是 \"a\", \"b\", \"ab\", \"ba\", \"aa\" 以及 \"aba\"。\n示例 3：\n输入：\"aaa\"\n输出：3\n解释：3 个不同的子序列分别是 \"a\", \"aa\" 以及 \"aaa\"。\n提示：\n\nS 只包含小写字母。\n1 \n\n2.分析\n我们假设子序列可以为空，最后的结果减一就可以得到正确答案，dp[i]表示数组前i项构成的不同子序列个数，\n初始值dp[0] ,前0个构成的子序列个数，‘’ == 1. ===>dp[0] =1\n\n如果数列第i项没有在之前出现过，那么dp[i] = dp[i-1]*2+1\n\n如果数列第i项在之前出现过，那么我们需要找到第i项对应的字符在前i-1个字符出现的最近位置。即0\n3.代码\n    def distinctSubseqII(self, S: str) -> int:\n        s_len = len(S)\n        dp = [0] * (s_len+1)\n        dp[0] = 1\n        history = {}\n        for i,k in enumerate(S, start = 1):\n            print(i,k)\n            tmp = history.get(S[i-1],None)\n            if tmp is None:\n                dp[i] = dp[i-1]*2\n            else:\n                dp[i] = 2*dp[i-1] - dp[tmp-1]\n            history[S[i-1]] = i\n        # print(dp)\n        return dp[-1] -1\n\n# 用动态规划先求出包括空序列的所有子序列，再返回答案之前再减去空序列。\nclass Solution(object):\n    def distinctSubseqII(self, S):\n        dp = [1]\n        last = {}\n        for i, x in enumerate(S):\n            dp.append(dp[-1] * 2)\n            if x in last:\n                dp[-1] -= dp[last[x]]\n            last[x] = i\n\n        return (dp[-1] - 1) % (10**9 + 7)\n\n     def distinctSubseqII(self, S):\n        s_len = len(S)\n        dp = [1] * (s_len+1)\n        history = {}\n        for i,k in enumerate(S):\n            dp[i+1] = dp[i]*2\n            if k in history:\n                dp[i+1] -= dp[history[k]]\n            history[k] = i\n\n        return (dp[-1] - 1) % (10**9 + 7)\n\n    实现上，我们需要建立一个26大小的数组以容纳不同字母结尾的字符串个数。每当我们遍历到一个新的字母时，\n    此时我们只要将数组中所有结果加起来然后再加1即为以新的字母为结尾的字符串总数。最后我们只要将数组中的结果加起来即可。\n    def distinctSubseqII(self, S: str) -> int:\n        res = [0]*26\n        for i in S:\n            res[ord(i)-97] = sum(res) + 1\n\n        return sum(res) % (10**9 + 7)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-11 15:57:57\n"},"动态规划/解码方法_LeetCode_91.html":{"url":"动态规划/解码方法_LeetCode_91.html","title":"解码方法_LeetCode_91","keywords":"","body":"解码方法(LeetCode_91)\n1.题目\n一条包含字母 A-Z 的消息通过以下方式进行了编码：\n'A' -> 1\n'B' -> 2\n...\n'Z' -> 26\n给定一个只包含数字的非空字符串，请计算解码方法的总数。\n示例 1:\n输入: \"12\"\n输出: 2\n解释: 它可以解码为 \"AB\"（1 2）或者 \"L\"（12）。\n示例 2:\n输入: \"226\"\n输出: 3\n解释: 它可以解码为 \"BZ\" (2 26), \"VF\" (22 6), 或者 \"BBF\" (2 2 6) 。\n2.分析\n动态规划：\n\ndp【n】表示n个字符可编码数，\n如果s【n-1】!= '0' , 则dp 【n】= dp【n-1】\n如果s【n-2】,s【n-1】 组合成的数字是10~26，则dp【n】 = dp【n-1】+dp【n-2】\n\n3.代码\n    def numDecodings(self, s: str) -> int:        \n        if s == '' or s[0] == '0':\n            return 0\n        s_len = len(s)\n        dp = [0] *(s_len+1)\n        dp[0] = dp[1] = 1\n        for i in range(2, s_len+1):\n            if s[i-1] != '0':\n                dp[i] += dp[i-1]\n            if s[i-2] == '1' or (s[i-2] =='2'and s[i-1]\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-17 15:58:03\n"},"动态规划/最长递增子序列的个数_LeetCode_673.html":{"url":"动态规划/最长递增子序列的个数_LeetCode_673.html","title":"最长递增子序列的个数_LeetCode_673","keywords":"","body":"最长递增子序列的个数(LeetCode_673)\n1.题目\n给定一个未排序的整数数组，找到最长递增子序列的个数。\n示例 1:\n输入: [1,3,5,4,7]\n输出: 2\n解释: 有两个最长递增子序列，分别是 [1, 3, 4, 7] 和[1, 3, 5, 7]。\n示例 2:\n输入: [2,2,2,2,2]\n输出: 5\n解释: 最长递增子序列的长度是1，并且存在5个子序列的长度为1，因此输出5。\n2.分析\n做这道题目之前，建议先去看看300号问题，本题在300号问题的基础上做了一些改变，需要多使用一个数组来记录LIS的组合数\n3.代码\nclass Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        n = len(nums)\n        if nnums[j]: # 如果j位的数值比i位小，则可加入i位的LIS比较队列\n                    # dp[i] = max(dp[i], dp[j]+1)\n                    if dp[i]dp[j]+1:不需要做任何调整\n\n        ans = 0\n        tmp = max(dp)\n        for i in range(n):\n            if dp[i] == tmp:\n                ans += dp_nums[i]\n\n        return ans\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 11:15:42\n"},"动态规划/最长连续递增序列_LeetCode_674.html":{"url":"动态规划/最长连续递增序列_LeetCode_674.html","title":"最长连续递增序列_LeetCode_674","keywords":"","body":"最长连续递增序列\n1.题目\n给定一个未经排序的整数数组，找到最长且连续的的递增序列。\n示例 1:\n输入: [1,3,5,4,7]\n输出: 3\n解释: 最长连续递增序列是 [1,3,5], 长度为3。\n尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。\n\n示例 2:\n输入: [2,2,2,2,2]\n输出: 1\n解释: 最长连续递增序列是 [2], 长度为1。\n注意：数组长度不会超过10000。\n2.分析\n要求时间复杂度为O（n）\n3.代码\n动态规划\nclass Solution:\n    def findLengthOfLCIS(self, nums: List[int]) -> int:\n        n = len(nums)\n        if nnums[i-1]:\n                dp[i] = dp[i-1]+1\n\n        return max(dp)\n\nclass Solution:\n    def findLengthOfLCIS(self, nums: List[int]) -> int:\n        nums_len = len(nums)\n        if len(nums)nums[i-1]:\n                count += 1\n                res = max(res, count)\n            else:\n                count = 1\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 12:07:40\n"},"逻辑思维/":{"url":"逻辑思维/","title":"逻辑思维","keywords":"","body":"逻辑思维\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-08 00:43:19\n"},"逻辑思维/Nim Game.html":{"url":"逻辑思维/Nim Game.html","title":"Nim Game","keywords":"","body":"Nim Game\n1.题目\n一张纸上，画若干条线，双方一人划一次，每次划掉1~3条线。可以选择画1条，也可以划2条，也可以3条。具体划去几条线完全看自己的策略。谁划掉最后一条线，就是赢家。 \n现在你作为先手，在线条总数为多少的时候，你必赢呢，又在多少的时候必输呢？\n可不可以用一个函数来判断在线条总是为x时你的输赢情况呢？这样你以后跟别人玩这个游戏的时候就不会输啦。\n2.分析\n\n每人每步最多划三条线，所以线的总是至少为4条。当线的总数为4条的时候，不管先手划几条线，后手都有应对的方法，先手必输。\n所以你会发现8条也是必输，8条线可以分成两个部分，每个部分四条线。自然先手还是必输。4这个数字还真是不太吉利。\n当线的总数为5条的时候，先手先划掉一条线，后手就等于是在4条线的情况下先手，自然后手输。\n而6条 7条 先手都可以划掉2条线和3条线来让后手落入“4”的陷阱。\n所以我们可以看出，我们只要远离”4“就行了。当线的总数不是4的倍数的时候，先手必赢。\n看到这里，恭喜你掌握了必胜法则，下次各位盆宇就可以用这个游戏跟别人打赌了。\n3.代码\nreturn n%4 == 0\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-23 00:03:12\n"},"逻辑思维/爬楼梯.html":{"url":"逻辑思维/爬楼梯.html","title":"爬楼梯","keywords":"","body":"爬楼梯\n1.题目\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n注意：给定 n 是一个正整数。\n示例 1：\n输入： 2\n输出： 2\n解释： 有两种方法可以爬到楼顶。\n1.  1 阶 + 1 阶\n2.  2 阶\n示例 2：\n输入： 3\n输出： 3\n解释： 有三种方法可以爬到楼顶。\n1.  1 阶 + 1 阶 + 1 阶\n2.  1 阶 + 2 阶\n3.  2 阶 + 1 阶\n2.分析\n自底向上的动态规划\n3.代码\n    def climbStairs(self, n: int) -> int:\n        a, b = 0, 1\n        for i in range(n):\n            a, b = b, a+b\n        return b\n\n\n        # 法二\n        # if n==1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # a, b = 1, 2\n        # for i in range(2,n):\n        #     a, b  = b, a+b\n        # return b\n\n超时算法\n    def climbStairs(self, n: int) -> int:\n        法一：超时\n        if n==1:\n            return 1\n        if n == 2:\n            return 2\n\n        return self.climbStairs(n-1) + self.climbStairs(n-2)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:37:13\n"},"逻辑思维/乘积最大子序列 LeetCode 152.html":{"url":"逻辑思维/乘积最大子序列 LeetCode 152.html","title":"乘积最大子序列_LeetCode 152","keywords":"","body":"乘积最大子序列(LeetCode 152)\n1.题目\n给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。\n示例 1:\n输入: [2,3,-2,4]\n输出: 6\n解释: 子数组 [2,3] 有最大乘积 6。\n示例 2:\n输入: [-2,0,-1]\n输出: 0\n解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。\n2.分析\n\n一种方法类似于最大前缀和\n另外一种方法，我们要保存前面走过的路，里面的最大最小值，因为这是乘法，乘法的话，会出现最大值，是由两个负数乘起来的。但是负数是最小的\n\n3.代码\n最大前缀和\n    # 先计算从左到右的相乘的最大值，再计算从右到左的最大值；再将两组最大值相比\n    # \n    def maxProduct(self, A):\n        B = A[::-1]\n        for i in range(1, len(A)):\n            # 输入[-3,0,1,-2]\n            # 不加 or 1，输出[-3, 0, 0, 0] [-2, -2, 0, 0]\n            # 所以我们要把A【i】等于0时，置为1\n            A[i] *= (A[i - 1] or 1)\n            B[i] *= (B[i - 1] or 1)\n        print(A,B)\n        return max(max(A),max(B))\n\n保留前面计算过的最大最小值\n    def maxProduct(self, nums: List[int]) -> int:\n        #  由于有正负，所以每次相乘完毕后，应该保留最大和最小值，也就是最大正数，最小负数\n        maxnum = nums[0]\n        minnum = nums[0]\n        res = nums[0]\n        for i in nums[1:]:\n            print(i)\n            maxnum_temp = maxnum\n            minnum_temp = minnum\n           # 1,-2,i=3，这一次来的数是i=3，则这次的最大，应该就是它自己，不需要乘以前面的最大或者最小\n            maxnum = max(i, i*maxnum_temp, i*minnum_temp)\n            minnum = min(i, i*maxnum_temp, i*minnum_temp)\n            res = max(res,maxnum)\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:36:00\n"},"逻辑思维/三个数的最大乘积 LeetCode 628.html":{"url":"逻辑思维/三个数的最大乘积 LeetCode 628.html","title":"三个数的最大乘积_LeetCode 628","keywords":"","body":"三个数的最大乘积 LeetCode 628\n1.题目\n给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。\n示例 1:\n输入: [1,2,3]\n输出: 6\n示例 2:\n输入: [1,2,3,4]\n输出: 24\n注意:\n\n给定的整型数组长度范围是[3,104]，数组中所有的元素范围是[-1000, 1000]。\n输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。\n\n2.分析\n\n先排好序\n然后取最大的3个数相乘，或者最小的两个数（负数）和最大的一个数相乘\n\n3.代码\nclass Solution:\n    def maximumProduct(self, nums: List[int]) -> int:\n        nums.sort()\n        return max(nums[0]*nums[1]*nums[-1], nums[-1]*nums[-2]*nums[-3])\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:29\n"},"逻辑思维/买卖股票的最佳时机 LeetCode 121.html":{"url":"逻辑思维/买卖股票的最佳时机 LeetCode 121.html","title":"买卖股票的最佳时机_LeetCode 121","keywords":"","body":"买卖股票的最佳时机(LeetCode 121)\n1.题目\n给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。\n如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。\n注意你不能在买入股票前卖出股票。\n示例 1:\n输入: [7,1,5,3,6,4]\n输出: 5\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。\n示例 2:\n输入: [7,6,4,3,1]\n输出: 0\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。\n2.分析\n3.代码\n    def maxProfit(self, prices: List[int]) -> int:\n\n        if len(prices) == 0:\n            return 0\n\n        # 动态规划，一般都要设这两个变量\n        result = 0 \n        min_price = prices[0]\n\n        for price in prices[1:]:\n            result = max(result,price-min_price)\n            min_price = min(min_price,price)\n        print(result)\n        return result\n\n自写\n    def maxProfit(self, prices):\n        if len(prices) == 0:\n            return 0\n        res = 0\n        min_price = prices[0]\n        for i in prices[1:]:\n            res = max(res, i-min_price)\n            if i \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:30\n"},"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html":{"url":"逻辑思维/买卖股票的最佳时机 II LeetCode 122.html","title":"买卖股票的最佳时机 II_LeetCode 122","keywords":"","body":"买卖股票的最佳时机 II(LeetCode 122)\n1.题目\n给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。\n设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。\n注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。\n示例 1:\n输入: [7,1,5,3,6,4]\n输出: 7\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。\n示例 2:\n输入: [1,2,3,4,5]\n输出: 4\n解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。\n     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。\n示例 3:\n输入: [7,6,4,3,1]\n输出: 0\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。\n2.分析\n\n自己手写代码\n动态规划\n\n3.代码\n自己写\n    def maxProfit(self, prices):\n        if len(prices)==0: return 0\n\n        res = 0\n        min_price = prices[0]\n        for i in prices[1:]:\n            if i-min_price>0:\n                res += (i-min_price)\n                # 这一步是关键，卖出之后我们必须调整，初始进价\n                min_price = i\n                # print(res)\n            # 这一步是基本操作\n            if i \n动态规划\ndef maxProfit(self, prices: List[int]) -> int:    \n    # 当明天的价格比今天的价格贵的时候我们今天买，明天卖，这样能够获取最大利润。\n    if len(prices) == 0:\n        return 0\n\n    result = 0\n    for i in range(len(prices)-1):\n        if prices[i]\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:30\n"},"逻辑思维/两数相加.html":{"url":"逻辑思维/两数相加.html","title":"两数相加","keywords":"","body":"两数相加\n1.题目\n给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n示例：\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n输出：7 -> 0 -> 8\n原因：342 + 465 = 807\n2.分析\n3.代码\n    def addTwoNumbers(self, l1, l2):\n       cur = ret = ListNode(0)\n        add = 0\n        while l1 or l2 or add:\n            val = (l1.val if l1 else 0) + (l2.val if l2 else 0) + add\n            add = val // 10\n            cur.next = ListNode(val % 10)\n            cur = cur.next\n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return ret.next\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:29\n"},"逻辑思维/两数相加-链表 LeetCode 2.html":{"url":"逻辑思维/两数相加-链表 LeetCode 2.html","title":"两数相加-链表 LeetCode 2","keywords":"","body":"两数相加-链表（LeetCode 2）\n1.题目\n给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n示例：\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n输出：7 -> 0 -> 8\n原因：342 + 465 = 807\n\n2.分析\n3.代码\n    def addTwoNumbers(self, l1, l2):\n        cur = ret = ListNode(0)\n        add = 0\n        while l1 or l2 or add:\n            val = (l1.val if l1 else 0) + (l2.val if l2 else 0) + add\n            add = val // 10\n            cur.next = ListNode(val % 10)\n            cur = cur.next\n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return ret.next\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:35:37\n"},"逻辑思维/盛最多水的容器.html":{"url":"逻辑思维/盛最多水的容器.html","title":"盛最多水的容器","keywords":"","body":"盛最多水的容器\n1.题目\n给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n说明：你不能倾斜容器，且 n 的值至少为 2。\n\n图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\n示例:\n输入: [1,8,6,2,5,4,8,3,7]\n输出: 49\n2.分析\n\n参照这 Leetcode 125: 验证回文串、 Leetcode 344: 验证回文串、 Leetcode 167: 两数之和 II -  输入有序数组、 Leetcode 345: 反转字符\n串中的元音字母几篇文章中的解题思路。我们通过设置两个指针，分别指向数组的头l和尾r，计算容器可以容纳多少水contain。\n我们知道想要容乃的水最多，最好的情况是l和r都是最大，然后二者离的最远，但是这是理想情况，我们最一般的情况是二者离的足够远，但是二者都不是很大,二者都很大，但是二者离的近\n所以我们一开始从两边考虑就是考虑的第一种可能。如果这个时候num[l]  num[r]，我们就需要将r--。而num[l] == num[r]，l++或者r--都可以。\n\n3.代码\n    def maxArea(self, height: 'List[int]') -> 'int':\n\n        # 不知道比较次数的，不能用for循环，用while循环       \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        while left \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 23:37:56\n"},"逻辑思维/摩尔投票算法.html":{"url":"逻辑思维/摩尔投票算法.html","title":"摩尔投票算法","keywords":"","body":"摩尔投票算法\n\n假设有这样一个场景：票选村长，每人可投一票，我们将候选村长从1开始编号，村民们在票上写上候选村长的编号即可完成投票。那么最后统计的票可形成一个整型数组。那么谁是村长呢？票数过半的那个人。\n摩尔投票算法可以快速的计算出一个数组中出现次数过半的数即大多数（majority），算法核心思想是同加，异减。我们举个例子。\n假设数组是：[1,2,1,1,2,1]。算法步骤如下：\n\n1。当前大多数是1，得分置1\n2。与当前大多数不同，得分 - 1，得分为0，当前大多数 = 1\n1。与当前大多数不同，得分为0，所以设置当前大多数 1 -> 1，得分置1\n1。与当前大多数相同，得分 + 1，得分为2，当前大多数 = 1\n2。与当前大多数不同，得分 - 1 ，得分为1，当前大多数 = 1\n1。与当前大多数相同，得分 + 1，得分为2，当前大多数 = 1\n\n\n这意味着1是这个数组中出现次数过半的数。\n可以感受得到，算法会保存一个当前大多数，和得分，当遇到一个数不是当前大多数时，得分会减一，当减到0时，大多数会发生改变，并且重置得分为1。\n这里需要区分的是，摩尔算法不能用来得到众数（mode），例如数组：[1,1,1,2,2,3,3,4,4]，摩尔算法得出最后的结果应该是4，但4并不是众数，可是显然4也不是大多数，那是因为，大多数是指出现次数过半的数，而这个数组中没有这样的数，所以摩尔算法是是失效的，对于这种情况采取需要重新投票。\n出现次数超过一半的数\nLeetCode原题：169. Majority Element\n这里要求出现次数大于一半，所以直接套用摩尔投票算法即可得到答案。\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        a, ca = None, 0\n        for n in nums:\n            if   a == n : ca += 1\n            elif ca == 0: a, ca = n, 1\n            else        : ca -= 1\n    return a\n\n\n出现次数超过数组1/3长\n\nLeetCode原题：229. Majority Element II\n\n还能用摩尔投票法吗？答案当然是要，但是需要变通一下。\n\n需要注意的是出现次数超过1/3数组长的数，也许会有多个，例子如下：\n\n[1,1,1,2,2,2,3,3]，数组1/3长=2（向下取整），所以1和2都是符合条件的。\n\n但最多只能是2个，证明如下：\n\n证明 :\n90个数31个1，31个2，其余数字随便，也就是接近边界时，最多才两个满足条件：1，2\n\n综上，一个数组中不可能存在2个以上的数它们出现的次数大于n/3。\n\n回到题目\n\n如果我们在使用摩尔算法时，同时记录两个大多数，会怎么样呢？直觉告诉我，这会得到一个大多数，和一个出现次数仅次于大多数的数，但是这两个数不一定会比数组长的1/3大\n\n所以我们得到它们后，还需要检查它们出现的次数是否符合条件。\n\n\n    def majorityElement(self, nums):\n        a, b, ca, cb, ans = None, None, 0, 0, []\n        for i in nums:\n            if   i  == a: ca += 1\n            elif i  == b: cb += 1\n            elif ca == 0: a, ca = i, 1\n            elif cb == 0: b, cb = i, 1\n            else:         ca, cb = ca - 1, cb - 1\n        print(a, b)\n        ca, cb = 0, 0\n        for i in nums:\n            if   i == a: ca += 1\n            elif i == b: cb += 1\n\n        if ca > len(nums)//3:\n            ans.append(a)\n        if cb > len(nums)//3:\n            ans.append(b)\n        return ans\n\n思路一：数组排序后，如果符合条件的数存在，则一定是数组中间那个数。（比如：1，2，2，2，3；或2，2，2，3，4；或2，3，4，4，4等等）\n这种方法虽然容易理解，但由于涉及到快排sort，其时间复杂度为O(NlogN)并非最优；\nclass Solution {\npublic:\n    int MoreThanHalfNum_Solution(vector numbers)\n    {\n        // 因为用到了sort，时间复杂度O(NlogN)，并非最优\n        if(numbers.empty()) return 0;\n\n        sort(numbers.begin(),numbers.end()); // 排序，取数组中间那个数\n        int middle = numbers[numbers.size()/2];\n\n        int count=0; // 出现次数\n        for(int i=0;inumbers.size()/2) ? middle :  0;\n    }\n};\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 09:03:16\n"},"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html":{"url":"逻辑思维/最大数 LeetCode 179 数字拼接后最大.html","title":"最大数 LeetCode 179 数字拼接后最大","keywords":"","body":"最大数(LeetCode 179)-(数字拼接后最大)\n1.题目\n给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。\n示例 1:\n输入: [10,2]\n输出: 210\n示例 2:\n输入: [3,30,34,5,9]\n输出: 9534330\n说明: 输出结果可能非常大，所以你需要返回一个字符串而不是整数。\n2.分析\n首先现将数字转化为字符\n判断x+y 和 y+x谁大\n\n1. if x+y>y+x: 则不交换   比如2，1 ：    21>12 (字符串拼接比较哦)\n\n1..if x+ypython：(内置排序方法)\nclass Solution:\n\n    # 自定义排序算法\n    def largestNumber(self, nums: List[int]) -> str:\n        if sum(nums) == 0:\n            return '0'\n        from functools import cmp_to_key\n        def func(x,y):\n            if x+yy+x:\n                return -1\n            else:\n                return 0\n\n        arr = map(str, nums)\n        res = sorted(arr, key=cmp_to_key(func))\n        # print(res)\n        return ''.join(res)\n\npython：自定义排序方法——》冒泡排序\n原始数据：1，2，4，3\n\n转化为char后再排序：\n\n第一趟冒泡：2，4，3，1\n第二趟冒泡：4，3，2，1\n第三趟冒泡：4，3，2，1 没有发生交换，排序结束\n\n将排序好的数据，拼接成字符串\n    def largestNumber(self, nums: List[int]) -> str:\n        if sum(nums) == 0:\n            return '0'\n        nums = list(map(str,nums))\n        for i in range(len(nums)-1):\n            #如果某一趟不冒泡了没有发生交换过程），就代表排好序了，\n            exchange = False\n            for j in range(len(nums)-i-1):\n                if nums[j+1]+nums[j]>nums[j]+nums[j+1]:\n                    nums[j+1],nums[j] = nums[j],nums[j+1]\n                    exchange = True\n            if not exchange:\n                break\n        return ''.join(nums)\n\n3.代码\n如2 \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 11:53:59\n"},"逻辑思维/最小编辑距离.html":{"url":"逻辑思维/最小编辑距离.html","title":"最小编辑距离","keywords":"","body":"最小编辑距离\n1.题目\n给定两个单词 word1 和 word2，计算出将 word1 转换成 word2 所使用的最少操作数 。\n你可以对一个单词进行如下三种操作：\n\n插入一个字符\n删除一个字符\n替换一个字符\n\n示例 1:\n输入: word1 = \"horse\", word2 = \"ros\"\n输出: 3\n解释: \nhorse -> rorse (将 'h' 替换为 'r')\nrorse -> rose (删除 'r')\nrose -> ros (删除 'e')\n\n示例 2:\n输入: word1 = \"intention\", word2 = \"execution\"\n输出: 5\n解释: \nintention -> inention (删除 't')\ninention -> enention (将 'i' 替换为 'e')\nenention -> exention (将 'n' 替换为 'x')\nexention -> exection (将 'n' 替换为 'c')\nexection -> execution (插入 'u')\n\n2.分析\n3.代码\ndef minDistance(self, word1, word2):\n        word1_len, word2_len = len(word1), len(word2)\n        if word1_len == word2_len == 0:\n            return 0\n        if word1_len == None:\n            return word2_len\n        if word2_len == None:\n            return word1_len\n        mem = [[0]*(word2_len+1) for _ in range(word1_len+1)]\n        for i in range(1, word1_len+1):\n            mem[i][0] = i\n        for j in range(1, word2_len+1):\n            mem[0][j] = j\n        for i in range(1, word1_len+1):\n            for j in range(1, word2_len+1):\n                # 注意：这儿为什么是word1[i-1],而不是word1[i],是因为这是对于字符串而言的，而不是矩阵\n                mem[i][j] = min(mem[i-1][j-1]+(word1[i-1]!=word2[j-1]), mem[i][j-1]+1, mem[i-1][j]+1)\n        # for _ in mem:\n        #     print(_)\n        return mem[-1][-1]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:59\n"},"逻辑思维/分发糖果_LeetCode_135.html":{"url":"逻辑思维/分发糖果_LeetCode_135.html","title":"分发糖果_LeetCode_135","keywords":"","body":"分发糖果(LeetCode_135)\n1.题目\n老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。\n你需要按照以下要求，帮助老师给这些孩子分发糖果：\n每个孩子至少分配到 1 个糖果。\n\n相邻的孩子中，评分高的孩子必须获得更多的糖果。\n那么这样下来，老师至少需要准备多少颗糖果呢？\n\n那么这样下来，老师至少需要准备多少颗糖果呢？\n示例 1:\n输入: [1,0,2]\n输出: 5\n解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。\n示例 2:\n输入: [1,2,2]\n输出: 4\n解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。\n     第三个孩子只得到 1 颗糖果，这已满足上述两个条件。\n2.分析\n...\n3.代码\nclass Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(ratings)\n        res = n\n        arr = [0] * n\n        # 先正序遍历，如果后一位比前一位高分，就给比前一位多1的糖果，否则给1\n        for i in range(1,n):\n            if ratings[i]>ratings[i-1]:\n                arr[i] = arr[i-1]+1\n\n        # 在倒叙遍历，如果前一位比后一位高分并且得到的糖果小于或等于后一位，就给前一位孩子比后一位孩子多一个糖果\n        # [1,2,3,99,8,7,6,5,4,3,2,1] 99就是上面的特殊情况 99的糖果数应该为8的糖果数+1\n        for j in range(n-2,-1,-1):\n            if ratings[j]>ratings[j+1] and arr[j]\n优化\nclass Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(ratings)\n        res = n\n        arr = [0] * n\n        # 先正序遍历，如果后一位比前一位高分，就给比前一位多1的糖果\n        for i in range(1,n):\n            if ratings[i]>ratings[i-1]:\n                arr[i] = arr[i-1]+1\n\n        # 倒序过程中,统计数量\n        res += arr[-1]\n        # 在倒叙遍历，如果前一位比后一位高分并且得到的糖果小于或等于后一位，就给前一位孩子比后一位孩子多一个糖果\n        for j in range(n-2,-1,-1):\n            if ratings[j]>ratings[j+1] and arr[j]\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-24 10:09:32\n"},"逻辑思维/岛屿周长_LeetCode_463.html":{"url":"逻辑思维/岛屿周长_LeetCode_463.html","title":"岛屿周长_LeetCode_463","keywords":"","body":"岛屿的周长\n1.题目\n给定一个包含 0 和 1 的二维网格地图，其中 1 表示陆地 0 表示水域。\n网格中的格子水平和垂直方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。\n岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。\n示例 :\n输入:\n\n[[0,1,0,0],\n [1,1,1,0],\n [0,1,0,0],\n [1,1,0,0]]\n\n输出: 16\n解释: 它的周长是下面图片中的 16 个黄色的边：\n\n2.分析\n3.代码\n    def islandPerimeter(self, grid: List[List[int]]) -> int:\n        res = 0\n        row, col = len(grid), len(grid[0])\n\n        for i in range(row):\n            for j in range(col):\n                if grid[i][j] == 1:\n                    res += 4\n                    if i>0 and grid[i-1][j] == 1:\n                        res -= 2\n                    if j>0 and grid[i][j-1] == 1:\n                        res -= 2\n\n        return res\n\n    # 由于岛屿内没有湖,所以只需要求出 北面(或南面) + 西面(或东面)的长度再乘2即可\n\n        def islandPerimeter(self, grid: List[List[int]]) -> int:\n            res = 0\n            row, col = len(grid), len(grid[0])\n\n            for i in range(row):\n                for j in range(col):\n                    if grid[i][j] == 1:\n                        if i==0 or grid[i-1][j] == 0:\n                            res += 1\n                        if j==0 or grid[i][j-1] == 0:\n                            res += 1\n            return res * 2\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-17 16:05:32\n"},"逻辑思维/三维形体的表面积_LeetCode_892.html":{"url":"逻辑思维/三维形体的表面积_LeetCode_892.html","title":"三维形体的表面积_LeetCode_892","keywords":"","body":"三维形体的表面积\n1.题目\n在 N  N 的网格上，我们放置一些 1  1 * 1  的立方体。\n每个值 v = grid[i][j] 表示 v 个正方体叠放在对应单元格 (i, j) 上。\n请你返回最终形体的表面积。\n示例 1：\n输入：[[2]]\n输出：10\n示例 2：\n输入：[[1,2],[3,4]]\n输出：34\n示例 3：\n输入：[[1,0],[0,2]]\n输出：16\n2.分析\n和463岛屿周长一模一样\n3.代码\nclass Solution:\n    def surfaceArea(self, grid: List[List[int]]) -> int:\n        row, col = len(grid), len(grid[0])\n\n        res = 0\n        for i in range(row):\n            for j in range(col):\n                if grid[i][j]:\n                    # 假设每个v=grid[i][j]都是独立的,每一个坐标都可以提供 4*(个数) + 2 面积.\n                    res += grid[i][j]*4 + 2\n                    # 减去面贴在一起的情况\n                    if i>0 and grid[i-1][j]:\n                        res -= min(grid[i][j], grid[i-1][j]) * 2\n                    if j>0 and grid[i][j-1]:\n                        res -= min(grid[i][j], grid[i][j-1]) * 2\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-17 17:45:39\n"},"逻辑思维/逆序对个数.html":{"url":"逻辑思维/逆序对个数.html","title":"逆序对个数","keywords":"","body":"1.题目描述\n在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007\n输入描述:\n题目保证输入的数组中没有的相同的数字数据范围：    对于%50的数据,size示例1\n输入\n1,2,3,4,5,6,7,0\n输出\n7\n2.分析\n\n3.代码\ncount = 0\nclass Solution:\n    def InversePairs(self, data):\n        global count\n        def MergeSort(lists):\n            global count\n            if len(lists) \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 22:49:59\n"},"回溯/":{"url":"回溯/","title":"回溯","keywords":"","body":"回溯\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-07 22:00:38\n"},"回溯/子集 LeetCode 78.html":{"url":"回溯/子集 LeetCode 78.html","title":"子集_LeetCode 78","keywords":"","body":"子集(LeetCode 78)\n1.题目\n给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。\n说明：解集不能包含重复的子集。\n示例:\n输入: nums = [1,2,3]\n输出:\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\n2.分析\n\n这个问题通过递归可以很快的解决，我们只要知道了subsets(nums[1:])，那么我们只要将nums[0]添加到每个子集的前面形成新的子集，然后将新的子集添加到result中即可。\n我们也可以通过回溯法来解决。\n\n3.代码\n递归\n    def subsets(self, nums):\n        if len(nums) == 0:return [[]]\n        res = self.subsets(nums[1:])\n        return res+[[nums[0]] + i for i in res]\n\n回溯\n    def subsets(self, nums):\n        X = []\n        self.func(nums, 0, [], X)\n        return X\n    def func(self, nums, k, x, X):\n        X.append(x)\n        for i in range(k, len(nums)):\n            self.func(nums, i+1, x+[nums[i]], X )\n\n\n\n         很多人很难理解为什么上面这种写法是回溯法，其实我们将push和pop的过程合到了一块，我在之前的一些问题中也没说明，所以在此解释一下。   \n        #self._subsets(nums, i + 1, path + [nums[i]], result)\n        # 可以将它分开写成\n        # path.append(nums[i])\n        # self._subsets(nums, i + 1, path, result)\n        # path.pop()\n\n全局变量可以这么设置\n    def subsets(self, nums):\n        self.X = []\n        self.func(nums, 0, [])\n        return self.X\n    def func(self, nums, k, x):\n        self.X.append(x)\n        for i in range(k, len(nums)):\n            self.func(nums, i+1, x+[nums[i]])\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-07 16:49:42\n"},"回溯/子集 II LeetCode 90.html":{"url":"回溯/子集 II LeetCode 90.html","title":"子集 II_LeetCode 90","keywords":"","body":"子集 II(LeetCode 90)\n1.题目\n给定一个可能包含重复元素的整数数组 *nums*，返回该数组所有可能的子集（幂集）。\n说明：解集不能包含重复的子集。\n示例:\n输入: [1,2,2]\n输出:\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n2.分析\n这个问题是之前问题 Leetcode 78 ：子集（最详细的解法！！！）的扩展。我们用之前的解法会出现这样的问题，[1,2]会出现两次\n，因为我们有两个2。最简单的思路就是添加一个判断if tmp not in result，并且我们要对nums排序，为什么？为了避免出现这\n种情况\n1,4,1\n4,1,1\n这两种在这个问题中是一种情况，但是在判断[1,4,1]==[4,1,1]，两者是不相同的。\n3.代码\ndef subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        X = []\n        nums.sort()\n        self.func(nums, 0, [], X)\n        return X\n    def func(self, nums, k, x, X):\n        X.append(x)\n        for i in range(k,len(nums)):\n            # if nums[i] in nums[k:i]:\n            #     continue\n            if k \n递归\n   def subsetsWithDup(self, nums):\n        if not nums:\n            return [[]]\n        nums.sort()\n        result = self.subsetsWithDup(nums[1:])\n        return result + [[nums[0]] + s for s in result if [nums[0]] + s not in result]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:52\n"},"回溯/组合 LeetCode 77.html":{"url":"回溯/组合 LeetCode 77.html","title":"组合_LeetCode 77","keywords":"","body":"组合(LeetCode 77)\n1.题目\n给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。\n示例:\n输入: n = 4, k = 2\n输出:\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]\n2.分析\n3.代码\nclass Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        nums = [i for i in range(1,n+1)]\n        self.X =[]\n        self.func(0,k,[],nums)\n        return self.X        \n    def func(self, index, length, x,nums):\n        # 如果现在re的长度加上后面能加上的所有的长度已经小于k了）,那么也剪枝\n        if len(x)+len(nums)-index \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:25\n"},"回溯/组合总和 LeetCode 39.html":{"url":"回溯/组合总和 LeetCode 39.html","title":"组合总和_LeetCode 39","keywords":"","body":"组合总和(LeetCode 39)\n1.题目\n给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。\ncandidates 中的数字可以无限制重复被选取。\n说明：\n\n所有数字（包括 target）都是正整数。\n解集不能包含重复的组合。 \n\n示例 1:\n输入: candidates = [2,3,6,7], target = 7,\n所求解集为:\n[\n  [7],\n  [2,2,3]\n]\n示例 2:\n输入: candidates = [2,3,5], target = 8,\n所求解集为:\n[\n  [2,2,2,2],\n  [2,3,3],\n  [3,5]\n]\n2.分析\n3.代码\npython先排序，后回溯，可以使用重复元素\ndef combinationSum(self, candidates, target):\n    # 可以不排序，答案也正确\n    candidates.sort()\n    self.res = []\n    self.func(0,target, candidates,[])\n    return self.res\n\ndef func(self,index, target,nums,x):\n    if 0 == target:\n        self.res.append(x[:])\n        return \n    for i in range(index,len(nums)):\n        k = target-nums[i]\n        if k >= 0:\n            # 注意这儿func（i）而不是func(i+1)\n            self.func(i,target-nums[i],nums,x+[nums[i]])\n\n不使用重复元素\ndef combinationSum(self, candidates, target):\n    candidates.sort()\n    self.res = []\n    self.func(0,target, candidates,[])\n    return self.res\n\ndef func(self,index, target,nums,x):\n    if 0 == target:\n        self.res.append(x[:])\n        return \n    for i in range(index,len(nums)):\n        k = target-nums[i]\n        if k >= 0:\n            self.func(i+1,target-nums[i],nums,x+[nums[i]])\n\n如 n = 3\n输出 【1,1,1】【1，2】【3】\n我们只需修改candidates为【i for i in range(n+1)】\n    def combinationSum(self, target):\n        candidates = [i for i in range(1,target+1)]\n        self.res = []\n        self.func(0,target, candidates,[])\n        return self.res\n\n    def func(self,index, target,nums,x):\n        if 0 == target:\n            self.res.append(x[:])\n            return \n        for i in range(index,len(nums)):\n            k = target-nums[i]\n            if k >= 0:\n                self.func(i,target-nums[i],nums,x+[nums[i]])\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:25\n"},"回溯/组合总和 II LeetCode 40.html":{"url":"回溯/组合总和 II LeetCode 40.html","title":"组合总和 II_LeetCode 40","keywords":"","body":"组合总和 II(LeetCode 40)\n1.题目\n给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。\ncandidates 中的每个数字在每个组合中只能使用一次。\n说明：\n\n所有数字（包括目标数）都是正整数。\n解集不能包含重复的组合。 \n\n示例 1:\n输入: candidates = [10,1,2,7,6,1,5], target = 8,\n所求解集为:\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n示例 2:\n输入: candidates = [2,5,2,1,2], target = 5,\n所求解集为:\n[\n  [1,2,2],\n  [5]\n]\n2.分析\n先排序，后去重\n去重,如【1，1，7】--->【1，7】，但是先保证数组有序，所以在这之前先sort\n3.代码\n    def combinationSum2(self, candidates, target):\n        candidates.sort()\n        len_nums = len(candidates)\n        self.X = []\n        self.func(0,target,[],candidates,len_nums)\n        return self.X\n    def func(self,index,target,x,nums,len_nums):\n        if target==0:\n            self.X.append(x[:])\n        for i in range(index, len_nums):\n            # 去重,如【1，1，7】--->【1，7】，但是先保证数组有序，所以在这之前先sort\n            if i > index and nums[i]==nums[i-1]:\n                    continue\n            if target - nums[i]>=0:\n                self.func(i+1,target-nums[i],x+[nums[i]],nums,len_nums)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:47:36\n"},"回溯/和为n的正整数组合.html":{"url":"回溯/和为n的正整数组合.html","title":"和为n的正整数组合","keywords":"","body":"和为n的正整数组合\n1.题目\n            # 如 n = 3\n            # 输出 【1,1,1】【1，2】【3】\n            # 我们只需修改candidates为【i for i in range(n+1)】\n2.分析\n回溯\n3.代码\n可以使用重复元素\n    def combinationSum(self, target):\n        candidates = [i for i in range(1,target+1)]\n        self.res = []\n        self.func(0,target, candidates,[])\n        return self.res\n\n    def func(self,index, target,nums,x):\n        if 0 == target:\n            self.res.append(x[:])\n            return \n        for i in range(index,len(nums)):\n            k = target-nums[i]\n            if k >= 0:\n                self.func(i,target-nums[i],nums,x+[nums[i]])\n\n不可使用重复元素\n    def combinationSum(self, target):\n        candidates = [i for i in range(1,target+1)]\n        self.res = []\n        self.func(0,target, candidates,[])\n        return self.res\n\n    def func(self,index, target,nums,x):\n        if 0 == target:\n            self.res.append(x[:])\n            return \n        for i in range(index,len(nums)):\n            k = target-nums[i]\n            if k >= 0:\n            # func(i+1)\n                self.func(i+1,target-nums[i],nums,x+[nums[i]])\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:16:41\n"},"回溯/全排列 LeetCode 46.html":{"url":"回溯/全排列 LeetCode 46.html","title":"全排列_LeetCode 46","keywords":"","body":"全排列(LeetCode 46)\n1.题目\n给定一个没有重复数字的序列，返回其所有可能的全排列。\n示例:\n输入: [1,2,3]\n输出:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n2.分析\n全排列是交换x[i],x[k] = x[k],x[i]，部分排列组合是append，pop\n3.代码\nclass Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        self.X = []\n        self.func(0, len(nums), nums)\n        return self.X\n    def func(self, index, length,x):\n        if index == length:\n            self.X.append(x[:])\n            return \n        for i in range(index,length):\n            x[i],x[index] = x[index],x[i]\n            self.func( index+1, length, x)\n            x[index],x[i] = x[i],x[index]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:36\n"},"回溯/全排列 II LeetCode 47.html":{"url":"回溯/全排列 II LeetCode 47.html","title":"全排列 II LeetCode 47","keywords":"","body":"全排列 II（LeetCode 47）\n1.题目\n给定一个可包含重复数字的序列，返回所有不重复的全排列。\n示例:\n输入: [1,1,2]\n输出:\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\n\n2.分析\n如baa，b只与第一个a交换，与第二个a不交换。去重复。\n3.代码\n最正确的代码\nclass Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        self.X = []\n        self.func(nums,0,len(nums))\n        return self.X\n    def func(self, li, k, length):\n        if k==length:\n            self.X.append(li[:])                    \n        else:\n            for i in range(k,length):\n                # 左包右不包\n                if li[i] in li[k:i]:\n                    continue\n                li[k], li[i] = li[i], li[k]\n                self.func(li, k+1, length)\n                li[i], li[k] = li[k], li[i]\n\n去重代码1\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        X = []\n        def tree(li, k, length):\n            if k==length:\n                X.append(li[:])                    \n            else:\n                for i in range(k,length):\n                    if nums[i] in nums[k:i]:\n                        continue\n                    li[k], li[i] = li[i], li[k]\n                    tree(li, k+1, length)\n                    li[i], li[k] = li[k], li[i]\n        tree(nums, 0, len(nums))\n        # print(X)\n        return X\n\n去重代码2\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        X = []\n        def tree(li, k, length):\n            mark = set()\n            if k==length:\n                X.append(li[:])                    \n            else:\n                for i in range(k,length):\n                    if nums[i] in mark:\n                        continue\n                    li[k], li[i] = li[i], li[k]\n                    tree(li, k+1, length)\n                    li[i], li[k] = li[k], li[i]\n                    mark.add(li[i])\n        tree(nums, 0, len(nums))\n        # print(X)\n        return X\n\n去重代码3\n    def conflict(self, start, end, nums):\n        for i in nums[start: end]:\n            if i == nums[end]:\n                return False\n        return True\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        X = []\n        def tree(li, k, length):\n            # mark = set()\n            if k==length:\n                X.append(li[:])                    \n            else:\n                for i in range(k,length):\n                    if not self.conflict(k, i, nums):\n                        continue\n                    li[k], li[i] = li[i], li[k]\n                    tree(li, k+1, length)\n                    li[i], li[k] = li[k], li[i]\n        tree(nums, 0, len(nums))\n        # print(X)\n        return X\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:36\n"},"回溯/分割回文串 LeetCode 131.html":{"url":"回溯/分割回文串 LeetCode 131.html","title":"分割回文串_LeetCode 131","keywords":"","body":"分割回文串(LeetCode 131)\n1.题目\n给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。\n返回 s 所有可能的分割方案。\n示例:\n输入: \"aab\"\n输出:\n[\n  [\"aa\",\"b\"],\n  [\"a\",\"a\",\"b\"]\n]\n2.分析\n\n回溯法\n一个字符一个字符累加，这儿是个关键技巧\n\n3.代码\n递归、回溯\n    def partition(self, s):\n        X = []\n        self.func(s,0,[],X)\n        return X\n    def func(self, s, index, x, X):\n        if index == len(s):\n            X.append(x[:])\n        else:\n\n            # 还有着而需要注意回溯思想，我们只需要单条线走通，其它的就交给回溯算法本身去工作\n            # 一个字符一个字符累加，关键技巧\n            for i in range(index+1,len(s)+1):\n                if s[index:i] == s[index:i][::-1]:\n                    x.append(s[index:i])\n                    self.func(s,i,x,X)\n                    x.pop()\n\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:50:18\n"},"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"url":"回溯/单词搜索 Leetcode 79 经典回溯,深度优先.html","title":"单词搜索_Leetcode_79 经典回溯，深度优先","keywords":"","body":"单词搜索(Leetcode 79)(经典回溯，深度优先)\n1.题目\n给定一个二维网格和一个单词，找出该单词是否存在于网格中。\n单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。\n示例:\nboard =\n[\n  ['A','B','C','E'],\n  ['S','F','C','S'],\n  ['A','D','E','E']\n]\n\n给定 word = \"ABCCED\", 返回 true.\n给定 word = \"SEE\", 返回 true.\n给定 word = \"ABCB\", 返回 false.\n\n2.分析\n​    使用DFS，先在 board 中搜索 word 中第一个字符，再以此字符为起点进行 DFS 搜索，若搜索出的路径与 word 一致，则在网格中存在此单词。\n​    为了避免循环搜索，我们还要将本轮深度优先搜索中搜索过的数字变一下，等递归回来之后再变回来。实现这个特性最简单的方法就是异或上一个特定数，然后再异或回来\n​    (这儿也可以再使用一个矩阵，存放访问标志)，但是空间消耗太大。\n3.代码\npython代码\nclass Solution:\n    def exist(self,board,word):\n        self.path = []\n        row,col = len(board),len(board[0])\n        for i in range(row):\n            for j in range(col):\n                index = 0\n                if self.func(board,index,i,j,word):\n                    return True\n        return False\n\n    def func(self,board,index,i,j,word):\n        if i=len(board) or j >=len(board[0]) or (i,j) in self.path or word[index] != board[i][j]:\n            return False\n        # 注意这儿，字符串长度减一,因为上面的if判断，等于校验了最后个字符，比如word='ab',\n        # index = 0,a\n        # index = 1,时，如果能进来那么上面的if语句已经判断了b字符\n        if index == len(word)-1:\n            return True\n        self.path.append((i,j))\n        if self.func(board,index+1,i-1,j,word) or self.func(board,index+1,i,j-1,word) or self.func(board,index+1,i+1,j,word) or self.func(board,index+1,i,j+1,word):\n            return True\n        # 走不通，那么我们就要把这条路删除掉。回到原来的模样\n        self.path.pop()\n        return False\n\npython2\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        self.path = []\n\n        row,col = len(board),len(board[0])\n        for i in range(row):\n            for j in range(col):\n                if self.find(board,word,i,j):\n                    return True\n        return False\n\n        # 经典\n        # for idx,i in enumerate(board):\n        #     for jdx,j in enumerate(i):\n        #         if self.find(board,word,idx,jdx):\n        #             return True\n        # return False\n\n    def find(self,board,word,i,j):\n        # 这儿等于也是错的，也要退出      (i,j) in self.path 就是检验是否走重复的路，我们也可以额外定义一个标志数组\n        if i=len(board) or j >=len(board[0]) or (i,j) in self.path or word[0] != board[i][j]:\n            return False\n\n        word = word[1:]\n        self.path.append((i,j))   \n\n        # 减为空串，说明都匹配了\n        if not word:\n            return True \n\n        if self.find(board,word,i-1,j) or self.find(board,word,i,j-1) or self.find(board,word,i+1,j) or self.find(board,word,i,j+1):\n            return True\n\n        self.path.pop()\n        return False\n\nC++\nclass Solution {\npublic:\n    /**\n     * @param board: A list of lists of character\n     * @param word: A string\n     * @return: A boolean\n     */\n    bool exist(vector > &board, string word) {\n        // write your code here\n        int sizeRow = board.size(), sizeStr = word.size();\n        if(sizeRow  > path;\n\n        for(i=0; i > &board, string word, int i, int j, int wordStart) {\n        if(wordStart == word.size()) {\n            return true;\n        }\n        else if(i=board.size() || j= board[0].size() || \n                board[i][j]!=word[wordStart])\n        {\n            return false;\n        } \n\n        board[i][j] ^= 255;\n        bool result = (DFSFind(board, word, i-1, j,   wordStart+1) \n                    || DFSFind(board, word, i,   j-1, wordStart+1) \n                    || DFSFind(board, word, i+1, j,   wordStart+1) \n                    || DFSFind(board, word, i,   j+1, wordStart+1));\n\n        board[i][j] ^= 255;\n        return result;\n    }\n};\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:48:59\n"},"回溯/摩尔投票算法.html":{"url":"回溯/摩尔投票算法.html","title":"摩尔投票算法","keywords":"","body":"摩尔投票算法\n\n假设有这样一个场景：票选村长，每人可投一票，我们将候选村长从1开始编号，村民们在票上写上候选村长的编号即可完成投票。那么最后统计的票可形成一个整型数组。那么谁是村长呢？票数过半的那个人。\n摩尔投票算法可以快速的计算出一个数组中出现次数过半的数即大多数（majority），算法核心思想是同加，异减。我们举个例子。\n假设数组是：[1,2,1,1,2,1]。算法步骤如下：\n\n1。当前大多数是1，得分置1\n2。与当前大多数不同，得分 - 1，得分为0，当前大多数 = 1\n1。与当前大多数不同，得分为0，所以设置当前大多数 1 -> 1，得分置1\n1。与当前大多数相同，得分 + 1，得分为2，当前大多数 = 1\n2。与当前大多数不同，得分 - 1 ，得分为1，当前大多数 = 1\n1。与当前大多数相同，得分 + 1，得分为2，当前大多数 = 1\n\n\n这意味着1是这个数组中出现次数过半的数。\n可以感受得到，算法会保存一个当前大多数，和得分，当遇到一个数不是当前大多数时，得分会减一，当减到0时，大多数会发生改变，并且重置得分为1。\n这里需要区分的是，摩尔算法不能用来得到众数（mode），例如数组：[1,1,1,2,2,3,3,4,4]，摩尔算法得出最后的结果应该是4，但4并不是众数，可是显然4也不是大多数，那是因为，大多数是指出现次数过半的数，而这个数组中没有这样的数，所以摩尔算法是是失效的，对于这种情况采取需要重新投票。\n出现次数超过一半的数\nLeetCode原题：169. Majority Element\n这里要求出现次数大于一半，所以直接套用摩尔投票算法即可得到答案。\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        a, ca = None, 0\n        for n in nums:\n            if   a == n : ca += 1\n            elif ca == 0: a, ca = n, 1\n            else        : ca -= 1\n    return a\n\n\n出现次数超过数组1/3长\n\nLeetCode原题：229. Majority Element II\n\n还能用摩尔投票法吗？答案当然是要，但是需要变通一下。\n\n需要注意的是出现次数超过1/3数组长的数，也许会有多个，例子如下：\n\n[1,1,1,2,2,2,3,3]，数组1/3长=2（向下取整），所以1和2都是符合条件的。\n\n但最多只能是2个，证明如下：\n\n证明 :\n90个数31个1，31个2，其余数字随便，也就是接近边界时，最多才两个满足条件：1，2\n\n综上，一个数组中不可能存在2个以上的数它们出现的次数大于n/3。\n\n回到题目\n\n如果我们在使用摩尔算法时，同时记录两个大多数，会怎么样呢？直觉告诉我，这会得到一个大多数，和一个出现次数仅次于大多数的数，但是这两个数不一定会比数组长的1/3大\n\n所以我们得到它们后，还需要检查它们出现的次数是否符合条件。\n\n\n    def majorityElement(self, nums):\n        a, b, ca, cb, ans = None, None, 0, 0, []\n        for i in nums:\n            if   i  == a: ca += 1\n            elif i  == b: cb += 1\n            elif ca == 0: a, ca = i, 1\n            elif cb == 0: b, cb = i, 1\n            else:         ca, cb = ca - 1, cb - 1\n        print(a, b)\n        ca, cb = 0, 0\n        for i in nums:\n            if   i == a: ca += 1\n            elif i == b: cb += 1\n\n        if ca > len(nums)//3:\n            ans.append(a)\n        if cb > len(nums)//3:\n            ans.append(b)\n        return ans\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:48:34\n"},"回溯/最小编辑距离.html":{"url":"回溯/最小编辑距离.html","title":"最小编辑距离","keywords":"","body":"最小编辑距离\n1.题目\n给定两个单词 word1 和 word2，计算出将 word1 转换成 word2 所使用的最少操作数 。\n你可以对一个单词进行如下三种操作：\n\n插入一个字符\n删除一个字符\n替换一个字符\n\n示例 1:\n输入: word1 = \"horse\", word2 = \"ros\"\n输出: 3\n解释: \nhorse -> rorse (将 'h' 替换为 'r')\nrorse -> rose (删除 'r')\nrose -> ros (删除 'e')\n\n示例 2:\n输入: word1 = \"intention\", word2 = \"execution\"\n输出: 5\n解释: \nintention -> inention (删除 't')\ninention -> enention (将 'i' 替换为 'e')\nenention -> exention (将 'n' 替换为 'x')\nexention -> exection (将 'n' 替换为 'c')\nexection -> execution (插入 'u')\n\n2.分析\n3.代码\ndef minDistance(self, word1, word2):\n        word1_len, word2_len = len(word1), len(word2)\n        if word1_len == word2_len == 0:\n            return 0\n        if word1_len == None:\n            return word2_len\n        if word2_len == None:\n            return word1_len\n        mem = [[0]*(word2_len+1) for _ in range(word1_len+1)]\n        for i in range(1, word1_len+1):\n            mem[i][0] = i\n        for j in range(1, word2_len+1):\n            mem[0][j] = j\n        for i in range(1, word1_len+1):\n            for j in range(1, word2_len+1):\n                # 注意：这儿为什么是word1[i-1],而不是word1[i],是因为这是对于字符串而言的，而不是矩阵\n                mem[i][j] = min(mem[i-1][j-1]+(word1[i-1]!=word2[j-1]), mem[i][j-1]+1, mem[i-1][j]+1)\n        # for _ in mem:\n        #     print(_)\n        return mem[-1][-1]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:48:02\n"},"回溯/字符串全排列.html":{"url":"回溯/字符串全排列.html","title":"字符串全排列","keywords":"","body":"题目描述\n输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。\n输入描述:\n输入一个字符串,长度不超过9(可能有字符重复),字符只包括大小写字母。\nclass Solution:\n    def Permutation(self, ss):\n        if len(ss) \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-17 17:39:12\n"},"回溯/复原IP地址_LeetCode_93.html":{"url":"回溯/复原IP地址_LeetCode_93.html","title":"复原IP地址_LeetCode_93","keywords":"","body":"复原IP地址\n1.题目\n给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。\n示例:\n输入: \"25525511135\"\n\n输出: [\"255.255.11.135\", \"255.255.111.35\"]\n\n2.分析\n3.代码\n    class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        self.res = []\n        tmpList = []\n        self.dfs(s, tmpList)\n        return self.res\n\n    #dfs遍历，s为待处理字段，tmp存储所有ip小段\n    def dfs(self, s, tmpList):  \n        if len(tmpList) == 4:   #递归出口，凑够4段\n            if len(s) == 0:     #s没有剩余，说明找到一个合法ip，否则返回\n                self.res.append('.'.join(tmpList))\n            return      \n        for i in range(1, 4):   #遍历取s的头，长度从1到3\n            if i  255:    #数字超出范围\n                    return\n                elif i > 1 and s[0] == '0':    #除去0开头，且长度大于1情况\n                    return\n                self.dfs(s[i:], tmpList + [s[:i]])  #截断s，并将本次截取内容写入tmp\n\nclass Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        X = []\n        x = []\n\n        def func(s, X, x):\n            if len(x) == 4:\n                if len(s) == 0:\n                    X.append('.'.join(x))\n                    return \n                return\n\n            for i in range(1,4):\n                if i 255:\n                        return\n                    elif i>1 and s[0] == '0':\n                        return\n                    func(s[i:], X, x+[s[:i]])\n\n        func(s, X, x)\n        return X\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-19 00:19:11\n"},"深度搜索/":{"url":"深度搜索/","title":"深度搜索","keywords":"","body":"深度搜索\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-07 22:00:38\n"},"深度搜索/被围绕的区域 LeetCode 130.html":{"url":"深度搜索/被围绕的区域 LeetCode 130.html","title":"被围绕的区域_LeetCode_130","keywords":"","body":"被围绕的区域(LeetCode 130)\n1.题目\n给定一个二维的矩阵，包含 'X' 和 'O'（字母 O）。\n找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充。\n示例:\nX X X X\nX O O X\nX X O X\nX O X X\n运行你的函数后，矩阵变为：\nX X X X\nX X X X\nX X X X\nX O X X\n解释:\n被围绕的区间不会存在于边界上，换句话说，任何边界上的 'O' 都不会被填充为 'X'。 任何不在边界上，或不与边界上的 'O' 相连的 'O' 最终都会被填充为 'X'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。\n2.分析\n首先对边界上每一个'O'做深度优先搜索，将与其相连的所有'O'改为'-'。然后遍历矩阵，将矩阵中所有'O'改为'X',将矩阵中所有'-'变为'O' \n3.代码\ndef solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        if not board or not board[0]:return\n\n        m,n = len(board),len(board[0])\n        for i in range(m):\n            self.func(i,0,board)\n            self.func(i,n-1,board)\n\n        for j in range(n):\n            self.func(0,j,board)\n            self.func(m-1,j,board)\n\n        for i in range(m):\n            for j in range(n):\n                if board[i][j]=='O':\n                    board[i][j]='X'\n                if board[i][j]=='-':\n                    board[i][j]='O'\n\n\n    def func(self, i, j ,board):\n        if ilen(board)-1 or j >len(board[0])-1 or board[i][j]!='O':\n            return \n        board[i][j]='-'\n\n        self.func(i+1,j,board)\n        self.func(i-1,j,board)\n        self.func(i,j+1,board)\n        self.func(i,j-1,board)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:17:25\n"},"深度搜索/岛屿的个数 LeetCode_200.html":{"url":"深度搜索/岛屿的个数 LeetCode_200.html","title":"岛屿的个数 LeetCode_200","keywords":"","body":"岛屿的个数 LeetCode_200\n1.题目\n给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。==你可以假设网格的四个边均被水包围。==\n示例 1:\n输入:\n11110\n11010\n11000\n00000\n\n输出: 1\n示例 2:\n输入:\n11000\n11000\n00100\n00011\n\n输出: 3\n2.分析\n\n原文：你可以假设网格的四个边均被水包围。 说明边界的1也算岛屿\n深度搜索\n\n深度优先遍历, 到达边界外或访问到为0的位置则返回0,否则先把该位置的1置为0(作为访问过的标记,相当于visited数组),随后递归的访问四个方向.\n\n3.代码\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        if not grid or not grid[0]:\n            return 0\n        res = 0\n        for idx,i in enumerate(grid):\n            for jdx,j in enumerate(grid[0]):\n                if grid[idx][jdx] == '1':\n                    res += 1\n                    self.func(idx,jdx,grid)\n        return res\n\n    def func(self,i,j,grid):\n        if i=len(grid) or j =len(grid[0]) or grid[i][j]=='0':\n            return \n        grid[i][j] = '0'\n        # map(self.func,(i+1, i-1, i, i),(j, j, j+1, j-1),(grid,grid,grid,grid))\n        self.func(i+1,j,grid)\n        self.func(i-1,j,grid)\n        self.func(i,j+1,grid)\n        self.func(i,j-1,grid)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-24 00:35:58\n"},"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html":{"url":"深度搜索/单词搜索 Leetcode 79 经典回溯,深度优先.html","title":"单词搜索 Leetcode 79 经典回溯,深度优先","keywords":"","body":"单词搜索(Leetcode 79)(经典回溯，深度优先)\n1.题目\n给定一个二维网格和一个单词，找出该单词是否存在于网格中。\n单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。\n示例:\nboard =\n[\n  ['A','B','C','E'],\n  ['S','F','C','S'],\n  ['A','D','E','E']\n]\n\n给定 word = \"ABCCED\", 返回 true.\n给定 word = \"SEE\", 返回 true.\n给定 word = \"ABCB\", 返回 false.\n\n2.分析\n​    使用DFS，先在 board 中搜索 word 中第一个字符，再以此字符为起点进行 DFS 搜索，若搜索出的路径与 word 一致，则在网格中存在此单词。\n​    为了避免循环搜索，我们还要将本轮深度优先搜索中搜索过的数字变一下，等递归回来之后再变回来。实现这个特性最简单的方法就是异或上一个特定数，然后再异或回来\n​    (这儿也可以再使用一个矩阵，存放访问标志)，但是空间消耗太大。\n3.代码\npython代码\nclass Solution:\n    def exist(self,board,word):\n        self.path = []\n        row,col = len(board),len(board[0])\n        for i in range(row):\n            for j in range(col):\n                index = 0\n                if self.func(board,index,i,j,word):\n                    return True\n        return False\n\n    def func(self,board,index,i,j,word):\n        if i=len(board) or j >=len(board[0]) or (i,j) in self.path or word[index] != board[i][j]:\n            return False\n        # 注意这儿，字符串长度减一,因为上面的if判断，等于校验了最后个字符，比如word='ab',\n        # index = 0,a\n        # index = 1,时，如果能进来那么上面的if语句已经判断了b字符\n        if index == len(word)-1:\n            return True\n        self.path.append((i,j))\n        if self.func(board,index+1,i-1,j,word) or self.func(board,index+1,i,j-1,word) or self.func(board,index+1,i+1,j,word) or self.func(board,index+1,i,j+1,word):\n            return True\n        # 走不通，那么我们就要把这条路删除掉。回到原来的模样\n        self.path.pop()\n        return False\n\npython2\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        self.path = []\n\n        row,col = len(board),len(board[0])\n        for i in range(row):\n            for j in range(col):\n                if self.find(board,word,i,j):\n                    return True\n        return False\n\n        # 经典\n        # for idx,i in enumerate(board):\n        #     for jdx,j in enumerate(i):\n        #         if self.find(board,word,idx,jdx):\n        #             return True\n        # return False\n\n    def find(self,board,word,i,j):\n        # 这儿等于也是错的，也要退出      (i,j) in self.path 就是检验是否走重复的路，我们也可以额外定义一个标志数组\n        if i=len(board) or j >=len(board[0]) or (i,j) in self.path or word[0] != board[i][j]:\n            return False\n\n        word = word[1:]\n        self.path.append((i,j))   \n\n        # 减为空串，说明都匹配了\n        if not word:\n            return True \n\n        if self.find(board,word,i-1,j) or self.find(board,word,i,j-1) or self.find(board,word,i+1,j) or self.find(board,word,i,j+1):\n            return True\n\n        self.path.pop()\n        return False\n\nC++\nclass Solution {\npublic:\n    /**\n     * @param board: A list of lists of character\n     * @param word: A string\n     * @return: A boolean\n     */\n    bool exist(vector > &board, string word) {\n        // write your code here\n        int sizeRow = board.size(), sizeStr = word.size();\n        if(sizeRow  > path;\n\n        for(i=0; i > &board, string word, int i, int j, int wordStart) {\n        if(wordStart == word.size()) {\n            return true;\n        }\n        else if(i=board.size() || j= board[0].size() || \n                board[i][j]!=word[wordStart])\n        {\n            return false;\n        } \n\n        board[i][j] ^= 255;\n        bool result = (DFSFind(board, word, i-1, j,   wordStart+1) \n                    || DFSFind(board, word, i,   j-1, wordStart+1) \n                    || DFSFind(board, word, i+1, j,   wordStart+1) \n                    || DFSFind(board, word, i,   j+1, wordStart+1));\n\n        board[i][j] ^= 255;\n        return result;\n    }\n};\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-04-14 20:15:51\n"},"深度搜索/岛屿的最大面积_LeetCode_695.html":{"url":"深度搜索/岛屿的最大面积_LeetCode_695.html","title":"岛屿的最大面积_LeetCode_695","keywords":"","body":"岛屿的最大面积(LeetCode_695)\n1.题目\n给定一个包含了一些 0 和 1的非空二维数组 grid , 一个 岛屿 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。\n找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)\n示例 1:\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\n [0,1,0,0,1,1,0,0,1,0,1,0,0],\n [0,1,0,0,1,1,0,0,1,1,1,0,0],\n [0,0,0,0,0,0,0,0,0,0,1,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\n\n对于上面这个给定矩阵应返回 6。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的‘1’。\n示例 2:\n[[0,0,0,0,0,0,0,0]]\n对于上面这个给定的矩阵, 返回 0。\n注意: 给定的矩阵grid 的长度和宽度都不超过 50。\n2.分析\n\n深度搜索\n\n深度优先遍历, 到达边界外或访问到为0的位置则返回0,否则先把该位置的1置为0(作为访问过的标记,相当于visited数组),随后递归访问四个方向,\n\n\n3.代码\nlass Solution(object):\n    def maxAreaOfIsland(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        self.k = 0\n        res = 0\n        n, m = len(grid), len(grid[0])\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    self.func(n, m, i, j, grid)\n                    res = max(res, self.k)\n                    self.k = 0\n        return res\n\n    def func(self, n, m , i, j, grid):\n        if i=n or j=m or grid[i][j]!=1:\n            return\n        grid[i][j] = 2\n        self.k += 1\n\n        map(self.func,(n,n,n,n),(m,m,m,m),(i-1,i+1,i,i),(j,j,j-1,j+1),(grid,grid,grid,grid))\n\n        # self.func(m, n, i+1, j, grid)\n        # self.func(m, n, i-1, j, grid)\n        # self.func(m, n, i, j+1, grid)\n        # self.func(m, n, i, j-1, grid)\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-24 10:18:02\n"},"广度搜索/01矩阵_LeetCode_542.html":{"url":"广度搜索/01矩阵_LeetCode_542.html","title":"01矩阵_LeetCode_542","keywords":"","body":"01 矩阵(LeetCode_542)\n1.题目\n给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。\n两个相邻元素间的距离为 1 。\n示例 1: \n输入:\n0 0 0\n0 1 0\n0 0 0\n输出:\n0 0 0\n0 1 0\n0 0 0\n示例 2: \n输入:\n0 0 0\n0 1 0\n1 1 1\n输出:\n0 0 0\n0 1 0\n1 2 1\n注意:\n\n给定矩阵的元素个数不超过 10000。\n给定矩阵中至少有一个元素是 0。\n矩阵中的元素只在四个方向上相邻: 上、下、左、右。\n\n2.分析\n\n在找到一个合法节点后需要去探知其附近的合法节点，直到这一个区域内符合合法节点的节点都被找到。 \n广度搜索，入队可以将所有0都先入队，作为队头节点\n\n3.代码\nBFS\nclass Solution:\n\n    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:\n        from collections import deque\n        n, m = len(matrix), len(matrix[0])\n        # queue = []\n        queue = deque()\n        visited = set()\n        # 初始化队列，将所有起始点加入\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == 0:\n                    queue.append((i, j))\n                    # 添加访问标志\n                    visited.add((i, j))\n\n        # 将所有相邻节点加入队列\n        while queue:\n            i, j = queue.popleft()\n            dirs = [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]\n            # 寻找出队元素的（符合条件的）最近节点\n            for x,y in dirs:\n                # 满足目标状态,进行操作\n                if 0 \nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-25 00:22:07\n"},"广度搜索/给二叉树插入节点.html":{"url":"广度搜索/给二叉树插入节点.html","title":"给二叉树插入节点","keywords":"","body":"二叉树的节点表示以及树的创建\n通过使用Node类中定义三个属性，分别为elem本身的值，还有lchild左孩子和rchild右孩子\nclass Node(object):\n    \"\"\"节点类\"\"\"\n    def __init__(self, elem=-1, lchild=None, rchild=None):\n        self.elem = elem\n        self.lchild = lchild\n        self.rchild = rchild\n树的创建,创建一个树的类，并给一个root根节点，一开始为空，随后添加节点\nclass Tree(object):\n    \"\"\"树类\"\"\"\n    def __init__(self, root=None):\n        self.root = root\n\n    def add(self, elem):\n        \"\"\"为树添加节点\"\"\"\n        node = Node(elem)\n        #如果树是空的，则对根节点赋值\n        if self.root == None:\n            self.root = node\n        else:\n            queue = []\n            queue.append(self.root)\n            #对已有的节点进行层次遍历\n            while queue:\n                #弹出队列的第一个元素\n                cur = queue.pop(0)\n                if cur.lchild == None:\n                    cur.lchild = node\n                    return\n                elif cur.rchild == None:\n                    cur.rchild = node\n                    return\n                else:\n                       # 我们寻找最近的空节点进行插入，所以是广度遍历\n                    #如果左右子树都不为空，加入队列继续判断\n                    queue.append(cur.lchild)\n                    queue.append(cur.rchild)\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-26 11:14:36\n"},"堆排序/":{"url":"堆排序/","title":"堆排序","keywords":"","body":"堆排序\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-07 22:00:38\n"},"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html":{"url":"堆排序/数据流的中位数 LeetCode 295 如何从5亿个数中找出中位数.html","title":"数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数 ","keywords":"","body":"数据流的中位数(LeetCode 295) (如何从5亿个数中找出中位数)\n1.题目\n中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。\n例如，\n[2,3,4] 的中位数是 3\n[2,3] 的中位数是 (2 + 3) / 2 = 2.5\n设计一个支持以下两种操作的数据结构：\n\nvoid addNum(int num) - 从数据流中添加一个整数到数据结构中。\ndouble findMedian() - 返回目前所有元素的中位数。\n\n示例：\naddNum(1)\naddNum(2)\nfindMedian() -> 1.5\naddNum(3) \nfindMedian() -> 2\n进阶:\n\n如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？\n如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？\n\n2.分析\n满足两个特性：\n1.大顶堆中最大的数值小于等于小顶堆中的最小数，也就是小于小顶堆的堆顶\n2.两个堆中元素相差为0，或者为1,不能>1\n\n然后，我们观察可以发现，如果，数据总数是偶数，那么大顶堆，和小顶堆，\n一边占一半元素，而且，还是有序的，很像二分法，这时，中位数为两堆顶平均值\n如果数据个数为奇数，则，中位数出现在元素个数多的堆的堆顶中 【1，2，3】，大顶堆【1】，小顶堆【2，3】，所以中位数在小顶堆【2，3】，且是堆顶\n# 每次都插入到最小堆，然后，将最小堆里面的栈顶元素，\n# 取出来，放到最大堆中去，这样就能保证最小堆的最小元素，都比最大堆的（最大元素）堆顶大\n#（因为最大堆是最小堆，一泡屎一趴尿，拉扯大的。）\n# 下面的调整，使得最小最大堆元素相差最多为1，而且永远是 最小堆元素个数大于  等于最大堆元素个数\n\npython没有大顶堆，所以我们要想实现大顶堆，可以每次放入的数*-1，取出来的时候乘以-1\n\n3.代码\nfrom heapq import *\nclass MedianFinder:\n    def __init__(self):\n        self.max_h = []\n        self.min_h = []\n        heapify(self.max_h)\n        heapify(self.min_h)\n\n    def addNum(self, num):\n        heappush(self.min_h,num)\n        heappush(self.max_h,-heappop(self.min_h))\n        if len(self.min_h)  min_len:\n        #     return -self.max_h[0]*1.\n        # else:\n        #     return self.min_h[0]*1.\n\nfrom heapq import *\nclass MedianFinder:\n\n    def __init__(self):\n        self.max_h = []\n        self.min_h = []\n        heapify(self.max_h)\n        heapify(self.min_h)\n    def addNum(self, num: int) -> None:\n        if not self.max_h:\n            heappush(self.max_h,-num)\n            return\n        if not self.min_h:\n            tmp = -heappop(self.max_h)\n            if num >= tmp:\n                heappush(self.max_h,-tmp)\n                heappush(self.min_h,num)\n            else:\n                heappush(self.max_h,-num)\n                heappush(self.min_h,tmp)\n        else:\n            if num =len(self.min_h):\n                    heappush(self.min_h,num)\n                else:\n                    tmp = heappop(self.min_h)\n                    heappush(self.max_h,-tmp)\n                    heappush(self.min_h,num)\n\n\n    def findMedian(self) -> float:\n        # print(self.max_h,\"====\",self.min_h)\n        max_len = len(self.max_h)\n        min_len = len(self.min_h)\n\n        if min_len == max_len:\n            return (-self.max_h[0]+self.min_h[0])/2.\n        elif max_len > min_len:\n            return -self.max_h[0]*1.\n        else:\n            return self.min_h[0]*1.\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-25 10:27:00\n"},"前K个高频元素.html":{"url":"前K个高频元素.html","title":"前K个高频元素","keywords":"","body":"前K个高频元素\n1.题目\n给定一个非空的整数数组，返回其中出现频率前 k 高的元素。\n示例 1:\n输入: nums = [1,1,1,2,2,3], k = 2\n输出: [1,2]\n示例 2:\n输入: nums = [1], k = 1\n输出: [1]\n说明：\n\n你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。\n你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。\n\n2.分析\n3.代码1\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        import collections\n        obj = collections.Counter(nums)\n        res = (obj.most_common(k))\n        # print(obj)\n        ans =  map(lambda x:x[0], res)\n        return list(ans)\n\n代码2\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:    \n    # 代码2，用字典来计算\n        bag = {}\n        for i in nums:\n            if i not in bag:\n                bag[i] = 1\n            else:\n                bag[i] += 1\n        outPut = sorted(bag.items(), key=lambda x:x[1], reverse=True)\n        res = []\n        for i in range(k):\n            res.append(outPut[i][0])\n        return res\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:34:13\n"},"堆排序/有序矩阵中第K小的元素_LeetCode_378.html":{"url":"堆排序/有序矩阵中第K小的元素_LeetCode_378.html","title":"有序矩阵中第K小的元素_LeetCode_378","keywords":"","body":"有序矩阵中第K小的元素\n1.题目\n给定一个 n x n 矩阵，其中每行和每列元素均按升序排序，找到矩阵中第k小的元素。\n请注意，它是排序后的第k小元素，而不是第k个元素。\n示例:\nmatrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\n\n返回 13。\n2.分析\n大根堆\n3.代码\nclass Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        import heapq\n        tmp = []\n        edge = len(matrix)\n        for i in range(edge):\n            for j in range(edge): \n                heapq.heappush(tmp,-matrix[i][j])\n                if len(tmp) > k:\n                    heapq.heappop(tmp)\n        # print(-tmp[0])\n        return -tmp[0]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 23:41:34\n"},"堆排序/最小的K个数.html":{"url":"堆排序/最小的K个数.html","title":"最小的K个数","keywords":"","body":"最小的K个数\n题目描述\n输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。\n堆排序（大根堆）\n每次插入一个元素后，就把堆里面的大元素丢出去，因此堆里面剩下的都是小的元素，同时我们需要维护堆的大小为K\nclass Solution:\n    def GetLeastNumbers_Solution(self, tinput, k):\n        # write code here\n        # write code here\n        import heapq\n        tmp = []\n        for i in tinput:\n            heapq.heappush(tmp, -i)\n            if len(tmp)>k:\n                heapq.heappop(tmp)\n        res = []\n        for i in tmp:\n            res.append(-i)\n        res.sort()\n        print(res)\n\n快速排序\nclass Solution:\n    def GetLeastNumbers_Solution(self, tinput, k):\n        # write code here\n        def func(nums, left, right):\n            if left>=right:\n                return \n            tmp = nums[left]\n            i, j = left, right\n            while i =nums[i]:\n                    i += 1\n                nums[j] = nums[i]\n            nums[i] = tmp\n            func(nums, left, i-1)\n            func(nums, i+1,right)\n\n        if k>len(tinput) or tinput == []:\n            return []\n        nums = tinput\n        func(nums, 0, len(nums)-1)\n\n        return nums[:k]\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-08-18 23:34:40\n"},"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html":{"url":"大数据/数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数.html","title":"数据流的中位数_LeetCode_295 如何从5亿个数中找出中位数","keywords":"","body":"数据流的中位数(LeetCode 295) (如何从5亿个数中找出中位数)\n1.题目\n中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。\n例如，\n[2,3,4] 的中位数是 3\n[2,3] 的中位数是 (2 + 3) / 2 = 2.5\n设计一个支持以下两种操作的数据结构：\n\nvoid addNum(int num) - 从数据流中添加一个整数到数据结构中。\ndouble findMedian() - 返回目前所有元素的中位数。\n\n示例：\naddNum(1)\naddNum(2)\nfindMedian() -> 1.5\naddNum(3) \nfindMedian() -> 2\n进阶:\n\n如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？\n如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？\n\n2.分析\n满足两个特性：\n1.大顶堆中最大的数值小于等于小顶堆中的最小数，也就是小于小顶堆的堆顶\n2.两个堆中元素相差为0，或者为1,不能>1\n\n然后，我们观察可以发现，如果，数据总数是偶数，那么大顶堆，和小顶堆，\n一边占一半元素，而且，还是有序的，很像二分法，这时，中位数为两堆顶平均值\n如果数据个数为奇数，则，中位数出现在元素个数多的堆的堆顶中\n# 每次都插入到最小堆，然后，将最小堆里面的栈顶元素，\n# 取出来，放到最大堆中去，这样就能保证最小堆的堆，都比最大堆的堆顶大\n#（因为最大堆是最小堆，一泡屎一趴尿，拉扯大的。）\n# 下面的调整，使得最小最大堆元素相差最多为1，而且永远是 最小堆元素个数大于  等于最大堆元素个数\n3.代码\nfrom heapq import *\nclass MedianFinder:\n    def __init__(self):\n        self.max_h = []\n        self.min_h = []\n        heapify(self.max_h)\n        heapify(self.min_h)\n\n    def addNum(self, num):\n        heappush(self.min_h,num)\n        heappush(self.max_h,-heappop(self.min_h))\n        if len(self.min_h)  min_len:\n        #     return -self.max_h[0]*1.\n        # else:\n        #     return self.min_h[0]*1.\n\nfrom heapq import *\nclass MedianFinder:\n\n    def __init__(self):\n        self.max_h = []\n        self.min_h = []\n        heapify(self.max_h)\n        heapify(self.min_h)\n    def addNum(self, num: int) -> None:\n        if not self.max_h:\n            heappush(self.max_h,-num)\n            return\n        if not self.min_h:\n            tmp = -heappop(self.max_h)\n            if num >= tmp:\n                heappush(self.max_h,-tmp)\n                heappush(self.min_h,num)\n            else:\n                heappush(self.max_h,-num)\n                heappush(self.min_h,tmp)\n        else:\n            if num =len(self.min_h):\n                    heappush(self.min_h,num)\n                else:\n                    tmp = heappop(self.min_h)\n                    heappush(self.max_h,-tmp)\n                    heappush(self.min_h,num)\n\n\n    def findMedian(self) -> float:\n        # print(self.max_h,\"====\",self.min_h)\n        max_len = len(self.max_h)\n        min_len = len(self.min_h)\n\n        if min_len == max_len:\n            return (-self.max_h[0]+self.min_h[0])/2.\n        elif max_len > min_len:\n            return -self.max_h[0]*1.\n        else:\n            return self.min_h[0]*1.\n\nCopyright © 何去何从gw 2019 all right reserved，powered by Gitbook该文件修订时间：\n 2019-07-22 22:47:03\n"}}}